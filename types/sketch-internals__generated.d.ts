/****** OVERRIDES ********/

// block alias
declare type Block = any
declare type BCVoidBlock = Block
declare type CHStringAttributesCompareBlock = Block
declare type CHStringWordEnumeratorBlock = Block
declare type BCDictionaryFilterBlock = Block
declare type CGContextDrawBlock = Block
declare type BCTimerBlock = Block
declare type BCConcurrentMapCompletionBlock = Block
declare type BCSumBlock = Block
declare type BCMapTableFilterBlock = Block
declare type MSDocumentIteratorBlock = Block
declare type ECTestComparisonBlock = Block
declare type MSPreviewGeneratorBlock = Block
declare type MSLayerFilterBlock = Block
declare type MSSelectionModifierBlock = Block
declare type MSLayerIteratorBlock = Block
declare type MSLayerIteratorTestBlock = Block
declare type MSRenameSharedObjectBlock = Block
declare type BCMagnifierCompletionBlock = Block
declare type FBCurveIntersectionBlock = Block
declare type BCCacheCreateObjectBlock = Block
declare type ProgressBlock = Block
declare type MSLayerEnumeratorBlock = Block
declare type MSLayerSimpleEnumeratorBlock = Block
declare type MSUndoActionBlock = Block
declare type imageGenerationBlock = Block
declare type MSColorFinderCompletionBlock = Block
declare type MSWebExporterCompletionBlock = Block
declare type MSFlashViewControllerBlock = Block
declare type MSFlashControllerHelpBlock = Block
declare type MSColorConvertibleHandler = Block
declare type MSDataApplierBlock = Block
declare type MSManifestImageProviderBlock = Block
declare type MSAveragingRenderMonitorUpdateBlock = Block
declare type MSAttributeConverterBlock = Block
declare type MSActionFakeActionBlock = Block
declare type NSComparator = Block
declare type MSDocumentPreviewImageHandler = Block
declare type MSAnimationBlock = Block
declare type MSColorInspectorSetupBlock = Block
declare type MSCreateSymbolCompletionBlock = Block
declare type MSExportManagerSliceCompletionBlock = Block
declare type MSFontFamilyPickerCompletionBlock = Block
declare type MSInsertTextEventHandlerCompletionBlock = Block
declare type NSItemProviderLoadHandler = Block
declare type NSItemProviderCompletionHandler = Block
declare type MSBezierPathModifierBlock = Block
declare type MSPasteboardItemWritingBlock = Block
declare type MSPreviewImageHandler = Block
declare type dispatch_block_t = Block
declare type MSSaveAsTemplateSheetCompletionBlock = Block
declare type NSProgressPublishingHandler = Block
declare type NSUserScriptTaskCompletionHandler = Block
declare type NSUserUnixTaskCompletionHandler = Block
declare type NSUserAppleScriptTaskCompletionHandler = Block
declare type NSUserAutomatorTaskCompletionHandler = Block
declare type GradientInterpolationFunction = Block
declare type BCOutlineViewControllerPostRefreshBlock = Block
declare type FMDBExecuteStatementsCallbackBlock = Block
declare type CGPDFOperatorCallback = Block
declare type ArgumentBlock = Block
declare type BITCustomCrashReportUIHandler = Block
declare type BITCrashManagerPostCrashSignalCallback = Block
declare type BITLogHandler = Block
declare type MSNetworkTimeCompletionBlock = Block
declare type SCKDownloadOperationHandler = Block
declare type MSTextSectionParagraphEnumerator = Block
declare type MSTextSectionStringEnumerator = Block
declare type MSForeignObjectCollectionFilter = Block
declare type MSRenderMonitorHook = Block
declare type MSLineShapeCreatorBlock = Block
declare type MSCommandPreparation = Block
declare type MSDataPropertyEnumerator = Block
declare type MSDescendantEnumerator = Block
declare type MSToolCompletionHandler = Block

// C types
declare type CGPath = any
declare type NSFetchRequest = any
declare type NSManagedObjectModel = any
declare type NSAttributeType = number
declare type NSEntityDescription = any

// CORE SERVICES TYPES
declare type DescType = any
declare type OSType = any
declare type SInt32 = number
declare type AEEventClass = any
declare type AEEventID = any
declare type AEReturnID = any
declare type AETransactionID = any
declare type pid_t = any
declare type AEDesc = any
declare type AEKeyword = any
declare type AppleEvent = any
declare type SRefCon = any
declare type OSErr = any
declare type OSStatus = any

// JAVASCRIPT CORE TYPES
declare type JSValueRef = any
declare type JSContextRef = any
declare type JSObjectRef = JSValueRef
declare type JSGlobalContextRef = JSContextRef
declare type JSPropertyAttributes = any
declare type JSClassRef = any
declare type MOObjCOwnershipRule = any
declare type ffi_type = any

// CORE DATA TYPES
declare type NSManagedObjectContext = any

// Webkit
declare interface IWebUIDelegate {}
declare interface IWebResourceLoadDelegate {}
declare interface IWebFrameLoadDelegate {}
declare interface IWKExtensionDelegate {}

declare type IBAction = any
declare type Protocol = any

declare type FBFloat = CGFloat
declare type FBPoint = NSPoint
declare type FBSize = NSSize
declare type FBRect = NSRect
declare type FBBezierPath = NSBezierPath

declare type CFTimeInterval = number
declare type CVTimeStamp = number
declare type CFTypeRef = any

declare type dispatch_group_t = any
declare type dispatch_queue_t = any
declare type uuid_t = any
declare type au_asid_t = any
declare type uid_t = any
declare type gid_t = any
declare type int16_t = any
declare type size_t = any

// METAL TYPES
declare type MTLPixelFormat = number
declare type MTLClearColor = {
  red: number
  green: number
  blue: number
  alpha: number
}

declare type mach_port_t = number
declare type sockaddr_ = number

declare type compression_algorithm = any
declare type dispatch_data_t = any

declare type CKShare = any
declare type CKContainer = any
declare type CKShareMetadata = any

declare type SecIdentityRef = any
declare type SecTrustRef = any
declare type SSLProtocol = any

declare type CIFilter = any
declare type CIContext = any

declare type IconRef = any
declare type QTMovie = any

declare type _CGLPixelFormatObject = any
declare type GLint = any
declare type GLenum = any
declare type GLsizei = any
declare type _CGLPBufferObject = any
declare type _CGLContextObject = any
declare type GLbitfield = any

declare type SCNetworkReachabilityRef = any

// TODO: find why this is not auto generated
declare type NSTypesetterGlyphInfo = any
declare interface IMSSliceLayerWatcher {}
declare interface IMSAllRenderers extends IMSLayerRenderer, IMSPathRenderer, IMSFillRenderer, IMSBackgroundBlurRenderer, IMSShadowRenderer, IMSGridRenderer {}
declare interface INSCollectionViewElement {}
declare interface INSAccessibilityTable {}
declare interface INSTextAttachmentContainer {}
declare interface INSTextLayoutOrientationProvider {}
declare interface IECIODelegate {}
declare interface ISCKDiff {}
declare interface IMSLayer {}

/****** AUTO GENERATED ********/

declare class CAAnimation extends NSObject {
  static animation(): CAAnimation;
  static defaultValueForKey(key: NSString | string): any;
  shouldArchiveValueForKey(key: NSString | string): boolean;

  timingFunction(): CAMediaTimingFunction;
  setTimingFunction(timingFunction: CAMediaTimingFunction): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  removedOnCompletion(): boolean;
  setRemovedOnCompletion(removedOnCompletion: boolean): void;
}

declare class CAPropertyAnimation extends CAAnimation {
  static animationWithKeyPath(path: NSString | string | null): CAPropertyAnimation;

  keyPath(): NSString;
  setKeyPath(keyPath: NSString | string): void;
  additive(): boolean;
  setAdditive(additive: boolean): void;
  cumulative(): boolean;
  setCumulative(cumulative: boolean): void;
  valueFunction(): CAValueFunction;
  setValueFunction(valueFunction: CAValueFunction): void;
}

declare class CABasicAnimation extends CAPropertyAnimation {
  fromValue(): any;
  setFromValue(fromValue: any): void;
  toValue(): any;
  setToValue(toValue: any): void;
  byValue(): any;
  setByValue(byValue: any): void;
}

declare class CAKeyframeAnimation extends CAPropertyAnimation {
  values(): NSArray<any>;
  setValues(values: NSArray<any> | any[]): void;
  path(): CGPathRef;
  setPath(path: CGPathRef): void;
  keyTimes(): NSArray<any>;
  setKeyTimes(keyTimes: NSArray<any> | any[]): void;
  timingFunctions(): NSArray<any>;
  setTimingFunctions(timingFunctions: NSArray<any> | any[]): void;
  calculationMode(): NSString;
  setCalculationMode(calculationMode: NSString | string): void;
  tensionValues(): NSArray<any>;
  setTensionValues(tensionValues: NSArray<any> | any[]): void;
  continuityValues(): NSArray<any>;
  setContinuityValues(continuityValues: NSArray<any> | any[]): void;
  biasValues(): NSArray<any>;
  setBiasValues(biasValues: NSArray<any> | any[]): void;
  rotationMode(): NSString;
  setRotationMode(rotationMode: NSString | string): void;
}

declare class CASpringAnimation extends CABasicAnimation {
  mass(): CGFloat;
  setMass(mass: CGFloat): void;
  stiffness(): CGFloat;
  setStiffness(stiffness: CGFloat): void;
  damping(): CGFloat;
  setDamping(damping: CGFloat): void;
  initialVelocity(): CGFloat;
  setInitialVelocity(initialVelocity: CGFloat): void;
  settlingDuration(): CFTimeInterval;
  setSettlingDuration(settlingDuration: CFTimeInterval): void;
}

declare class CATransition extends CAAnimation {
  type(): NSString;
  setType(type: NSString | string): void;
  subtype(): NSString;
  setSubtype(subtype: NSString | string): void;
  startProgress(): number;
  setStartProgress(startProgress: number): void;
  endProgress(): number;
  setEndProgress(endProgress: number): void;
  filter(): any;
  setFilter(filter: any): void;
}

declare class CAAnimationGroup extends CAAnimation {
  animations(): NSArray<any>;
  setAnimations(animations: NSArray<any> | any[]): void;
}

declare interface ICAAnimationDelegate {
  animationDidStart(anim: CAAnimation): void;
  animationDidStop_finished(anim: CAAnimation, flag: boolean): void;
}

declare class CALayer extends NSObject implements INSSecureCoding, ICAMediaTiming {
  addConstraint(c: CAConstraint): void;
  static layer(): CALayer;
  init<T extends CALayer>(): T;
  initWithLayer<T extends CALayer>(layer: any): T;
  presentationLayer(): CALayer;
  modelLayer(): CALayer;
  static defaultValueForKey(key: NSString | string): any;
  static needsDisplayForKey(key: NSString | string): boolean;
  shouldArchiveValueForKey(key: NSString | string): boolean;
  affineTransform(): CGAffineTransform;
  setAffineTransform(m: CGAffineTransform): void;
  contentsAreFlipped(): boolean;
  removeFromSuperlayer(): void;
  addSublayer(layer: CALayer): void;
  insertSublayer_atIndex(layer: CALayer, idx: number): void;
  insertSublayer_below(layer: CALayer, sibling: CALayer | null): void;
  insertSublayer_above(layer: CALayer, sibling: CALayer | null): void;
  replaceSublayer_with(layer: CALayer, layer2: CALayer): void;
  convertPoint_fromLayer(p: CGPoint, l: CALayer | null): CGPoint;
  convertPoint_toLayer(p: CGPoint, l: CALayer | null): CGPoint;
  convertRect_fromLayer(r: CGRect, l: CALayer | null): CGRect;
  convertRect_toLayer(r: CGRect, l: CALayer | null): CGRect;
  convertTime_fromLayer(t: CFTimeInterval, l: CALayer | null): CFTimeInterval;
  convertTime_toLayer(t: CFTimeInterval, l: CALayer | null): CFTimeInterval;
  hitTest(p: CGPoint): CALayer;
  containsPoint(p: CGPoint): boolean;
  display(): void;
  setNeedsDisplay(): void;
  setNeedsDisplayInRect(r: CGRect): void;
  needsDisplay(): boolean;
  displayIfNeeded(): void;
  drawInContext(ctx: CGContextRef): void;
  renderInContext(ctx: CGContextRef): void;
  preferredFrameSize(): CGSize;
  setNeedsLayout(): void;
  needsLayout(): boolean;
  layoutIfNeeded(): void;
  layoutSublayers(): void;
  resizeSublayersWithOldSize(size: CGSize): void;
  resizeWithOldSuperlayerSize(size: CGSize): void;
  static defaultActionForKey(event: NSString | string): any;
  actionForKey(event: NSString | string): any;
  addAnimation_forKey(anim: CAAnimation, key: NSString | string | null): void;
  removeAllAnimations(): void;
  removeAnimationForKey(key: NSString | string): void;
  animationKeys(): NSArray<any>;
  animationForKey(key: NSString | string): CAAnimation;
  static layerWithRemoteClientId(client_id: number): CALayer;
  scrollPoint(p: CGPoint): void;
  scrollRectToVisible(r: CGRect): void;

  constraints(): NSArray<any>;
  setConstraints(constraints: NSArray<any> | any[]): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  position(): CGPoint;
  setPosition(position: CGPoint): void;
  zPosition(): CGFloat;
  setZPosition(zPosition: CGFloat): void;
  anchorPoint(): CGPoint;
  setAnchorPoint(anchorPoint: CGPoint): void;
  anchorPointZ(): CGFloat;
  setAnchorPointZ(anchorPointZ: CGFloat): void;
  transform(): CATransform3D;
  setTransform(transform: CATransform3D): void;
  frame(): CGRect;
  setFrame(frame: CGRect): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  doubleSided(): boolean;
  setDoubleSided(doubleSided: boolean): void;
  geometryFlipped(): boolean;
  setGeometryFlipped(geometryFlipped: boolean): void;
  superlayer(): CALayer;
  setSuperlayer(superlayer: CALayer): void;
  sublayers(): NSArray<any>;
  setSublayers(sublayers: NSArray<any> | any[]): void;
  sublayerTransform(): CATransform3D;
  setSublayerTransform(sublayerTransform: CATransform3D): void;
  mask(): CALayer;
  setMask(mask: CALayer): void;
  masksToBounds(): boolean;
  setMasksToBounds(masksToBounds: boolean): void;
  contents(): any;
  setContents(contents: any): void;
  contentsRect(): CGRect;
  setContentsRect(contentsRect: CGRect): void;
  contentsGravity(): NSString;
  setContentsGravity(contentsGravity: NSString | string): void;
  contentsCenter(): CGRect;
  setContentsCenter(contentsCenter: CGRect): void;
  minificationFilter(): NSString;
  setMinificationFilter(minificationFilter: NSString | string): void;
  magnificationFilter(): NSString;
  setMagnificationFilter(magnificationFilter: NSString | string): void;
  minificationFilterBias(): number;
  setMinificationFilterBias(minificationFilterBias: number): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  needsDisplayOnBoundsChange(): boolean;
  setNeedsDisplayOnBoundsChange(needsDisplayOnBoundsChange: boolean): void;
  edgeAntialiasingMask(): CAEdgeAntialiasingMask;
  setEdgeAntialiasingMask(edgeAntialiasingMask: CAEdgeAntialiasingMask): void;
  backgroundColor(): CGColorRef;
  setBackgroundColor(backgroundColor: CGColorRef): void;
  cornerRadius(): CGFloat;
  setCornerRadius(cornerRadius: CGFloat): void;
  borderWidth(): CGFloat;
  setBorderWidth(borderWidth: CGFloat): void;
  borderColor(): CGColorRef;
  setBorderColor(borderColor: CGColorRef): void;
  opacity(): number;
  setOpacity(opacity: number): void;
  compositingFilter(): any;
  setCompositingFilter(compositingFilter: any): void;
  filters(): NSArray<any>;
  setFilters(filters: NSArray<any> | any[]): void;
  backgroundFilters(): NSArray<any>;
  setBackgroundFilters(backgroundFilters: NSArray<any> | any[]): void;
  shouldRasterize(): boolean;
  setShouldRasterize(shouldRasterize: boolean): void;
  rasterizationScale(): CGFloat;
  setRasterizationScale(rasterizationScale: CGFloat): void;
  shadowColor(): CGColorRef;
  setShadowColor(shadowColor: CGColorRef): void;
  shadowOpacity(): number;
  setShadowOpacity(shadowOpacity: number): void;
  shadowOffset(): CGSize;
  setShadowOffset(shadowOffset: CGSize): void;
  shadowRadius(): CGFloat;
  setShadowRadius(shadowRadius: CGFloat): void;
  shadowPath(): CGPathRef;
  setShadowPath(shadowPath: CGPathRef): void;
  autoresizingMask(): CAAutoresizingMask;
  setAutoresizingMask(autoresizingMask: CAAutoresizingMask): void;
  layoutManager(): any;
  setLayoutManager(layoutManager: any): void;
  actions(): NSDictionary<any, any>;
  setActions(actions: NSDictionary<any, any> | {[key: string]: any}): void;
  name(): NSString;
  setName(name: NSString | string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  style(): NSDictionary<any, any>;
  setStyle(style: NSDictionary<any, any> | {[key: string]: any}): void;
  visibleRect(): CGRect;
  setVisibleRect(visibleRect: CGRect): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
  beginTime(): CFTimeInterval;
  setBeginTime(beginTime: CFTimeInterval): void;
  duration(): CFTimeInterval;
  setDuration(duration: CFTimeInterval): void;
  speed(): number;
  setSpeed(speed: number): void;
  timeOffset(): CFTimeInterval;
  setTimeOffset(timeOffset: CFTimeInterval): void;
  repeatCount(): number;
  setRepeatCount(repeatCount: number): void;
  repeatDuration(): CFTimeInterval;
  setRepeatDuration(repeatDuration: CFTimeInterval): void;
  autoreverses(): boolean;
  setAutoreverses(autoreverses: boolean): void;
  fillMode(): NSString;
  setFillMode(fillMode: NSString | string): void;
}

declare class CAConstraintLayoutManager extends NSObject implements ICALayoutManager {
  static layoutManager(): CAConstraintLayoutManager;
  preferredSizeOfLayer(layer: CALayer): CGSize;
  invalidateLayoutOfLayer(layer: CALayer): void;
  layoutSublayersOfLayer(layer: CALayer): void;
}

declare class CAConstraint extends NSObject implements INSSecureCoding {
  static constraintWithAttribute_relativeTo_attribute_scale_offset(attr: CAConstraintAttribute, srcId: NSString | string, srcAttr: CAConstraintAttribute, m: CGFloat, c: CGFloat): CAConstraint;
  static constraintWithAttribute_relativeTo_attribute_offset(attr: CAConstraintAttribute, srcId: NSString | string, srcAttr: CAConstraintAttribute, c: CGFloat): CAConstraint;
  static constraintWithAttribute_relativeTo_attribute(attr: CAConstraintAttribute, srcId: NSString | string, srcAttr: CAConstraintAttribute): CAConstraint;
  initWithAttribute_relativeTo_attribute_scale_offset<T extends CAConstraint>(attr: CAConstraintAttribute, srcId: NSString | string, srcAttr: CAConstraintAttribute, m: CGFloat, c: CGFloat): T;

  attribute(): CAConstraintAttribute;
  setAttribute(attribute: CAConstraintAttribute): void;
  sourceName(): NSString;
  setSourceName(sourceName: NSString | string): void;
  sourceAttribute(): CAConstraintAttribute;
  setSourceAttribute(sourceAttribute: CAConstraintAttribute): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  offset(): CGFloat;
  setOffset(offset: CGFloat): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum CAConstraintAttribute {
  kCAConstraintMinX,
  kCAConstraintMidX,
  kCAConstraintMaxX,
  kCAConstraintWidth,
  kCAConstraintMinY,
  kCAConstraintMidY,
  kCAConstraintMaxY,
  kCAConstraintHeight,
}

declare class CAEmitterCell extends NSObject implements INSSecureCoding, ICAMediaTiming {
  static emitterCell(): CAEmitterCell;
  static defaultValueForKey(key: NSString | string): any;
  shouldArchiveValueForKey(key: NSString | string): boolean;

  name(): NSString;
  setName(name: NSString | string): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  birthRate(): number;
  setBirthRate(birthRate: number): void;
  lifetime(): number;
  setLifetime(lifetime: number): void;
  lifetimeRange(): number;
  setLifetimeRange(lifetimeRange: number): void;
  emissionLatitude(): CGFloat;
  setEmissionLatitude(emissionLatitude: CGFloat): void;
  emissionLongitude(): CGFloat;
  setEmissionLongitude(emissionLongitude: CGFloat): void;
  emissionRange(): CGFloat;
  setEmissionRange(emissionRange: CGFloat): void;
  velocity(): CGFloat;
  setVelocity(velocity: CGFloat): void;
  velocityRange(): CGFloat;
  setVelocityRange(velocityRange: CGFloat): void;
  xAcceleration(): CGFloat;
  setXAcceleration(xAcceleration: CGFloat): void;
  yAcceleration(): CGFloat;
  setYAcceleration(yAcceleration: CGFloat): void;
  zAcceleration(): CGFloat;
  setZAcceleration(zAcceleration: CGFloat): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  scaleRange(): CGFloat;
  setScaleRange(scaleRange: CGFloat): void;
  scaleSpeed(): CGFloat;
  setScaleSpeed(scaleSpeed: CGFloat): void;
  spin(): CGFloat;
  setSpin(spin: CGFloat): void;
  spinRange(): CGFloat;
  setSpinRange(spinRange: CGFloat): void;
  color(): CGColorRef;
  setColor(color: CGColorRef): void;
  redRange(): number;
  setRedRange(redRange: number): void;
  greenRange(): number;
  setGreenRange(greenRange: number): void;
  blueRange(): number;
  setBlueRange(blueRange: number): void;
  alphaRange(): number;
  setAlphaRange(alphaRange: number): void;
  redSpeed(): number;
  setRedSpeed(redSpeed: number): void;
  greenSpeed(): number;
  setGreenSpeed(greenSpeed: number): void;
  blueSpeed(): number;
  setBlueSpeed(blueSpeed: number): void;
  alphaSpeed(): number;
  setAlphaSpeed(alphaSpeed: number): void;
  contents(): any;
  setContents(contents: any): void;
  contentsRect(): CGRect;
  setContentsRect(contentsRect: CGRect): void;
  contentsScale(): CGFloat;
  setContentsScale(contentsScale: CGFloat): void;
  minificationFilter(): NSString;
  setMinificationFilter(minificationFilter: NSString | string): void;
  magnificationFilter(): NSString;
  setMagnificationFilter(magnificationFilter: NSString | string): void;
  minificationFilterBias(): number;
  setMinificationFilterBias(minificationFilterBias: number): void;
  emitterCells(): NSArray<any>;
  setEmitterCells(emitterCells: NSArray<any> | any[]): void;
  style(): NSDictionary<any, any>;
  setStyle(style: NSDictionary<any, any> | {[key: string]: any}): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
  beginTime(): CFTimeInterval;
  setBeginTime(beginTime: CFTimeInterval): void;
  duration(): CFTimeInterval;
  setDuration(duration: CFTimeInterval): void;
  speed(): number;
  setSpeed(speed: number): void;
  timeOffset(): CFTimeInterval;
  setTimeOffset(timeOffset: CFTimeInterval): void;
  repeatCount(): number;
  setRepeatCount(repeatCount: number): void;
  repeatDuration(): CFTimeInterval;
  setRepeatDuration(repeatDuration: CFTimeInterval): void;
  autoreverses(): boolean;
  setAutoreverses(autoreverses: boolean): void;
  fillMode(): NSString;
  setFillMode(fillMode: NSString | string): void;
}

declare class CAEmitterLayer extends CALayer {
  emitterCells(): NSArray<any>;
  setEmitterCells(emitterCells: NSArray<any> | any[]): void;
  birthRate(): number;
  setBirthRate(birthRate: number): void;
  lifetime(): number;
  setLifetime(lifetime: number): void;
  emitterPosition(): CGPoint;
  setEmitterPosition(emitterPosition: CGPoint): void;
  emitterZPosition(): CGFloat;
  setEmitterZPosition(emitterZPosition: CGFloat): void;
  emitterSize(): CGSize;
  setEmitterSize(emitterSize: CGSize): void;
  emitterDepth(): CGFloat;
  setEmitterDepth(emitterDepth: CGFloat): void;
  emitterShape(): NSString;
  setEmitterShape(emitterShape: NSString | string): void;
  emitterMode(): NSString;
  setEmitterMode(emitterMode: NSString | string): void;
  renderMode(): NSString;
  setRenderMode(renderMode: NSString | string): void;
  preservesDepth(): boolean;
  setPreservesDepth(preservesDepth: boolean): void;
  velocity(): number;
  setVelocity(velocity: number): void;
  scale(): number;
  setScale(scale: number): void;
  spin(): number;
  setSpin(spin: number): void;
  seed(): number;
  setSeed(seed: number): void;
}

declare class CAGradientLayer extends CALayer {
  colors(): NSArray<any>;
  setColors(colors: NSArray<any> | any[]): void;
  locations(): NSArray<any>;
  setLocations(locations: NSArray<any> | any[]): void;
  startPoint(): CGPoint;
  setStartPoint(startPoint: CGPoint): void;
  endPoint(): CGPoint;
  setEndPoint(endPoint: CGPoint): void;
  type(): NSString;
  setType(type: NSString | string): void;
}

declare class NSNull extends NSObject implements INSCopying, INSSecureCoding {
  static null(): NSNull;
  copyWithZone(zone: NSZone | null): any;

  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare interface ICALayoutManager {
  preferredSizeOfLayer(layer: CALayer): CGSize;
  invalidateLayoutOfLayer(layer: CALayer): void;
  layoutSublayersOfLayer(layer: CALayer): void;
}

declare interface ICAAction {
  runActionForKey_object_arguments(event: NSString | string, anObject: any, dict: NSDictionary<any, any> | {[key: string]: any} | null): void;
}

declare interface ICALayerDelegate {
  displayLayer(layer: CALayer): void;
  drawLayer_inContext(layer: CALayer, ctx: CGContextRef): void;
  layoutSublayersOfLayer(layer: CALayer): void;
  actionForLayer_forKey(layer: CALayer, event: NSString | string): any;
}

declare enum CAAutoresizingMask {
  kCALayerNotSizable = 0,
  kCALayerMinXMargin = 1 << 0,
  kCALayerWidthSizable = 1 << 1,
  kCALayerMaxXMargin = 1 << 2,
  kCALayerMinYMargin = 1 << 3,
  kCALayerHeightSizable = 1 << 4,
  kCALayerMaxYMargin = 1 << 5,
}

declare enum CAEdgeAntialiasingMask {
  kCALayerLeftEdge = 1 << 0,
  kCALayerRightEdge = 1 << 1,
  kCALayerBottomEdge = 1 << 2,
  kCALayerTopEdge = 1 << 3,
}

declare enum CACornerMask {
  kCALayerMinXMinYCorner = 1 << 0,
  kCALayerMaxXMinYCorner = 1 << 1,
  kCALayerMinXMaxYCorner = 1 << 2,
  kCALayerMaxXMaxYCorner = 1 << 3,
}

declare interface ICAMediaTiming {
  beginTime(): CFTimeInterval;
  setBeginTime(beginTime: CFTimeInterval): void;
  duration(): CFTimeInterval;
  setDuration(duration: CFTimeInterval): void;
  speed(): number;
  setSpeed(speed: number): void;
  timeOffset(): CFTimeInterval;
  setTimeOffset(timeOffset: CFTimeInterval): void;
  repeatCount(): number;
  setRepeatCount(repeatCount: number): void;
  repeatDuration(): CFTimeInterval;
  setRepeatDuration(repeatDuration: CFTimeInterval): void;
  autoreverses(): boolean;
  setAutoreverses(autoreverses: boolean): void;
  fillMode(): NSString;
  setFillMode(fillMode: NSString | string): void;
}

declare class CAMediaTimingFunction extends NSObject implements INSSecureCoding {
  static functionWithName(name: NSString | string): CAMediaTimingFunction;
  static functionWithControlPoints___(c1x: number, c1y: number, c2x: number, c2y: number): CAMediaTimingFunction;
  initWithControlPoints___<T extends CAMediaTimingFunction>(c1x: number, c1y: number, c2x: number, c2y: number): T;
  getControlPointAtIndex_values(idx: size_t, ptr: [number, number]): void;

  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class CAMetalLayer extends CALayer {
  nextDrawable(): any;

  device(): any;
  setDevice(device: any): void;
  pixelFormat(): MTLPixelFormat;
  setPixelFormat(pixelFormat: MTLPixelFormat): void;
  framebufferOnly(): boolean;
  setFramebufferOnly(framebufferOnly: boolean): void;
  drawableSize(): CGSize;
  setDrawableSize(drawableSize: CGSize): void;
  presentsWithTransaction(): boolean;
  setPresentsWithTransaction(presentsWithTransaction: boolean): void;
  colorspace(): CGColorSpaceRef;
  setColorspace(colorspace: CGColorSpaceRef): void;
  wantsExtendedDynamicRangeContent(): boolean;
  setWantsExtendedDynamicRangeContent(wantsExtendedDynamicRangeContent: boolean): void;
}

declare class CARemoteLayerClient extends NSObject {
  initWithServerPort<T extends CARemoteLayerClient>(port: mach_port_t): T;
  invalidate(): void;

  clientId(): number;
  setClientId(clientId: number): void;
  layer(): CALayer;
  setLayer(layer: CALayer): void;
}

declare class CARemoteLayerServer extends NSObject {
  static sharedServer(): CARemoteLayerServer;

  serverPort(): mach_port_t;
  setServerPort(serverPort: mach_port_t): void;
}

declare class CARenderer extends NSObject {
  static rendererWithCGLContext_options(ctx: void, dict: NSDictionary<any, any> | {[key: string]: any} | null): CARenderer;
  beginFrameAtTime_timeStamp(t: CFTimeInterval, ts: CVTimeStamp | null): void;
  updateBounds(): CGRect;
  addUpdateRect(r: CGRect): void;
  render(): void;
  nextFrameTime(): CFTimeInterval;
  endFrame(): void;

  layer(): CALayer;
  setLayer(layer: CALayer): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
}

declare class CAReplicatorLayer extends CALayer {
  instanceCount(): NSInteger;
  setInstanceCount(instanceCount: NSInteger): void;
  preservesDepth(): boolean;
  setPreservesDepth(preservesDepth: boolean): void;
  instanceDelay(): CFTimeInterval;
  setInstanceDelay(instanceDelay: CFTimeInterval): void;
  instanceTransform(): CATransform3D;
  setInstanceTransform(instanceTransform: CATransform3D): void;
  instanceColor(): CGColorRef;
  setInstanceColor(instanceColor: CGColorRef): void;
  instanceRedOffset(): number;
  setInstanceRedOffset(instanceRedOffset: number): void;
  instanceGreenOffset(): number;
  setInstanceGreenOffset(instanceGreenOffset: number): void;
  instanceBlueOffset(): number;
  setInstanceBlueOffset(instanceBlueOffset: number): void;
  instanceAlphaOffset(): number;
  setInstanceAlphaOffset(instanceAlphaOffset: number): void;
}

declare class CAScrollLayer extends CALayer {
  scrollToPoint(p: CGPoint): void;
  scrollToRect(r: CGRect): void;

  scrollMode(): NSString;
  setScrollMode(scrollMode: NSString | string): void;
}

declare class CAShapeLayer extends CALayer {
  path(): CGPathRef;
  setPath(path: CGPathRef): void;
  fillColor(): CGColorRef;
  setFillColor(fillColor: CGColorRef): void;
  fillRule(): NSString;
  setFillRule(fillRule: NSString | string): void;
  strokeColor(): CGColorRef;
  setStrokeColor(strokeColor: CGColorRef): void;
  strokeStart(): CGFloat;
  setStrokeStart(strokeStart: CGFloat): void;
  strokeEnd(): CGFloat;
  setStrokeEnd(strokeEnd: CGFloat): void;
  lineWidth(): CGFloat;
  setLineWidth(lineWidth: CGFloat): void;
  miterLimit(): CGFloat;
  setMiterLimit(miterLimit: CGFloat): void;
  lineCap(): NSString;
  setLineCap(lineCap: NSString | string): void;
  lineJoin(): NSString;
  setLineJoin(lineJoin: NSString | string): void;
  lineDashPhase(): CGFloat;
  setLineDashPhase(lineDashPhase: CGFloat): void;
  lineDashPattern(): NSArray<any>;
  setLineDashPattern(lineDashPattern: NSArray<any> | any[]): void;
}

declare class CATextLayer extends CALayer {
  string(): any;
  setString(string: any): void;
  font(): CFTypeRef;
  setFont(font: CFTypeRef): void;
  fontSize(): CGFloat;
  setFontSize(fontSize: CGFloat): void;
  foregroundColor(): CGColorRef;
  setForegroundColor(foregroundColor: CGColorRef): void;
  wrapped(): boolean;
  setWrapped(wrapped: boolean): void;
  truncationMode(): NSString;
  setTruncationMode(truncationMode: NSString | string): void;
  alignmentMode(): NSString;
  setAlignmentMode(alignmentMode: NSString | string): void;
  allowsFontSubpixelQuantization(): boolean;
  setAllowsFontSubpixelQuantization(allowsFontSubpixelQuantization: boolean): void;
}

declare class CATiledLayer extends CALayer {
  static fadeDuration(): CFTimeInterval;

  levelsOfDetail(): size_t;
  setLevelsOfDetail(levelsOfDetail: size_t): void;
  levelsOfDetailBias(): size_t;
  setLevelsOfDetailBias(levelsOfDetailBias: size_t): void;
  tileSize(): CGSize;
  setTileSize(tileSize: CGSize): void;
}

declare class CATransaction extends NSObject {
  static begin(): void;
  static commit(): void;
  static flush(): void;
  static lock(): void;
  static unlock(): void;
  static animationDuration(): CFTimeInterval;
  static setAnimationDuration(dur: CFTimeInterval): void;
  static animationTimingFunction(): CAMediaTimingFunction;
  static setAnimationTimingFunction(functionName: CAMediaTimingFunction | null): void;
  static disableActions(): boolean;
  static setDisableActions(flag: boolean): void;
  static setCompletionBlock(block: Block | null): void;
  static valueForKey(key: NSString | string): any;
  static setValue_forKey(anObject: any | null, key: NSString | string): void;
  static disableAnimationsInBlock(block: BCVoidBlock): void;
}

declare class NSValue extends NSObject implements INSCopying, INSSecureCoding {
  static valueWithCATransform3D(t: CATransform3D): NSValue;
  static valueWithPoint(point: NSPoint): NSValue;
  static valueWithSize(size: NSSize): NSValue;
  static valueWithRect(rect: NSRect): NSValue;
  static valueWithEdgeInsets(insets: NSEdgeInsets): NSValue;
  static valueWithRange(range: NSRange): NSValue;
  getValue_size(value: void, size: NSUInteger): void;
  initWithBytes_objCType<T extends NSValue>(value: void, type: string): T;
  initWithCoder<T extends NSValue>(aDecoder: NSCoder): T;
  static valueWithBytes_objCType(value: void, type: string): NSValue;
  static value_withObjCType(value: void, type: string): NSValue;
  static valueWithNonretainedObject(anObject: any | null): NSValue;
  static valueWithPointer(pointer: void | null): NSValue;
  isEqualToValue(value: NSValue): boolean;
  getValue(value: void): void;
  static valueWithCGVector(vector: CGVector): NSValue;
  copyWithZone(zone: NSZone | null): any;

  CATransform3DValue(): CATransform3D;
  setCATransform3DValue(CATransform3DValue: CATransform3D): void;
  pointValue(): NSPoint;
  setPointValue(pointValue: NSPoint): void;
  sizeValue(): NSSize;
  setSizeValue(sizeValue: NSSize): void;
  rectValue(): NSRect;
  setRectValue(rectValue: NSRect): void;
  edgeInsetsValue(): NSEdgeInsets;
  setEdgeInsetsValue(edgeInsetsValue: NSEdgeInsets): void;
  rangeValue(): NSRange;
  setRangeValue(rangeValue: NSRange): void;
  objCType(): string;
  setObjCType(objCType: string): void;
  nonretainedObjectValue(): any;
  setNonretainedObjectValue(nonretainedObjectValue: any): void;
  pointerValue(): void;
  setPointerValue(pointerValue: void): void;
  CGVectorValue(): CGVector;
  setCGVectorValue(CGVectorValue: CGVector): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type CATransform3D = {
  m11: CGFloat
  m12: CGFloat
  m13: CGFloat
  m14: CGFloat
  m21: CGFloat
  m22: CGFloat
  m23: CGFloat
  m24: CGFloat
  m31: CGFloat
  m32: CGFloat
  m33: CGFloat
  m34: CGFloat
  m41: CGFloat
  m42: CGFloat
  m43: CGFloat
  m44: CGFloat
}

declare class CATransformLayer extends CALayer {}

declare class CAValueFunction extends NSObject implements INSSecureCoding {
  static functionWithName(name: NSString | string): CAValueFunction;

  name(): NSString;
  setName(name: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type CGAffineTransform = {
  a: CGFloat
  b: CGFloat
  c: CGFloat
  d: CGFloat
  tx: CGFloat
  ty: CGFloat
}

declare type CGFloat = number

declare type CGColorRef = any

declare enum CGColorConversionInfoTransformType {
  kCGColorConversionTransformFromSpace = 0,
  kCGColorConversionTransformToSpace,
  kCGColorConversionTransformApplySpace,
}

declare type CGColorSpaceRef = any

declare enum CGColorRenderingIntent {
  kCGRenderingIntentDefault,
  kCGRenderingIntentAbsoluteColorimetric,
  kCGRenderingIntentRelativeColorimetric,
  kCGRenderingIntentPerceptual,
  kCGRenderingIntentSaturation,
}

declare enum CGColorSpaceModel {
  kCGColorSpaceModelUnknown = -1,
  kCGColorSpaceModelMonochrome,
  kCGColorSpaceModelRGB,
  kCGColorSpaceModelCMYK,
  kCGColorSpaceModelLab,
  kCGColorSpaceModelDeviceN,
  kCGColorSpaceModelIndexed,
  kCGColorSpaceModelPattern,
}

declare type CGContextRef = any

declare enum CGPathDrawingMode {
  kCGPathFill,
  kCGPathEOFill,
  kCGPathStroke,
  kCGPathFillStroke,
  kCGPathEOFillStroke,
}

declare enum CGTextDrawingMode {
  kCGTextFill,
  kCGTextStroke,
  kCGTextFillStroke,
  kCGTextInvisible,
  kCGTextFillClip,
  kCGTextStrokeClip,
  kCGTextFillStrokeClip,
  kCGTextClip,
}

declare enum CGTextEncoding {
  kCGEncodingFontSpecific,
  kCGEncodingMacRoman,
}

declare enum CGInterpolationQuality {
  kCGInterpolationDefault = 0,
  kCGInterpolationNone = 1,
  kCGInterpolationLow = 2,
  kCGInterpolationMedium = 4,
  kCGInterpolationHigh = 3,
}

declare enum CGBlendMode {
  kCGBlendModeNormal,
  kCGBlendModeMultiply,
  kCGBlendModeScreen,
  kCGBlendModeOverlay,
  kCGBlendModeDarken,
  kCGBlendModeLighten,
  kCGBlendModeColorDodge,
  kCGBlendModeColorBurn,
  kCGBlendModeSoftLight,
  kCGBlendModeHardLight,
  kCGBlendModeDifference,
  kCGBlendModeExclusion,
  kCGBlendModeHue,
  kCGBlendModeSaturation,
  kCGBlendModeColor,
  kCGBlendModeLuminosity,
  kCGBlendModeClear,
  kCGBlendModeCopy,
  kCGBlendModeSourceIn,
  kCGBlendModeSourceOut,
  kCGBlendModeSourceAtop,
  kCGBlendModeDestinationOver,
  kCGBlendModeDestinationIn,
  kCGBlendModeDestinationOut,
  kCGBlendModeDestinationAtop,
  kCGBlendModeXOR,
  kCGBlendModePlusDarker,
  kCGBlendModePlusLighter,
}

declare type CGDirectDisplayID = number

declare type CGOpenGLDisplayMask = number

declare type CGRefreshRate = number

declare type CGGammaValue = number

declare type CGDisplayCount = number

declare type CGDisplayFadeReservationToken = number

declare type CGDisplayBlendFraction = number

declare type CGDisplayFadeInterval = number

declare type CGDisplayReservationInterval = number

declare enum CGDisplayStreamUpdateRectType {
  kCGDisplayStreamUpdateRefreshedRects,
  kCGDisplayStreamUpdateMovedRects,
  kCGDisplayStreamUpdateDirtyRects,
  kCGDisplayStreamUpdateReducedDirtyRects,
}

declare enum CGDisplayStreamFrameStatus {
  kCGDisplayStreamFrameStatusFrameComplete,
  kCGDisplayStreamFrameStatusFrameIdle,
  kCGDisplayStreamFrameStatusFrameBlank,
  kCGDisplayStreamFrameStatusStopped,
}

declare enum CGError {
  kCGErrorSuccess = 0,
  kCGErrorFailure = 1000,
  kCGErrorIllegalArgument = 1001,
  kCGErrorInvalidConnection = 1002,
  kCGErrorInvalidContext = 1003,
  kCGErrorCannotComplete = 1004,
  kCGErrorNotImplemented = 1006,
  kCGErrorRangeCheck = 1007,
  kCGErrorTypeCheck = 1008,
  kCGErrorInvalidOperation = 1010,
  kCGErrorNoneAvailable = 1011,
}

declare type CGEventRef = any

declare type CGEventTimestamp = number

declare type CGEventMask = number

declare type CGEventSourceKeyboardType = number

declare enum CGMouseButton {
  kCGMouseButtonLeft = 0,
  kCGMouseButtonRight = 1,
  kCGMouseButtonCenter = 2,
}

declare enum CGScrollEventUnit {
  kCGScrollEventUnitPixel = 0,
  kCGScrollEventUnitLine = 1,
}

declare enum CGMomentumScrollPhase {
  kCGMomentumScrollPhaseNone = 0,
  kCGMomentumScrollPhaseBegin = 1,
  kCGMomentumScrollPhaseContinue = 2,
  kCGMomentumScrollPhaseEnd = 3,
}

declare enum CGScrollPhase {
  kCGScrollPhaseBegan = 1,
  kCGScrollPhaseChanged = 2,
  kCGScrollPhaseEnded = 4,
  kCGScrollPhaseCancelled = 8,
  kCGScrollPhaseMayBegin = 128,
}

declare enum CGGesturePhase {
  kCGGesturePhaseNone = 0,
  kCGGesturePhaseBegan = 1,
  kCGGesturePhaseChanged = 2,
  kCGGesturePhaseEnded = 4,
  kCGGesturePhaseCancelled = 8,
  kCGGesturePhaseMayBegin = 128,
}

declare enum CGEventType {
  kCGEventNull,
  kCGEventLeftMouseDown,
  kCGEventLeftMouseUp,
  kCGEventRightMouseDown,
  kCGEventRightMouseUp,
  kCGEventMouseMoved,
  kCGEventLeftMouseDragged,
  kCGEventRightMouseDragged,
  kCGEventKeyDown,
  kCGEventKeyUp,
  kCGEventFlagsChanged,
  kCGEventScrollWheel,
  kCGEventTabletPointer,
  kCGEventTabletProximity,
  kCGEventOtherMouseDown,
  kCGEventOtherMouseUp,
  kCGEventOtherMouseDragged,
  kCGEventTapDisabledByTimeout = 0xFFFFFFFE,
  kCGEventTapDisabledByUserInput = 0xFFFFFFFF,
}

declare enum CGEventField {
  kCGMouseEventNumber = 0,
  kCGMouseEventClickState = 1,
  kCGMouseEventPressure = 2,
  kCGMouseEventButtonNumber = 3,
  kCGMouseEventDeltaX = 4,
  kCGMouseEventDeltaY = 5,
  kCGMouseEventInstantMouser = 6,
  kCGMouseEventSubtype = 7,
  kCGKeyboardEventAutorepeat = 8,
  kCGKeyboardEventKeycode = 9,
  kCGKeyboardEventKeyboardType = 10,
  kCGScrollWheelEventDeltaAxis1 = 11,
  kCGScrollWheelEventDeltaAxis2 = 12,
  kCGScrollWheelEventDeltaAxis3 = 13,
  kCGScrollWheelEventFixedPtDeltaAxis1 = 93,
  kCGScrollWheelEventFixedPtDeltaAxis2 = 94,
  kCGScrollWheelEventFixedPtDeltaAxis3 = 95,
  kCGScrollWheelEventPointDeltaAxis1 = 96,
  kCGScrollWheelEventPointDeltaAxis2 = 97,
  kCGScrollWheelEventPointDeltaAxis3 = 98,
  kCGScrollWheelEventScrollPhase = 99,
  kCGScrollWheelEventScrollCount = 100,
  kCGScrollWheelEventMomentumPhase = 123,
  kCGScrollWheelEventInstantMouser = 14,
  kCGTabletEventPointX = 15,
  kCGTabletEventPointY = 16,
  kCGTabletEventPointZ = 17,
  kCGTabletEventPointButtons = 18,
  kCGTabletEventPointPressure = 19,
  kCGTabletEventTiltX = 20,
  kCGTabletEventTiltY = 21,
  kCGTabletEventRotation = 22,
  kCGTabletEventTangentialPressure = 23,
  kCGTabletEventDeviceID = 24,
  kCGTabletEventVendor1 = 25,
  kCGTabletEventVendor2 = 26,
  kCGTabletEventVendor3 = 27,
  kCGTabletProximityEventVendorID = 28,
  kCGTabletProximityEventTabletID = 29,
  kCGTabletProximityEventPointerID = 30,
  kCGTabletProximityEventDeviceID = 31,
  kCGTabletProximityEventSystemTabletID = 32,
  kCGTabletProximityEventVendorPointerType = 33,
  kCGTabletProximityEventVendorPointerSerialNumber = 34,
  kCGTabletProximityEventVendorUniqueID = 35,
  kCGTabletProximityEventCapabilityMask = 36,
  kCGTabletProximityEventPointerType = 37,
  kCGTabletProximityEventEnterProximity = 38,
  kCGEventTargetProcessSerialNumber = 39,
  kCGEventTargetUnixProcessID = 40,
  kCGEventSourceUnixProcessID = 41,
  kCGEventSourceUserData = 42,
  kCGEventSourceUserID = 43,
  kCGEventSourceGroupID = 44,
  kCGEventSourceStateID = 45,
  kCGScrollWheelEventIsContinuous = 88,
  kCGMouseEventWindowUnderMousePointer = 91,
  kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent = 92,
}

declare enum CGEventMouseSubtype {
  kCGEventMouseSubtypeDefault = 0,
  kCGEventMouseSubtypeTabletPoint = 1,
  kCGEventMouseSubtypeTabletProximity = 2,
}

declare enum CGEventTapLocation {
  kCGHIDEventTap = 0,
  kCGSessionEventTap,
  kCGAnnotatedSessionEventTap,
}

declare enum CGEventTapPlacement {
  kCGHeadInsertEventTap = 0,
  kCGTailAppendEventTap,
}

declare enum CGEventTapOptions {
  kCGEventTapOptionDefault = 0x00000000,
  kCGEventTapOptionListenOnly = 0x00000001,
}

declare enum CGEventSourceStateID {
  kCGEventSourceStatePrivate = -1,
  kCGEventSourceStateCombinedSessionState = 0,
  kCGEventSourceStateHIDSystemState = 1,
}

declare type CGFontIndex = number

declare type CGGlyph = CGFontIndex

declare enum CGFontPostScriptFormat {
  kCGFontPostScriptFormatType1 = 1,
  kCGFontPostScriptFormatType3 = 3,
  kCGFontPostScriptFormatType42 = 42,
}

declare type CGPoint = {
  x: CGFloat
  y: CGFloat
}

declare type CGSize = {
  width: CGFloat
  height: CGFloat
}

declare type CGVector = {
  dx: CGFloat
  dy: CGFloat
}

declare type CGRect = {
  origin: CGPoint
  size: CGSize
}

declare enum CGRectEdge {
  CGRectMinXEdge,
  CGRectMinYEdge,
  CGRectMaxXEdge,
  CGRectMaxYEdge,
}

declare type CGGradientRef = any

declare type CGImageRef = any

declare enum CGImageAlphaInfo {
  kCGImageAlphaNone,
  kCGImageAlphaPremultipliedLast,
  kCGImageAlphaPremultipliedFirst,
  kCGImageAlphaLast,
  kCGImageAlphaFirst,
  kCGImageAlphaNoneSkipLast,
  kCGImageAlphaNoneSkipFirst,
  kCGImageAlphaOnly,
}

declare enum CGImageByteOrderInfo {
  kCGImageByteOrderMask = 0x7000,
  kCGImageByteOrderDefault,
  kCGImageByteOrder16Little,
  kCGImageByteOrder32Little,
  kCGImageByteOrder16Big,
  kCGImageByteOrder32Big,
}

declare type CGPDFArrayRef = any

declare type CGPDFContentStreamRef = any

declare type CGPDFDictionaryRef = any

declare type CGPDFBoolean = string

declare type CGPDFInteger = number

declare type CGPDFReal = CGFloat

declare type CGPDFObjectRef = any

declare enum CGPDFObjectType {
  kCGPDFObjectTypeNull = 1,
  kCGPDFObjectTypeBoolean,
  kCGPDFObjectTypeInteger,
  kCGPDFObjectTypeReal,
  kCGPDFObjectTypeName,
  kCGPDFObjectTypeString,
  kCGPDFObjectTypeArray,
  kCGPDFObjectTypeDictionary,
  kCGPDFObjectTypeStream,
}

declare type CGPDFPageRef = any

declare enum CGPDFBox {
  kCGPDFMediaBox = 0,
  kCGPDFCropBox = 1,
  kCGPDFBleedBox = 2,
  kCGPDFTrimBox = 3,
  kCGPDFArtBox = 4,
}

declare type CGPDFStreamRef = any

declare enum CGPDFDataFormat {
  CGPDFDataFormatRaw,
  CGPDFDataFormatJPEGEncoded,
  CGPDFDataFormatJPEG2000,
}

declare type CGPDFStringRef = any

declare type CGMutablePathRef = CGPath

declare type CGPathRef = CGPath

declare enum CGLineJoin {
  kCGLineJoinMiter,
  kCGLineJoinRound,
  kCGLineJoinBevel,
}

declare enum CGLineCap {
  kCGLineCapButt,
  kCGLineCapRound,
  kCGLineCapSquare,
}

declare enum CGPathElementType {
  kCGPathElementMoveToPoint,
  kCGPathElementAddLineToPoint,
  kCGPathElementAddQuadCurveToPoint,
  kCGPathElementAddCurveToPoint,
  kCGPathElementCloseSubpath,
}

declare enum CGPatternTiling {
  kCGPatternTilingNoDistortion,
  kCGPatternTilingConstantSpacingMinimalDistortion,
  kCGPatternTilingConstantSpacing,
}

declare type CGButtonCount = number

declare type CGWheelCount = number

declare type CGCharCode = number

declare type CGKeyCode = number

declare type CGRectCount = number

declare enum CGEventSuppressionState {
  kCGEventSuppressionStateSuppressionInterval = 0,
  kCGEventSuppressionStateRemoteMouseDrag,
  kCGNumberOfEventSuppressionStates,
}

declare type CGWindowID = number

declare enum CGWindowSharingType {
  kCGWindowSharingNone = 0,
  kCGWindowSharingReadOnly = 1,
  kCGWindowSharingReadWrite = 2,
}

declare enum CGWindowBackingType {
  kCGBackingStoreRetained = 0,
  kCGBackingStoreNonretained = 1,
  kCGBackingStoreBuffered = 2,
}

declare type CGWindowLevel = number

declare enum CGWindowLevelKey {
  kCGBaseWindowLevelKey = 0,
  kCGMinimumWindowLevelKey,
  kCGDesktopWindowLevelKey,
  kCGBackstopMenuLevelKey,
  kCGNormalWindowLevelKey,
  kCGFloatingWindowLevelKey,
  kCGTornOffMenuWindowLevelKey,
  kCGDockWindowLevelKey,
  kCGMainMenuWindowLevelKey,
  kCGStatusWindowLevelKey,
  kCGModalPanelWindowLevelKey,
  kCGPopUpMenuWindowLevelKey,
  kCGDraggingWindowLevelKey,
  kCGScreenSaverWindowLevelKey,
  kCGMaximumWindowLevelKey,
  kCGOverlayWindowLevelKey,
  kCGHelpWindowLevelKey,
  kCGUtilityWindowLevelKey,
  kCGDesktopIconWindowLevelKey,
  kCGCursorWindowLevelKey,
  kCGAssistiveTechHighWindowLevelKey,
  kCGNumberOfWindowLevelKeys,
}

declare class NSAffineTransform extends NSObject implements INSCopying, INSSecureCoding {
  static transform(): NSAffineTransform;
  initWithTransform<T extends NSAffineTransform>(transform: NSAffineTransform): T;
  init<T extends NSAffineTransform>(): T;
  translateXBy_yBy(deltaX: CGFloat, deltaY: CGFloat): void;
  rotateByDegrees(angle: CGFloat): void;
  rotateByRadians(angle: CGFloat): void;
  scaleBy(scale: CGFloat): void;
  scaleXBy_yBy(scaleX: CGFloat, scaleY: CGFloat): void;
  invert(): void;
  appendTransform(transform: NSAffineTransform): void;
  prependTransform(transform: NSAffineTransform): void;
  transformPoint(aPoint: NSPoint): NSPoint;
  transformSize(aSize: NSSize): NSSize;
  transformBezierPath(path: NSBezierPath): NSBezierPath;
  set(): void;
  concat(): void;
  static transformByTranslatingXBy_yBy(x: CGFloat, y: CGFloat): NSAffineTransform;
  static transformByScaling(scale: CGFloat): NSAffineTransform;
  static transformWithOffset(offset: NSPoint): NSAffineTransform;
  static rotationTransformWithDegrees_aroundPoint(degrees: CGFloat, point: NSPoint): NSAffineTransform;
  static transformFromStruct_aroundPoint(transformStruct: CHTransformStruct, p: NSPoint): NSAffineTransform;
  static transformFromStruct_aroundPoint_inPlace(transformStruct: CHTransformStruct, p: NSPoint, transformInPlace: boolean): NSAffineTransform;
  translateByOffset(offset: NSPoint): void;
  transactionWithBlock(block: BCVoidBlock): void;
  rotateWithDegrees_aroundPoint(degrees: CGFloat, point: NSPoint): void;
  invertedTransform(): NSAffineTransform;
  CGAffineTransform(): CGAffineTransform;
  copyWithZone(zone: NSZone | null): any;

  transformStruct(): NSAffineTransformStruct;
  setTransformStruct(transformStruct: NSAffineTransformStruct): void;
  determinant(): CGFloat;
  setDeterminant(determinant: CGFloat): void;
  includesFlip(): boolean;
  setIncludesFlip(includesFlip: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSAffineTransformStruct = {
  m11: CGFloat
  m12: CGFloat
  m21: CGFloat
  m22: CGFloat
  tX: CGFloat
  tY: CGFloat
}

declare class NSAppleEventDescriptor extends NSObject implements INSCopying, INSSecureCoding {
  static nullDescriptor(): NSAppleEventDescriptor;
  static descriptorWithDescriptorType_bytes_length(descriptorType: DescType, bytes: void | null, byteCount: NSUInteger): NSAppleEventDescriptor;
  static descriptorWithDescriptorType_data(descriptorType: DescType, data: NSData | null): NSAppleEventDescriptor;
  static descriptorWithBoolean(boolean: Boolean): NSAppleEventDescriptor;
  static descriptorWithEnumCode(enumerator: OSType): NSAppleEventDescriptor;
  static descriptorWithInt32(signedInt: SInt32): NSAppleEventDescriptor;
  static descriptorWithDouble(doubleValue: number): NSAppleEventDescriptor;
  static descriptorWithTypeCode(typeCode: OSType): NSAppleEventDescriptor;
  static descriptorWithString(string: NSString | string): NSAppleEventDescriptor;
  static descriptorWithDate(date: NSDate): NSAppleEventDescriptor;
  static descriptorWithFileURL(fileURL: NSURL): NSAppleEventDescriptor;
  static appleEventWithEventClass_eventID_targetDescriptor_returnID_transactionID(eventClass: AEEventClass, eventID: AEEventID, targetDescriptor: NSAppleEventDescriptor | null, returnID: AEReturnID, transactionID: AETransactionID): NSAppleEventDescriptor;
  static listDescriptor(): NSAppleEventDescriptor;
  static recordDescriptor(): NSAppleEventDescriptor;
  static currentProcessDescriptor(): NSAppleEventDescriptor;
  static descriptorWithProcessIdentifier(processIdentifier: pid_t): NSAppleEventDescriptor;
  static descriptorWithBundleIdentifier(bundleIdentifier: NSString | string): NSAppleEventDescriptor;
  static descriptorWithApplicationURL(applicationURL: NSURL): NSAppleEventDescriptor;
  initWithAEDescNoCopy<T extends NSAppleEventDescriptor>(aeDesc: AEDesc): T;
  initWithDescriptorType_bytes_length<T extends NSAppleEventDescriptor>(descriptorType: DescType, bytes: void | null, byteCount: NSUInteger): T;
  initWithDescriptorType_data<T extends NSAppleEventDescriptor>(descriptorType: DescType, data: NSData | null): T;
  initWithEventClass_eventID_targetDescriptor_returnID_transactionID<T extends NSAppleEventDescriptor>(eventClass: AEEventClass, eventID: AEEventID, targetDescriptor: NSAppleEventDescriptor | null, returnID: AEReturnID, transactionID: AETransactionID): T;
  initListDescriptor<T extends NSAppleEventDescriptor>(): T;
  initRecordDescriptor<T extends NSAppleEventDescriptor>(): T;
  setParamDescriptor_forKeyword(descriptor: NSAppleEventDescriptor, keyword: AEKeyword): void;
  paramDescriptorForKeyword(keyword: AEKeyword): NSAppleEventDescriptor;
  removeParamDescriptorWithKeyword(keyword: AEKeyword): void;
  setAttributeDescriptor_forKeyword(descriptor: NSAppleEventDescriptor, keyword: AEKeyword): void;
  attributeDescriptorForKeyword(keyword: AEKeyword): NSAppleEventDescriptor;
  sendEventWithOptions_timeout_error(sendOptions: NSAppleEventSendOptions, timeoutInSeconds: NSTimeInterval, error: NSError): NSAppleEventDescriptor;
  insertDescriptor_atIndex(descriptor: NSAppleEventDescriptor, index: NSInteger): void;
  descriptorAtIndex(index: NSInteger): NSAppleEventDescriptor;
  removeDescriptorAtIndex(index: NSInteger): void;
  setDescriptor_forKeyword(descriptor: NSAppleEventDescriptor, keyword: AEKeyword): void;
  descriptorForKeyword(keyword: AEKeyword): NSAppleEventDescriptor;
  removeDescriptorWithKeyword(keyword: AEKeyword): void;
  keywordForDescriptorAtIndex(index: NSInteger): AEKeyword;
  coerceToDescriptorType(descriptorType: DescType): NSAppleEventDescriptor;
  copyWithZone(zone: NSZone | null): any;

  aeDesc(): AEDesc;
  setAeDesc(aeDesc: AEDesc): void;
  descriptorType(): DescType;
  setDescriptorType(descriptorType: DescType): void;
  data(): NSData;
  setData(data: NSData): void;
  booleanValue(): Boolean;
  setBooleanValue(booleanValue: Boolean): void;
  enumCodeValue(): OSType;
  setEnumCodeValue(enumCodeValue: OSType): void;
  int32Value(): SInt32;
  setInt32Value(int32Value: SInt32): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  typeCodeValue(): OSType;
  setTypeCodeValue(typeCodeValue: OSType): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  dateValue(): NSDate;
  setDateValue(dateValue: NSDate): void;
  fileURLValue(): NSURL;
  setFileURLValue(fileURLValue: NSURL): void;
  eventClass(): AEEventClass;
  setEventClass(eventClass: AEEventClass): void;
  eventID(): AEEventID;
  setEventID(eventID: AEEventID): void;
  returnID(): AEReturnID;
  setReturnID(returnID: AEReturnID): void;
  transactionID(): AETransactionID;
  setTransactionID(transactionID: AETransactionID): void;
  isRecordDescriptor(): boolean;
  setIsRecordDescriptor(isRecordDescriptor: boolean): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSAppleEventSendOptions {
  NSAppleEventSendNoReply = 0x00000001,
  NSAppleEventSendQueueReply = 0x00000002,
  NSAppleEventSendWaitForReply = 0x00000003,
  NSAppleEventSendNeverInteract = 0x00000010,
  NSAppleEventSendCanInteract = 0x00000020,
  NSAppleEventSendAlwaysInteract = 0x00000030,
  NSAppleEventSendCanSwitchLayer = 0x00000040,
  NSAppleEventSendDontRecord = 0x00001000,
  NSAppleEventSendDontExecute = 0x00002000,
  NSAppleEventSendDontAnnotate = 0x00010000,
  NSAppleEventSendDefaultOptions,
}

declare class NSAppleEventManager extends NSObject {
  static sharedAppleEventManager(): NSAppleEventManager;
  setEventHandler_andSelector_forEventClass_andEventID(handler: any, handleEventSelector: string, eventClass: AEEventClass, eventID: AEEventID): void;
  removeEventHandlerForEventClass_andEventID(eventClass: AEEventClass, eventID: AEEventID): void;
  dispatchRawAppleEvent_withRawReply_handlerRefCon(theAppleEvent: AppleEvent, theReply: AppleEvent, handlerRefCon: SRefCon): OSErr;
  suspendCurrentAppleEvent(): NSAppleEventManagerSuspensionID;
  appleEventForSuspensionID(suspensionID: NSAppleEventManagerSuspensionID): NSAppleEventDescriptor;
  replyAppleEventForSuspensionID(suspensionID: NSAppleEventManagerSuspensionID): NSAppleEventDescriptor;
  setCurrentAppleEventAndReplyEventWithSuspensionID(suspensionID: NSAppleEventManagerSuspensionID): void;
  resumeWithSuspensionID(suspensionID: NSAppleEventManagerSuspensionID): void;

  currentAppleEvent(): NSAppleEventDescriptor;
  setCurrentAppleEvent(currentAppleEvent: NSAppleEventDescriptor): void;
  currentReplyAppleEvent(): NSAppleEventDescriptor;
  setCurrentReplyAppleEvent(currentReplyAppleEvent: NSAppleEventDescriptor): void;
}

declare type NSAppleEventManagerSuspensionID = any

declare class NSAppleScript extends NSObject implements INSCopying {
  initWithContentsOfURL_error<T extends NSAppleScript>(url: NSURL, errorInfo: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithSource<T extends NSAppleScript>(source: NSString | string): T;
  compileAndReturnError(errorInfo: NSDictionary<any, any> | {[key: string]: any}): boolean;
  executeAndReturnError(errorInfo: NSDictionary<any, any> | {[key: string]: any}): NSAppleEventDescriptor;
  executeAppleEvent_error(event: NSAppleEventDescriptor, errorInfo: NSDictionary<any, any> | {[key: string]: any}): NSAppleEventDescriptor;
  copyWithZone(zone: NSZone | null): any;

  source(): NSString;
  setSource(source: NSString | string): void;
  compiled(): boolean;
  setCompiled(compiled: boolean): void;
  richTextSource(): NSAttributedString;
  setRichTextSource(richTextSource: NSAttributedString): void;
}

declare class NSArchiver extends NSCoder {
  initForWritingWithMutableData<T extends NSArchiver>(mdata: NSMutableData): T;
  encodeRootObject(rootObject: any): void;
  encodeConditionalObject(object: any | null): void;
  static archivedDataWithRootObject(rootObject: any): NSData;
  static archiveRootObject_toFile(rootObject: any, path: NSString | string): boolean;
  encodeClassName_intoClassName(trueName: NSString | string, inArchiveName: NSString | string): void;
  classNameEncodedForTrueClassName(trueName: NSString | string): NSString;
  replaceObject_withObject(object: any, newObject: any): void;

  archiverData(): NSMutableData;
  setArchiverData(archiverData: NSMutableData): void;
}

declare class NSUnarchiver extends NSCoder {
  initForReadingWithData<T extends NSUnarchiver>(data: NSData): T;
  static unarchiveObjectWithData(data: NSData): any;
  static unarchiveObjectWithFile(path: NSString | string): any;
  decodeClassName_asClassName(inArchiveName: NSString | string, trueName: NSString | string): void;
  classNameDecodedForArchiveClassName(inArchiveName: NSString | string): NSString;
  replaceObject_withObject(object: any, newObject: any): void;

  atEnd(): boolean;
  setAtEnd(atEnd: boolean): void;
  systemVersion(): number;
  setSystemVersion(systemVersion: number): void;
}

declare class NSObject {
  description(): NSString;

  inverseForRelationshipKey(relationshipKey: NSString | string): NSString;
  attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo(error: NSError, recoveryOptionIndex: NSUInteger, delegate: any | null, didRecoverSelector: string | null, contextInfo: void | null): void;
  attemptRecoveryFromError_optionIndex(error: NSError, recoveryOptionIndex: NSUInteger): boolean;
  fileManager_shouldProceedAfterError(fm: NSFileManager, errorInfo: NSDictionary<any, any> | {[key: string]: any}): boolean;
  fileManager_willProcessPath(fm: NSFileManager, path: NSString | string): void;
  valueForKey(key: NSString | string): any;
  setValue_forKey(value: any | null, key: NSString | string): void;
  validateValue_forKey_error(ioValue: any, inKey: NSString | string, outError: NSError): boolean;
  mutableArrayValueForKey(key: NSString | string): NSMutableArray<any>;
  mutableOrderedSetValueForKey(key: NSString | string): NSMutableOrderedSet<any>;
  mutableSetValueForKey(key: NSString | string): NSMutableSet<any>;
  valueForKeyPath(keyPath: NSString | string): any;
  setValue_forKeyPath(value: any | null, keyPath: NSString | string): void;
  validateValue_forKeyPath_error(ioValue: any, inKeyPath: NSString | string, outError: NSError): boolean;
  mutableArrayValueForKeyPath(keyPath: NSString | string): NSMutableArray<any>;
  mutableOrderedSetValueForKeyPath(keyPath: NSString | string): NSMutableOrderedSet<any>;
  mutableSetValueForKeyPath(keyPath: NSString | string): NSMutableSet<any>;
  valueForUndefinedKey(key: NSString | string): any;
  setValue_forUndefinedKey(value: any | null, key: NSString | string): void;
  setNilValueForKey(key: NSString | string): void;
  dictionaryWithValuesForKeys(keys: NSArray<any> | any[]): NSDictionary<any, any>;
  setValuesForKeysWithDictionary(keyedValues: NSDictionary<any, any> | {[key: string]: any}): void;
  static useStoredAccessor(): boolean;
  storedValueForKey(key: NSString | string): any;
  takeStoredValue_forKey(value: any | null, key: NSString | string): void;
  takeValue_forKey(value: any | null, key: NSString | string): void;
  takeValue_forKeyPath(value: any | null, keyPath: NSString | string): void;
  handleQueryWithUnboundKey(key: NSString | string): any;
  handleTakeValue_forUnboundKey(value: any | null, key: NSString | string): void;
  unableToSetNilForKey(key: NSString | string): void;
  valuesForKeys(keys: NSArray<any> | any[]): NSDictionary<any, any>;
  takeValuesFromDictionary(properties: NSDictionary<any, any> | {[key: string]: any}): void;
  observeValueForKeyPath_ofObject_change_context(keyPath: NSString | string | null, object: any | null, change: NSDictionary<any, any> | {[key: string]: any} | null, context: void | null): void;
  addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString | string, options: NSKeyValueObservingOptions, context: void | null): void;
  removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString | string, context: void | null): void;
  removeObserver_forKeyPath(observer: NSObject, keyPath: NSString | string): void;
  willChangeValueForKey(key: NSString | string): void;
  didChangeValueForKey(key: NSString | string): void;
  willChange_valuesAtIndexes_forKey(changeKind: NSKeyValueChange, indexes: NSIndexSet, key: NSString | string): void;
  didChange_valuesAtIndexes_forKey(changeKind: NSKeyValueChange, indexes: NSIndexSet, key: NSString | string): void;
  willChangeValueForKey_withSetMutation_usingObjects(key: NSString | string, mutationKind: NSKeyValueSetMutationKind, objects: NSSet<any>): void;
  didChangeValueForKey_withSetMutation_usingObjects(key: NSString | string, mutationKind: NSKeyValueSetMutationKind, objects: NSSet<any>): void;
  static keyPathsForValuesAffectingValueForKey(key: NSString | string): NSSet<any>;
  static automaticallyNotifiesObserversForKey(key: NSString | string): boolean;
  static setKeys_triggerChangeNotificationsForDependentKey(keys: NSArray<any> | any[], dependentKey: NSString | string): void;
  replacementObjectForKeyedArchiver(archiver: NSKeyedArchiver): any;
  static classFallbacksForKeyedArchiver(): NSArray<any>;
  static classForKeyedUnarchiver(): any;
  static version(): NSInteger;
  static setVersion(aVersion: NSInteger): void;
  replacementObjectForCoder(aCoder: NSCoder): any;
  awakeAfterUsingCoder_NS_REPLACES_RECEIVER(aDecoder: NSCoder): any;
  scriptingValueForSpecifier(objectSpecifier: NSScriptObjectSpecifier): any;
  copyScriptingValue_forKey_withProperties(value: any, key: NSString | string, properties: NSDictionary<any, any> | {[key: string]: any}): any;
  newScriptingObjectOfClass_forValueForKey_withContentsValue_properties(objectClass: any, key: NSString | string, contentsValue: any | null, properties: NSDictionary<any, any> | {[key: string]: any}): any;
  replacementObjectForPortCoder(coder: NSPortCoder): any;
  performSelector_withObject_afterDelay_inModes(aSelector: string, anArgument: any | null, delay: NSTimeInterval, modes: NSArray<any> | any[]): void;
  performSelector_withObject_afterDelay(aSelector: string, anArgument: any | null, delay: NSTimeInterval): void;
  static cancelPreviousPerformRequestsWithTarget_selector_object(aTarget: any, aSelector: string, anArgument: any | null): void;
  static cancelPreviousPerformRequestsWithTarget(aTarget: any): void;
  valueAtIndex_inPropertyWithKey(index: NSUInteger, key: NSString | string): any;
  valueWithName_inPropertyWithKey(name: NSString | string, key: NSString | string): any;
  valueWithUniqueID_inPropertyWithKey(uniqueID: any, key: NSString | string): any;
  insertValue_atIndex_inPropertyWithKey(value: any, index: NSUInteger, key: NSString | string): void;
  removeValueAtIndex_fromPropertyWithKey(index: NSUInteger, key: NSString | string): void;
  replaceValueAtIndex_inPropertyWithKey_withValue(index: NSUInteger, key: NSString | string, value: any): void;
  insertValue_inPropertyWithKey(value: any, key: NSString | string): void;
  coerceValue_forKey(value: any | null, key: NSString | string): any;
  indicesOfObjectsByEvaluatingObjectSpecifier(specifier: NSScriptObjectSpecifier): NSArray<any>;
  isEqualTo(object: any | null): boolean;
  isLessThanOrEqualTo(object: any | null): boolean;
  isLessThan(object: any | null): boolean;
  isGreaterThanOrEqualTo(object: any | null): boolean;
  isGreaterThan(object: any | null): boolean;
  isNotEqualTo(object: any | null): boolean;
  doesContain(object: any): boolean;
  isLike(object: NSString | string): boolean;
  isCaseInsensitiveLike(object: NSString | string): boolean;
  scriptingIsEqualTo(object: any): boolean;
  scriptingIsLessThanOrEqualTo(object: any): boolean;
  scriptingIsLessThan(object: any): boolean;
  scriptingIsGreaterThanOrEqualTo(object: any): boolean;
  scriptingIsGreaterThan(object: any): boolean;
  scriptingBeginsWith(object: any): boolean;
  scriptingEndsWith(object: any): boolean;
  scriptingContains(object: any): boolean;
  performSelectorOnMainThread_withObject_waitUntilDone_modes(aSelector: string, arg: any | null, wait: boolean, array: NSArray<any> | any[] | null): void;
  performSelectorOnMainThread_withObject_waitUntilDone(aSelector: string, arg: any | null, wait: boolean): void;
  performSelector_onThread_withObject_waitUntilDone_modes(aSelector: string, thr: NSThread, arg: any | null, wait: boolean, array: NSArray<any> | any[] | null): void;
  performSelector_onThread_withObject_waitUntilDone(aSelector: string, thr: NSThread, arg: any | null, wait: boolean): void;
  performSelectorInBackground_withObject(aSelector: string, arg: any | null): void;
  URL_resourceDataDidBecomeAvailable(sender: NSURL, newBytes: NSData): void;
  URLResourceDidFinishLoading(sender: NSURL): void;
  URLResourceDidCancelLoading(sender: NSURL): void;
  URL_resourceDidFailLoadingWithReason(sender: NSURL, reason: NSString | string): void;
  accessibilityIsIgnored(): boolean;
  accessibilityHitTest(point: NSPoint): any;
  accessibilityIndexOfChild(child: any): NSUInteger;
  accessibilityArrayAttributeCount(attribute: NSAccessibilityAttributeName): NSUInteger;
  accessibilityArrayAttributeValues_index_maxCount(attribute: NSAccessibilityAttributeName, index: NSUInteger, maxCount: NSUInteger): NSArray<any>;
  application_delegateHandlesKey(sender: NSApplication, key: NSString | string): boolean;
  changeColor(sender: any | null): void;
  controlTextDidBeginEditing(obj: NSNotification): void;
  controlTextDidEndEditing(obj: NSNotification): void;
  controlTextDidChange(obj: NSNotification): void;
  namesOfPromisedFilesDroppedAtDestination(dropDestination: NSURL): NSArray<any>;
  draggingSourceOperationMaskForLocal(flag: boolean): NSDragOperation;
  draggedImage_beganAt(image: NSImage, screenPoint: NSPoint): void;
  draggedImage_endedAt_operation(image: NSImage, screenPoint: NSPoint, operation: NSDragOperation): void;
  draggedImage_movedTo(image: NSImage, screenPoint: NSPoint): void;
  ignoreModifierKeysWhileDragging(): boolean;
  draggedImage_endedAt_deposited_DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER(image: NSImage, screenPoint: NSPoint, flag: boolean): void;
  fontManager_willIncludeFont(sender: any, fontName: NSString | string): boolean;
  changeFont(sender: any | null): void;
  validModesForFontPanel(fontPanel: NSFontPanel): NSFontPanelModeMask;
  static exposeBinding(binding: NSBindingName): void;
  valueClassForBinding(binding: NSBindingName): any;
  bind_toObject_withKeyPath_options(binding: NSBindingName, observable: any, keyPath: NSString | string, options: NSDictionary<any, any> | {[key: string]: any} | null): void;
  unbind(binding: NSBindingName): void;
  infoForBinding(binding: NSBindingName): NSDictionary<any, any>;
  optionDescriptionsForBinding(binding: NSBindingName): NSArray<any>;
  static setDefaultPlaceholder_forMarker_withBinding(placeholder: any | null, marker: any | null, binding: NSBindingName): void;
  static defaultPlaceholderForMarker_withBinding(marker: any | null, binding: NSBindingName): any;
  objectDidBeginEditing(editor: any): void;
  objectDidEndEditing(editor: any): void;
  discardEditing(): void;
  commitEditing(): boolean;
  commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: any | null, didCommitSelector: string | null, contextInfo: void | null): void;
  commitEditingAndReturnError(error: NSError): boolean;
  validateMenuItem(menuItem: NSMenuItem): boolean;
  awakeFromNib(): void;
  prepareForInterfaceBuilder(): void;
  pasteboard_provideDataForType(sender: NSPasteboard, type: NSPasteboardType): void;
  pasteboardChangedOwner(sender: NSPasteboard): void;
  panel_isValidFilename(sender: any, filename: NSString | string): boolean;
  panel_directoryDidChange(sender: any, path: NSString | string): void;
  panel_compareFilename_with_caseSensitive(sender: any, name1: NSString | string, name2: NSString | string, caseSensitive: boolean): NSComparisonResult;
  panel_shouldShowFilename(sender: any, filename: NSString | string): boolean;
  tableView_writeRows_toPasteboard(tableView: NSTableView, rows: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  textStorageWillProcessEditing(notification: NSNotification): void;
  textStorageDidProcessEditing(notification: NSNotification): void;
  validateToolbarItem(item: NSToolbarItem): boolean;
  layer_shouldInheritContentsScale_fromWindow(layer: CALayer, newScale: CGFloat, window: NSWindow): boolean;
  view_stringForToolTip_point_userData(view: NSView, tag: NSToolTipTag, point: NSPoint, data: void | null): NSString;
  changeKey_inBlock(aKey: NSString | string, block: BCVoidBlock): void;
  executeAsBlock(): void;
  runningOSVersion_bc_minorVersion(majorVersion: NSInteger, minorVersion: NSInteger): boolean;
  runningSierra_bc(): boolean;
  runningElCapitan_bc(): boolean;
  runningYosemite_bc(): boolean;
  mutableCopyDeep(): any;
  outlineView_shouldShowDisclosureTriangleForItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_handleKeyEvent(outlineView: NSOutlineView, anEvent: NSEvent): boolean;
  outlineView_deleteItem(outlineView: NSOutlineView, anItem: any): void;
  tableView_handleKeyEvent(tableView: NSTableView, anEvent: NSEvent): boolean;
  tableViewPoofEffect(tv: NSTableView): boolean;
  coderSafeVersion_bc(): NSObject;
  addObserver_forKeyPaths_options_context(anObserver: NSObject, keyPaths: NSArray<any> | any[], options: NSKeyValueObservingOptions, context: void): void;
  removeObserver_forKeyPaths(anObserver: NSObject, keyPaths: NSArray<any> | any[]): void;
  setCOSJSTargetFunction(jsFunction: MOJavaScriptObject | Function): void;
  coscript_hadError_onLineNumber_atSourceURL(coscript: any, error: NSString | string, lineNumber: NSInteger, url: any): void;
  static mo_swizzleAdditions(): void;
  static mo_mocha(): MOClassDescription;
  static isSelectorExcludedFromMochaScript(selector: string): boolean;
  static selectorForMochaPropertyName(propertyName: NSString | string): string;
  finalizeForMochaScript(): void;
  objectForIndexedSubscript(idx: NSUInteger): any;
  setObject_forIndexedSubscript(obj: any, idx: NSUInteger): void;
  // objectForKeyedSubscript(key: NSString | string): any;
  // setObject_forKeyedSubscript(obj: any, key: NSString | string): void;
  shutdown(): void;
  JSValueForObject(object: any): JSValueRef;
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  initWithUnarchiver_migratingFrom_toVersion<T extends NSObject>(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): T;
  immutableModelObject(): any;
  copyWithOptions(options: MSModelCopyOptions): any;
  hasDefaultValues(): boolean;
  propertiesAreEqual(object: any): boolean;
  parentObject(): any;
  setParentObject(parentObject: MSModelObjectCommon): void;
  breakConnectionWith(parent: MSModelObjectCommon): void;
  mapTreeWithLeafTransformBlock(block: Block): any;
  safeCastToClass(classToCastTo: any): any;
  drawContentForButton_inRect(button: MSPresetPickerPresetButton, rect: NSRect): void;
  removePresetForButton(menuItem: NSMenuItem): void;
  shouldShowMenuForButton(button: MSPresetPickerPresetButton): boolean;
  removePresetWithTag(tag: NSInteger): void;

  classForArchiver(): any;
  setClassForArchiver(classForArchiver: any): void;
  classDescription(): NSClassDescription;
  setClassDescription(classDescription: NSClassDescription): void;
  attributeKeys(): NSArray<any>;
  setAttributeKeys(attributeKeys: NSArray<any> | any[]): void;
  toOneRelationshipKeys(): NSArray<any>;
  setToOneRelationshipKeys(toOneRelationshipKeys: NSArray<any> | any[]): void;
  toManyRelationshipKeys(): NSArray<any>;
  setToManyRelationshipKeys(toManyRelationshipKeys: NSArray<any> | any[]): void;
  static accessInstanceVariablesDirectly(): boolean;
  static setAccessInstanceVariablesDirectly(accessInstanceVariablesDirectly: boolean): void;
  observationInfo(): void;
  setObservationInfo(observationInfo: void): void;
  classForKeyedArchiver(): any;
  setClassForKeyedArchiver(classForKeyedArchiver: any): void;
  classForCoder(): any;
  setClassForCoder(classForCoder: any): void;
  autoContentAccessingProxy(): any;
  setAutoContentAccessingProxy(autoContentAccessingProxy: any): void;
  scriptingProperties(): NSDictionary<any, any>;
  setScriptingProperties(scriptingProperties: NSDictionary<any, any> | {[key: string]: any}): void;
  classForPortCoder(): any;
  setClassForPortCoder(classForPortCoder: any): void;
  classCode(): number;
  setClassCode(classCode: number): void;
  className(): NSString;
  setClassName(className: NSString | string): void;
  objectSpecifier(): NSScriptObjectSpecifier;
  setObjectSpecifier(objectSpecifier: NSScriptObjectSpecifier): void;
  accessibilityFocusedUIElement(): any;
  setAccessibilityFocusedUIElement(accessibilityFocusedUIElement: any): void;
  accessibilityNotifiesWhenDestroyed(): boolean;
  setAccessibilityNotifiesWhenDestroyed(accessibilityNotifiesWhenDestroyed: boolean): void;
  exposedBindings(): NSArray<any>;
  setExposedBindings(exposedBindings: NSArray<any> | any[]): void;
}

declare class NSArray<ObjectType> extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration {
  [key: number]: ObjectType | Function;
  [key: string]: ObjectType | Function;

  objectAtIndex(index: NSUInteger): ObjectType;
  init<T extends NSArray<ObjectType>>(): T;
  initWithObjects_count<T extends NSArray<ObjectType>>(objects: ObjectType[], cnt: NSUInteger): T;
  initWithCoder<T extends NSArray<ObjectType>>(aDecoder: NSCoder): T;
  arrayByAddingObject(anObject: ObjectType): NSArray<any>;
  arrayByAddingObjectsFromArray(otherArray: NSArray<any> | any[]): NSArray<any>;
  componentsJoinedByString(separator: NSString | string): NSString;
  containsObject(anObject: ObjectType): boolean;
  descriptionWithLocale(locale: any | null): NSString;
  descriptionWithLocale_indent(locale: any | null, level: NSUInteger): NSString;
  firstObjectCommonWithArray(otherArray: NSArray<any> | any[]): ObjectType;
  indexOfObject(anObject: ObjectType): NSUInteger;
  indexOfObject_inRange(anObject: ObjectType, range: NSRange): NSUInteger;
  indexOfObjectIdenticalTo(anObject: ObjectType): NSUInteger;
  indexOfObjectIdenticalTo_inRange(anObject: ObjectType, range: NSRange): NSUInteger;
  isEqualToArray(otherArray: NSArray<any> | any[]): boolean;
  objectEnumerator(): NSEnumerator<any>;
  reverseObjectEnumerator(): NSEnumerator<any>;
  sortedArrayUsingSelector(comparator: string): NSArray<any>;
  subarrayWithRange(range: NSRange): NSArray<any>;
  writeToURL_error(url: NSURL, error: NSError): boolean;
  makeObjectsPerformSelector(aSelector: string): void;
  makeObjectsPerformSelector_withObject(aSelector: string, argument: any | null): void;
  objectsAtIndexes(indexes: NSIndexSet): NSArray<any>;
  objectAtIndexedSubscript(idx: NSUInteger): ObjectType;
  enumerateObjectsUsingBlock(block: Block): void;
  enumerateObjectsWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  enumerateObjectsAtIndexes_options_usingBlock(s: NSIndexSet, opts: NSEnumerationOptions, block: Block): void;
  indexOfObjectPassingTest(predicate: Block): NSUInteger;
  indexOfObjectWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSUInteger;
  indexOfObjectAtIndexes_options_passingTest(s: NSIndexSet, opts: NSEnumerationOptions, predicate: Block): NSUInteger;
  indexesOfObjectsPassingTest(predicate: Block): NSIndexSet;
  indexesOfObjectsWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSIndexSet;
  indexesOfObjectsAtIndexes_options_passingTest(s: NSIndexSet, opts: NSEnumerationOptions, predicate: Block): NSIndexSet;
  sortedArrayUsingComparator(cmptr: NSComparator): NSArray<any>;
  sortedArrayWithOptions_usingComparator(opts: NSSortOptions, cmptr: NSComparator): NSArray<any>;
  indexOfObject_inSortedRange_options_usingComparator(obj: ObjectType, r: NSRange, opts: NSBinarySearchingOptions, cmp: NSComparator): NSUInteger;
  static array<ObjectType>(): NSArray<ObjectType>;
  static arrayWithObject<ObjectType>(anObject: ObjectType): NSArray<ObjectType>;
  static arrayWithObjects_count<ObjectType>(objects: ObjectType[], cnt: NSUInteger): NSArray<ObjectType>;
  static arrayWithObjects<ObjectType>(firstObj: ObjectType, ...args: any[]): NSArray<ObjectType>;
  static arrayWithArray<ObjectType>(array: NSArray<any> | any[]): NSArray<ObjectType>;
  initWithObjects<T extends NSArray<ObjectType>>(firstObj: ObjectType, ...args: any[]): T;
  initWithArray<T extends NSArray<ObjectType>>(array: NSArray<any> | any[]): T;
  initWithArray_copyItems<T extends NSArray<ObjectType>>(array: NSArray<any> | any[], flag: boolean): T;
  initWithContentsOfURL_error<T extends NSArray<ObjectType>>(url: NSURL, error: NSError): T;
  static arrayWithContentsOfURL_error(url: NSURL, error: NSError): NSArray<any>;
  getObjects(objects: ObjectType[]): void;
  static arrayWithContentsOfFile(path: NSString | string): NSArray<any>;
  static arrayWithContentsOfURL(url: NSURL): NSArray<any>;
  initWithContentsOfFile<T extends NSArray<ObjectType>>(path: NSString | string): T;
  initWithContentsOfURL<T extends NSArray<ObjectType>>(url: NSURL): T;
  writeToFile_atomically(path: NSString | string, useAuxiliaryFile: boolean): boolean;
  writeToURL_atomically(url: NSURL, atomically: boolean): boolean;
  valueForKey(key: NSString | string): any;
  setValue_forKey(value: any | null, key: NSString | string): void;
  addObserver_toObjectsAtIndexes_forKeyPath_options_context(observer: NSObject, indexes: NSIndexSet, keyPath: NSString | string, options: NSKeyValueObservingOptions, context: void | null): void;
  removeObserver_fromObjectsAtIndexes_forKeyPath_context(observer: NSObject, indexes: NSIndexSet, keyPath: NSString | string, context: void | null): void;
  removeObserver_fromObjectsAtIndexes_forKeyPath(observer: NSObject, indexes: NSIndexSet, keyPath: NSString | string): void;
  addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString | string, options: NSKeyValueObservingOptions, context: void | null): void;
  removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString | string, context: void | null): void;
  removeObserver_forKeyPath(observer: NSObject, keyPath: NSString | string): void;
  pathsMatchingExtensions(filterTypes: NSArray<any> | any[]): NSArray<any>;
  filteredArrayUsingPredicate(predicate: NSPredicate): NSArray<any>;
  sortedArrayUsingDescriptors(sortDescriptors: NSArray<any> | any[]): NSArray<any>;
  front(): NSArray<any>;
  tail(): NSArray<any>;
  arrayByRemovingLastObject(): NSArray<any>;
  enumerateTailUsingBlock(block: Block): void;
  reversedArray(): NSArray<any>;
  map(block: Block): NSArray<any>;
  flatMap(block: Block): NSArray<any>;
  mapWithIndex(block: Block): NSArray<any>;
  enumerate(block: Block): void;
  enumerateWithIndex(block: Block): void;
  filter(block: Block): NSArray<any>;
  containsObjectPassingTest(predicate: Block): boolean;
  firstObjectPassingTest(predicate: Block): ObjectType;
  indexOfFirstObjectPassingTest(predicate: Block): NSUInteger;
  filterWithIndex(block: Block): NSArray<any>;
  filteredByObjectsOfClass(aClass: any): NSArray<any>;
  containsObjectOfClass(aClass: any): boolean;
  containsOnlyObjectsOfClass(aClass: any): boolean;
  firstObjectOfClass(aClass: any): any;
  sum(block: BCSumBlock): CGFloat;
  static arrayWithCapacity_fill(count: NSUInteger, block: Block): any;
  arrayByRemovingNull(): NSArray<any>;
  copyDeep(): any;
  sortedArray(): NSArray<any>;
  sortedArrayUsingKey(key: NSString | string): NSArray<any>;
  sortedArrayUsingKey_selector(key: NSString | string, action: string): NSArray<any>;
  shuffledArray(): NSArray<any>;
  arrayByRemovingObject(anObject: any): NSArray<any>;
  arrayByRemovingObjects(objects: NSArray<any> | any[]): NSArray<any>;
  arrayByAddingObjects(firstObj: any, ...args: any[]): NSArray<any>;
  dictionaryByIndexingObjectForKey(aKey: NSString | string): NSDictionary<any, any>;
  static arrayByMergingArrays(array: NSArray<any> | any[]): NSArray<any>;
  isValidIndex(anIndex: NSUInteger): boolean;
  objectAtIndexOrNil(index: NSUInteger): ObjectType;
  subArrayToIndex(anIndex: NSUInteger): NSArray<any>;
  uniqueObjects(): NSArray<any>;
  rotateTwoDimensionalArray(): NSArray<any>;
  indexOfSubArray(array: NSArray<any> | any[]): NSUInteger;
  mapWithMaxConcurrencyCount_usingBlock_completionBlock(maxConcurrentCount: NSInteger, block: Block, completionBlock: BCConcurrentMapCompletionBlock): void;
  mo_objectForIndexedSubscript(idx: NSUInteger): any;
  cloudObjectsOfType_parentObject(type: any, parent: SCKObject | null): NSArray<any>;
  sck_flatMap(transform: Block): NSArray<any>;
  smk_map(mappingBlock: Block): NSArray<any>;
  length(): NSUInteger;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  firstObject(): ObjectType;
  setFirstObject(firstObject: ObjectType): void;
  lastObject(): ObjectType;
  setLastObject(lastObject: ObjectType): void;
  sortedArrayHint(): NSData;
  setSortedArrayHint(sortedArrayHint: NSData): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableArray<ObjectType> extends NSArray<ObjectType> {
  addObject(anObject: ObjectType): void;
  insertObject_atIndex(anObject: ObjectType, index: NSUInteger): void;
  removeLastObject(): void;
  removeObjectAtIndex(index: NSUInteger): void;
  replaceObjectAtIndex_withObject(index: NSUInteger, anObject: ObjectType): void;
  // init<T extends NSMutableArray<ObjectType>>(): T;
  initWithCapacity<T extends NSMutableArray<ObjectType>>(numItems: NSUInteger): T;
  // initWithCoder<T extends NSMutableArray<ObjectType>>(aDecoder: NSCoder): T;
  addObjectsFromArray(otherArray: NSArray<any> | any[]): void;
  exchangeObjectAtIndex_withObjectAtIndex(idx1: NSUInteger, idx2: NSUInteger): void;
  removeAllObjects(): void;
  removeObject_inRange(anObject: ObjectType, range: NSRange): void;
  removeObject(anObject: ObjectType): void;
  removeObjectIdenticalTo_inRange(anObject: ObjectType, range: NSRange): void;
  removeObjectIdenticalTo(anObject: ObjectType): void;
  removeObjectsFromIndices_numIndices(indices: NSUInteger, cnt: NSUInteger): void;
  removeObjectsInArray(otherArray: NSArray<any> | any[]): void;
  removeObjectsInRange(range: NSRange): void;
  replaceObjectsInRange_withObjectsFromArray_range(range: NSRange, otherArray: NSArray<any> | any[], otherRange: NSRange): void;
  replaceObjectsInRange_withObjectsFromArray(range: NSRange, otherArray: NSArray<any> | any[]): void;
  setArray(otherArray: NSArray<any> | any[]): void;
  sortUsingSelector(comparator: string): void;
  insertObjects_atIndexes(objects: NSArray<any> | any[], indexes: NSIndexSet): void;
  removeObjectsAtIndexes(indexes: NSIndexSet): void;
  replaceObjectsAtIndexes_withObjects(indexes: NSIndexSet, objects: NSArray<any> | any[]): void;
  setObject_atIndexedSubscript(obj: ObjectType, idx: NSUInteger): void;
  sortUsingComparator(cmptr: NSComparator): void;
  sortWithOptions_usingComparator(opts: NSSortOptions, cmptr: NSComparator): void;
  static arrayWithCapacity<ObjectType>(numItems: NSUInteger): NSMutableArray<ObjectType>;
  static arrayWithContentsOfFile(path: NSString | string): NSMutableArray<any>;
  static arrayWithContentsOfURL(url: NSURL): NSMutableArray<any>;
  // initWithContentsOfFile<T extends NSMutableArray<ObjectType>>(path: NSString | string): T;
  // initWithContentsOfURL<T extends NSMutableArray<ObjectType>>(url: NSURL): T;
  filterUsingPredicate(predicate: NSPredicate): void;
  sortUsingDescriptors(sortDescriptors: NSArray<any> | any[]): void;
  removeObjectsPassingTest(predicate: Block): void;
  static arrayWithCapacity_fill(count: NSUInteger, block: Block): any;
  addObjectIfNotNil(obj: any): void;
  removeFirstObject(): void;
  replaceObject_withObject(obj1: any, obj2: any): void;
  mo_setObject_forIndexedSubscript(obj: any, idx: NSUInteger): void;
  indexOfAttributeWithName(name: NSString | string): NSUInteger;
  addAttributeForID(identifier: NSString | string): void;
  addAttributeWithName_stringValue(name: NSString | string, value: NSString | string): void;
  addAttributeWithName_pixelValue(name: NSString | string, value: CGFloat): void;
  addAttributeWithName_numberValue(name: NSString | string, value: CGFloat): void;
  addAttributeWithName_percentageValue(name: NSString | string, value: CGFloat): void;
  addAttributeWithName_percentageFractionalValue(name: NSString | string, value: CGFloat): void;
  removeAttributeWithName(name: NSString | string): void;
}

declare enum NSBinarySearchingOptions {
  NSBinarySearchingFirstEqual,
  NSBinarySearchingLastEqual,
  NSBinarySearchingInsertionIndex,
}

declare class NSAttributedString extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding {
  attributesAtIndex_effectiveRange(location: NSUInteger, range: NSRangePointer | null): NSDictionary<any, any>;
  attribute_atIndex_effectiveRange(attrName: NSAttributedStringKey, location: NSUInteger, range: NSRangePointer | null): any;
  attributedSubstringFromRange(range: NSRange): NSAttributedString;
  attributesAtIndex_longestEffectiveRange_inRange(location: NSUInteger, range: NSRangePointer | null, rangeLimit: NSRange): NSDictionary<any, any>;
  attribute_atIndex_longestEffectiveRange_inRange(attrName: NSAttributedStringKey, location: NSUInteger, range: NSRangePointer | null, rangeLimit: NSRange): any;
  isEqualToAttributedString(other: NSAttributedString): boolean;
  initWithString<T extends NSAttributedString>(str: NSString | string): T;
  initWithString_attributes<T extends NSAttributedString>(str: NSString | string, attrs: NSDictionary<any, any> | {[key: string]: any} | null): T;
  initWithAttributedString<T extends NSAttributedString>(attrStr: NSAttributedString): T;
  enumerateAttributesInRange_options_usingBlock(enumerationRange: NSRange, opts: NSAttributedStringEnumerationOptions, block: Block): void;
  enumerateAttribute_inRange_options_usingBlock(attrName: NSAttributedStringKey, enumerationRange: NSRange, opts: NSAttributedStringEnumerationOptions, block: Block): void;
  initWithURL_options_documentAttributes_error<T extends NSAttributedString>(url: NSURL, options: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): T;
  initWithData_options_documentAttributes_error<T extends NSAttributedString>(data: NSData, options: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): T;
  dataFromRange_documentAttributes_error(range: NSRange, dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): NSData;
  fileWrapperFromRange_documentAttributes_error(range: NSRange, dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): NSFileWrapper;
  initWithRTF_documentAttributes<T extends NSAttributedString>(data: NSData, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithRTFD_documentAttributes<T extends NSAttributedString>(data: NSData, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithHTML_documentAttributes<T extends NSAttributedString>(data: NSData, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithHTML_baseURL_documentAttributes<T extends NSAttributedString>(data: NSData, base: NSURL, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithDocFormat_documentAttributes<T extends NSAttributedString>(data: NSData, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithHTML_options_documentAttributes<T extends NSAttributedString>(data: NSData, options: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithRTFDFileWrapper_documentAttributes<T extends NSAttributedString>(wrapper: NSFileWrapper, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  RTFFromRange_documentAttributes(range: NSRange, dict: NSDictionary<any, any> | {[key: string]: any}): NSData;
  RTFDFromRange_documentAttributes(range: NSRange, dict: NSDictionary<any, any> | {[key: string]: any}): NSData;
  RTFDFileWrapperFromRange_documentAttributes(range: NSRange, dict: NSDictionary<any, any> | {[key: string]: any}): NSFileWrapper;
  docFormatFromRange_documentAttributes(range: NSRange, dict: NSDictionary<any, any> | {[key: string]: any}): NSData;
  fontAttributesInRange(range: NSRange): NSDictionary<any, any>;
  rulerAttributesInRange(range: NSRange): NSDictionary<any, any>;
  containsAttachmentsInRange(range: NSRange): boolean;
  lineBreakBeforeIndex_withinRange(location: NSUInteger, aRange: NSRange): NSUInteger;
  lineBreakByHyphenatingBeforeIndex_withinRange(location: NSUInteger, aRange: NSRange): NSUInteger;
  doubleClickAtIndex(location: NSUInteger): NSRange;
  nextWordFromIndex_forward(location: NSUInteger, isForward: boolean): NSUInteger;
  rangeOfTextBlock_atIndex(block: NSTextBlock, location: NSUInteger): NSRange;
  rangeOfTextTable_atIndex(table: NSTextTable, location: NSUInteger): NSRange;
  rangeOfTextList_atIndex(list: NSTextList, location: NSUInteger): NSRange;
  itemNumberInTextList_atIndex(list: NSTextList, location: NSUInteger): NSInteger;
  static textFileTypes(): NSArray<any>;
  static textPasteboardTypes(): NSArray<any>;
  static textUnfilteredFileTypes(): NSArray<any>;
  static textUnfilteredPasteboardTypes(): NSArray<any>;
  initWithURL_documentAttributes<T extends NSAttributedString>(url: NSURL, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithPath_documentAttributes<T extends NSAttributedString>(path: NSString | string, dict: NSDictionary<any, any> | {[key: string]: any}): T;
  URLAtIndex_effectiveRange(location: NSUInteger, effectiveRange: NSRangePointer): NSURL;
  size(): NSSize;
  drawAtPoint(point: NSPoint): void;
  drawInRect(rect: NSRect): void;
  drawWithRect_options_context(rect: NSRect, options: NSStringDrawingOptions, context: NSStringDrawingContext | null): void;
  boundingRectWithSize_options_context(size: NSSize, options: NSStringDrawingOptions, context: NSStringDrawingContext | null): NSRect;
  drawWithRect_options(rect: NSRect, options: NSStringDrawingOptions): void;
  boundingRectWithSize_options(size: NSSize, options: NSStringDrawingOptions): NSRect;
  static attributedStringWithAttachment(attachment: NSTextAttachment): NSAttributedString;
  static attributedStringWithString_attributes(aString: NSString | string, attributes: NSDictionary<any, any> | {[key: string]: any}): NSAttributedString;
  static attributedStringWithString_font(aString: NSString | string, font: NSFont): NSAttributedString;
  heightWithFont_maxWidth(myFont: NSFont, myWidth: CGFloat): CGFloat;
  attributedStringWithHighlightColor(highlightColor: NSColor): NSAttributedString;
  attributeOrNil_atIndex(attrName: NSString | string, location: NSUInteger): any;
  attributesMatch(other: NSAttributedString): boolean;
  attributesMatch_comparison(other: NSAttributedString, compareBlock: CHStringAttributesCompareBlock): boolean;
  standardAttributedStringWithDocumentColorSpace(colorSpace: NSColorSpace): NSAttributedString;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  string(): NSString;
  setString(string: NSString | string): void;
  length(): NSUInteger;
  setLength(length: NSUInteger): void;
  static textTypes(): NSArray<any>;
  static setTextTypes(textTypes: NSArray<any> | any[]): void;
  static textUnfilteredTypes(): NSArray<any>;
  static setTextUnfilteredTypes(textUnfilteredTypes: NSArray<any> | any[]): void;
  containsAttachments(): boolean;
  setContainsAttachments(containsAttachments: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableAttributedString extends NSAttributedString {
  replaceCharactersInRange_withString(range: NSRange, str: NSString | string): void;
  setAttributes_range(attrs: NSDictionary<any, any> | {[key: string]: any} | null, range: NSRange): void;
  addAttribute_value_range(name: NSAttributedStringKey, value: any, range: NSRange): void;
  addAttributes_range(attrs: NSDictionary<any, any> | {[key: string]: any}, range: NSRange): void;
  removeAttribute_range(name: NSAttributedStringKey, range: NSRange): void;
  replaceCharactersInRange_withAttributedString(range: NSRange, attrString: NSAttributedString): void;
  insertAttributedString_atIndex(attrString: NSAttributedString, loc: NSUInteger): void;
  appendAttributedString(attrString: NSAttributedString): void;
  deleteCharactersInRange(range: NSRange): void;
  setAttributedString(attrString: NSAttributedString): void;
  beginEditing(): void;
  endEditing(): void;
  fixAttributesInRange(range: NSRange): void;
  fixFontAttributeInRange(range: NSRange): void;
  fixParagraphStyleAttributeInRange(range: NSRange): void;
  fixAttachmentAttributeInRange(range: NSRange): void;
  readFromURL_options_documentAttributes_error(url: NSURL, opts: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): boolean;
  readFromData_options_documentAttributes_error(data: NSData, opts: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): boolean;
  superscriptRange(range: NSRange): void;
  subscriptRange(range: NSRange): void;
  unscriptRange(range: NSRange): void;
  applyFontTraits_range(traitMask: NSFontTraitMask, range: NSRange): void;
  setAlignment_range(alignment: NSTextAlignment, range: NSRange): void;
  setBaseWritingDirection_range(writingDirection: NSWritingDirection, range: NSRange): void;
  readFromURL_options_documentAttributes(url: NSURL, options: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}): boolean;
  readFromData_options_documentAttributes(data: NSData, options: NSDictionary<any, any> | {[key: string]: any}, dict: NSDictionary<any, any> | {[key: string]: any}): boolean;
  updateAttachmentsFromPath(path: NSString | string): void;
  appendString_attributes(string: NSString | string, attributes: NSDictionary<any, any> | {[key: string]: any}): void;
  currentListStyle(): NSTextList;
  updateListStyle(newList: NSTextList): void;
  updateListFrom_toList(oldList: NSTextList, newList: NSTextList): void;
  removeUnsupportedAttributes(): void;

  mutableString(): NSMutableString;
  setMutableString(mutableString: NSMutableString): void;
}

declare type NSAttributedStringKey = NSString

declare enum NSAttributedStringEnumerationOptions {
  NSAttributedStringEnumerationReverse,
  NSAttributedStringEnumerationLongestEffectiveRangeNotRequired,
}

declare class NSAutoreleasePool extends NSObject {
  addObject(anObject: any): void;
  drain(): void;
  static showPools(): void;
}

declare class NSBackgroundActivityScheduler extends NSObject {
  initWithIdentifier<T extends NSBackgroundActivityScheduler>(identifier: NSString | string): T;
  scheduleWithBlock(block: Block): void;
  invalidate(): void;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  qualityOfService(): NSQualityOfService;
  setQualityOfService(qualityOfService: NSQualityOfService): void;
  repeats(): boolean;
  setRepeats(repeats: boolean): void;
  interval(): NSTimeInterval;
  setInterval(interval: NSTimeInterval): void;
  tolerance(): NSTimeInterval;
  setTolerance(tolerance: NSTimeInterval): void;
  shouldDefer(): boolean;
  setShouldDefer(shouldDefer: boolean): void;
}

declare enum NSBackgroundActivityResult {
  NSBackgroundActivityResultFinished = 1,
  NSBackgroundActivityResultDeferred = 2,
}

declare class NSBundle extends NSObject {
  static bundleWithPath(path: NSString | string): NSBundle;
  initWithPath<T extends NSBundle>(path: NSString | string): T;
  static bundleWithURL(url: NSURL): NSBundle;
  initWithURL<T extends NSBundle>(url: NSURL): T;
  static bundleForClass(aClass: any): NSBundle;
  static bundleWithIdentifier(identifier: NSString | string): NSBundle;
  load(): boolean;
  unload(): boolean;
  preflightAndReturnError(error: NSError): boolean;
  loadAndReturnError(error: NSError): boolean;
  URLForAuxiliaryExecutable(executableName: NSString | string): NSURL;
  pathForAuxiliaryExecutable(executableName: NSString | string): NSString;
  static URLForResource_withExtension_subdirectory_inBundleWithURL(name: NSString | string | null, ext: NSString | string | null, subpath: NSString | string | null, bundleURL: NSURL): NSURL;
  static URLsForResourcesWithExtension_subdirectory_inBundleWithURL(ext: NSString | string | null, subpath: NSString | string | null, bundleURL: NSURL): NSArray<any>;
  URLForResource_withExtension(name: NSString | string | null, ext: NSString | string | null): NSURL;
  URLForResource_withExtension_subdirectory(name: NSString | string | null, ext: NSString | string | null, subpath: NSString | string | null): NSURL;
  URLForResource_withExtension_subdirectory_localization(name: NSString | string | null, ext: NSString | string | null, subpath: NSString | string | null, localizationName: NSString | string | null): NSURL;
  URLsForResourcesWithExtension_subdirectory(ext: NSString | string | null, subpath: NSString | string | null): NSArray<any>;
  URLsForResourcesWithExtension_subdirectory_localization(ext: NSString | string | null, subpath: NSString | string | null, localizationName: NSString | string | null): NSArray<any>;
  pathForResource_ofType_inDirectory(name: NSString | string | null, ext: NSString | string | null, subpath: NSString | string | null): NSString;
  pathsForResourcesOfType_inDirectory(ext: NSString | string | null, subpath: NSString | string | null): NSArray<any>;
  pathForResource_ofType(name: NSString | string | null, ext: NSString | string | null): NSString;
  pathForResource_ofType_inDirectory_forLocalization(name: NSString | string | null, ext: NSString | string | null, subpath: NSString | string | null, localizationName: NSString | string | null): NSString;
  pathsForResourcesOfType_inDirectory_forLocalization(ext: NSString | string | null, subpath: NSString | string | null, localizationName: NSString | string | null): NSArray<any>;
  objectForInfoDictionaryKey(key: NSString | string): any;
  classNamed(className: NSString | string): any;
  static preferredLocalizationsFromArray(localizationsArray: NSArray<any> | any[]): NSArray<any>;
  static preferredLocalizationsFromArray_forPreferences(localizationsArray: NSArray<any> | any[], preferencesArray: NSArray<any> | any[] | null): NSArray<any>;
  setPreservationPriority_forTags(priority: number, tags: NSSet<any>): void;
  preservationPriorityForTag(tag: NSString | string): number;
  contextHelpForKey(key: NSHelpManagerContextHelpKey): NSAttributedString;
  imageForResource(name: NSImageName): NSImage;
  pathForImageResource(name: NSImageName): NSString;
  URLForImageResource(name: NSImageName): NSURL;
  loadNibNamed_owner_topLevelObjects(nibName: NSNibName, owner: any | null, topLevelObjects: NSArray<any> | any[]): boolean;
  loadNibFile_externalNameTable_withZone(fileName: NSString | string, context: NSDictionary<any, any> | {[key: string]: any}, zone: NSZone): boolean;
  static loadNibNamed_owner(nibName: NSString | string, owner: any): boolean;
  pathForSoundResource(name: NSSoundName): NSString;
  bundleName(): NSString;
  bundleVersion(): NSString;
  bundleBuild(): NSString;
  bundleFullVersion(): NSString;
  bundleCopyright(): NSString;

  static mainBundle(): NSBundle;
  static setMainBundle(mainBundle: NSBundle): void;
  static allBundles(): NSArray<any>;
  static setAllBundles(allBundles: NSArray<any> | any[]): void;
  static allFrameworks(): NSArray<any>;
  static setAllFrameworks(allFrameworks: NSArray<any> | any[]): void;
  loaded(): boolean;
  setLoaded(loaded: boolean): void;
  bundleURL(): NSURL;
  setBundleURL(bundleURL: NSURL): void;
  resourceURL(): NSURL;
  setResourceURL(resourceURL: NSURL): void;
  executableURL(): NSURL;
  setExecutableURL(executableURL: NSURL): void;
  privateFrameworksURL(): NSURL;
  setPrivateFrameworksURL(privateFrameworksURL: NSURL): void;
  sharedFrameworksURL(): NSURL;
  setSharedFrameworksURL(sharedFrameworksURL: NSURL): void;
  sharedSupportURL(): NSURL;
  setSharedSupportURL(sharedSupportURL: NSURL): void;
  builtInPlugInsURL(): NSURL;
  setBuiltInPlugInsURL(builtInPlugInsURL: NSURL): void;
  appStoreReceiptURL(): NSURL;
  setAppStoreReceiptURL(appStoreReceiptURL: NSURL): void;
  bundlePath(): NSString;
  setBundlePath(bundlePath: NSString | string): void;
  resourcePath(): NSString;
  setResourcePath(resourcePath: NSString | string): void;
  executablePath(): NSString;
  setExecutablePath(executablePath: NSString | string): void;
  privateFrameworksPath(): NSString;
  setPrivateFrameworksPath(privateFrameworksPath: NSString | string): void;
  sharedFrameworksPath(): NSString;
  setSharedFrameworksPath(sharedFrameworksPath: NSString | string): void;
  sharedSupportPath(): NSString;
  setSharedSupportPath(sharedSupportPath: NSString | string): void;
  builtInPlugInsPath(): NSString;
  setBuiltInPlugInsPath(builtInPlugInsPath: NSString | string): void;
  bundleIdentifier(): NSString;
  setBundleIdentifier(bundleIdentifier: NSString | string): void;
  infoDictionary(): NSDictionary<any, any>;
  setInfoDictionary(infoDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  localizedInfoDictionary(): NSDictionary<any, any>;
  setLocalizedInfoDictionary(localizedInfoDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  principalClass(): any;
  setPrincipalClass(principalClass: any): void;
  preferredLocalizations(): NSArray<any>;
  setPreferredLocalizations(preferredLocalizations: NSArray<any> | any[]): void;
  localizations(): NSArray<any>;
  setLocalizations(localizations: NSArray<any> | any[]): void;
  developmentLocalization(): NSString;
  setDevelopmentLocalization(developmentLocalization: NSString | string): void;
  executableArchitectures(): NSArray<any>;
  setExecutableArchitectures(executableArchitectures: NSArray<any> | any[]): void;
}

declare class NSString extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding {
  variantFittingPresentationWidth(width: NSInteger): NSString;
  linguisticTagsInRange_scheme_options_orthography_tokenRanges(range: NSRange, scheme: NSLinguisticTagScheme, options: NSLinguisticTaggerOptions, orthography: NSOrthography | null, tokenRanges: NSArray<any> | any[]): NSArray<any>;
  enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock(range: NSRange, scheme: NSLinguisticTagScheme, options: NSLinguisticTaggerOptions, orthography: NSOrthography | null, block: Block): void;
  static pathWithComponents(components: NSArray<any> | any[]): NSString;
  stringByAppendingPathComponent(str: NSString | string): NSString;
  stringByAppendingPathExtension(str: NSString | string): NSString;
  stringsByAppendingPaths(paths: NSArray<any> | any[]): NSArray<any>;
  completePathIntoString_caseSensitive_matchesIntoArray_filterTypes(outputName: NSString | string, flag: boolean, outputArray: NSArray<any> | any[], filterTypes: NSArray<any> | any[] | null): NSUInteger;
  getFileSystemRepresentation_maxLength(cname: string, max: NSUInteger): boolean;
  characterAtIndex(index: NSUInteger): unichar;
  init<T extends NSString>(): T;
  initWithCoder<T extends NSString>(aDecoder: NSCoder): T;
  substringFromIndex(from: NSUInteger): NSString;
  substringToIndex(to: NSUInteger): NSString;
  substringWithRange(range: NSRange): NSString;
  getCharacters_range(buffer: unichar, range: NSRange): void;
  compare(string: NSString | string): NSComparisonResult;
  compare_options(string: NSString | string, mask: NSStringCompareOptions): NSComparisonResult;
  compare_options_range(string: NSString | string, mask: NSStringCompareOptions, rangeOfReceiverToCompare: NSRange): NSComparisonResult;
  compare_options_range_locale(string: NSString | string, mask: NSStringCompareOptions, rangeOfReceiverToCompare: NSRange, locale: any | null): NSComparisonResult;
  caseInsensitiveCompare(string: NSString | string): NSComparisonResult;
  localizedCompare(string: NSString | string): NSComparisonResult;
  localizedCaseInsensitiveCompare(string: NSString | string): NSComparisonResult;
  localizedStandardCompare(string: NSString | string): NSComparisonResult;
  isEqualToString(aString: NSString | string): boolean;
  hasPrefix(str: NSString | string): boolean;
  hasSuffix(str: NSString | string): boolean;
  commonPrefixWithString_options(str: NSString | string, mask: NSStringCompareOptions): NSString;
  containsString(str: NSString | string): boolean;
  localizedCaseInsensitiveContainsString(str: NSString | string): boolean;
  localizedStandardContainsString(str: NSString | string): boolean;
  localizedStandardRangeOfString(str: NSString | string): NSRange;
  rangeOfString(searchString: NSString | string): NSRange;
  rangeOfString_options(searchString: NSString | string, mask: NSStringCompareOptions): NSRange;
  rangeOfString_options_range(searchString: NSString | string, mask: NSStringCompareOptions, rangeOfReceiverToSearch: NSRange): NSRange;
  rangeOfString_options_range_locale(searchString: NSString | string, mask: NSStringCompareOptions, rangeOfReceiverToSearch: NSRange, locale: NSLocale | null): NSRange;
  rangeOfCharacterFromSet(searchSet: NSCharacterSet): NSRange;
  rangeOfCharacterFromSet_options(searchSet: NSCharacterSet, mask: NSStringCompareOptions): NSRange;
  rangeOfCharacterFromSet_options_range(searchSet: NSCharacterSet, mask: NSStringCompareOptions, rangeOfReceiverToSearch: NSRange): NSRange;
  rangeOfComposedCharacterSequenceAtIndex(index: NSUInteger): NSRange;
  rangeOfComposedCharacterSequencesForRange(range: NSRange): NSRange;
  stringByAppendingString(aString: NSString | string): NSString;
  stringByAppendingFormat(format: NSString | string, ...args: any[]): NSString;
  uppercaseStringWithLocale(locale: NSLocale | null): NSString;
  lowercaseStringWithLocale(locale: NSLocale | null): NSString;
  capitalizedStringWithLocale(locale: NSLocale | null): NSString;
  getLineStart_end_contentsEnd_forRange(startPtr: NSUInteger | null, lineEndPtr: NSUInteger | null, contentsEndPtr: NSUInteger | null, range: NSRange): void;
  lineRangeForRange(range: NSRange): NSRange;
  getParagraphStart_end_contentsEnd_forRange(startPtr: NSUInteger | null, parEndPtr: NSUInteger | null, contentsEndPtr: NSUInteger | null, range: NSRange): void;
  paragraphRangeForRange(range: NSRange): NSRange;
  enumerateSubstringsInRange_options_usingBlock(range: NSRange, opts: NSStringEnumerationOptions, block: Block): void;
  enumerateLinesUsingBlock(block: Block): void;
  dataUsingEncoding_allowLossyConversion(encoding: NSStringEncoding, lossy: boolean): NSData;
  dataUsingEncoding(encoding: NSStringEncoding): NSData;
  canBeConvertedToEncoding(encoding: NSStringEncoding): boolean;
  cStringUsingEncoding(encoding: NSStringEncoding): string;
  getCString_maxLength_encoding(buffer: string, maxBufferCount: NSUInteger, encoding: NSStringEncoding): boolean;
  getBytes_maxLength_usedLength_encoding_options_range_remainingRange(buffer: void | null, maxBufferCount: NSUInteger, usedBufferCount: NSUInteger | null, encoding: NSStringEncoding, options: NSStringEncodingConversionOptions, range: NSRange, leftover: NSRangePointer | null): boolean;
  maximumLengthOfBytesUsingEncoding(enc: NSStringEncoding): NSUInteger;
  lengthOfBytesUsingEncoding(enc: NSStringEncoding): NSUInteger;
  static localizedNameOfStringEncoding(encoding: NSStringEncoding): NSString;
  componentsSeparatedByString(separator: NSString | string): NSArray<any>;
  componentsSeparatedByCharactersInSet(separator: NSCharacterSet): NSArray<any>;
  stringByTrimmingCharactersInSet(set: NSCharacterSet): NSString;
  stringByPaddingToLength_withString_startingAtIndex(newLength: NSUInteger, padString: NSString | string, padIndex: NSUInteger): NSString;
  stringByFoldingWithOptions_locale(options: NSStringCompareOptions, locale: NSLocale | null): NSString;
  stringByReplacingOccurrencesOfString_withString_options_range(target: NSString | string, replacement: NSString | string, options: NSStringCompareOptions, searchRange: NSRange): NSString;
  stringByReplacingOccurrencesOfString_withString(target: NSString | string, replacement: NSString | string): NSString;
  stringByReplacingCharactersInRange_withString(range: NSRange, replacement: NSString | string): NSString;
  stringByApplyingTransform_reverse(transform: NSStringTransform, reverse: boolean): NSString;
  writeToURL_atomically_encoding_error(url: NSURL, useAuxiliaryFile: boolean, enc: NSStringEncoding, error: NSError): boolean;
  writeToFile_atomically_encoding_error(path: NSString | string, useAuxiliaryFile: boolean, enc: NSStringEncoding, error: NSError): boolean;
  initWithCharactersNoCopy_length_freeWhenDone<T extends NSString>(characters: unichar, length: NSUInteger, freeBuffer: boolean): T;
  initWithCharacters_length<T extends NSString>(characters: unichar, length: NSUInteger): T;
  initWithUTF8String<T extends NSString>(nullTerminatedCString: string): T;
  initWithString<T extends NSString>(aString: NSString | string): T;
  initWithFormat<T extends NSString>(format: NSString | string, ...args: any[]): T;
  initWithFormat_arguments<T extends NSString>(format: NSString | string, ...argList: any[]): T;
  initWithFormat_locale<T extends NSString>(format: NSString | string, locale: any | null, ...args: any[]): T;
  initWithFormat_locale_arguments<T extends NSString>(format: NSString | string, locale: any | null, ...argList: any[]): T;
  initWithData_encoding<T extends NSString>(data: NSData, encoding: NSStringEncoding): T;
  initWithBytes_length_encoding<T extends NSString>(bytes: void, len: NSUInteger, encoding: NSStringEncoding): T;
  initWithBytesNoCopy_length_encoding_freeWhenDone<T extends NSString>(bytes: void, len: NSUInteger, encoding: NSStringEncoding, freeBuffer: boolean): T;
  static string(): NSString;
  static stringWithString(string: NSString | string): NSString;
  static stringWithCharacters_length(characters: unichar, length: NSUInteger): NSString;
  static stringWithUTF8String(nullTerminatedCString: string): NSString;
  static stringWithFormat(format: NSString | string, ...args: any[]): NSString;
  static localizedStringWithFormat(format: NSString | string, ...args: any[]): NSString;
  initWithCString_encoding<T extends NSString>(nullTerminatedCString: string, encoding: NSStringEncoding): T;
  static stringWithCString_encoding(cString: string, enc: NSStringEncoding): NSString;
  initWithContentsOfURL_encoding_error<T extends NSString>(url: NSURL, enc: NSStringEncoding, error: NSError): T;
  initWithContentsOfFile_encoding_error<T extends NSString>(path: NSString | string, enc: NSStringEncoding, error: NSError): T;
  static stringWithContentsOfURL_encoding_error(url: NSURL, enc: NSStringEncoding, error: NSError): NSString;
  static stringWithContentsOfFile_encoding_error(path: NSString | string, enc: NSStringEncoding, error: NSError): NSString;
  initWithContentsOfURL_usedEncoding_error<T extends NSString>(url: NSURL, enc: NSStringEncoding | null, error: NSError): T;
  initWithContentsOfFile_usedEncoding_error<T extends NSString>(path: NSString | string, enc: NSStringEncoding | null, error: NSError): T;
  static stringWithContentsOfURL_usedEncoding_error(url: NSURL, enc: NSStringEncoding | null, error: NSError): NSString;
  static stringWithContentsOfFile_usedEncoding_error(path: NSString | string, enc: NSStringEncoding | null, error: NSError): NSString;
  static stringEncodingForData_encodingOptions_convertedString_usedLossyConversion(data: NSData, opts: NSDictionary<any, any> | {[key: string]: any} | null, string: NSString | string, usedLossyConversion: boolean | null): NSStringEncoding;
  propertyList(): any;
  propertyListFromStringsFileFormat(): NSDictionary<any, any>;
  cString(): string;
  lossyCString(): string;
  cStringLength(): NSUInteger;
  getCString(bytes: string): void;
  getCString_maxLength(bytes: string, maxLength: NSUInteger): void;
  getCString_maxLength_range_remainingRange(bytes: string, maxLength: NSUInteger, aRange: NSRange, leftoverRange: NSRangePointer | null): void;
  writeToFile_atomically(path: NSString | string, useAuxiliaryFile: boolean): boolean;
  writeToURL_atomically(url: NSURL, atomically: boolean): boolean;
  initWithContentsOfFile<T extends NSString>(path: NSString | string): T;
  initWithContentsOfURL<T extends NSString>(url: NSURL): T;
  static stringWithContentsOfFile(path: NSString | string): any;
  static stringWithContentsOfURL(url: NSURL): any;
  initWithCStringNoCopy_length_freeWhenDone<T extends NSString>(bytes: string, length: NSUInteger, freeBuffer: boolean): T;
  initWithCString_length<T extends NSString>(bytes: string, length: NSUInteger): T;
  initWithCString<T extends NSString>(bytes: string): T;
  static stringWithCString_length(bytes: string, length: NSUInteger): any;
  static stringWithCString(bytes: string): any;
  getCharacters(buffer: unichar): void;
  stringByAddingPercentEncodingWithAllowedCharacters(allowedCharacters: NSCharacterSet): NSString;
  stringByAddingPercentEscapesUsingEncoding(enc: NSStringEncoding): NSString;
  stringByReplacingPercentEscapesUsingEncoding(enc: NSStringEncoding): NSString;
  sizeWithAttributes(attrs: NSDictionary<any, any> | {[key: string]: any} | null): NSSize;
  drawAtPoint_withAttributes(point: NSPoint, attrs: NSDictionary<any, any> | {[key: string]: any} | null): void;
  drawInRect_withAttributes(rect: NSRect, attrs: NSDictionary<any, any> | {[key: string]: any} | null): void;
  drawWithRect_options_attributes_context(rect: NSRect, options: NSStringDrawingOptions, attributes: NSDictionary<any, any> | {[key: string]: any} | null, context: NSStringDrawingContext | null): void;
  boundingRectWithSize_options_attributes_context(size: NSSize, options: NSStringDrawingOptions, attributes: NSDictionary<any, any> | {[key: string]: any} | null, context: NSStringDrawingContext | null): NSRect;
  drawWithRect_options_attributes(rect: NSRect, options: NSStringDrawingOptions, attributes: NSDictionary<any, any> | {[key: string]: any} | null): void;
  boundingRectWithSize_options_attributes(size: NSSize, options: NSStringDrawingOptions, attributes: NSDictionary<any, any> | {[key: string]: any} | null): NSRect;
  static stringRepresentationForSeconds(numberOfSeconds: NSUInteger): NSString;
  stringByDeletingPrefix(prefix: NSString | string): NSString;
  stringByDeletingSuffix(suffix: NSString | string): NSString;
  stringByStrippingStrings(strings: NSArray<any> | any[]): NSString;
  stringByAppendingPathComponents(components: NSArray<any> | any[]): NSString;
  startsWith(str: NSString | string): boolean;
  endsWith(str: NSString | string): boolean;
  endsWith_options(str: NSString | string, options: NSStringCompareOptions): boolean;
  containsSubstring(sub: NSString | string): boolean;
  containsCharacter(c: unichar): boolean;
  stringWithFirstCharacterLowercase(): NSString;
  trimmedString(): NSString;
  splitByBaseAndNumber(): NSDictionary<any, any>;
  uniqueStringComparedToStrings_includeCopySuffix(strings: NSSet<any>, shouldAppendCopySuffix: boolean): NSString;
  static stringWithPrefix_number(front: NSString | string, number: NSInteger): NSString;
  words(): NSArray<any>;
  safeSubstringToIndex_ms(index: NSUInteger): NSString;
  safeSubstringFromIndex_ms(index: NSUInteger): NSString;
  safeSubstringWithRange_ms(range: NSRange): NSString;
  parent(): NSString;
  child(childName: NSString | string): NSString;
  extension(): NSString;
  withoutExtension(): NSString;
  withExtension(extension: NSString | string): NSString;
  expandTilde(): NSString;
  hasExtension(extension: NSString | string): boolean;
  isValidEmailAddress(): boolean;
  stringBySplittingMixedCaps(): NSString;
  componentsSeparatedByMixedCaps(): NSArray<any>;
  lastLines(count: NSUInteger): NSString;
  firstLines(count: NSUInteger): NSString;
  matchesString_divergingAfter_atIndex_divergentChar_expectedChar(string: NSString | string | null, prefix: NSString | string, index: NSUInteger, divergentChar: string, expectedChar: string): boolean;
  matchesString_divergingAtLine_after_diverged_expected(string: NSString | string | null, divergingLine: NSUInteger, after: NSString | string, diverged: NSString | string, expected: NSString | string): boolean;
  matchesString_divergingAtLine1_andLine2_diverged_expected(string: NSString | string | null, line1: NSUInteger, line2: NSUInteger, diverged: NSString | string, expected: NSString | string): boolean;
  matchesString_divergingAtLine1_andLine2_diverged_expected_window(string: NSString | string | null, line1: NSUInteger, line2: NSUInteger, diverged: NSString | string, expected: NSString | string, window: NSInteger): boolean;
  drawAtPoint_withFont(aPoint: NSPoint, font: NSFont): void;
  drawCenteredAtPoint_withFont_color(aPoint: NSPoint, font: NSFont, color: NSColor): void;
  sizeWithFont(aFont: NSFont): NSSize;
  heightWithFont_maxWidth(myFont: NSFont, myWidth: CGFloat): CGFloat;
  fontSizeToFitStringWithAttributes_inSize_maximumFontSize(attributes: CHStringAttributes, aSize: NSSize, maxSize: NSInteger): NSInteger;
  fontSizeToFitStringWithAttributes_inSize(attributes: CHStringAttributes, aSize: NSSize): NSInteger;
  fontSizeToFitStringWithAttributes_inWidth(attributes: CHStringAttributes, width: NSInteger): NSInteger;
  fontSizeToFitStringWithAttributes_inHeight(attributes: CHStringAttributes, height: NSInteger): NSInteger;
  fitStringAttributes_inSize(attributes: CHStringAttributes, aSize: NSSize): void;
  fitStringAttributes_inWidth(attributes: CHStringAttributes, width: NSInteger): void;
  fitStringAttributes_inHeight(attributes: CHStringAttributes, height: NSInteger): void;
  colorValue(): NSColor;
  sRGBColorFromHexColor(): NSColor;
  enumerateWordRanges(block: CHStringWordEnumeratorBlock): void;
  wordRanges(): NSArray<any>;
  static stringWithUUID(): any;
  numberValueInContextOfSize_onAxis(size: NSRect, axis: BCAxis): NSNumber;
  stringBySanitizingForNumberFormatter(formatter: NSNumberFormatter | null): NSString;
  stringByCalculatingMath(): NSString;
  numberValueUsingMath(): NSNumber;
  containsMathSymbols(): boolean;
  mathPrefix(): NSString;
  numberValueByUsingNumberFormatter(): NSNumber;
  static nativeDecimalSeparator(): NSString;
  static mathStringWithOperand1_operator_operand2(operand1: CGFloat, operator: NSString | string, operand2: CGFloat): NSString;
  uniqueSlugUsingEarlierSlugs(earlierSlugs: NSMutableDictionary<any, any> | {[key: string]: any} | null): NSString;
  svgURL(): NSString;
  static svgStringWithPixelValue(value: CGFloat): NSString;
  static svgStringWithNumberValue(value: CGFloat): NSString;
  static svgStringWithPercentageValue(value: CGFloat): NSString;
  static svgStringWithPercentageFractionalValue(value: CGFloat): NSString;
  static stringWithInt_suffix(anInt: NSInteger, suffix: NSString | string): NSString;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  pathComponents(): NSArray<any>;
  setPathComponents(pathComponents: NSArray<any> | any[]): void;
  absolutePath(): boolean;
  setAbsolutePath(absolutePath: boolean): void;
  lastPathComponent(): NSString;
  setLastPathComponent(lastPathComponent: NSString | string): void;
  stringByDeletingLastPathComponent(): NSString;
  setStringByDeletingLastPathComponent(stringByDeletingLastPathComponent: NSString | string): void;
  pathExtension(): NSString;
  setPathExtension(pathExtension: NSString | string): void;
  stringByDeletingPathExtension(): NSString;
  setStringByDeletingPathExtension(stringByDeletingPathExtension: NSString | string): void;
  stringByAbbreviatingWithTildeInPath(): NSString;
  setStringByAbbreviatingWithTildeInPath(stringByAbbreviatingWithTildeInPath: NSString | string): void;
  stringByExpandingTildeInPath(): NSString;
  setStringByExpandingTildeInPath(stringByExpandingTildeInPath: NSString | string): void;
  stringByStandardizingPath(): NSString;
  setStringByStandardizingPath(stringByStandardizingPath: NSString | string): void;
  stringByResolvingSymlinksInPath(): NSString;
  setStringByResolvingSymlinksInPath(stringByResolvingSymlinksInPath: NSString | string): void;
  fileSystemRepresentation(): string;
  setFileSystemRepresentation(fileSystemRepresentation: string): void;
  length(): NSUInteger;
  setLength(length: NSUInteger): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  floatValue(): number;
  setFloatValue(floatValue: number): void;
  intValue(): number;
  setIntValue(intValue: number): void;
  integerValue(): NSInteger;
  setIntegerValue(integerValue: NSInteger): void;
  longLongValue(): number;
  setLongLongValue(longLongValue: number): void;
  boolValue(): boolean;
  setBoolValue(boolValue: boolean): void;
  uppercaseString(): NSString;
  setUppercaseString(uppercaseString: NSString | string): void;
  lowercaseString(): NSString;
  setLowercaseString(lowercaseString: NSString | string): void;
  capitalizedString(): NSString;
  setCapitalizedString(capitalizedString: NSString | string): void;
  localizedUppercaseString(): NSString;
  setLocalizedUppercaseString(localizedUppercaseString: NSString | string): void;
  localizedLowercaseString(): NSString;
  setLocalizedLowercaseString(localizedLowercaseString: NSString | string): void;
  localizedCapitalizedString(): NSString;
  setLocalizedCapitalizedString(localizedCapitalizedString: NSString | string): void;
  UTF8String(): string;
  setUTF8String(UTF8String: string): void;
  fastestEncoding(): NSStringEncoding;
  setFastestEncoding(fastestEncoding: NSStringEncoding): void;
  smallestEncoding(): NSStringEncoding;
  setSmallestEncoding(smallestEncoding: NSStringEncoding): void;
  static availableStringEncodings(): NSStringEncoding;
  static setAvailableStringEncodings(availableStringEncodings: NSStringEncoding): void;
  static defaultCStringEncoding(): NSStringEncoding;
  static setDefaultCStringEncoding(defaultCStringEncoding: NSStringEncoding): void;
  decomposedStringWithCanonicalMapping(): NSString;
  setDecomposedStringWithCanonicalMapping(decomposedStringWithCanonicalMapping: NSString | string): void;
  precomposedStringWithCanonicalMapping(): NSString;
  setPrecomposedStringWithCanonicalMapping(precomposedStringWithCanonicalMapping: NSString | string): void;
  decomposedStringWithCompatibilityMapping(): NSString;
  setDecomposedStringWithCompatibilityMapping(decomposedStringWithCompatibilityMapping: NSString | string): void;
  precomposedStringWithCompatibilityMapping(): NSString;
  setPrecomposedStringWithCompatibilityMapping(precomposedStringWithCompatibilityMapping: NSString | string): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  hash(): NSUInteger;
  setHash(hash: NSUInteger): void;
  stringByRemovingPercentEncoding(): NSString;
  setStringByRemovingPercentEncoding(stringByRemovingPercentEncoding: NSString | string): void;
  slug(): NSString;
  setSlug(slug: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSBundleResourceRequest extends NSObject implements INSProgressReporting {
  initWithTags<T extends NSBundleResourceRequest>(tags: NSSet<any>): T;
  initWithTags_bundle<T extends NSBundleResourceRequest>(tags: NSSet<any>, bundle: NSBundle): T;
  beginAccessingResourcesWithCompletionHandler(completionHandler: Block): void;
  conditionallyBeginAccessingResourcesWithCompletionHandler(completionHandler: Block): void;
  endAccessingResources(): void;

  loadingPriority(): number;
  setLoadingPriority(loadingPriority: number): void;
  tags(): NSSet<any>;
  setTags(tags: NSSet<any>): void;
  bundle(): NSBundle;
  setBundle(bundle: NSBundle): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
}

declare class NSByteCountFormatter extends NSFormatter {
  static stringFromByteCount_countStyle(byteCount: number, countStyle: NSByteCountFormatterCountStyle): NSString;
  stringFromByteCount(byteCount: number): NSString;

  allowedUnits(): NSByteCountFormatterUnits;
  setAllowedUnits(allowedUnits: NSByteCountFormatterUnits): void;
  countStyle(): NSByteCountFormatterCountStyle;
  setCountStyle(countStyle: NSByteCountFormatterCountStyle): void;
  allowsNonnumericFormatting(): boolean;
  setAllowsNonnumericFormatting(allowsNonnumericFormatting: boolean): void;
  includesUnit(): boolean;
  setIncludesUnit(includesUnit: boolean): void;
  includesCount(): boolean;
  setIncludesCount(includesCount: boolean): void;
  includesActualByteCount(): boolean;
  setIncludesActualByteCount(includesActualByteCount: boolean): void;
  adaptive(): boolean;
  setAdaptive(adaptive: boolean): void;
  zeroPadsFractionDigits(): boolean;
  setZeroPadsFractionDigits(zeroPadsFractionDigits: boolean): void;
  formattingContext(): NSFormattingContext;
  setFormattingContext(formattingContext: NSFormattingContext): void;
}

declare enum NSByteCountFormatterUnits {
  NSByteCountFormatterUseDefault = 0,
  NSByteCountFormatterUseBytes = 1 << 0,
  NSByteCountFormatterUseKB = 1 << 1,
  NSByteCountFormatterUseMB = 1 << 2,
  NSByteCountFormatterUseGB = 1 << 3,
  NSByteCountFormatterUseTB = 1 << 4,
  NSByteCountFormatterUsePB = 1 << 5,
  NSByteCountFormatterUseEB = 1 << 6,
  NSByteCountFormatterUseZB = 1 << 7,
  NSByteCountFormatterUseYBOrHigher = 0x0FF << 8,
  NSByteCountFormatterUseAll = 0x0FFFF,
}

declare enum NSByteCountFormatterCountStyle {
  NSByteCountFormatterCountStyleFile = 0,
  NSByteCountFormatterCountStyleMemory = 1,
  NSByteCountFormatterCountStyleDecimal = 2,
  NSByteCountFormatterCountStyleBinary = 3,
}

declare type NSSwappedFloat = {
  v: number
}

declare type NSSwappedDouble = {
  v: number
}

declare type NSCache = any

declare interface INSCacheDelegate {
  cache_willEvictObject(cache: NSCache, obj: any): void;
}

declare class NSCalendar extends NSObject implements INSCopying, INSSecureCoding {
  static calendarWithIdentifier(calendarIdentifierConstant: NSCalendarIdentifier): NSCalendar;
  initWithCalendarIdentifier<T extends NSCalendar>(ident: NSCalendarIdentifier): T;
  minimumRangeOfUnit(unit: NSCalendarUnit): NSRange;
  maximumRangeOfUnit(unit: NSCalendarUnit): NSRange;
  rangeOfUnit_inUnit_forDate(smaller: NSCalendarUnit, larger: NSCalendarUnit, date: NSDate): NSRange;
  ordinalityOfUnit_inUnit_forDate(smaller: NSCalendarUnit, larger: NSCalendarUnit, date: NSDate): NSUInteger;
  rangeOfUnit_startDate_interval_forDate(unit: NSCalendarUnit, datep: NSDate, tip: NSTimeInterval | null, date: NSDate): boolean;
  dateFromComponents(comps: NSDateComponents): NSDate;
  components_fromDate(unitFlags: NSCalendarUnit, date: NSDate): NSDateComponents;
  dateByAddingComponents_toDate_options(comps: NSDateComponents, date: NSDate, opts: NSCalendarOptions): NSDate;
  components_fromDate_toDate_options(unitFlags: NSCalendarUnit, startingDate: NSDate, resultDate: NSDate, opts: NSCalendarOptions): NSDateComponents;
  getEra_year_month_day_fromDate(eraValuePointer: NSInteger, yearValuePointer: NSInteger, monthValuePointer: NSInteger, dayValuePointer: NSInteger, date: NSDate): void;
  getEra_yearForWeekOfYear_weekOfYear_weekday_fromDate(eraValuePointer: NSInteger, yearValuePointer: NSInteger, weekValuePointer: NSInteger, weekdayValuePointer: NSInteger, date: NSDate): void;
  getHour_minute_second_nanosecond_fromDate(hourValuePointer: NSInteger, minuteValuePointer: NSInteger, secondValuePointer: NSInteger, nanosecondValuePointer: NSInteger, date: NSDate): void;
  component_fromDate(unit: NSCalendarUnit, date: NSDate): NSInteger;
  dateWithEra_year_month_day_hour_minute_second_nanosecond(eraValue: NSInteger, yearValue: NSInteger, monthValue: NSInteger, dayValue: NSInteger, hourValue: NSInteger, minuteValue: NSInteger, secondValue: NSInteger, nanosecondValue: NSInteger): NSDate;
  dateWithEra_yearForWeekOfYear_weekOfYear_weekday_hour_minute_second_nanosecond(eraValue: NSInteger, yearValue: NSInteger, weekValue: NSInteger, weekdayValue: NSInteger, hourValue: NSInteger, minuteValue: NSInteger, secondValue: NSInteger, nanosecondValue: NSInteger): NSDate;
  startOfDayForDate(date: NSDate): NSDate;
  componentsInTimeZone_fromDate(timezone: NSTimeZone, date: NSDate): NSDateComponents;
  compareDate_toDate_toUnitGranularity(date1: NSDate, date2: NSDate, unit: NSCalendarUnit): NSComparisonResult;
  isDate_equalToDate_toUnitGranularity(date1: NSDate, date2: NSDate, unit: NSCalendarUnit): boolean;
  isDate_inSameDayAsDate(date1: NSDate, date2: NSDate): boolean;
  isDateInToday(date: NSDate): boolean;
  isDateInYesterday(date: NSDate): boolean;
  isDateInTomorrow(date: NSDate): boolean;
  isDateInWeekend(date: NSDate): boolean;
  rangeOfWeekendStartDate_interval_containingDate(datep: NSDate, tip: NSTimeInterval, date: NSDate): boolean;
  nextWeekendStartDate_interval_options_afterDate(datep: NSDate, tip: NSTimeInterval, options: NSCalendarOptions, date: NSDate): boolean;
  components_fromDateComponents_toDateComponents_options(unitFlags: NSCalendarUnit, startingDateComp: NSDateComponents, resultDateComp: NSDateComponents, options: NSCalendarOptions): NSDateComponents;
  dateByAddingUnit_value_toDate_options(unit: NSCalendarUnit, value: NSInteger, date: NSDate, options: NSCalendarOptions): NSDate;
  enumerateDatesStartingAfterDate_matchingComponents_options_usingBlock(start: NSDate, comps: NSDateComponents, opts: NSCalendarOptions, block: Block): void;
  nextDateAfterDate_matchingComponents_options(date: NSDate, comps: NSDateComponents, options: NSCalendarOptions): NSDate;
  nextDateAfterDate_matchingUnit_value_options(date: NSDate, unit: NSCalendarUnit, value: NSInteger, options: NSCalendarOptions): NSDate;
  nextDateAfterDate_matchingHour_minute_second_options(date: NSDate, hourValue: NSInteger, minuteValue: NSInteger, secondValue: NSInteger, options: NSCalendarOptions): NSDate;
  dateBySettingUnit_value_ofDate_options(unit: NSCalendarUnit, v: NSInteger, date: NSDate, opts: NSCalendarOptions): NSDate;
  dateBySettingHour_minute_second_ofDate_options(h: NSInteger, m: NSInteger, s: NSInteger, date: NSDate, opts: NSCalendarOptions): NSDate;
  date_matchesComponents(date: NSDate, components: NSDateComponents): boolean;
  copyWithZone(zone: NSZone | null): any;

  static currentCalendar(): NSCalendar;
  static setCurrentCalendar(currentCalendar: NSCalendar): void;
  static autoupdatingCurrentCalendar(): NSCalendar;
  static setAutoupdatingCurrentCalendar(autoupdatingCurrentCalendar: NSCalendar): void;
  calendarIdentifier(): NSCalendarIdentifier;
  setCalendarIdentifier(calendarIdentifier: NSCalendarIdentifier): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  firstWeekday(): NSUInteger;
  setFirstWeekday(firstWeekday: NSUInteger): void;
  minimumDaysInFirstWeek(): NSUInteger;
  setMinimumDaysInFirstWeek(minimumDaysInFirstWeek: NSUInteger): void;
  eraSymbols(): NSArray<any>;
  setEraSymbols(eraSymbols: NSArray<any> | any[]): void;
  longEraSymbols(): NSArray<any>;
  setLongEraSymbols(longEraSymbols: NSArray<any> | any[]): void;
  monthSymbols(): NSArray<any>;
  setMonthSymbols(monthSymbols: NSArray<any> | any[]): void;
  shortMonthSymbols(): NSArray<any>;
  setShortMonthSymbols(shortMonthSymbols: NSArray<any> | any[]): void;
  veryShortMonthSymbols(): NSArray<any>;
  setVeryShortMonthSymbols(veryShortMonthSymbols: NSArray<any> | any[]): void;
  standaloneMonthSymbols(): NSArray<any>;
  setStandaloneMonthSymbols(standaloneMonthSymbols: NSArray<any> | any[]): void;
  shortStandaloneMonthSymbols(): NSArray<any>;
  setShortStandaloneMonthSymbols(shortStandaloneMonthSymbols: NSArray<any> | any[]): void;
  veryShortStandaloneMonthSymbols(): NSArray<any>;
  setVeryShortStandaloneMonthSymbols(veryShortStandaloneMonthSymbols: NSArray<any> | any[]): void;
  weekdaySymbols(): NSArray<any>;
  setWeekdaySymbols(weekdaySymbols: NSArray<any> | any[]): void;
  shortWeekdaySymbols(): NSArray<any>;
  setShortWeekdaySymbols(shortWeekdaySymbols: NSArray<any> | any[]): void;
  veryShortWeekdaySymbols(): NSArray<any>;
  setVeryShortWeekdaySymbols(veryShortWeekdaySymbols: NSArray<any> | any[]): void;
  standaloneWeekdaySymbols(): NSArray<any>;
  setStandaloneWeekdaySymbols(standaloneWeekdaySymbols: NSArray<any> | any[]): void;
  shortStandaloneWeekdaySymbols(): NSArray<any>;
  setShortStandaloneWeekdaySymbols(shortStandaloneWeekdaySymbols: NSArray<any> | any[]): void;
  veryShortStandaloneWeekdaySymbols(): NSArray<any>;
  setVeryShortStandaloneWeekdaySymbols(veryShortStandaloneWeekdaySymbols: NSArray<any> | any[]): void;
  quarterSymbols(): NSArray<any>;
  setQuarterSymbols(quarterSymbols: NSArray<any> | any[]): void;
  shortQuarterSymbols(): NSArray<any>;
  setShortQuarterSymbols(shortQuarterSymbols: NSArray<any> | any[]): void;
  standaloneQuarterSymbols(): NSArray<any>;
  setStandaloneQuarterSymbols(standaloneQuarterSymbols: NSArray<any> | any[]): void;
  shortStandaloneQuarterSymbols(): NSArray<any>;
  setShortStandaloneQuarterSymbols(shortStandaloneQuarterSymbols: NSArray<any> | any[]): void;
  AMSymbol(): NSString;
  setAMSymbol(AMSymbol: NSString | string): void;
  PMSymbol(): NSString;
  setPMSymbol(PMSymbol: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSDateComponents extends NSObject implements INSCopying, INSSecureCoding {
  setValue_forComponent(value: NSInteger, unit: NSCalendarUnit): void;
  valueForComponent(unit: NSCalendarUnit): NSInteger;
  isValidDateInCalendar(calendar: NSCalendar): boolean;
  copyWithZone(zone: NSZone | null): any;

  calendar(): NSCalendar;
  setCalendar(calendar: NSCalendar): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  era(): NSInteger;
  setEra(era: NSInteger): void;
  year(): NSInteger;
  setYear(year: NSInteger): void;
  month(): NSInteger;
  setMonth(month: NSInteger): void;
  day(): NSInteger;
  setDay(day: NSInteger): void;
  hour(): NSInteger;
  setHour(hour: NSInteger): void;
  minute(): NSInteger;
  setMinute(minute: NSInteger): void;
  second(): NSInteger;
  setSecond(second: NSInteger): void;
  nanosecond(): NSInteger;
  setNanosecond(nanosecond: NSInteger): void;
  weekday(): NSInteger;
  setWeekday(weekday: NSInteger): void;
  weekdayOrdinal(): NSInteger;
  setWeekdayOrdinal(weekdayOrdinal: NSInteger): void;
  quarter(): NSInteger;
  setQuarter(quarter: NSInteger): void;
  weekOfMonth(): NSInteger;
  setWeekOfMonth(weekOfMonth: NSInteger): void;
  weekOfYear(): NSInteger;
  setWeekOfYear(weekOfYear: NSInteger): void;
  yearForWeekOfYear(): NSInteger;
  setYearForWeekOfYear(yearForWeekOfYear: NSInteger): void;
  leapMonth(): boolean;
  setLeapMonth(leapMonth: boolean): void;
  date(): NSDate;
  setDate(date: NSDate): void;
  validDate(): boolean;
  setValidDate(validDate: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSCalendarIdentifier = NSString

declare enum NSCalendarUnit {
  NSCalendarUnitEra,
  NSCalendarUnitYear,
  NSCalendarUnitMonth,
  NSCalendarUnitDay,
  NSCalendarUnitHour,
  NSCalendarUnitMinute,
  NSCalendarUnitSecond,
  NSCalendarUnitWeekday,
  NSCalendarUnitWeekdayOrdinal,
  NSCalendarUnitQuarter,
  NSCalendarUnitWeekOfMonth,
  NSCalendarUnitWeekOfYear,
  NSCalendarUnitYearForWeekOfYear,
  NSCalendarUnitNanosecond,
  NSCalendarUnitCalendar,
  NSCalendarUnitTimeZone,
  NSEraCalendarUnit,
  NSYearCalendarUnit,
  NSMonthCalendarUnit,
  NSDayCalendarUnit,
  NSHourCalendarUnit,
  NSMinuteCalendarUnit,
  NSSecondCalendarUnit,
  NSWeekCalendarUnit,
  NSWeekdayCalendarUnit,
  NSWeekdayOrdinalCalendarUnit,
  NSQuarterCalendarUnit,
  NSWeekOfMonthCalendarUnit,
  NSWeekOfYearCalendarUnit,
  NSYearForWeekOfYearCalendarUnit,
  NSCalendarCalendarUnit,
  NSTimeZoneCalendarUnit,
}

declare enum NSCalendarOptions {
  NSCalendarWrapComponents,
  NSCalendarMatchStrictly,
  NSCalendarSearchBackwards,
  NSCalendarMatchPreviousTimePreservingSmallerUnits,
  NSCalendarMatchNextTimePreservingSmallerUnits,
  NSCalendarMatchNextTime,
  NSCalendarMatchFirst,
  NSCalendarMatchLast,
}

declare class NSCalendarDate extends NSDate {}

declare class NSDate extends NSObject implements INSCopying, INSSecureCoding {
  init<T extends NSDate>(): T;
  initWithTimeIntervalSinceReferenceDate<T extends NSDate>(ti: NSTimeInterval): T;
  initWithCoder<T extends NSDate>(aDecoder: NSCoder): T;
  timeIntervalSinceDate(anotherDate: NSDate): NSTimeInterval;
  addTimeInterval(seconds: NSTimeInterval): any;
  dateByAddingTimeInterval(ti: NSTimeInterval): NSDate;
  earlierDate(anotherDate: NSDate): NSDate;
  laterDate(anotherDate: NSDate): NSDate;
  compare(other: NSDate): NSComparisonResult;
  isEqualToDate(otherDate: NSDate): boolean;
  descriptionWithLocale(locale: any | null): NSString;
  static date(): NSDate;
  static dateWithTimeIntervalSinceNow(secs: NSTimeInterval): NSDate;
  static dateWithTimeIntervalSinceReferenceDate(ti: NSTimeInterval): NSDate;
  static dateWithTimeIntervalSince1970(secs: NSTimeInterval): NSDate;
  static dateWithTimeInterval_sinceDate(secsToBeAdded: NSTimeInterval, date: NSDate): NSDate;
  initWithTimeIntervalSinceNow<T extends NSDate>(secs: NSTimeInterval): T;
  initWithTimeIntervalSince1970<T extends NSDate>(secs: NSTimeInterval): T;
  initWithTimeInterval_sinceDate<T extends NSDate>(secsToBeAdded: NSTimeInterval, date: NSDate): T;
  static iso8601DateFormatter(): NSDateFormatter;
  iso8601(): NSString;
  static dateWithNTPRepresentation_bc(ntp: number): NSDate;
  NTPRepresentation_bc(): number;
  copyWithZone(zone: NSZone | null): any;

  static timeIntervalSinceReferenceDate(): NSTimeInterval;
  static setTimeIntervalSinceReferenceDate(timeIntervalSinceReferenceDate: NSTimeInterval): void;
  timeIntervalSinceNow(): NSTimeInterval;
  setTimeIntervalSinceNow(timeIntervalSinceNow: NSTimeInterval): void;
  timeIntervalSince1970(): NSTimeInterval;
  setTimeIntervalSince1970(timeIntervalSince1970: NSTimeInterval): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  static distantFuture(): NSDate;
  static setDistantFuture(distantFuture: NSDate): void;
  static distantPast(): NSDate;
  static setDistantPast(distantPast: NSDate): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSCharacterSet extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding {
  static characterSetWithRange(aRange: NSRange): NSCharacterSet;
  static characterSetWithCharactersInString(aString: NSString | string): NSCharacterSet;
  static characterSetWithBitmapRepresentation(data: NSData): NSCharacterSet;
  static characterSetWithContentsOfFile(fName: NSString | string): NSCharacterSet;
  initWithCoder<T extends NSCharacterSet>(aDecoder: NSCoder): T;
  characterIsMember(aCharacter: unichar): boolean;
  longCharacterIsMember(theLongChar: string): boolean;
  isSupersetOfSet(theOtherSet: NSCharacterSet): boolean;
  hasMemberInPlane(thePlane: number): boolean;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  static controlCharacterSet(): NSCharacterSet;
  static setControlCharacterSet(controlCharacterSet: NSCharacterSet): void;
  static whitespaceCharacterSet(): NSCharacterSet;
  static setWhitespaceCharacterSet(whitespaceCharacterSet: NSCharacterSet): void;
  static whitespaceAndNewlineCharacterSet(): NSCharacterSet;
  static setWhitespaceAndNewlineCharacterSet(whitespaceAndNewlineCharacterSet: NSCharacterSet): void;
  static decimalDigitCharacterSet(): NSCharacterSet;
  static setDecimalDigitCharacterSet(decimalDigitCharacterSet: NSCharacterSet): void;
  static letterCharacterSet(): NSCharacterSet;
  static setLetterCharacterSet(letterCharacterSet: NSCharacterSet): void;
  static lowercaseLetterCharacterSet(): NSCharacterSet;
  static setLowercaseLetterCharacterSet(lowercaseLetterCharacterSet: NSCharacterSet): void;
  static uppercaseLetterCharacterSet(): NSCharacterSet;
  static setUppercaseLetterCharacterSet(uppercaseLetterCharacterSet: NSCharacterSet): void;
  static nonBaseCharacterSet(): NSCharacterSet;
  static setNonBaseCharacterSet(nonBaseCharacterSet: NSCharacterSet): void;
  static alphanumericCharacterSet(): NSCharacterSet;
  static setAlphanumericCharacterSet(alphanumericCharacterSet: NSCharacterSet): void;
  static decomposableCharacterSet(): NSCharacterSet;
  static setDecomposableCharacterSet(decomposableCharacterSet: NSCharacterSet): void;
  static illegalCharacterSet(): NSCharacterSet;
  static setIllegalCharacterSet(illegalCharacterSet: NSCharacterSet): void;
  static punctuationCharacterSet(): NSCharacterSet;
  static setPunctuationCharacterSet(punctuationCharacterSet: NSCharacterSet): void;
  static capitalizedLetterCharacterSet(): NSCharacterSet;
  static setCapitalizedLetterCharacterSet(capitalizedLetterCharacterSet: NSCharacterSet): void;
  static symbolCharacterSet(): NSCharacterSet;
  static setSymbolCharacterSet(symbolCharacterSet: NSCharacterSet): void;
  static newlineCharacterSet(): NSCharacterSet;
  static setNewlineCharacterSet(newlineCharacterSet: NSCharacterSet): void;
  bitmapRepresentation(): NSData;
  setBitmapRepresentation(bitmapRepresentation: NSData): void;
  invertedSet(): NSCharacterSet;
  setInvertedSet(invertedSet: NSCharacterSet): void;
  static URLUserAllowedCharacterSet(): NSCharacterSet;
  static setURLUserAllowedCharacterSet(URLUserAllowedCharacterSet: NSCharacterSet): void;
  static URLPasswordAllowedCharacterSet(): NSCharacterSet;
  static setURLPasswordAllowedCharacterSet(URLPasswordAllowedCharacterSet: NSCharacterSet): void;
  static URLHostAllowedCharacterSet(): NSCharacterSet;
  static setURLHostAllowedCharacterSet(URLHostAllowedCharacterSet: NSCharacterSet): void;
  static URLPathAllowedCharacterSet(): NSCharacterSet;
  static setURLPathAllowedCharacterSet(URLPathAllowedCharacterSet: NSCharacterSet): void;
  static URLQueryAllowedCharacterSet(): NSCharacterSet;
  static setURLQueryAllowedCharacterSet(URLQueryAllowedCharacterSet: NSCharacterSet): void;
  static URLFragmentAllowedCharacterSet(): NSCharacterSet;
  static setURLFragmentAllowedCharacterSet(URLFragmentAllowedCharacterSet: NSCharacterSet): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableCharacterSet extends NSCharacterSet implements INSCopying, INSMutableCopying, INSSecureCoding {
  addCharactersInRange(aRange: NSRange): void;
  removeCharactersInRange(aRange: NSRange): void;
  addCharactersInString(aString: NSString | string): void;
  removeCharactersInString(aString: NSString | string): void;
  formUnionWithCharacterSet(otherSet: NSCharacterSet): void;
  formIntersectionWithCharacterSet(otherSet: NSCharacterSet): void;
  invert(): void;
  static controlCharacterSet(): NSMutableCharacterSet;
  static whitespaceCharacterSet(): NSMutableCharacterSet;
  static whitespaceAndNewlineCharacterSet(): NSMutableCharacterSet;
  static decimalDigitCharacterSet(): NSMutableCharacterSet;
  static letterCharacterSet(): NSMutableCharacterSet;
  static lowercaseLetterCharacterSet(): NSMutableCharacterSet;
  static uppercaseLetterCharacterSet(): NSMutableCharacterSet;
  static nonBaseCharacterSet(): NSMutableCharacterSet;
  static alphanumericCharacterSet(): NSMutableCharacterSet;
  static decomposableCharacterSet(): NSMutableCharacterSet;
  static illegalCharacterSet(): NSMutableCharacterSet;
  static punctuationCharacterSet(): NSMutableCharacterSet;
  static capitalizedLetterCharacterSet(): NSMutableCharacterSet;
  static symbolCharacterSet(): NSMutableCharacterSet;
  static newlineCharacterSet(): NSMutableCharacterSet;
  static characterSetWithRange(aRange: NSRange): NSMutableCharacterSet;
  static characterSetWithCharactersInString(aString: NSString | string): NSMutableCharacterSet;
  static characterSetWithBitmapRepresentation(data: NSData): NSMutableCharacterSet;
  static characterSetWithContentsOfFile(fName: NSString | string): NSMutableCharacterSet;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSClassDescription extends NSObject {
  static registerClassDescription_forClass(description: NSClassDescription, aClass: any): void;
  static invalidateClassDescriptionCache(): void;
  static classDescriptionForClass(aClass: any): NSClassDescription;
  inverseForRelationshipKey(relationshipKey: NSString | string): NSString;

  attributeKeys(): NSArray<any>;
  setAttributeKeys(attributeKeys: NSArray<any> | any[]): void;
  toOneRelationshipKeys(): NSArray<any>;
  setToOneRelationshipKeys(toOneRelationshipKeys: NSArray<any> | any[]): void;
  toManyRelationshipKeys(): NSArray<any>;
  setToManyRelationshipKeys(toManyRelationshipKeys: NSArray<any> | any[]): void;
}

declare class NSCoder extends NSObject {
  encodeValueOfObjCType_at(type: string, addr: void): void;
  encodeDataObject(data: NSData): void;
  decodeDataObject(): NSData;
  decodeValueOfObjCType_at_size(type: string, data: void, size: NSUInteger): void;
  versionForClassName(className: NSString | string): NSInteger;
  encodeObject(object: any | null): void;
  encodeRootObject(rootObject: any): void;
  encodeBycopyObject(anObject: any | null): void;
  encodeByrefObject(anObject: any | null): void;
  encodeConditionalObject(object: any | null): void;
  encodeValuesOfObjCTypes(types: string, ...args: any[]): void;
  encodeArrayOfObjCType_count_at(type: string, count: NSUInteger, array: void): void;
  encodeBytes_length(byteaddr: void | null, length: NSUInteger): void;
  decodeObject(): any;
  decodeValuesOfObjCTypes(types: string, ...args: any[]): void;
  decodeArrayOfObjCType_count_at(itemType: string, count: NSUInteger, array: void): void;
  decodeBytesWithReturnedLength(lengthp: NSUInteger): void;
  encodePropertyList(aPropertyList: any): void;
  decodePropertyList(): any;
  encodeObject_forKey(object: any | null, key: NSString | string): void;
  encodeConditionalObject_forKey(object: any | null, key: NSString | string): void;
  encodeBool_forKey(value: boolean, key: NSString | string): void;
  encodeInt_forKey(value: number, key: NSString | string): void;
  encodeInt32_forKey(value: number, key: NSString | string): void;
  encodeInt64_forKey(value: number, key: NSString | string): void;
  encodeFloat_forKey(value: number, key: NSString | string): void;
  encodeDouble_forKey(value: number, key: NSString | string): void;
  encodeBytes_length_forKey(bytes: number | null, length: NSUInteger, key: NSString | string): void;
  containsValueForKey(key: NSString | string): boolean;
  decodeObjectForKey(key: NSString | string): any;
  decodeBoolForKey(key: NSString | string): boolean;
  decodeIntForKey(key: NSString | string): number;
  decodeInt32ForKey(key: NSString | string): number;
  decodeInt64ForKey(key: NSString | string): number;
  decodeFloatForKey(key: NSString | string): number;
  decodeDoubleForKey(key: NSString | string): number;
  decodeBytesForKey_returnedLength(key: NSString | string, lengthp: NSUInteger | null): number;
  encodeInteger_forKey(value: NSInteger, key: NSString | string): void;
  decodeIntegerForKey(key: NSString | string): NSInteger;
  decodeObjectOfClass_forKey(aClass: any, key: NSString | string): any;
  decodeObjectOfClasses_forKey(classes: NSSet<any> | null, key: NSString | string): any;
  decodePropertyListForKey(key: NSString | string): any;
  failWithError(error: NSError): void;
  encodeNXObject(object: any): void;
  decodeNXObject(): any;
  decodeValueOfObjCType_at(type: string, data: void): void;
  encodePoint(point: NSPoint): void;
  decodePoint(): NSPoint;
  encodeSize(size: NSSize): void;
  decodeSize(): NSSize;
  encodeRect(rect: NSRect): void;
  decodeRect(): NSRect;
  encodePoint_forKey(point: NSPoint, key: NSString | string): void;
  encodeSize_forKey(size: NSSize, key: NSString | string): void;
  encodeRect_forKey(rect: NSRect, key: NSString | string): void;
  decodePointForKey(key: NSString | string): NSPoint;
  decodeSizeForKey(key: NSString | string): NSSize;
  decodeRectForKey(key: NSString | string): NSRect;
  decodeNXColor(): NSColor;

  systemVersion(): number;
  setSystemVersion(systemVersion: number): void;
  allowsKeyedCoding(): boolean;
  setAllowsKeyedCoding(allowsKeyedCoding: boolean): void;
  requiresSecureCoding(): boolean;
  setRequiresSecureCoding(requiresSecureCoding: boolean): void;
  allowedClasses(): NSSet<any>;
  setAllowedClasses(allowedClasses: NSSet<any>): void;
  decodingFailurePolicy(): NSDecodingFailurePolicy;
  setDecodingFailurePolicy(decodingFailurePolicy: NSDecodingFailurePolicy): void;
  error(): NSError;
  setError(error: NSError): void;
}

declare enum NSDecodingFailurePolicy {
  NSDecodingFailurePolicyRaiseException,
  NSDecodingFailurePolicySetErrorAndReturn,
}

declare class NSComparisonPredicate extends NSPredicate {
  static predicateWithLeftExpression_rightExpression_modifier_type_options(lhs: NSExpression, rhs: NSExpression, modifier: NSComparisonPredicateModifier, type: NSPredicateOperatorType, options: NSComparisonPredicateOptions): NSComparisonPredicate;
  static predicateWithLeftExpression_rightExpression_customSelector(lhs: NSExpression, rhs: NSExpression, selector: string): NSComparisonPredicate;
  initWithLeftExpression_rightExpression_modifier_type_options<T extends NSComparisonPredicate>(lhs: NSExpression, rhs: NSExpression, modifier: NSComparisonPredicateModifier, type: NSPredicateOperatorType, options: NSComparisonPredicateOptions): T;
  initWithLeftExpression_rightExpression_customSelector<T extends NSComparisonPredicate>(lhs: NSExpression, rhs: NSExpression, selector: string): T;
  initWithCoder<T extends NSComparisonPredicate>(coder: NSCoder): T;

  predicateOperatorType(): NSPredicateOperatorType;
  setPredicateOperatorType(predicateOperatorType: NSPredicateOperatorType): void;
  comparisonPredicateModifier(): NSComparisonPredicateModifier;
  setComparisonPredicateModifier(comparisonPredicateModifier: NSComparisonPredicateModifier): void;
  leftExpression(): NSExpression;
  setLeftExpression(leftExpression: NSExpression): void;
  rightExpression(): NSExpression;
  setRightExpression(rightExpression: NSExpression): void;
  customSelector(): string;
  setCustomSelector(customSelector: string): void;
  options(): NSComparisonPredicateOptions;
  setOptions(options: NSComparisonPredicateOptions): void;
}

declare enum NSComparisonPredicateOptions {
  NSCaseInsensitivePredicateOption = 0x01,
  NSDiacriticInsensitivePredicateOption = 0x02,
  NSNormalizedPredicateOption = 0x04,
}

declare enum NSComparisonPredicateModifier {
  NSDirectPredicateModifier = 0,
  NSAllPredicateModifier,
  NSAnyPredicateModifier,
}

declare enum NSPredicateOperatorType {
  NSLessThanPredicateOperatorType = 0,
  NSLessThanOrEqualToPredicateOperatorType,
  NSGreaterThanPredicateOperatorType,
  NSGreaterThanOrEqualToPredicateOperatorType,
  NSEqualToPredicateOperatorType,
  NSNotEqualToPredicateOperatorType,
  NSMatchesPredicateOperatorType,
  NSLikePredicateOperatorType,
  NSBeginsWithPredicateOperatorType,
  NSEndsWithPredicateOperatorType,
  NSInPredicateOperatorType,
  NSCustomSelectorPredicateOperatorType,
  NSContainsPredicateOperatorType = 99,
  NSBetweenPredicateOperatorType,
}

declare class NSCompoundPredicate extends NSPredicate {
  initWithType_subpredicates<T extends NSCompoundPredicate>(type: NSCompoundPredicateType, subpredicates: NSArray<any> | any[]): T;
  initWithCoder<T extends NSCompoundPredicate>(coder: NSCoder): T;

  compoundPredicateType(): NSCompoundPredicateType;
  setCompoundPredicateType(compoundPredicateType: NSCompoundPredicateType): void;
  subpredicates(): NSArray<any>;
  setSubpredicates(subpredicates: NSArray<any> | any[]): void;
}

declare enum NSCompoundPredicateType {
  NSNotPredicateType = 0,
  NSAndPredicateType,
  NSOrPredicateType,
}

declare class NSConnection extends NSObject {
  static allConnections(): NSArray<any>;
  static defaultConnection(): NSConnection;
  static connectionWithRegisteredName_host(name: NSString | string, hostName: NSString | string | null): NSConnection;
  static connectionWithRegisteredName_host_usingNameServer(name: NSString | string, hostName: NSString | string | null, server: NSPortNameServer): NSConnection;
  static rootProxyForConnectionWithRegisteredName_host(name: NSString | string, hostName: NSString | string | null): NSDistantObject;
  static rootProxyForConnectionWithRegisteredName_host_usingNameServer(name: NSString | string, hostName: NSString | string | null, server: NSPortNameServer): NSDistantObject;
  static serviceConnectionWithName_rootObject_usingNameServer(name: NSString | string, root: any, server: NSPortNameServer): NSConnection;
  static serviceConnectionWithName_rootObject(name: NSString | string, root: any): NSConnection;
  invalidate(): void;
  addRequestMode(rmode: NSString | string): void;
  removeRequestMode(rmode: NSString | string): void;
  registerName(name: NSString | string | null): boolean;
  registerName_withNameServer(name: NSString | string | null, server: NSPortNameServer): boolean;
  static connectionWithReceivePort_sendPort(receivePort: NSPort | null, sendPort: NSPort | null): NSConnection;
  static currentConversation(): any;
  initWithReceivePort_sendPort<T extends NSConnection>(receivePort: NSPort | null, sendPort: NSPort | null): T;
  enableMultipleThreads(): void;
  addRunLoop(runloop: NSRunLoop): void;
  removeRunLoop(runloop: NSRunLoop): void;
  runInNewThread(): void;
  dispatchWithComponents(components: NSArray<any> | any[]): void;

  statistics(): NSDictionary<any, any>;
  setStatistics(statistics: NSDictionary<any, any> | {[key: string]: any}): void;
  requestTimeout(): NSTimeInterval;
  setRequestTimeout(requestTimeout: NSTimeInterval): void;
  replyTimeout(): NSTimeInterval;
  setReplyTimeout(replyTimeout: NSTimeInterval): void;
  rootObject(): any;
  setRootObject(rootObject: any): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  independentConversationQueueing(): boolean;
  setIndependentConversationQueueing(independentConversationQueueing: boolean): void;
  valid(): boolean;
  setValid(valid: boolean): void;
  rootProxy(): NSDistantObject;
  setRootProxy(rootProxy: NSDistantObject): void;
  requestModes(): NSArray<any>;
  setRequestModes(requestModes: NSArray<any> | any[]): void;
  sendPort(): NSPort;
  setSendPort(sendPort: NSPort): void;
  receivePort(): NSPort;
  setReceivePort(receivePort: NSPort): void;
  multipleThreadsEnabled(): boolean;
  setMultipleThreadsEnabled(multipleThreadsEnabled: boolean): void;
  remoteObjects(): NSArray<any>;
  setRemoteObjects(remoteObjects: NSArray<any> | any[]): void;
  localObjects(): NSArray<any>;
  setLocalObjects(localObjects: NSArray<any> | any[]): void;
}

declare class NSDistantObjectRequest extends NSObject {
  replyWithException(exception: NSException | Error | null): void;

  invocation(): NSInvocation;
  setInvocation(invocation: NSInvocation): void;
  connection(): NSConnection;
  setConnection(connection: NSConnection): void;
  conversation(): any;
  setConversation(conversation: any): void;
}

declare interface INSConnectionDelegate {
  makeNewConnection_sender(conn: NSConnection, ancestor: NSConnection): boolean;
  connection_shouldMakeNewConnection(ancestor: NSConnection, conn: NSConnection): boolean;
  authenticationDataForComponents(components: NSArray<any> | any[]): NSData;
  authenticateComponents_withData(components: NSArray<any> | any[], signature: NSData): boolean;
  createConversationForConnection(conn: NSConnection): any;
  connection_handleRequest(connection: NSConnection, doreq: NSDistantObjectRequest): boolean;
}

declare class NSData extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding {
  getBytes_length(buffer: void, length: NSUInteger): void;
  getBytes_range(buffer: void, range: NSRange): void;
  isEqualToData(other: NSData): boolean;
  subdataWithRange(range: NSRange): NSData;
  writeToFile_atomically(path: NSString | string, useAuxiliaryFile: boolean): boolean;
  writeToURL_atomically(url: NSURL, atomically: boolean): boolean;
  writeToFile_options_error(path: NSString | string, writeOptionsMask: NSDataWritingOptions, errorPtr: NSError): boolean;
  writeToURL_options_error(url: NSURL, writeOptionsMask: NSDataWritingOptions, errorPtr: NSError): boolean;
  rangeOfData_options_range(dataToFind: NSData, mask: NSDataSearchOptions, searchRange: NSRange): NSRange;
  enumerateByteRangesUsingBlock(block: Block): void;
  static data(): NSData;
  static dataWithBytes_length(bytes: void | null, length: NSUInteger): NSData;
  static dataWithBytesNoCopy_length(bytes: void, length: NSUInteger): NSData;
  static dataWithBytesNoCopy_length_freeWhenDone(bytes: void, length: NSUInteger, b: boolean): NSData;
  static dataWithContentsOfFile_options_error(path: NSString | string, readOptionsMask: NSDataReadingOptions, errorPtr: NSError): NSData;
  static dataWithContentsOfURL_options_error(url: NSURL, readOptionsMask: NSDataReadingOptions, errorPtr: NSError): NSData;
  static dataWithContentsOfFile(path: NSString | string): NSData;
  static dataWithContentsOfURL(url: NSURL): NSData;
  initWithBytes_length<T extends NSData>(bytes: void | null, length: NSUInteger): T;
  initWithBytesNoCopy_length<T extends NSData>(bytes: void, length: NSUInteger): T;
  initWithBytesNoCopy_length_freeWhenDone<T extends NSData>(bytes: void, length: NSUInteger, b: boolean): T;
  initWithBytesNoCopy_length_deallocator<T extends NSData>(bytes: void, length: NSUInteger, deallocator: Block | null): T;
  initWithContentsOfFile_options_error<T extends NSData>(path: NSString | string, readOptionsMask: NSDataReadingOptions, errorPtr: NSError): T;
  initWithContentsOfURL_options_error<T extends NSData>(url: NSURL, readOptionsMask: NSDataReadingOptions, errorPtr: NSError): T;
  initWithContentsOfFile<T extends NSData>(path: NSString | string): T;
  initWithContentsOfURL<T extends NSData>(url: NSURL): T;
  initWithData<T extends NSData>(data: NSData): T;
  static dataWithData(data: NSData): NSData;
  initWithBase64EncodedString_options<T extends NSData>(base64String: NSString | string, options: NSDataBase64DecodingOptions): T;
  base64EncodedStringWithOptions(options: NSDataBase64EncodingOptions): NSString;
  initWithBase64EncodedData_options<T extends NSData>(base64Data: NSData, options: NSDataBase64DecodingOptions): T;
  base64EncodedDataWithOptions(options: NSDataBase64EncodingOptions): NSData;
  getBytes(buffer: void): void;
  static dataWithContentsOfMappedFile(path: NSString | string): any;
  initWithContentsOfMappedFile<T extends NSData>(path: NSString | string): T;
  initWithBase64Encoding<T extends NSData>(base64String: NSString | string): T;
  base64Encoding(): NSString;
  sha1(): NSData;
  sha1AsString(): NSString;
  dataByCompressingWithAlgorithm_bc(algorithm: compression_algorithm): NSData;
  dataByDecompressing_bc(): NSData;
  hexString(): NSString;
  static dataWithBase64Encoding_xcd(base64String: NSString | string): any;
  base64Encoding_xcd(): NSString;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  length(): NSUInteger;
  setLength(length: NSUInteger): void;
  bytes(): void;
  setBytes(bytes: void): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableData extends NSData {
  appendBytes_length(bytes: void, length: NSUInteger): void;
  appendData(other: NSData): void;
  increaseLengthBy(extraLength: NSUInteger): void;
  replaceBytesInRange_withBytes(range: NSRange, bytes: void): void;
  resetBytesInRange(range: NSRange): void;
  setData(data: NSData): void;
  replaceBytesInRange_withBytes_length(range: NSRange, replacementBytes: void | null, replacementLength: NSUInteger): void;
  static dataWithCapacity(aNumItems: NSUInteger): NSMutableData;
  static dataWithLength(length: NSUInteger): NSMutableData;
  initWithCapacity<T extends NSMutableData>(capacity: NSUInteger): T;
  initWithLength<T extends NSMutableData>(length: NSUInteger): T;

  mutableBytes(): void;
  setMutableBytes(mutableBytes: void): void;
  length(): NSUInteger;
  setLength(length: NSUInteger): void;
}

declare class NSPurgeableData extends NSMutableData implements INSDiscardableContent {
  beginContentAccess(): boolean;
  endContentAccess(): void;
  discardContentIfPossible(): void;
  isContentDiscarded(): boolean;
}

declare enum NSDataReadingOptions {
  NSDataReadingMappedIfSafe = 1 << 0,
  NSDataReadingUncached = 1 << 1,
  NSDataReadingMappedAlways = 1 << 3,
  NSDataReadingMapped,
  NSMappedRead,
  NSUncachedRead,
}

declare enum NSDataWritingOptions {
  NSDataWritingAtomic = 1 << 0,
  NSDataWritingWithoutOverwriting = 1 << 1,
  NSDataWritingFileProtectionNone = 0x10000000,
  NSDataWritingFileProtectionComplete = 0x20000000,
  NSDataWritingFileProtectionCompleteUnlessOpen = 0x30000000,
  NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication = 0x40000000,
  NSDataWritingFileProtectionMask = 0xf0000000,
  NSAtomicWrite,
}

declare enum NSDataSearchOptions {
  NSDataSearchBackwards = 1 << 0,
  NSDataSearchAnchored = 1 << 1,
}

declare enum NSDataBase64EncodingOptions {
  NSDataBase64Encoding64CharacterLineLength = 1 << 0,
  NSDataBase64Encoding76CharacterLineLength = 1 << 1,
  NSDataBase64EncodingEndLineWithCarriageReturn = 1 << 4,
  NSDataBase64EncodingEndLineWithLineFeed = 1 << 5,
}

declare enum NSDataBase64DecodingOptions {
  NSDataBase64DecodingIgnoreUnknownCharacters = 1 << 0,
}

declare type NSTimeInterval = number

declare class NSDateComponentsFormatter extends NSFormatter {
  stringForObjectValue(obj: any | null): NSString;
  stringFromDateComponents(components: NSDateComponents): NSString;
  stringFromDate_toDate(startDate: NSDate, endDate: NSDate): NSString;
  stringFromTimeInterval(ti: NSTimeInterval): NSString;
  static localizedStringFromDateComponents_unitsStyle(components: NSDateComponents, unitsStyle: NSDateComponentsFormatterUnitsStyle): NSString;
  getObjectValue_forString_errorDescription(obj: any, string: NSString | string, error: NSString | string): boolean;

  unitsStyle(): NSDateComponentsFormatterUnitsStyle;
  setUnitsStyle(unitsStyle: NSDateComponentsFormatterUnitsStyle): void;
  allowedUnits(): NSCalendarUnit;
  setAllowedUnits(allowedUnits: NSCalendarUnit): void;
  zeroFormattingBehavior(): NSDateComponentsFormatterZeroFormattingBehavior;
  setZeroFormattingBehavior(zeroFormattingBehavior: NSDateComponentsFormatterZeroFormattingBehavior): void;
  calendar(): NSCalendar;
  setCalendar(calendar: NSCalendar): void;
  referenceDate(): NSDate;
  setReferenceDate(referenceDate: NSDate): void;
  allowsFractionalUnits(): boolean;
  setAllowsFractionalUnits(allowsFractionalUnits: boolean): void;
  maximumUnitCount(): NSInteger;
  setMaximumUnitCount(maximumUnitCount: NSInteger): void;
  collapsesLargestUnit(): boolean;
  setCollapsesLargestUnit(collapsesLargestUnit: boolean): void;
  includesApproximationPhrase(): boolean;
  setIncludesApproximationPhrase(includesApproximationPhrase: boolean): void;
  includesTimeRemainingPhrase(): boolean;
  setIncludesTimeRemainingPhrase(includesTimeRemainingPhrase: boolean): void;
  formattingContext(): NSFormattingContext;
  setFormattingContext(formattingContext: NSFormattingContext): void;
}

declare enum NSDateComponentsFormatterUnitsStyle {
  NSDateComponentsFormatterUnitsStylePositional = 0,
  NSDateComponentsFormatterUnitsStyleAbbreviated,
  NSDateComponentsFormatterUnitsStyleShort,
  NSDateComponentsFormatterUnitsStyleFull,
  NSDateComponentsFormatterUnitsStyleSpellOut,
  NSDateComponentsFormatterUnitsStyleBrief,
}

declare enum NSDateComponentsFormatterZeroFormattingBehavior {
  NSDateComponentsFormatterZeroFormattingBehaviorNone,
  NSDateComponentsFormatterZeroFormattingBehaviorDefault,
  NSDateComponentsFormatterZeroFormattingBehaviorDropLeading,
  NSDateComponentsFormatterZeroFormattingBehaviorDropMiddle,
  NSDateComponentsFormatterZeroFormattingBehaviorDropTrailing,
  NSDateComponentsFormatterZeroFormattingBehaviorDropAll,
  NSDateComponentsFormatterZeroFormattingBehaviorPad,
}

declare class NSDateFormatter extends NSFormatter {
  getObjectValue_forString_range_error(obj: any, string: NSString | string, rangep: NSRange, error: NSError): boolean;
  stringFromDate(date: NSDate): NSString;
  dateFromString(string: NSString | string): NSDate;
  static localizedStringFromDate_dateStyle_timeStyle(date: NSDate, dstyle: NSDateFormatterStyle, tstyle: NSDateFormatterStyle): NSString;
  static dateFormatFromTemplate_options_locale(tmplate: NSString | string, opts: NSUInteger, locale: NSLocale | null): NSString;
  setLocalizedDateFormatFromTemplate(dateFormatTemplate: NSString | string): void;

  formattingContext(): NSFormattingContext;
  setFormattingContext(formattingContext: NSFormattingContext): void;
  static defaultFormatterBehavior(): NSDateFormatterBehavior;
  static setDefaultFormatterBehavior(defaultFormatterBehavior: NSDateFormatterBehavior): void;
  dateFormat(): NSString;
  setDateFormat(dateFormat: NSString | string): void;
  dateStyle(): NSDateFormatterStyle;
  setDateStyle(dateStyle: NSDateFormatterStyle): void;
  timeStyle(): NSDateFormatterStyle;
  setTimeStyle(timeStyle: NSDateFormatterStyle): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  generatesCalendarDates(): boolean;
  setGeneratesCalendarDates(generatesCalendarDates: boolean): void;
  formatterBehavior(): NSDateFormatterBehavior;
  setFormatterBehavior(formatterBehavior: NSDateFormatterBehavior): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  calendar(): NSCalendar;
  setCalendar(calendar: NSCalendar): void;
  lenient(): boolean;
  setLenient(lenient: boolean): void;
  twoDigitStartDate(): NSDate;
  setTwoDigitStartDate(twoDigitStartDate: NSDate): void;
  defaultDate(): NSDate;
  setDefaultDate(defaultDate: NSDate): void;
  eraSymbols(): NSArray<any>;
  setEraSymbols(eraSymbols: NSArray<any> | any[]): void;
  monthSymbols(): NSArray<any>;
  setMonthSymbols(monthSymbols: NSArray<any> | any[]): void;
  shortMonthSymbols(): NSArray<any>;
  setShortMonthSymbols(shortMonthSymbols: NSArray<any> | any[]): void;
  weekdaySymbols(): NSArray<any>;
  setWeekdaySymbols(weekdaySymbols: NSArray<any> | any[]): void;
  shortWeekdaySymbols(): NSArray<any>;
  setShortWeekdaySymbols(shortWeekdaySymbols: NSArray<any> | any[]): void;
  AMSymbol(): NSString;
  setAMSymbol(AMSymbol: NSString | string): void;
  PMSymbol(): NSString;
  setPMSymbol(PMSymbol: NSString | string): void;
  longEraSymbols(): NSArray<any>;
  setLongEraSymbols(longEraSymbols: NSArray<any> | any[]): void;
  veryShortMonthSymbols(): NSArray<any>;
  setVeryShortMonthSymbols(veryShortMonthSymbols: NSArray<any> | any[]): void;
  standaloneMonthSymbols(): NSArray<any>;
  setStandaloneMonthSymbols(standaloneMonthSymbols: NSArray<any> | any[]): void;
  shortStandaloneMonthSymbols(): NSArray<any>;
  setShortStandaloneMonthSymbols(shortStandaloneMonthSymbols: NSArray<any> | any[]): void;
  veryShortStandaloneMonthSymbols(): NSArray<any>;
  setVeryShortStandaloneMonthSymbols(veryShortStandaloneMonthSymbols: NSArray<any> | any[]): void;
  veryShortWeekdaySymbols(): NSArray<any>;
  setVeryShortWeekdaySymbols(veryShortWeekdaySymbols: NSArray<any> | any[]): void;
  standaloneWeekdaySymbols(): NSArray<any>;
  setStandaloneWeekdaySymbols(standaloneWeekdaySymbols: NSArray<any> | any[]): void;
  shortStandaloneWeekdaySymbols(): NSArray<any>;
  setShortStandaloneWeekdaySymbols(shortStandaloneWeekdaySymbols: NSArray<any> | any[]): void;
  veryShortStandaloneWeekdaySymbols(): NSArray<any>;
  setVeryShortStandaloneWeekdaySymbols(veryShortStandaloneWeekdaySymbols: NSArray<any> | any[]): void;
  quarterSymbols(): NSArray<any>;
  setQuarterSymbols(quarterSymbols: NSArray<any> | any[]): void;
  shortQuarterSymbols(): NSArray<any>;
  setShortQuarterSymbols(shortQuarterSymbols: NSArray<any> | any[]): void;
  standaloneQuarterSymbols(): NSArray<any>;
  setStandaloneQuarterSymbols(standaloneQuarterSymbols: NSArray<any> | any[]): void;
  shortStandaloneQuarterSymbols(): NSArray<any>;
  setShortStandaloneQuarterSymbols(shortStandaloneQuarterSymbols: NSArray<any> | any[]): void;
  gregorianStartDate(): NSDate;
  setGregorianStartDate(gregorianStartDate: NSDate): void;
  doesRelativeDateFormatting(): boolean;
  setDoesRelativeDateFormatting(doesRelativeDateFormatting: boolean): void;
}

declare enum NSDateFormatterStyle {
  NSDateFormatterNoStyle = 0,
  NSDateFormatterShortStyle = 1,
  NSDateFormatterMediumStyle = 2,
  NSDateFormatterLongStyle = 3,
  NSDateFormatterFullStyle = 4,
}

declare enum NSDateFormatterBehavior {
  NSDateFormatterBehaviorDefault = 0,
  NSDateFormatterBehavior10_0 = 1000,
}

declare class NSDateInterval extends NSObject implements INSCopying, INSSecureCoding {
  init<T extends NSDateInterval>(): T;
  initWithCoder<T extends NSDateInterval>(coder: NSCoder): T;
  initWithStartDate_duration<T extends NSDateInterval>(startDate: NSDate, duration: NSTimeInterval): T;
  initWithStartDate_endDate<T extends NSDateInterval>(startDate: NSDate, endDate: NSDate): T;
  compare(dateInterval: NSDateInterval): NSComparisonResult;
  isEqualToDateInterval(dateInterval: NSDateInterval): boolean;
  intersectsDateInterval(dateInterval: NSDateInterval): boolean;
  intersectionWithDateInterval(dateInterval: NSDateInterval): NSDateInterval;
  containsDate(date: NSDate): boolean;
  copyWithZone(zone: NSZone | null): any;

  startDate(): NSDate;
  setStartDate(startDate: NSDate): void;
  endDate(): NSDate;
  setEndDate(endDate: NSDate): void;
  duration(): NSTimeInterval;
  setDuration(duration: NSTimeInterval): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSDateIntervalFormatter extends NSFormatter {
  stringFromDate_toDate(fromDate: NSDate, toDate: NSDate): NSString;
  stringFromDateInterval(dateInterval: NSDateInterval): NSString;

  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  calendar(): NSCalendar;
  setCalendar(calendar: NSCalendar): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  dateTemplate(): NSString;
  setDateTemplate(dateTemplate: NSString | string): void;
  dateStyle(): NSDateIntervalFormatterStyle;
  setDateStyle(dateStyle: NSDateIntervalFormatterStyle): void;
  timeStyle(): NSDateIntervalFormatterStyle;
  setTimeStyle(timeStyle: NSDateIntervalFormatterStyle): void;
}

declare enum NSDateIntervalFormatterStyle {
  NSDateIntervalFormatterNoStyle = 0,
  NSDateIntervalFormatterShortStyle = 1,
  NSDateIntervalFormatterMediumStyle = 2,
  NSDateIntervalFormatterLongStyle = 3,
  NSDateIntervalFormatterFullStyle = 4,
}

declare type NSDecimal = any

declare enum NSRoundingMode {
  NSRoundPlain,
  NSRoundDown,
  NSRoundUp,
  NSRoundBankers,
}

declare enum NSCalculationError {
  NSCalculationNoError = 0,
  NSCalculationLossOfPrecision,
  NSCalculationUnderflow,
  NSCalculationOverflow,
  NSCalculationDivideByZero,
}

declare class NSDecimalNumber extends NSNumber {
  initWithMantissa_exponent_isNegative<T extends NSDecimalNumber>(mantissa: number, exponent: number, flag: boolean): T;
  initWithDecimal<T extends NSDecimalNumber>(dcm: NSDecimal): T;
  initWithString<T extends NSDecimalNumber>(numberValue: NSString | string | null): T;
  initWithString_locale<T extends NSDecimalNumber>(numberValue: NSString | string | null, locale: any | null): T;
  descriptionWithLocale(locale: any | null): NSString;
  static decimalNumberWithMantissa_exponent_isNegative(mantissa: number, exponent: number, flag: boolean): NSDecimalNumber;
  static decimalNumberWithDecimal(dcm: NSDecimal): NSDecimalNumber;
  static decimalNumberWithString(numberValue: NSString | string | null): NSDecimalNumber;
  static decimalNumberWithString_locale(numberValue: NSString | string | null, locale: any | null): NSDecimalNumber;
  decimalNumberByAdding(decimalNumber: NSDecimalNumber): NSDecimalNumber;
  decimalNumberByAdding_withBehavior(decimalNumber: NSDecimalNumber, behavior: any | null): NSDecimalNumber;
  decimalNumberBySubtracting(decimalNumber: NSDecimalNumber): NSDecimalNumber;
  decimalNumberBySubtracting_withBehavior(decimalNumber: NSDecimalNumber, behavior: any | null): NSDecimalNumber;
  decimalNumberByMultiplyingBy(decimalNumber: NSDecimalNumber): NSDecimalNumber;
  decimalNumberByMultiplyingBy_withBehavior(decimalNumber: NSDecimalNumber, behavior: any | null): NSDecimalNumber;
  decimalNumberByDividingBy(decimalNumber: NSDecimalNumber): NSDecimalNumber;
  decimalNumberByDividingBy_withBehavior(decimalNumber: NSDecimalNumber, behavior: any | null): NSDecimalNumber;
  decimalNumberByRaisingToPower(power: NSUInteger): NSDecimalNumber;
  decimalNumberByRaisingToPower_withBehavior(power: NSUInteger, behavior: any | null): NSDecimalNumber;
  decimalNumberByMultiplyingByPowerOf10(power: number): NSDecimalNumber;
  decimalNumberByMultiplyingByPowerOf10_withBehavior(power: number, behavior: any | null): NSDecimalNumber;
  decimalNumberByRoundingAccordingToBehavior(behavior: any | null): NSDecimalNumber;
  compare(decimalNumber: NSNumber | number): NSComparisonResult;

  decimalValue(): NSDecimal;
  setDecimalValue(decimalValue: NSDecimal): void;
  static zero(): NSDecimalNumber;
  static setZero(zero: NSDecimalNumber): void;
  static one(): NSDecimalNumber;
  static setOne(one: NSDecimalNumber): void;
  static minimumDecimalNumber(): NSDecimalNumber;
  static setMinimumDecimalNumber(minimumDecimalNumber: NSDecimalNumber): void;
  static maximumDecimalNumber(): NSDecimalNumber;
  static setMaximumDecimalNumber(maximumDecimalNumber: NSDecimalNumber): void;
  static notANumber(): NSDecimalNumber;
  static setNotANumber(notANumber: NSDecimalNumber): void;
  static defaultBehavior(): any;
  static setDefaultBehavior(defaultBehavior: any): void;
  objCType(): string;
  setObjCType(objCType: string): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
}

declare class NSDecimalNumberHandler extends NSObject implements INSDecimalNumberBehaviors, INSCoding {
  initWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero<T extends NSDecimalNumberHandler>(roundingMode: NSRoundingMode, scale: number, exact: boolean, overflow: boolean, underflow: boolean, divideByZero: boolean): T;
  static decimalNumberHandlerWithRoundingMode_scale_raiseOnExactness_raiseOnOverflow_raiseOnUnderflow_raiseOnDivideByZero(roundingMode: NSRoundingMode, scale: number, exact: boolean, overflow: boolean, underflow: boolean, divideByZero: boolean): NSDecimalNumberHandler;
  roundingMode(): NSRoundingMode;
  scale(): number;
  exceptionDuringOperation_error_leftOperand_rightOperand(operation: string, error: NSCalculationError, leftOperand: NSDecimalNumber, rightOperand: NSDecimalNumber | null): NSDecimalNumber;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSDecimalNumberHandler>(aDecoder: NSCoder): T;

  static defaultDecimalNumberHandler(): NSDecimalNumberHandler;
  static setDefaultDecimalNumberHandler(defaultDecimalNumberHandler: NSDecimalNumberHandler): void;
}

declare class NSNumber extends NSValue {
  // initWithCoder<T extends NSNumber>(aDecoder: NSCoder): T;
  initWithChar<T extends NSNumber>(value: string): T;
  initWithUnsignedChar<T extends NSNumber>(value: string): T;
  initWithShort<T extends NSNumber>(value: number): T;
  initWithUnsignedShort<T extends NSNumber>(value: number): T;
  initWithInt<T extends NSNumber>(value: number): T;
  initWithUnsignedInt<T extends NSNumber>(value: number): T;
  initWithLong<T extends NSNumber>(value: number): T;
  initWithUnsignedLong<T extends NSNumber>(value: number): T;
  initWithLongLong<T extends NSNumber>(value: number): T;
  initWithUnsignedLongLong<T extends NSNumber>(value: number): T;
  initWithFloat<T extends NSNumber>(value: number): T;
  initWithDouble<T extends NSNumber>(value: number): T;
  initWithBool<T extends NSNumber>(value: boolean): T;
  initWithInteger<T extends NSNumber>(value: NSInteger): T;
  initWithUnsignedInteger<T extends NSNumber>(value: NSUInteger): T;
  compare(otherNumber: NSNumber | number): NSComparisonResult;
  isEqualToNumber(number: NSNumber | number): boolean;
  descriptionWithLocale(locale: any | null): NSString;
  static numberWithChar(value: string): NSNumber;
  static numberWithUnsignedChar(value: string): NSNumber;
  static numberWithShort(value: number): NSNumber;
  static numberWithUnsignedShort(value: number): NSNumber;
  static numberWithInt(value: number): NSNumber;
  static numberWithUnsignedInt(value: number): NSNumber;
  static numberWithLong(value: number): NSNumber;
  static numberWithUnsignedLong(value: number): NSNumber;
  static numberWithLongLong(value: number): NSNumber;
  static numberWithUnsignedLongLong(value: number): NSNumber;
  static numberWithFloat(value: number): NSNumber;
  static numberWithDouble(value: number): NSNumber;
  static numberWithBool(value: boolean): NSNumber;
  static numberWithInteger(value: NSInteger): NSNumber;
  static numberWithUnsignedInteger(value: NSUInteger): NSNumber;

  decimalValue(): NSDecimal;
  setDecimalValue(decimalValue: NSDecimal): void;
  charValue(): string;
  setCharValue(charValue: string): void;
  unsignedCharValue(): string;
  setUnsignedCharValue(unsignedCharValue: string): void;
  shortValue(): number;
  setShortValue(shortValue: number): void;
  unsignedShortValue(): number;
  setUnsignedShortValue(unsignedShortValue: number): void;
  intValue(): number;
  setIntValue(intValue: number): void;
  unsignedIntValue(): number;
  setUnsignedIntValue(unsignedIntValue: number): void;
  longValue(): number;
  setLongValue(longValue: number): void;
  unsignedLongValue(): number;
  setUnsignedLongValue(unsignedLongValue: number): void;
  longLongValue(): number;
  setLongLongValue(longLongValue: number): void;
  unsignedLongLongValue(): number;
  setUnsignedLongLongValue(unsignedLongLongValue: number): void;
  floatValue(): number;
  setFloatValue(floatValue: number): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  boolValue(): boolean;
  setBoolValue(boolValue: boolean): void;
  integerValue(): NSInteger;
  setIntegerValue(integerValue: NSInteger): void;
  unsignedIntegerValue(): NSUInteger;
  setUnsignedIntegerValue(unsignedIntegerValue: NSUInteger): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
}

declare class NSScanner extends NSObject implements INSCopying {
  scanDecimal(dcm: NSDecimal | null): boolean;
  initWithString<T extends NSScanner>(string: NSString | string): T;
  scanInt(result: number | null): boolean;
  scanInteger(result: NSInteger | null): boolean;
  scanLongLong(result: number | null): boolean;
  scanUnsignedLongLong(result: number | null): boolean;
  scanFloat(result: number | null): boolean;
  scanDouble(result: number | null): boolean;
  scanHexInt(result: number | null): boolean;
  scanHexLongLong(result: number | null): boolean;
  scanHexFloat(result: number | null): boolean;
  scanHexDouble(result: number | null): boolean;
  scanString_intoString(string: NSString | string, result: NSString | string): boolean;
  scanCharactersFromSet_intoString(set: NSCharacterSet, result: NSString | string): boolean;
  scanUpToString_intoString(string: NSString | string, result: NSString | string): boolean;
  scanUpToCharactersFromSet_intoString(set: NSCharacterSet, result: NSString | string): boolean;
  static scannerWithString(string: NSString | string): NSScanner;
  static localizedScannerWithString(string: NSString | string): any;
  copyWithZone(zone: NSZone | null): any;

  string(): NSString;
  setString(string: NSString | string): void;
  scanLocation(): NSUInteger;
  setScanLocation(scanLocation: NSUInteger): void;
  charactersToBeSkipped(): NSCharacterSet;
  setCharactersToBeSkipped(charactersToBeSkipped: NSCharacterSet): void;
  caseSensitive(): boolean;
  setCaseSensitive(caseSensitive: boolean): void;
  locale(): any;
  setLocale(locale: any): void;
  atEnd(): boolean;
  setAtEnd(atEnd: boolean): void;
}

declare interface INSDecimalNumberBehaviors {
  roundingMode(): NSRoundingMode;
  scale(): number;
  exceptionDuringOperation_error_leftOperand_rightOperand(operation: string, error: NSCalculationError, leftOperand: NSDecimalNumber, rightOperand: NSDecimalNumber | null): NSDecimalNumber;
}

declare class NSDictionary<KeyType, ObjectType> extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration {
  [key: string]: ObjectType | Function;

  objectForKey(aKey: KeyType): ObjectType;
  keyEnumerator(): NSEnumerator<any>;
  init<T extends NSDictionary<KeyType, ObjectType>>(): T;
  initWithObjects_forKeys_count<T extends NSDictionary<KeyType, ObjectType>>(objects: ObjectType[], keys: KeyType[], cnt: NSUInteger): T;
  initWithCoder<T extends NSDictionary<KeyType, ObjectType>>(aDecoder: NSCoder): T;
  allKeysForObject(anObject: ObjectType): NSArray<any>;
  descriptionWithLocale(locale: any | null): NSString;
  descriptionWithLocale_indent(locale: any | null, level: NSUInteger): NSString;
  isEqualToDictionary(otherDictionary: NSDictionary<any, any> | {[key: string]: any}): boolean;
  objectEnumerator(): NSEnumerator<any>;
  objectsForKeys_notFoundMarker(keys: NSArray<any> | any[], marker: ObjectType): NSArray<any>;
  writeToURL_error(url: NSURL, error: NSError): boolean;
  keysSortedByValueUsingSelector(comparator: string): NSArray<any>;
  getObjects_andKeys_count(objects: ObjectType[], keys: KeyType[], count: NSUInteger): void;
  objectForKeyedSubscript(key: KeyType): ObjectType;
  enumerateKeysAndObjectsUsingBlock(block: Block): void;
  enumerateKeysAndObjectsWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  keysSortedByValueUsingComparator(cmptr: NSComparator): NSArray<any>;
  keysSortedByValueWithOptions_usingComparator(opts: NSSortOptions, cmptr: NSComparator): NSArray<any>;
  keysOfEntriesPassingTest(predicate: Block): NSSet<any>;
  keysOfEntriesWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSSet<any>;
  getObjects_andKeys(objects: ObjectType[], keys: KeyType[]): void;
  static dictionaryWithContentsOfFile(path: NSString | string): NSDictionary<any, any>;
  static dictionaryWithContentsOfURL(url: NSURL): NSDictionary<any, any>;
  initWithContentsOfFile<T extends NSDictionary<KeyType, ObjectType>>(path: NSString | string): T;
  initWithContentsOfURL<T extends NSDictionary<KeyType, ObjectType>>(url: NSURL): T;
  writeToFile_atomically(path: NSString | string, useAuxiliaryFile: boolean): boolean;
  writeToURL_atomically(url: NSURL, atomically: boolean): boolean;
  static dictionary<KeyType, ObjectType>(): NSDictionary<KeyType, ObjectType>;
  static dictionaryWithObject_forKey<KeyType, ObjectType>(object: ObjectType, key: KeyType): NSDictionary<KeyType, ObjectType>;
  static dictionaryWithObjects_forKeys_count<KeyType, ObjectType>(objects: ObjectType[], keys: KeyType[], cnt: NSUInteger): NSDictionary<KeyType, ObjectType>;
  static dictionaryWithObjectsAndKeys<KeyType, ObjectType>(firstObject: any, ...args: any[]): NSDictionary<KeyType, ObjectType>;
  static dictionaryWithDictionary<KeyType, ObjectType>(dict: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<KeyType, ObjectType>;
  static dictionaryWithObjects_forKeys<KeyType, ObjectType>(objects: NSArray<any> | any[], keys: NSArray<any> | any[]): NSDictionary<KeyType, ObjectType>;
  initWithObjectsAndKeys<T extends NSDictionary<KeyType, ObjectType>>(firstObject: any, ...args: any[]): T;
  initWithDictionary<T extends NSDictionary<KeyType, ObjectType>>(otherDictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithDictionary_copyItems<T extends NSDictionary<KeyType, ObjectType>>(otherDictionary: NSDictionary<any, any> | {[key: string]: any}, flag: boolean): T;
  initWithObjects_forKeys<T extends NSDictionary<KeyType, ObjectType>>(objects: NSArray<any> | any[], keys: NSArray<any> | any[]): T;
  initWithContentsOfURL_error<T extends NSDictionary<KeyType, ObjectType>>(url: NSURL, error: NSError): T;
  static dictionaryWithContentsOfURL_error(url: NSURL, error: NSError): NSDictionary<any, any>;
  static sharedKeySetForKeys(keys: NSArray<any> | any[]): any;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;
  fileSize(): number;
  fileModificationDate(): NSDate;
  fileType(): NSString;
  filePosixPermissions(): NSUInteger;
  fileOwnerAccountName(): NSString;
  fileGroupOwnerAccountName(): NSString;
  fileSystemNumber(): NSInteger;
  fileSystemFileNumber(): NSUInteger;
  fileExtensionHidden(): boolean;
  fileHFSCreatorCode(): OSType;
  fileHFSTypeCode(): OSType;
  fileIsImmutable(): boolean;
  fileIsAppendOnly(): boolean;
  fileCreationDate(): NSDate;
  fileOwnerAccountID(): NSNumber;
  fileGroupOwnerAccountID(): NSNumber;
  valueForKey(key: NSString | string): ObjectType;
  stringForKey_bc(aKey: any): NSString;
  arrayForKey_bc(aKey: any): NSArray<any>;
  dictionaryForKey_bc(aKey: any): NSDictionary<any, any>;
  numberForKey_bc(aKey: any): NSNumber;
  boolForKey_bc(aKey: any): boolean;
  urlForKey_bc(key: any): NSURL;
  dictionaryByAddingOrRemovingObject_forKey(object: any, key: any): NSDictionary<KeyType, ObjectType>;
  mutableCopyDeep(): any;
  dictionaryByAddingDictionary(dictionary: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  filter(block: BCDictionaryFilterBlock): NSDictionary<any, any>;
  dictionaryByReplacing_usingBlock(key: any, block: Block): NSDictionary<any, any>;
  dictionaryByMappingKeys_bc(map: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  dictionaryByReverseMappingKeys_bc(map: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  mo_objectForKeyedSubscript(key: any): any;
  valueForKey_intoBool(key: NSString | string, valueOut: boolean): any;
  valueForKey_intoDouble(key: NSString | string, valueOut: number): any;
  pointForKey(key: NSString | string): CGPoint;
  sizeForKey(key: NSString | string): CGSize;
  rectForKey(key: NSString | string): CGRect;
  dictionaryWithoutKey(key: NSString | string): NSDictionary<any, any>;
  objectForKey_ofType(aKey: any, type: any): any;
  dateForKey(key: NSString | string): NSDate;
  urlForKey(key: NSString | string): NSURL;
  uuidForKey(key: NSString | string): NSUUID;
  boolForKey(key: NSString | string): boolean;
  cloudObjectForKey_ofType_parentObject(key: NSString | string, type: any, parent: SCKObject | null): SCKObject;
  cloudObjectArrayForKey_ofType_parentObject(key: NSString | string, type: any, parent: SCKObject | null): NSArray<any>;
  sizeForWidthKey_heightKey(widthKey: any, heightKey: any): CGSize;
  pointForXKey_yKey(xKey: any, yKey: any): CGPoint;
  rectForXKey_yKey_widthKey_heightKey(xKey: any, yKey: any, widthKey: any, heightKey: any): CGRect;
  prepareStringAttributesForEncoding(): NSDictionary<any, any>;
  prepareStringAttributesAfterDecoding(): NSDictionary<any, any>;
  dictionaryByMappingFontToFontDescriptors(): NSDictionary<any, any>;
  dictionaryByMappingFontDescriptorsToFont(): NSDictionary<any, any>;
  dictionaryByRefreshingFontDescriptors(): NSDictionary<any, any>;
  dictionaryByMappingComponentsDictionaryToMSImmutableColor(): NSDictionary<any, any>;
  dictionaryByConvertingNSColorsToMSImmutableColorsInColorSpace(colorSpace: NSColorSpace): NSDictionary<any, any>;
  dictionaryByConvertingMSImmutableColorsToNSColorsInColorSpace(colorSpace: NSColorSpace): NSDictionary<any, any>;
  dictionaryByTranslatingNSColorsToMSImmutableColorsInColorSpace(colorSpace: NSColorSpace): NSDictionary<any, any>;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  allKeys(): NSArray<any>;
  setAllKeys(allKeys: NSArray<any> | any[]): void;
  allValues(): NSArray<any>;
  setAllValues(allValues: NSArray<any> | any[]): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  descriptionInStringsFileFormat(): NSString;
  setDescriptionInStringsFileFormat(descriptionInStringsFileFormat: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableDictionary<KeyType, ObjectType> extends NSDictionary<KeyType, ObjectType> {
  removeObjectForKey(aKey: KeyType): void;
  setObject_forKey(anObject: ObjectType, aKey: KeyType): void;
  // init<T extends NSMutableDictionary<KeyType, ObjectType>>(): T;
  initWithCapacity<T extends NSMutableDictionary<KeyType, ObjectType>>(numItems: NSUInteger): T;
  // initWithCoder<T extends NSMutableDictionary<KeyType, ObjectType>>(aDecoder: NSCoder): T;
  addEntriesFromDictionary(otherDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  removeAllObjects(): void;
  removeObjectsForKeys(keyArray: NSArray<any> | any[]): void;
  setDictionary(otherDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  setObject_forKeyedSubscript(obj: ObjectType | null, key: KeyType): void;
  static dictionaryWithCapacity<KeyType, ObjectType>(numItems: NSUInteger): NSMutableDictionary<KeyType, ObjectType>;
  static dictionaryWithContentsOfFile(path: NSString | string): NSMutableDictionary<any, any>;
  static dictionaryWithContentsOfURL(url: NSURL): NSMutableDictionary<any, any>;
  // initWithContentsOfFile<T extends NSMutableDictionary<KeyType, ObjectType>>(path: NSString | string): T;
  // initWithContentsOfURL<T extends NSMutableDictionary<KeyType, ObjectType>>(url: NSURL): T;
  static dictionaryWithSharedKeySet(keyset: any): NSMutableDictionary<any, any>;
  setValue_forKey(value: ObjectType | null, key: NSString | string): void;
  objectForKey_orBySettingMissingObject(aKey: NSString | string, anObject: any): any;
  addObject_forKey(anObject: any, aKey: any): void;
  mo_setObject_forKeyedSubscript(obj: any, key: any): void;
  setPoint_forKey(point: CGPoint, key: NSString | string): void;
  setSize_forKey(size: CGSize, key: NSString | string): void;
  setRect_forKey(rect: CGRect, key: NSString | string): void;
  mergeEntriesFromDictionary(dictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  setDate_forKey(date: NSDate | null, key: NSString | string): void;

  visible(): boolean;
  setVisible(visible: boolean): void;
  locked(): boolean;
  setLocked(locked: boolean): void;
  selected(): boolean;
  setSelected(selected: boolean): void;
  hovered(): boolean;
  setHovered(hovered: boolean): void;
  isFlow(): boolean;
  setIsFlow(isFlow: boolean): void;
  isSlice(): boolean;
  setIsSlice(isSlice: boolean): void;
  exportFileName(): NSString;
  setExportFileName(exportFileName: NSString | string): void;
}

declare class NSDistantObject extends NSProxy implements INSCoding {
  static proxyWithTarget_connection(target: any, connection: NSConnection): any;
  initWithTarget_connection<T extends NSDistantObject>(target: any, connection: NSConnection): T;
  static proxyWithLocal_connection(target: any, connection: NSConnection): any;
  initWithLocal_connection<T extends NSDistantObject>(target: any, connection: NSConnection): T;
  initWithCoder<T extends NSDistantObject>(inCoder: NSCoder): T;
  setProtocolForProxy(proto: Protocol | null): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSDistantObject>(aDecoder: NSCoder): T;

  connectionForProxy(): NSConnection;
  setConnectionForProxy(connectionForProxy: NSConnection): void;
}

declare class NSDistributedLock extends NSObject {
  static lockWithPath(path: NSString | string): NSDistributedLock;
  initWithPath<T extends NSDistributedLock>(path: NSString | string): T;
  tryLock(): boolean;
  unlock(): void;
  breakLock(): void;

  lockDate(): NSDate;
  setLockDate(lockDate: NSDate): void;
}

declare class NSDistributedNotificationCenter extends NSNotificationCenter {
  static notificationCenterForType(notificationCenterType: NSDistributedNotificationCenterType): NSDistributedNotificationCenter;
  static defaultCenter(): NSDistributedNotificationCenter;
  addObserver_selector_name_object_suspensionBehavior(observer: any, selector: string, name: NSNotificationName | null, object: NSString | string | null, suspensionBehavior: NSNotificationSuspensionBehavior): void;
  postNotificationName_object_userInfo_deliverImmediately(name: NSNotificationName, object: NSString | string | null, userInfo: NSDictionary<any, any> | {[key: string]: any} | null, deliverImmediately: boolean): void;
  postNotificationName_object_userInfo_options(name: NSNotificationName, object: NSString | string | null, userInfo: NSDictionary<any, any> | {[key: string]: any} | null, options: NSDistributedNotificationOptions): void;
  addObserver_selector_name_object(observer: any, aSelector: string, aName: NSNotificationName | null, anObject: NSString | string | null): void;
  postNotificationName_object(aName: NSNotificationName, anObject: NSString | string | null): void;
  postNotificationName_object_userInfo(aName: NSNotificationName, anObject: NSString | string | null, aUserInfo: NSDictionary<any, any> | {[key: string]: any} | null): void;
  removeObserver_name_object(observer: any, aName: NSNotificationName | null, anObject: NSString | string | null): void;

  suspended(): boolean;
  setSuspended(suspended: boolean): void;
}

declare type NSDistributedNotificationCenterType = NSString

declare enum NSNotificationSuspensionBehavior {
  NSNotificationSuspensionBehaviorDrop = 1,
  NSNotificationSuspensionBehaviorCoalesce = 2,
  NSNotificationSuspensionBehaviorHold = 3,
  NSNotificationSuspensionBehaviorDeliverImmediately = 4,
}

declare enum NSDistributedNotificationOptions {
  NSDistributedNotificationDeliverImmediately,
  NSDistributedNotificationPostToAllSessions,
}

declare class NSEnergyFormatter extends NSFormatter {
  stringFromValue_unit(value: number, unit: NSEnergyFormatterUnit): NSString;
  stringFromJoules(numberInJoules: number): NSString;
  unitStringFromValue_unit(value: number, unit: NSEnergyFormatterUnit): NSString;
  unitStringFromJoules_usedUnit(numberInJoules: number, unitp: NSEnergyFormatterUnit | null): NSString;
  getObjectValue_forString_errorDescription(obj: any, string: NSString | string, error: NSString | string): boolean;

  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
  unitStyle(): NSFormattingUnitStyle;
  setUnitStyle(unitStyle: NSFormattingUnitStyle): void;
  forFoodEnergyUse(): boolean;
  setForFoodEnergyUse(forFoodEnergyUse: boolean): void;
}

declare enum NSEnergyFormatterUnit {
  NSEnergyFormatterUnitJoule = 11,
  NSEnergyFormatterUnitKilojoule = 14,
  NSEnergyFormatterUnitCalorie,
  NSEnergyFormatterUnitKilocalorie,
}

declare class NSEnumerator<ObjectType> extends NSObject implements INSFastEnumeration {
  nextObject(): ObjectType;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  allObjects(): NSArray<any>;
  setAllObjects(allObjects: NSArray<any> | any[]): void;
}

declare interface INSFastEnumeration {
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;
}

declare type NSFastEnumerationState = {
  state: number
  itemsPtr: any
  mutationsPtr: number
  extra: [number, number, number, number, number]
}

declare class NSError extends NSObject implements INSCopying, INSSecureCoding {
  initWithDomain_code_userInfo<T extends NSError>(domain: NSErrorDomain, code: NSInteger, dict: NSDictionary<any, any> | {[key: string]: any} | null): T;
  static errorWithDomain_code_userInfo(domain: NSErrorDomain, code: NSInteger, dict: NSDictionary<any, any> | {[key: string]: any} | null): NSError;
  static setUserInfoValueProviderForDomain_provider(errorDomain: NSErrorDomain, provider: Block): void;
  static errorFromAPIResponse_data(response: NSURLResponse | null, data: NSData | null): NSError;
  copyWithZone(zone: NSZone | null): any;

  domain(): NSErrorDomain;
  setDomain(domain: NSErrorDomain): void;
  code(): NSInteger;
  setCode(code: NSInteger): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  localizedDescription(): NSString;
  setLocalizedDescription(localizedDescription: NSString | string): void;
  localizedFailureReason(): NSString;
  setLocalizedFailureReason(localizedFailureReason: NSString | string): void;
  localizedRecoverySuggestion(): NSString;
  setLocalizedRecoverySuggestion(localizedRecoverySuggestion: NSString | string): void;
  localizedRecoveryOptions(): NSArray<any>;
  setLocalizedRecoveryOptions(localizedRecoveryOptions: NSArray<any> | any[]): void;
  recoveryAttempter(): any;
  setRecoveryAttempter(recoveryAttempter: any): void;
  helpAnchor(): NSString;
  setHelpAnchor(helpAnchor: NSString | string): void;
  cloudUnauthorized(): boolean;
  setCloudUnauthorized(cloudUnauthorized: boolean): void;
  urlCancelled(): boolean;
  setUrlCancelled(urlCancelled: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSErrorDomain = NSString

declare type NSErrorUserInfoKey = NSString

declare class NSException extends NSObject implements INSCopying, INSCoding {
  static exceptionWithName_reason_userInfo(name: NSExceptionName, reason: NSString | string | null, userInfo: NSDictionary<any, any> | {[key: string]: any} | null): NSException;
  initWithName_reason_userInfo<T extends NSException>(aName: NSExceptionName, aReason: NSString | string | null, aUserInfo: NSDictionary<any, any> | {[key: string]: any} | null): T;
  raise(): void;
  static raise_format(name: NSExceptionName, format: NSString | string, ...args: any[]): void;
  static raise_format_arguments(name: NSExceptionName, format: NSString | string, ...argList: any[]): void;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSException>(aDecoder: NSCoder): T;

  name(): NSExceptionName;
  setName(name: NSExceptionName): void;
  reason(): NSString;
  setReason(reason: NSString | string): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  callStackReturnAddresses(): NSArray<any>;
  setCallStackReturnAddresses(callStackReturnAddresses: NSArray<any> | any[]): void;
  callStackSymbols(): NSArray<any>;
  setCallStackSymbols(callStackSymbols: NSArray<any> | any[]): void;
}

declare class NSAssertionHandler extends NSObject {
  handleFailureInMethod_object_file_lineNumber_description(selector: string, object: any, fileName: NSString | string, line: NSInteger, format: NSString | string | null, ...args: any[]): void;
  handleFailureInFunction_file_lineNumber_description(functionName: NSString | string, fileName: NSString | string, line: NSInteger, format: NSString | string | null, ...args: any[]): void;

  static currentHandler(): NSAssertionHandler;
  static setCurrentHandler(currentHandler: NSAssertionHandler): void;
}

declare class NSExpression extends NSObject implements INSSecureCoding, INSCopying {
  static expressionWithFormat_argumentArray(expressionFormat: NSString | string, arguments: NSArray<any> | any[]): NSExpression;
  static expressionWithFormat(expressionFormat: NSString | string, ...args: any[]): NSExpression;
  static expressionWithFormat_arguments(expressionFormat: NSString | string, ...argList: any[]): NSExpression;
  static expressionForConstantValue(obj: any | null): NSExpression;
  static expressionForEvaluatedObject(): NSExpression;
  static expressionForVariable(string: NSString | string): NSExpression;
  static expressionForKeyPath(keyPath: NSString | string): NSExpression;
  static expressionForFunction_arguments(name: NSString | string, parameters: NSArray<any> | any[]): NSExpression;
  static expressionForAggregate(subexpressions: NSArray<any> | any[]): NSExpression;
  static expressionForUnionSet_with(left: NSExpression, right: NSExpression): NSExpression;
  static expressionForIntersectSet_with(left: NSExpression, right: NSExpression): NSExpression;
  static expressionForMinusSet_with(left: NSExpression, right: NSExpression): NSExpression;
  static expressionForSubquery_usingIteratorVariable_predicate(expression: NSExpression, variable: NSString | string, predicate: NSPredicate): NSExpression;
  static expressionForFunction_selectorName_arguments(target: NSExpression, name: NSString | string, parameters: NSArray<any> | any[] | null): NSExpression;
  static expressionForAnyKey(): NSExpression;
  static expressionForBlock_arguments(block: Block, arguments: NSArray<any> | any[] | null): NSExpression;
  static expressionForConditional_trueExpression_falseExpression(predicate: NSPredicate, trueExpression: NSExpression, falseExpression: NSExpression): NSExpression;
  initWithExpressionType<T extends NSExpression>(type: NSExpressionType): T;
  initWithCoder<T extends NSExpression>(coder: NSCoder): T;
  expressionValueWithObject_context(object: any | null, context: NSMutableDictionary<any, any> | {[key: string]: any} | null): any;
  allowEvaluation(): void;
  copyWithZone(zone: NSZone | null): any;

  expressionType(): NSExpressionType;
  setExpressionType(expressionType: NSExpressionType): void;
  constantValue(): any;
  setConstantValue(constantValue: any): void;
  keyPath(): NSString;
  setKeyPath(keyPath: NSString | string): void;
  function(): NSString;
  setFunction(functionName: NSString | string): void;
  variable(): NSString;
  setVariable(variable: NSString | string): void;
  operand(): NSExpression;
  setOperand(operand: NSExpression): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  collection(): any;
  setCollection(collection: any): void;
  predicate(): NSPredicate;
  setPredicate(predicate: NSPredicate): void;
  leftExpression(): NSExpression;
  setLeftExpression(leftExpression: NSExpression): void;
  rightExpression(): NSExpression;
  setRightExpression(rightExpression: NSExpression): void;
  trueExpression(): NSExpression;
  setTrueExpression(trueExpression: NSExpression): void;
  falseExpression(): NSExpression;
  setFalseExpression(falseExpression: NSExpression): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSExpressionType {
  NSConstantValueExpressionType = 0,
  NSEvaluatedObjectExpressionType,
  NSVariableExpressionType,
  NSKeyPathExpressionType,
  NSFunctionExpressionType,
  NSUnionSetExpressionType,
  NSIntersectSetExpressionType,
  NSMinusSetExpressionType,
  NSSubqueryExpressionType = 13,
  NSAggregateExpressionType = 14,
  NSAnyKeyExpressionType = 15,
  NSBlockExpressionType = 19,
  NSConditionalExpressionType = 20,
}

declare class NSExtensionContext extends NSObject {
  completeRequestReturningItems_completionHandler(items: NSArray<any> | any[] | null, completionHandler: Block): void;
  cancelRequestWithError(error: NSError): void;
  openURL_completionHandler(URL: NSURL, completionHandler: Block): void;

  inputItems(): NSArray<any>;
  setInputItems(inputItems: NSArray<any> | any[]): void;
}

declare class NSExtensionItem extends NSObject implements INSCopying, INSSecureCoding {
  copyWithZone(zone: NSZone | null): any;

  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  attributedContentText(): NSAttributedString;
  setAttributedContentText(attributedContentText: NSAttributedString): void;
  attachments(): NSArray<any>;
  setAttachments(attachments: NSArray<any> | any[]): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare interface INSExtensionRequestHandling {
  beginRequestWithExtensionContext(context: NSExtensionContext): void;
}

declare class NSFileAccessIntent extends NSObject {
  static readingIntentWithURL_options(url: NSURL, options: NSFileCoordinatorReadingOptions): NSFileAccessIntent;
  static writingIntentWithURL_options(url: NSURL, options: NSFileCoordinatorWritingOptions): NSFileAccessIntent;

  URL(): NSURL;
  setURL(URL: NSURL): void;
}

declare class NSFileCoordinator extends NSObject {
  static addFilePresenter(filePresenter: any): void;
  static removeFilePresenter(filePresenter: any): void;
  initWithFilePresenter<T extends NSFileCoordinator>(filePresenterOrNil: any | null): T;
  coordinateAccessWithIntents_queue_byAccessor(intents: NSArray<any> | any[], queue: NSOperationQueue, accessor: Block): void;
  coordinateReadingItemAtURL_options_error_byAccessor(url: NSURL, options: NSFileCoordinatorReadingOptions, outError: NSError, reader: Block): void;
  coordinateWritingItemAtURL_options_error_byAccessor(url: NSURL, options: NSFileCoordinatorWritingOptions, outError: NSError, writer: Block): void;
  coordinateReadingItemAtURL_options_writingItemAtURL_options_error_byAccessor(readingURL: NSURL, readingOptions: NSFileCoordinatorReadingOptions, writingURL: NSURL, writingOptions: NSFileCoordinatorWritingOptions, outError: NSError, readerWriter: Block): void;
  coordinateWritingItemAtURL_options_writingItemAtURL_options_error_byAccessor(url1: NSURL, options1: NSFileCoordinatorWritingOptions, url2: NSURL, options2: NSFileCoordinatorWritingOptions, outError: NSError, writer: Block): void;
  prepareForReadingItemsAtURLs_options_writingItemsAtURLs_options_error_byAccessor(readingURLs: NSArray<any> | any[], readingOptions: NSFileCoordinatorReadingOptions, writingURLs: NSArray<any> | any[], writingOptions: NSFileCoordinatorWritingOptions, outError: NSError, batchAccessor: Block): void;
  itemAtURL_willMoveToURL(oldURL: NSURL, newURL: NSURL): void;
  itemAtURL_didMoveToURL(oldURL: NSURL, newURL: NSURL): void;
  itemAtURL_didChangeUbiquityAttributes(url: NSURL, attributes: NSSet<any>): void;
  cancel(): void;

  static filePresenters(): NSArray<any>;
  static setFilePresenters(filePresenters: NSArray<any> | any[]): void;
  purposeIdentifier(): NSString;
  setPurposeIdentifier(purposeIdentifier: NSString | string): void;
}

declare enum NSFileCoordinatorReadingOptions {
  NSFileCoordinatorReadingWithoutChanges = 1 << 0,
  NSFileCoordinatorReadingResolvesSymbolicLink = 1 << 1,
  NSFileCoordinatorReadingImmediatelyAvailableMetadataOnly = 1 << 2,
  NSFileCoordinatorReadingForUploading = 1 << 3,
}

declare enum NSFileCoordinatorWritingOptions {
  NSFileCoordinatorWritingForDeleting = 1 << 0,
  NSFileCoordinatorWritingForMoving = 1 << 1,
  NSFileCoordinatorWritingForMerging = 1 << 2,
  NSFileCoordinatorWritingForReplacing = 1 << 3,
  NSFileCoordinatorWritingContentIndependentMetadataOnly = 1 << 4,
}

declare class NSFileHandle extends NSObject implements INSSecureCoding {
  readDataToEndOfFile(): NSData;
  readDataOfLength(length: NSUInteger): NSData;
  writeData(data: NSData): void;
  seekToEndOfFile(): number;
  seekToFileOffset(offset: number): void;
  truncateFileAtOffset(offset: number): void;
  synchronizeFile(): void;
  closeFile(): void;
  initWithFileDescriptor_closeOnDealloc<T extends NSFileHandle>(fd: number, closeopt: boolean): T;
  initWithCoder<T extends NSFileHandle>(coder: NSCoder): T;
  static fileHandleForReadingAtPath(path: NSString | string): NSFileHandle;
  static fileHandleForWritingAtPath(path: NSString | string): NSFileHandle;
  static fileHandleForUpdatingAtPath(path: NSString | string): NSFileHandle;
  static fileHandleForReadingFromURL_error(url: NSURL, error: NSError): NSFileHandle;
  static fileHandleForWritingToURL_error(url: NSURL, error: NSError): NSFileHandle;
  static fileHandleForUpdatingURL_error(url: NSURL, error: NSError): NSFileHandle;
  readInBackgroundAndNotifyForModes(modes: NSArray<any> | any[] | null): void;
  readInBackgroundAndNotify(): void;
  readToEndOfFileInBackgroundAndNotifyForModes(modes: NSArray<any> | any[] | null): void;
  readToEndOfFileInBackgroundAndNotify(): void;
  acceptConnectionInBackgroundAndNotifyForModes(modes: NSArray<any> | any[] | null): void;
  acceptConnectionInBackgroundAndNotify(): void;
  waitForDataInBackgroundAndNotifyForModes(modes: NSArray<any> | any[] | null): void;
  waitForDataInBackgroundAndNotify(): void;
  initWithFileDescriptor<T extends NSFileHandle>(fd: number): T;

  availableData(): NSData;
  setAvailableData(availableData: NSData): void;
  offsetInFile(): number;
  setOffsetInFile(offsetInFile: number): void;
  static fileHandleWithStandardInput(): NSFileHandle;
  static setFileHandleWithStandardInput(fileHandleWithStandardInput: NSFileHandle): void;
  static fileHandleWithStandardOutput(): NSFileHandle;
  static setFileHandleWithStandardOutput(fileHandleWithStandardOutput: NSFileHandle): void;
  static fileHandleWithStandardError(): NSFileHandle;
  static setFileHandleWithStandardError(fileHandleWithStandardError: NSFileHandle): void;
  static fileHandleWithNullDevice(): NSFileHandle;
  static setFileHandleWithNullDevice(fileHandleWithNullDevice: NSFileHandle): void;
  fileDescriptor(): number;
  setFileDescriptor(fileDescriptor: number): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSPipe extends NSObject {
  static pipe(): NSPipe;

  fileHandleForReading(): NSFileHandle;
  setFileHandleForReading(fileHandleForReading: NSFileHandle): void;
  fileHandleForWriting(): NSFileHandle;
  setFileHandleForWriting(fileHandleForWriting: NSFileHandle): void;
}

declare class NSFileManager extends NSObject {
  mountedVolumeURLsIncludingResourceValuesForKeys_options(propertyKeys: NSArray<any> | any[] | null, options: NSVolumeEnumerationOptions): NSArray<any>;
  unmountVolumeAtURL_options_completionHandler(url: NSURL, mask: NSFileManagerUnmountOptions, completionHandler: Block): void;
  contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error(url: NSURL, keys: NSArray<any> | any[] | null, mask: NSDirectoryEnumerationOptions, error: NSError): NSArray<any>;
  URLsForDirectory_inDomains(directory: NSSearchPathDirectory, domainMask: NSSearchPathDomainMask): NSArray<any>;
  URLForDirectory_inDomain_appropriateForURL_create_error(directory: NSSearchPathDirectory, domain: NSSearchPathDomainMask, url: NSURL | null, shouldCreate: boolean, error: NSError): NSURL;
  getRelationship_ofDirectoryAtURL_toItemAtURL_error(outRelationship: NSURLRelationship, directoryURL: NSURL, otherURL: NSURL, error: NSError): boolean;
  getRelationship_ofDirectory_inDomain_toItemAtURL_error(outRelationship: NSURLRelationship, directory: NSSearchPathDirectory, domainMask: NSSearchPathDomainMask, url: NSURL, error: NSError): boolean;
  createDirectoryAtURL_withIntermediateDirectories_attributes_error(url: NSURL, createIntermediates: boolean, attributes: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): boolean;
  createSymbolicLinkAtURL_withDestinationURL_error(url: NSURL, destURL: NSURL, error: NSError): boolean;
  setAttributes_ofItemAtPath_error(attributes: NSDictionary<any, any> | {[key: string]: any}, path: NSString | string, error: NSError): boolean;
  createDirectoryAtPath_withIntermediateDirectories_attributes_error(path: NSString | string, createIntermediates: boolean, attributes: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): boolean;
  contentsOfDirectoryAtPath_error(path: NSString | string, error: NSError): NSArray<any>;
  subpathsOfDirectoryAtPath_error(path: NSString | string, error: NSError): NSArray<any>;
  attributesOfItemAtPath_error(path: NSString | string, error: NSError): NSDictionary<any, any>;
  attributesOfFileSystemForPath_error(path: NSString | string, error: NSError): NSDictionary<any, any>;
  createSymbolicLinkAtPath_withDestinationPath_error(path: NSString | string, destPath: NSString | string, error: NSError): boolean;
  destinationOfSymbolicLinkAtPath_error(path: NSString | string, error: NSError): NSString;
  copyItemAtPath_toPath_error(srcPath: NSString | string, dstPath: NSString | string, error: NSError): boolean;
  moveItemAtPath_toPath_error(srcPath: NSString | string, dstPath: NSString | string, error: NSError): boolean;
  linkItemAtPath_toPath_error(srcPath: NSString | string, dstPath: NSString | string, error: NSError): boolean;
  removeItemAtPath_error(path: NSString | string, error: NSError): boolean;
  copyItemAtURL_toURL_error(srcURL: NSURL, dstURL: NSURL, error: NSError): boolean;
  moveItemAtURL_toURL_error(srcURL: NSURL, dstURL: NSURL, error: NSError): boolean;
  linkItemAtURL_toURL_error(srcURL: NSURL, dstURL: NSURL, error: NSError): boolean;
  removeItemAtURL_error(URL: NSURL, error: NSError): boolean;
  trashItemAtURL_resultingItemURL_error(url: NSURL, outResultingURL: NSURL, error: NSError): boolean;
  fileAttributesAtPath_traverseLink(path: NSString | string, yorn: boolean): NSDictionary<any, any>;
  changeFileAttributes_atPath(attributes: NSDictionary<any, any> | {[key: string]: any}, path: NSString | string): boolean;
  directoryContentsAtPath(path: NSString | string): NSArray<any>;
  fileSystemAttributesAtPath(path: NSString | string): NSDictionary<any, any>;
  pathContentOfSymbolicLinkAtPath(path: NSString | string): NSString;
  createSymbolicLinkAtPath_pathContent(path: NSString | string, otherpath: NSString | string): boolean;
  createDirectoryAtPath_attributes(path: NSString | string, attributes: NSDictionary<any, any> | {[key: string]: any}): boolean;
  linkPath_toPath_handler(src: NSString | string, dest: NSString | string, handler: any | null): boolean;
  copyPath_toPath_handler(src: NSString | string, dest: NSString | string, handler: any | null): boolean;
  movePath_toPath_handler(src: NSString | string, dest: NSString | string, handler: any | null): boolean;
  removeFileAtPath_handler(path: NSString | string, handler: any | null): boolean;
  changeCurrentDirectoryPath(path: NSString | string): boolean;
  fileExistsAtPath(path: NSString | string): boolean;
  fileExistsAtPath_isDirectory(path: NSString | string, isDirectory: boolean | null): boolean;
  isReadableFileAtPath(path: NSString | string): boolean;
  isWritableFileAtPath(path: NSString | string): boolean;
  isExecutableFileAtPath(path: NSString | string): boolean;
  isDeletableFileAtPath(path: NSString | string): boolean;
  contentsEqualAtPath_andPath(path1: NSString | string, path2: NSString | string): boolean;
  displayNameAtPath(path: NSString | string): NSString;
  componentsToDisplayForPath(path: NSString | string): NSArray<any>;
  enumeratorAtPath(path: NSString | string): NSDirectoryEnumerator<any>;
  enumeratorAtURL_includingPropertiesForKeys_options_errorHandler(url: NSURL, keys: NSArray<any> | any[] | null, mask: NSDirectoryEnumerationOptions, handler: Block | null): NSDirectoryEnumerator<any>;
  subpathsAtPath(path: NSString | string): NSArray<any>;
  contentsAtPath(path: NSString | string): NSData;
  createFileAtPath_contents_attributes(path: NSString | string, data: NSData | null, attr: NSDictionary<any, any> | {[key: string]: any} | null): boolean;
  fileSystemRepresentationWithPath(path: NSString | string): string;
  stringWithFileSystemRepresentation_length(str: string, len: NSUInteger): NSString;
  replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error(originalItemURL: NSURL, newItemURL: NSURL, backupItemName: NSString | string | null, options: NSFileManagerItemReplacementOptions, resultingURL: NSURL, error: NSError): boolean;
  setUbiquitous_itemAtURL_destinationURL_error(flag: boolean, url: NSURL, destinationURL: NSURL, error: NSError): boolean;
  isUbiquitousItemAtURL(url: NSURL): boolean;
  startDownloadingUbiquitousItemAtURL_error(url: NSURL, error: NSError): boolean;
  evictUbiquitousItemAtURL_error(url: NSURL, error: NSError): boolean;
  URLForUbiquityContainerIdentifier(containerIdentifier: NSString | string | null): NSURL;
  URLForPublishingUbiquitousItemAtURL_expirationDate_error(url: NSURL, outDate: NSDate, error: NSError): NSURL;
  getFileProviderServicesForItemAtURL_completionHandler(url: NSURL, completionHandler: Block): void;
  containerURLForSecurityApplicationGroupIdentifier(groupIdentifier: NSString | string): NSURL;
  homeDirectoryForUser(userName: NSString | string): NSURL;
  visibleSubpathsOfDirectory(path: NSString | string): NSArray<any>;
  createDirectoryIfNecessary(directory: NSString | string): boolean;
  fileExistsAtURL(url: NSURL): boolean;
  shallowSubpathsOfDirectoryAtURL(url: NSURL): NSArray<any>;
  shallowSubpathURLsOfDirectoryAtURL(url: NSURL): NSArray<any>;
  shallowFilenamesOfDirectoryAtURL_withURLResourceValues_forURLResourceKey(url: NSURL, urlResourceValues: NSSet<any>, resourceKey: NSURLResourceKey): NSArray<any>;
  isFolderAtPath(path: NSString | string): boolean;
  isFolderAtURL(url: NSURL): boolean;
  uniqueURL(url: NSURL): NSURL;
  temporaryFolderURL(): NSURL;
  temporaryFolderURLWithName(name: NSString | string): NSURL;
  temporaryFileURLWithName_extension(name: NSString | string, extension: NSString | string): NSURL;
  temporaryFileURLToReplaceURL(url: NSURL): NSURL;
  temporaryFileURLWithExtension(extension: NSString | string): NSURL;
  _temporaryFilesRootForURL(url: NSURL): NSURL;
  static _setTemporaryFilesRootToURL(rootURL: NSURL): void;
  visibleSubpathsOfDirectoryWithoutGoingIntoPackages(path: NSString | string): NSArray<any>;
  visibleSubpathsOfDirectoryAtURLWithoutGoingIntoPackages(url: NSURL): NSArray<any>;

  static defaultManager(): NSFileManager;
  static setDefaultManager(defaultManager: NSFileManager): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  currentDirectoryPath(): NSString;
  setCurrentDirectoryPath(currentDirectoryPath: NSString | string): void;
  ubiquityIdentityToken(): any;
  setUbiquityIdentityToken(ubiquityIdentityToken: any): void;
  homeDirectoryForCurrentUser(): NSURL;
  setHomeDirectoryForCurrentUser(homeDirectoryForCurrentUser: NSURL): void;
  temporaryDirectory(): NSURL;
  setTemporaryDirectory(temporaryDirectory: NSURL): void;
}

declare class NSDirectoryEnumerator<ObjectType> extends NSEnumerator<ObjectType> {
  skipDescendents(): void;
  skipDescendants(): void;

  fileAttributes(): NSDictionary<any, any>;
  setFileAttributes(fileAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  directoryAttributes(): NSDictionary<any, any>;
  setDirectoryAttributes(directoryAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  level(): NSUInteger;
  setLevel(level: NSUInteger): void;
}

declare class NSFileProviderService extends NSObject {
  getFileProviderConnectionWithCompletionHandler(completionHandler: Block): void;

  name(): NSFileProviderServiceName;
  setName(name: NSFileProviderServiceName): void;
}

declare interface INSFileManagerDelegate {
  fileManager_shouldCopyItemAtPath_toPath(fileManager: NSFileManager, srcPath: NSString | string, dstPath: NSString | string): boolean;
  fileManager_shouldCopyItemAtURL_toURL(fileManager: NSFileManager, srcURL: NSURL, dstURL: NSURL): boolean;
  fileManager_shouldProceedAfterError_copyingItemAtPath_toPath(fileManager: NSFileManager, error: NSError, srcPath: NSString | string, dstPath: NSString | string): boolean;
  fileManager_shouldProceedAfterError_copyingItemAtURL_toURL(fileManager: NSFileManager, error: NSError, srcURL: NSURL, dstURL: NSURL): boolean;
  fileManager_shouldMoveItemAtPath_toPath(fileManager: NSFileManager, srcPath: NSString | string, dstPath: NSString | string): boolean;
  fileManager_shouldMoveItemAtURL_toURL(fileManager: NSFileManager, srcURL: NSURL, dstURL: NSURL): boolean;
  fileManager_shouldProceedAfterError_movingItemAtPath_toPath(fileManager: NSFileManager, error: NSError, srcPath: NSString | string, dstPath: NSString | string): boolean;
  fileManager_shouldProceedAfterError_movingItemAtURL_toURL(fileManager: NSFileManager, error: NSError, srcURL: NSURL, dstURL: NSURL): boolean;
  fileManager_shouldLinkItemAtPath_toPath(fileManager: NSFileManager, srcPath: NSString | string, dstPath: NSString | string): boolean;
  fileManager_shouldLinkItemAtURL_toURL(fileManager: NSFileManager, srcURL: NSURL, dstURL: NSURL): boolean;
  fileManager_shouldProceedAfterError_linkingItemAtPath_toPath(fileManager: NSFileManager, error: NSError, srcPath: NSString | string, dstPath: NSString | string): boolean;
  fileManager_shouldProceedAfterError_linkingItemAtURL_toURL(fileManager: NSFileManager, error: NSError, srcURL: NSURL, dstURL: NSURL): boolean;
  fileManager_shouldRemoveItemAtPath(fileManager: NSFileManager, path: NSString | string): boolean;
  fileManager_shouldRemoveItemAtURL(fileManager: NSFileManager, URL: NSURL): boolean;
  fileManager_shouldProceedAfterError_removingItemAtPath(fileManager: NSFileManager, error: NSError, path: NSString | string): boolean;
  fileManager_shouldProceedAfterError_removingItemAtURL(fileManager: NSFileManager, error: NSError, URL: NSURL): boolean;
}

declare type NSFileAttributeKey = NSString

declare type NSFileAttributeType = NSString

declare type NSFileProtectionType = NSString

declare type NSFileProviderServiceName = NSString

declare enum NSVolumeEnumerationOptions {
  NSVolumeEnumerationSkipHiddenVolumes = 1 << 1,
  NSVolumeEnumerationProduceFileReferenceURLs = 1 << 2,
}

declare enum NSDirectoryEnumerationOptions {
  NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1 << 0,
  NSDirectoryEnumerationSkipsPackageDescendants = 1 << 1,
  NSDirectoryEnumerationSkipsHiddenFiles = 1 << 2,
}

declare enum NSFileManagerItemReplacementOptions {
  NSFileManagerItemReplacementUsingNewMetadataOnly = 1 << 0,
  NSFileManagerItemReplacementWithoutDeletingBackupItem = 1 << 1,
}

declare enum NSURLRelationship {
  NSURLRelationshipContains,
  NSURLRelationshipSame,
  NSURLRelationshipOther,
}

declare enum NSFileManagerUnmountOptions {
  NSFileManagerUnmountAllPartitionsAndEjectDisk = 1 << 0,
  NSFileManagerUnmountWithoutUI = 1 << 1,
}

declare interface INSFilePresenter extends NSObject {
  relinquishPresentedItemToReader(reader: Block): void;
  relinquishPresentedItemToWriter(writer: Block): void;
  savePresentedItemChangesWithCompletionHandler(completionHandler: Block): void;
  accommodatePresentedItemDeletionWithCompletionHandler(completionHandler: Block): void;
  presentedItemDidMoveToURL(newURL: NSURL): void;
  presentedItemDidChange(): void;
  presentedItemDidChangeUbiquityAttributes(attributes: NSSet<any>): void;
  presentedItemDidGainVersion(version: NSFileVersion): void;
  presentedItemDidLoseVersion(version: NSFileVersion): void;
  presentedItemDidResolveConflictVersion(version: NSFileVersion): void;
  accommodatePresentedSubitemDeletionAtURL_completionHandler(url: NSURL, completionHandler: Block): void;
  presentedSubitemDidAppearAtURL(url: NSURL): void;
  presentedSubitemAtURL_didMoveToURL(oldURL: NSURL, newURL: NSURL): void;
  presentedSubitemDidChangeAtURL(url: NSURL): void;
  presentedSubitemAtURL_didGainVersion(url: NSURL, version: NSFileVersion): void;
  presentedSubitemAtURL_didLoseVersion(url: NSURL, version: NSFileVersion): void;
  presentedSubitemAtURL_didResolveConflictVersion(url: NSURL, version: NSFileVersion): void;

  presentedItemURL(): NSURL;
  setPresentedItemURL(presentedItemURL: NSURL): void;
  presentedItemOperationQueue(): NSOperationQueue;
  setPresentedItemOperationQueue(presentedItemOperationQueue: NSOperationQueue): void;
  primaryPresentedItemURL(): NSURL;
  setPrimaryPresentedItemURL(primaryPresentedItemURL: NSURL): void;
  observedPresentedItemUbiquityAttributes(): NSSet<any>;
  setObservedPresentedItemUbiquityAttributes(observedPresentedItemUbiquityAttributes: NSSet<any>): void;
}

declare class NSFileVersion extends NSObject {
  static currentVersionOfItemAtURL(url: NSURL): NSFileVersion;
  static otherVersionsOfItemAtURL(url: NSURL): NSArray<any>;
  static unresolvedConflictVersionsOfItemAtURL(url: NSURL): NSArray<any>;
  static getNonlocalVersionsOfItemAtURL_completionHandler(url: NSURL, completionHandler: Block): void;
  static versionOfItemAtURL_forPersistentIdentifier(url: NSURL, persistentIdentifier: any): NSFileVersion;
  static addVersionOfItemAtURL_withContentsOfURL_options_error(url: NSURL, contentsURL: NSURL, options: NSFileVersionAddingOptions, outError: NSError): NSFileVersion;
  static temporaryDirectoryURLForNewVersionOfItemAtURL(url: NSURL): NSURL;
  replaceItemAtURL_options_error(url: NSURL, options: NSFileVersionReplacingOptions, error: NSError): NSURL;
  removeAndReturnError(outError: NSError): boolean;
  static removeOtherVersionsOfItemAtURL_error(url: NSURL, outError: NSError): boolean;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  localizedName(): NSString;
  setLocalizedName(localizedName: NSString | string): void;
  localizedNameOfSavingComputer(): NSString;
  setLocalizedNameOfSavingComputer(localizedNameOfSavingComputer: NSString | string): void;
  originatorNameComponents(): NSPersonNameComponents;
  setOriginatorNameComponents(originatorNameComponents: NSPersonNameComponents): void;
  modificationDate(): NSDate;
  setModificationDate(modificationDate: NSDate): void;
  persistentIdentifier(): any;
  setPersistentIdentifier(persistentIdentifier: any): void;
  conflict(): boolean;
  setConflict(conflict: boolean): void;
  resolved(): boolean;
  setResolved(resolved: boolean): void;
  discardable(): boolean;
  setDiscardable(discardable: boolean): void;
  hasLocalContents(): boolean;
  setHasLocalContents(hasLocalContents: boolean): void;
  hasThumbnail(): boolean;
  setHasThumbnail(hasThumbnail: boolean): void;
}

declare enum NSFileVersionAddingOptions {
  NSFileVersionAddingByMoving = 1 << 0,
}

declare enum NSFileVersionReplacingOptions {
  NSFileVersionReplacingByMoving = 1 << 0,
}

declare class NSFileWrapper extends NSObject implements INSCoding {
  initWithURL_options_error<T extends NSFileWrapper>(url: NSURL, options: NSFileWrapperReadingOptions, outError: NSError): T;
  initDirectoryWithFileWrappers<T extends NSFileWrapper>(childrenByPreferredName: NSDictionary<any, any> | {[key: string]: any}): T;
  initRegularFileWithContents<T extends NSFileWrapper>(contents: NSData): T;
  initSymbolicLinkWithDestinationURL<T extends NSFileWrapper>(url: NSURL): T;
  initWithSerializedRepresentation<T extends NSFileWrapper>(serializeRepresentation: NSData): T;
  initWithCoder<T extends NSFileWrapper>(inCoder: NSCoder): T;
  matchesContentsOfURL(url: NSURL): boolean;
  readFromURL_options_error(url: NSURL, options: NSFileWrapperReadingOptions, outError: NSError): boolean;
  writeToURL_options_originalContentsURL_error(url: NSURL, options: NSFileWrapperWritingOptions, originalContentsURL: NSURL | null, outError: NSError): boolean;
  addFileWrapper(child: NSFileWrapper): NSString;
  addRegularFileWithContents_preferredFilename(data: NSData, fileName: NSString | string): NSString;
  removeFileWrapper(child: NSFileWrapper): void;
  keyForFileWrapper(child: NSFileWrapper): NSString;
  initWithPath<T extends NSFileWrapper>(path: NSString | string): T;
  initSymbolicLinkWithDestination<T extends NSFileWrapper>(path: NSString | string): T;
  needsToBeUpdatedFromPath(path: NSString | string): boolean;
  updateFromPath(path: NSString | string): boolean;
  writeToFile_atomically_updateFilenames(path: NSString | string, atomicFlag: boolean, updateFilenamesFlag: boolean): boolean;
  addFileWithPath(path: NSString | string): NSString;
  addSymbolicLinkWithDestination_preferredFilename(path: NSString | string, filename: NSString | string): NSString;
  symbolicLinkDestination(): NSString;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSFileWrapper>(aDecoder: NSCoder): T;

  directory(): boolean;
  setDirectory(directory: boolean): void;
  regularFile(): boolean;
  setRegularFile(regularFile: boolean): void;
  symbolicLink(): boolean;
  setSymbolicLink(symbolicLink: boolean): void;
  preferredFilename(): NSString;
  setPreferredFilename(preferredFilename: NSString | string): void;
  filename(): NSString;
  setFilename(filename: NSString | string): void;
  fileAttributes(): NSDictionary<any, any>;
  setFileAttributes(fileAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  serializedRepresentation(): NSData;
  setSerializedRepresentation(serializedRepresentation: NSData): void;
  fileWrappers(): NSDictionary<any, any>;
  setFileWrappers(fileWrappers: NSDictionary<any, any> | {[key: string]: any}): void;
  regularFileContents(): NSData;
  setRegularFileContents(regularFileContents: NSData): void;
  symbolicLinkDestinationURL(): NSURL;
  setSymbolicLinkDestinationURL(symbolicLinkDestinationURL: NSURL): void;
  icon(): NSImage;
  setIcon(icon: NSImage): void;
}

declare enum NSFileWrapperReadingOptions {
  NSFileWrapperReadingImmediate = 1 << 0,
  NSFileWrapperReadingWithoutMapping = 1 << 1,
}

declare enum NSFileWrapperWritingOptions {
  NSFileWrapperWritingAtomic = 1 << 0,
  NSFileWrapperWritingWithNameUpdating = 1 << 1,
}

declare class NSFormatter extends NSObject implements INSCopying, INSCoding {
  stringForObjectValue(obj: any | null): NSString;
  attributedStringForObjectValue_withDefaultAttributes(obj: any, attrs: NSDictionary<any, any> | {[key: string]: any} | null): NSAttributedString;
  editingStringForObjectValue(obj: any): NSString;
  getObjectValue_forString_errorDescription(obj: any, string: NSString | string, error: NSString | string): boolean;
  isPartialStringValid_newEditingString_errorDescription(partialString: NSString | string, newString: NSString | string, error: NSString | string): boolean;
  isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription(partialStringPtr: NSString | string, proposedSelRangePtr: NSRangePointer | null, origString: NSString | string, origSelRange: NSRange, error: NSString | string): boolean;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSFormatter>(aDecoder: NSCoder): T;
}

declare enum NSFormattingContext {
  NSFormattingContextUnknown = 0,
  NSFormattingContextDynamic = 1,
  NSFormattingContextStandalone = 2,
  NSFormattingContextListItem = 3,
  NSFormattingContextBeginningOfSentence = 4,
  NSFormattingContextMiddleOfSentence = 5,
}

declare enum NSFormattingUnitStyle {
  NSFormattingUnitStyleShort = 1,
  NSFormattingUnitStyleMedium,
  NSFormattingUnitStyleLong,
}

declare class NSGarbageCollector extends NSObject {
  static defaultCollector(): any;
  isCollecting(): boolean;
  disable(): void;
  enable(): void;
  isEnabled(): boolean;
  collectIfNeeded(): void;
  collectExhaustively(): void;
  disableCollectorForPointer(ptr: void): void;
  enableCollectorForPointer(ptr: void): void;
  zone(): NSZone;
}

declare type NSPoint = CGPoint

declare type NSSize = CGSize

declare type NSRect = CGRect

declare type NSEdgeInsets = {
  top: CGFloat
  left: CGFloat
  bottom: CGFloat
  right: CGFloat
}

declare type NSPointPointer = NSPoint

declare type NSPointArray = NSPoint

declare type NSSizePointer = NSSize

declare type NSSizeArray = NSSize

declare type NSRectPointer = NSRect

declare type NSRectArray = NSRect

declare enum NSRectEdge {
  NSRectEdgeMinX = 0,
  NSRectEdgeMinY = 1,
  NSRectEdgeMaxX = 2,
  NSRectEdgeMaxY = 3,
  NSMinXEdge,
  NSMinYEdge,
  NSMaxXEdge,
  NSMaxYEdge,
}

declare enum NSAlignmentOptions {
  NSAlignMinXInward = 1 << 0,
  NSAlignMinYInward = 1 << 1,
  NSAlignMaxXInward = 1 << 2,
  NSAlignMaxYInward = 1 << 3,
  NSAlignWidthInward = 1 << 4,
  NSAlignHeightInward = 1 << 5,
  NSAlignMinXOutward = 1 << 8,
  NSAlignMinYOutward = 1 << 9,
  NSAlignMaxXOutward = 1 << 10,
  NSAlignMaxYOutward = 1 << 11,
  NSAlignWidthOutward = 1 << 12,
  NSAlignHeightOutward = 1 << 13,
  NSAlignMinXNearest = 1 << 16,
  NSAlignMinYNearest = 1 << 17,
  NSAlignMaxXNearest = 1 << 18,
  NSAlignMaxYNearest = 1 << 19,
  NSAlignWidthNearest = 1 << 20,
  NSAlignHeightNearest = 1 << 21,
  NSAlignRectFlipped = 1 << 63,
  NSAlignAllEdgesInward,
  NSAlignAllEdgesOutward,
  NSAlignAllEdgesNearest,
}

declare class NSHTTPCookie extends NSObject {
  initWithProperties<T extends NSHTTPCookie>(properties: NSDictionary<any, any> | {[key: string]: any}): T;
  static cookieWithProperties(properties: NSDictionary<any, any> | {[key: string]: any}): NSHTTPCookie;
  static requestHeaderFieldsWithCookies(cookies: NSArray<any> | any[]): NSDictionary<any, any>;
  static cookiesWithResponseHeaderFields_forURL(headerFields: NSDictionary<any, any> | {[key: string]: any}, URL: NSURL): NSArray<any>;

  properties(): NSDictionary<any, any>;
  setProperties(properties: NSDictionary<any, any> | {[key: string]: any}): void;
  version(): NSUInteger;
  setVersion(version: NSUInteger): void;
  name(): NSString;
  setName(name: NSString | string): void;
  value(): NSString;
  setValue(value: NSString | string): void;
  expiresDate(): NSDate;
  setExpiresDate(expiresDate: NSDate): void;
  sessionOnly(): boolean;
  setSessionOnly(sessionOnly: boolean): void;
  domain(): NSString;
  setDomain(domain: NSString | string): void;
  path(): NSString;
  setPath(path: NSString | string): void;
  secure(): boolean;
  setSecure(secure: boolean): void;
  HTTPOnly(): boolean;
  setHTTPOnly(HTTPOnly: boolean): void;
  comment(): NSString;
  setComment(comment: NSString | string): void;
  commentURL(): NSURL;
  setCommentURL(commentURL: NSURL): void;
  portList(): NSArray<any>;
  setPortList(portList: NSArray<any> | any[]): void;
}

declare type NSHTTPCookiePropertyKey = NSString

declare class NSHTTPCookieStorage extends NSObject {
  static sharedCookieStorageForGroupContainerIdentifier(identifier: NSString | string): NSHTTPCookieStorage;
  setCookie(cookie: NSHTTPCookie): void;
  deleteCookie(cookie: NSHTTPCookie): void;
  removeCookiesSinceDate(date: NSDate): void;
  cookiesForURL(URL: NSURL): NSArray<any>;
  setCookies_forURL_mainDocumentURL(cookies: NSArray<any> | any[], URL: NSURL | null, mainDocumentURL: NSURL | null): void;
  sortedCookiesUsingDescriptors(sortOrder: NSArray<any> | any[]): NSArray<any>;
  storeCookies_forTask(cookies: NSArray<any> | any[], task: NSURLSessionTask): void;
  getCookiesForTask_completionHandler(task: NSURLSessionTask, completionHandler: Block): void;

  static sharedHTTPCookieStorage(): NSHTTPCookieStorage;
  static setSharedHTTPCookieStorage(sharedHTTPCookieStorage: NSHTTPCookieStorage): void;
  cookies(): NSArray<any>;
  setCookies(cookies: NSArray<any> | any[]): void;
  cookieAcceptPolicy(): NSHTTPCookieAcceptPolicy;
  setCookieAcceptPolicy(cookieAcceptPolicy: NSHTTPCookieAcceptPolicy): void;
}

declare enum NSHTTPCookieAcceptPolicy {
  NSHTTPCookieAcceptPolicyAlways,
  NSHTTPCookieAcceptPolicyNever,
  NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain,
}

declare class NSHashTable<ObjectType> extends NSObject implements INSCopying, INSCoding, INSFastEnumeration {
  initWithOptions_capacity<T extends NSHashTable<ObjectType>>(options: NSPointerFunctionsOptions, initialCapacity: NSUInteger): T;
  initWithPointerFunctions_capacity<T extends NSHashTable<ObjectType>>(functions: NSPointerFunctions, initialCapacity: NSUInteger): T;
  static hashTableWithOptions(options: NSPointerFunctionsOptions): NSHashTable<any>;
  static hashTableWithWeakObjects(): any;
  static weakObjectsHashTable(): NSHashTable<any>;
  member(object: ObjectType | null): ObjectType;
  objectEnumerator(): NSEnumerator<any>;
  addObject(object: ObjectType | null): void;
  removeObject(object: ObjectType | null): void;
  removeAllObjects(): void;
  containsObject(anObject: ObjectType | null): boolean;
  intersectsHashTable(other: NSHashTable<any>): boolean;
  isEqualToHashTable(other: NSHashTable<any>): boolean;
  isSubsetOfHashTable(other: NSHashTable<any>): boolean;
  intersectHashTable(other: NSHashTable<any>): void;
  unionHashTable(other: NSHashTable<any>): void;
  minusHashTable(other: NSHashTable<any>): void;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSHashTable<ObjectType>>(aDecoder: NSCoder): T;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  pointerFunctions(): NSPointerFunctions;
  setPointerFunctions(pointerFunctions: NSPointerFunctions): void;
  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  allObjects(): NSArray<any>;
  setAllObjects(allObjects: NSArray<any> | any[]): void;
  anyObject(): ObjectType;
  setAnyObject(anyObject: ObjectType): void;
  setRepresentation(): NSSet<any>;
  setSetRepresentation(setRepresentation: NSSet<any>): void;
}

declare type NSHashEnumerator = {
  _pi: NSUInteger
  _si: NSUInteger
  _bs: void
}

declare type NSHashTableCallBacks = any

declare type NSHashTableOptions = NSUInteger

declare class NSHost extends NSObject {
  static currentHost(): NSHost;
  static hostWithName(name: NSString | string | null): NSHost;
  static hostWithAddress(address: NSString | string): NSHost;
  isEqualToHost(aHost: NSHost): boolean;
  static setHostCacheEnabled(flag: boolean): void;
  static isHostCacheEnabled(): boolean;
  static flushHostCache(): void;

  name(): NSString;
  setName(name: NSString | string): void;
  names(): NSArray<any>;
  setNames(names: NSArray<any> | any[]): void;
  address(): NSString;
  setAddress(address: NSString | string): void;
  addresses(): NSArray<any>;
  setAddresses(addresses: NSArray<any> | any[]): void;
  localizedName(): NSString;
  setLocalizedName(localizedName: NSString | string): void;
}

declare class NSISO8601DateFormatter extends NSFormatter implements INSSecureCoding {
  init<T extends NSISO8601DateFormatter>(): T;
  stringFromDate(date: NSDate): NSString;
  dateFromString(string: NSString | string): NSDate;
  static stringFromDate_timeZone_formatOptions(date: NSDate, timeZone: NSTimeZone, formatOptions: NSISO8601DateFormatOptions): NSString;

  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  formatOptions(): NSISO8601DateFormatOptions;
  setFormatOptions(formatOptions: NSISO8601DateFormatOptions): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSISO8601DateFormatOptions {
  NSISO8601DateFormatWithYear,
  NSISO8601DateFormatWithMonth,
  NSISO8601DateFormatWithWeekOfYear,
  NSISO8601DateFormatWithDay,
  NSISO8601DateFormatWithTime,
  NSISO8601DateFormatWithTimeZone,
  NSISO8601DateFormatWithSpaceBetweenDateAndTime,
  NSISO8601DateFormatWithDashSeparatorInDate,
  NSISO8601DateFormatWithColonSeparatorInTime,
  NSISO8601DateFormatWithColonSeparatorInTimeZone,
  NSISO8601DateFormatWithFractionalSeconds,
  NSISO8601DateFormatWithFullDate,
  NSISO8601DateFormatWithFullTime,
  NSISO8601DateFormatWithInternetDateTime,
}

declare class NSIndexPath extends NSObject implements INSCopying, INSSecureCoding {
  static indexPathWithIndex(index: NSUInteger): NSIndexPath;
  static indexPathWithIndexes_length(indexes: NSUInteger[], length: NSUInteger): NSIndexPath;
  initWithIndexes_length<T extends NSIndexPath>(indexes: NSUInteger[], length: NSUInteger): T;
  initWithIndex<T extends NSIndexPath>(index: NSUInteger): T;
  indexPathByAddingIndex(index: NSUInteger): NSIndexPath;
  indexPathByRemovingLastIndex(): NSIndexPath;
  indexAtPosition(position: NSUInteger): NSUInteger;
  getIndexes_range(indexes: NSUInteger, positionRange: NSRange): void;
  compare(otherObject: NSIndexPath): NSComparisonResult;
  getIndexes(indexes: NSUInteger): void;
  static indexPathForItem_inSection(item: NSInteger, section: NSInteger): NSIndexPath;
  static indexPathForComponent_point_ofShape(component: MSVectorComponent, point: NSUInteger, shape: NSUInteger): NSIndexPath;
  static indexPathForPoint_ofShape(point: NSUInteger, shape: NSUInteger): NSIndexPath;
  indexPathWithComponent(component: MSVectorComponent): NSIndexPath;
  copyWithZone(zone: NSZone | null): any;

  length(): NSUInteger;
  setLength(length: NSUInteger): void;
  item(): NSInteger;
  setItem(item: NSInteger): void;
  section(): NSInteger;
  setSection(section: NSInteger): void;
  component(): MSVectorComponent;
  setComponent(component: MSVectorComponent): void;
  point(): NSUInteger;
  setPoint(point: NSUInteger): void;
  shape(): NSUInteger;
  setShape(shape: NSUInteger): void;
  handle(): MSPointType;
  setHandle(handle: MSPointType): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSIndexSet extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding {
  static indexSet(): NSIndexSet;
  static indexSetWithIndex(value: NSUInteger): NSIndexSet;
  static indexSetWithIndexesInRange(range: NSRange): NSIndexSet;
  initWithIndexesInRange<T extends NSIndexSet>(range: NSRange): T;
  initWithIndexSet<T extends NSIndexSet>(indexSet: NSIndexSet): T;
  initWithIndex<T extends NSIndexSet>(value: NSUInteger): T;
  isEqualToIndexSet(indexSet: NSIndexSet): boolean;
  indexGreaterThanIndex(value: NSUInteger): NSUInteger;
  indexLessThanIndex(value: NSUInteger): NSUInteger;
  indexGreaterThanOrEqualToIndex(value: NSUInteger): NSUInteger;
  indexLessThanOrEqualToIndex(value: NSUInteger): NSUInteger;
  getIndexes_maxCount_inIndexRange(indexBuffer: NSUInteger, bufferSize: NSUInteger, range: NSRangePointer | null): NSUInteger;
  countOfIndexesInRange(range: NSRange): NSUInteger;
  containsIndex(value: NSUInteger): boolean;
  containsIndexesInRange(range: NSRange): boolean;
  containsIndexes(indexSet: NSIndexSet): boolean;
  intersectsIndexesInRange(range: NSRange): boolean;
  enumerateIndexesUsingBlock(block: Block): void;
  enumerateIndexesWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  enumerateIndexesInRange_options_usingBlock(range: NSRange, opts: NSEnumerationOptions, block: Block): void;
  indexPassingTest(predicate: Block): NSUInteger;
  indexWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSUInteger;
  indexInRange_options_passingTest(range: NSRange, opts: NSEnumerationOptions, predicate: Block): NSUInteger;
  indexesPassingTest(predicate: Block): NSIndexSet;
  indexesWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSIndexSet;
  indexesInRange_options_passingTest(range: NSRange, opts: NSEnumerationOptions, predicate: Block): NSIndexSet;
  enumerateRangesUsingBlock(block: Block): void;
  enumerateRangesWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  enumerateRangesInRange_options_usingBlock(range: NSRange, opts: NSEnumerationOptions, block: Block): void;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  firstIndex(): NSUInteger;
  setFirstIndex(firstIndex: NSUInteger): void;
  lastIndex(): NSUInteger;
  setLastIndex(lastIndex: NSUInteger): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableIndexSet extends NSIndexSet {
  addIndexes(indexSet: NSIndexSet): void;
  removeIndexes(indexSet: NSIndexSet): void;
  removeAllIndexes(): void;
  addIndex(value: NSUInteger): void;
  removeIndex(value: NSUInteger): void;
  addIndexesInRange(range: NSRange): void;
  removeIndexesInRange(range: NSRange): void;
  shiftIndexesStartingAtIndex_by(index: NSUInteger, delta: NSInteger): void;
}

declare class NSInvocation extends NSObject {
  static invocationWithMethodSignature(sig: NSMethodSignature): NSInvocation;
  retainArguments(): void;
  getReturnValue(retLoc: void): void;
  setReturnValue(retLoc: void): void;
  getArgument_atIndex(argumentLocation: void, idx: NSInteger): void;
  setArgument_atIndex(argumentLocation: void, idx: NSInteger): void;
  invoke(): void;
  invokeWithTarget(target: any): void;

  methodSignature(): NSMethodSignature;
  setMethodSignature(methodSignature: NSMethodSignature): void;
  argumentsRetained(): boolean;
  setArgumentsRetained(argumentsRetained: boolean): void;
  target(): any;
  setTarget(target: any): void;
  selector(): string;
  setSelector(selector: string): void;
}

declare class NSItemProvider extends NSObject implements INSCopying {
  init<T extends NSItemProvider>(): T;
  registerDataRepresentationForTypeIdentifier_visibility_loadHandler(typeIdentifier: NSString | string, visibility: NSItemProviderRepresentationVisibility, loadHandler: Block): void;
  registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler(typeIdentifier: NSString | string, fileOptions: NSItemProviderFileOptions, visibility: NSItemProviderRepresentationVisibility, loadHandler: Block): void;
  registeredTypeIdentifiersWithFileOptions(fileOptions: NSItemProviderFileOptions): NSArray<any>;
  hasItemConformingToTypeIdentifier(typeIdentifier: NSString | string): boolean;
  hasRepresentationConformingToTypeIdentifier_fileOptions(typeIdentifier: NSString | string, fileOptions: NSItemProviderFileOptions): boolean;
  loadDataRepresentationForTypeIdentifier_completionHandler(typeIdentifier: NSString | string, completionHandler: Block): NSProgress;
  loadFileRepresentationForTypeIdentifier_completionHandler(typeIdentifier: NSString | string, completionHandler: Block): NSProgress;
  loadInPlaceFileRepresentationForTypeIdentifier_completionHandler(typeIdentifier: NSString | string, completionHandler: Block): NSProgress;
  initWithObject<T extends NSItemProvider>(object: any): T;
  registerObject_visibility(object: any, visibility: NSItemProviderRepresentationVisibility): void;
  registerObjectOfClass_visibility_loadHandler(aClass: any, visibility: NSItemProviderRepresentationVisibility, loadHandler: Block): void;
  canLoadObjectOfClass(aClass: any): boolean;
  loadObjectOfClass_completionHandler(aClass: any, completionHandler: Block): NSProgress;
  initWithItem_typeIdentifier<T extends NSItemProvider>(item: any | null, typeIdentifier: NSString | string | null): T;
  initWithContentsOfURL<T extends NSItemProvider>(fileURL: NSURL): T;
  registerItemForTypeIdentifier_loadHandler(typeIdentifier: NSString | string, loadHandler: NSItemProviderLoadHandler): void;
  loadItemForTypeIdentifier_options_completionHandler(typeIdentifier: NSString | string, options: NSDictionary<any, any> | {[key: string]: any} | null, completionHandler: NSItemProviderCompletionHandler | null): void;
  loadPreviewImageWithOptions_completionHandler(options: NSDictionary<any, any> | {[key: string]: any}, completionHandler: NSItemProviderCompletionHandler): void;
  registerCloudKitShareWithPreparationHandler(preparationHandler: Block): void;
  registerCloudKitShare_container(share: CKShare, container: CKContainer): void;
  copyWithZone(zone: NSZone | null): any;

  registeredTypeIdentifiers(): NSArray<any>;
  setRegisteredTypeIdentifiers(registeredTypeIdentifiers: NSArray<any> | any[]): void;
  suggestedName(): NSString;
  setSuggestedName(suggestedName: NSString | string): void;
  previewImageHandler(): NSItemProviderLoadHandler;
  setPreviewImageHandler(previewImageHandler: NSItemProviderLoadHandler): void;
  sourceFrame(): NSRect;
  setSourceFrame(sourceFrame: NSRect): void;
  containerFrame(): NSRect;
  setContainerFrame(containerFrame: NSRect): void;
  preferredPresentationSize(): NSSize;
  setPreferredPresentationSize(preferredPresentationSize: NSSize): void;
}

declare interface INSItemProviderWriting {
  itemProviderVisibilityForRepresentationWithTypeIdentifier(typeIdentifier: NSString | string): NSItemProviderRepresentationVisibility;
  loadDataWithTypeIdentifier_forItemProviderCompletionHandler(typeIdentifier: NSString | string, completionHandler: Block): NSProgress;

  writableTypeIdentifiersForItemProvider(): NSArray<any>;
  setWritableTypeIdentifiersForItemProvider(writableTypeIdentifiersForItemProvider: NSArray<any> | any[]): void;
}

declare interface INSItemProviderReading {
  // static readableTypeIdentifiersForItemProvider(): NSArray<any>;
  // static setReadableTypeIdentifiersForItemProvider(readableTypeIdentifiersForItemProvider: NSArray<any> | any[]): void;
}

declare enum NSItemProviderRepresentationVisibility {
  NSItemProviderRepresentationVisibilityAll = 0,
  NSItemProviderRepresentationVisibilityTeam = 1,
  NSItemProviderRepresentationVisibilityGroup = 2,
  NSItemProviderRepresentationVisibilityOwnProcess = 3,
}

declare enum NSItemProviderFileOptions {
  NSItemProviderFileOptionOpenInPlace = 1,
}

declare enum NSItemProviderErrorCode {
  NSItemProviderUnknownError = -1,
  NSItemProviderItemUnavailableError = -1000,
  NSItemProviderUnexpectedValueClassError = -1100,
  NSItemProviderUnavailableCoercionError = -1200,
}

declare class NSJSONSerialization extends NSObject {
  static isValidJSONObject(obj: any): boolean;
  static dataWithJSONObject_options_error(obj: any, opt: NSJSONWritingOptions, error: NSError): NSData;
  static JSONObjectWithData_options_error(data: NSData, opt: NSJSONReadingOptions, error: NSError): any;
  static writeJSONObject_toStream_options_error(obj: any, stream: NSOutputStream, opt: NSJSONWritingOptions, error: NSError): NSInteger;
  static JSONObjectWithStream_options_error(stream: NSInputStream, opt: NSJSONReadingOptions, error: NSError): any;
}

declare enum NSJSONReadingOptions {
  NSJSONReadingMutableContainers,
  NSJSONReadingMutableLeaves,
  NSJSONReadingAllowFragments,
}

declare enum NSJSONWritingOptions {
  NSJSONWritingPrettyPrinted,
  NSJSONWritingSortedKeys,
}

declare class NSOrderedSet<ObjectType> extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration {
  valueForKey(key: NSString | string): any;
  setValue_forKey(value: any | null, key: NSString | string): void;
  addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString | string, options: NSKeyValueObservingOptions, context: void | null): void;
  removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString | string, context: void | null): void;
  removeObserver_forKeyPath(observer: NSObject, keyPath: NSString | string): void;
  objectAtIndex(idx: NSUInteger): ObjectType;
  indexOfObject(object: ObjectType): NSUInteger;
  init<T extends NSOrderedSet<ObjectType>>(): T;
  initWithObjects_count<T extends NSOrderedSet<ObjectType>>(objects: ObjectType[], cnt: NSUInteger): T;
  initWithCoder<T extends NSOrderedSet<ObjectType>>(aDecoder: NSCoder): T;
  getObjects_range(objects: ObjectType[], range: NSRange): void;
  objectsAtIndexes(indexes: NSIndexSet): NSArray<any>;
  isEqualToOrderedSet(other: NSOrderedSet<any>): boolean;
  containsObject(object: ObjectType): boolean;
  intersectsOrderedSet(other: NSOrderedSet<any>): boolean;
  intersectsSet(set: NSSet<any>): boolean;
  isSubsetOfOrderedSet(other: NSOrderedSet<any>): boolean;
  isSubsetOfSet(set: NSSet<any>): boolean;
  objectAtIndexedSubscript(idx: NSUInteger): ObjectType;
  objectEnumerator(): NSEnumerator<any>;
  reverseObjectEnumerator(): NSEnumerator<any>;
  enumerateObjectsUsingBlock(block: Block): void;
  enumerateObjectsWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  enumerateObjectsAtIndexes_options_usingBlock(s: NSIndexSet, opts: NSEnumerationOptions, block: Block): void;
  indexOfObjectPassingTest(predicate: Block): NSUInteger;
  indexOfObjectWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSUInteger;
  indexOfObjectAtIndexes_options_passingTest(s: NSIndexSet, opts: NSEnumerationOptions, predicate: Block): NSUInteger;
  indexesOfObjectsPassingTest(predicate: Block): NSIndexSet;
  indexesOfObjectsWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSIndexSet;
  indexesOfObjectsAtIndexes_options_passingTest(s: NSIndexSet, opts: NSEnumerationOptions, predicate: Block): NSIndexSet;
  indexOfObject_inSortedRange_options_usingComparator(object: ObjectType, range: NSRange, opts: NSBinarySearchingOptions, cmp: NSComparator): NSUInteger;
  sortedArrayUsingComparator(cmptr: NSComparator): NSArray<any>;
  sortedArrayWithOptions_usingComparator(opts: NSSortOptions, cmptr: NSComparator): NSArray<any>;
  descriptionWithLocale(locale: any | null): NSString;
  descriptionWithLocale_indent(locale: any | null, level: NSUInteger): NSString;
  static orderedSet<ObjectType>(): NSOrderedSet<ObjectType>;
  static orderedSetWithObject<ObjectType>(object: ObjectType): NSOrderedSet<ObjectType>;
  static orderedSetWithObjects_count<ObjectType>(objects: ObjectType[], cnt: NSUInteger): NSOrderedSet<ObjectType>;
  static orderedSetWithObjects<ObjectType>(firstObj: ObjectType, ...args: any[]): NSOrderedSet<ObjectType>;
  static orderedSetWithOrderedSet<ObjectType>(set: NSOrderedSet<any>): NSOrderedSet<ObjectType>;
  static orderedSetWithOrderedSet_range_copyItems<ObjectType>(set: NSOrderedSet<any>, range: NSRange, flag: boolean): NSOrderedSet<ObjectType>;
  static orderedSetWithArray<ObjectType>(array: NSArray<any> | any[]): NSOrderedSet<ObjectType>;
  static orderedSetWithArray_range_copyItems<ObjectType>(array: NSArray<any> | any[], range: NSRange, flag: boolean): NSOrderedSet<ObjectType>;
  static orderedSetWithSet<ObjectType>(set: NSSet<any>): NSOrderedSet<ObjectType>;
  static orderedSetWithSet_copyItems<ObjectType>(set: NSSet<any>, flag: boolean): NSOrderedSet<ObjectType>;
  initWithObject<T extends NSOrderedSet<ObjectType>>(object: ObjectType): T;
  initWithObjects<T extends NSOrderedSet<ObjectType>>(firstObj: ObjectType, ...args: any[]): T;
  initWithOrderedSet<T extends NSOrderedSet<ObjectType>>(set: NSOrderedSet<any>): T;
  initWithOrderedSet_copyItems<T extends NSOrderedSet<ObjectType>>(set: NSOrderedSet<any>, flag: boolean): T;
  initWithOrderedSet_range_copyItems<T extends NSOrderedSet<ObjectType>>(set: NSOrderedSet<any>, range: NSRange, flag: boolean): T;
  initWithArray<T extends NSOrderedSet<ObjectType>>(array: NSArray<any> | any[]): T;
  initWithArray_copyItems<T extends NSOrderedSet<ObjectType>>(set: NSArray<any> | any[], flag: boolean): T;
  initWithArray_range_copyItems<T extends NSOrderedSet<ObjectType>>(set: NSArray<any> | any[], range: NSRange, flag: boolean): T;
  initWithSet<T extends NSOrderedSet<ObjectType>>(set: NSSet<any>): T;
  initWithSet_copyItems<T extends NSOrderedSet<ObjectType>>(set: NSSet<any>, flag: boolean): T;
  filteredOrderedSetUsingPredicate(p: NSPredicate): NSOrderedSet<any>;
  sortedArrayUsingDescriptors(sortDescriptors: NSArray<any> | any[]): NSArray<any>;
  mo_objectForIndexedSubscript(idx: NSUInteger): any;
  smk_map(mappingBlock: Block): NSOrderedSet<any>;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  firstObject(): ObjectType;
  setFirstObject(firstObject: ObjectType): void;
  lastObject(): ObjectType;
  setLastObject(lastObject: ObjectType): void;
  reversedOrderedSet(): NSOrderedSet<any>;
  setReversedOrderedSet(reversedOrderedSet: NSOrderedSet<any>): void;
  array(): NSArray<any>;
  setArray(array: NSArray<any> | any[]): void;
  set(): NSSet<any>;
  setSet(set: NSSet<any>): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSSet<ObjectType> extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding, INSFastEnumeration {
  valueForKey(key: NSString | string): any;
  setValue_forKey(value: any | null, key: NSString | string): void;
  addObserver_forKeyPath_options_context(observer: NSObject, keyPath: NSString | string, options: NSKeyValueObservingOptions, context: void | null): void;
  removeObserver_forKeyPath_context(observer: NSObject, keyPath: NSString | string, context: void | null): void;
  removeObserver_forKeyPath(observer: NSObject, keyPath: NSString | string): void;
  filteredSetUsingPredicate(predicate: NSPredicate): NSSet<any>;
  member(object: ObjectType): ObjectType;
  objectEnumerator(): NSEnumerator<any>;
  init<T extends NSSet<ObjectType>>(): T;
  initWithObjects_count<T extends NSSet<ObjectType>>(objects: ObjectType[], cnt: NSUInteger): T;
  initWithCoder<T extends NSSet<ObjectType>>(aDecoder: NSCoder): T;
  anyObject(): ObjectType;
  containsObject(anObject: ObjectType): boolean;
  descriptionWithLocale(locale: any | null): NSString;
  intersectsSet(otherSet: NSSet<any>): boolean;
  isEqualToSet(otherSet: NSSet<any>): boolean;
  isSubsetOfSet(otherSet: NSSet<any>): boolean;
  makeObjectsPerformSelector(aSelector: string): void;
  makeObjectsPerformSelector_withObject(aSelector: string, argument: any | null): void;
  setByAddingObject(anObject: ObjectType): NSSet<any>;
  setByAddingObjectsFromSet(other: NSSet<any>): NSSet<any>;
  setByAddingObjectsFromArray(other: NSArray<any> | any[]): NSSet<any>;
  enumerateObjectsUsingBlock(block: Block): void;
  enumerateObjectsWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  objectsPassingTest(predicate: Block): NSSet<any>;
  objectsWithOptions_passingTest(opts: NSEnumerationOptions, predicate: Block): NSSet<any>;
  static set<ObjectType>(): NSSet<ObjectType>;
  static setWithObject<ObjectType>(object: ObjectType): NSSet<ObjectType>;
  static setWithObjects_count<ObjectType>(objects: ObjectType[], cnt: NSUInteger): NSSet<ObjectType>;
  static setWithObjects<ObjectType>(firstObj: ObjectType, ...args: any[]): NSSet<ObjectType>;
  static setWithSet<ObjectType>(set: NSSet<any>): NSSet<ObjectType>;
  static setWithArray<ObjectType>(array: NSArray<any> | any[]): NSSet<ObjectType>;
  initWithObjects<T extends NSSet<ObjectType>>(firstObj: ObjectType, ...args: any[]): T;
  initWithSet<T extends NSSet<ObjectType>>(set: NSSet<any>): T;
  initWithSet_copyItems<T extends NSSet<ObjectType>>(set: NSSet<any>, flag: boolean): T;
  initWithArray<T extends NSSet<ObjectType>>(array: NSArray<any> | any[]): T;
  sortedArrayUsingDescriptors(sortDescriptors: NSArray<any> | any[]): NSArray<any>;
  static setWithCollectionViewIndexPath<ObjectType>(indexPath: NSIndexPath): NSSet<ObjectType>;
  static setWithCollectionViewIndexPaths<ObjectType>(indexPaths: NSArray<any> | any[]): NSSet<ObjectType>;
  enumerateIndexPathsWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  each(block: Block): void;
  map(block: Block): NSSet<ObjectType>;
  containsObjectPassingTest(predicate: Block): boolean;
  isEquivalentToArray_bc(array: NSArray<any> | any[]): boolean;
  sortedArrayUsingKey(key: NSString | string): NSArray<any>;
  setMinusSet(otherSet: NSSet<any>): NSSet<any>;
  sck_flatMap(transform: Block): NSSet<any>;
  sortedOffsets_ms(): NSArray<any>;
  offsetsInBezierInterval_ms(): NSSet<any>;
  sortedOffsetsInBezierInterval_ms(): NSArray<any>;
  firstOffsetInBezierInterval_ms(): NSNumber;
  lastOffsetInBezierInterval_ms(): NSNumber;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  allObjects(): NSArray<any>;
  setAllObjects(allObjects: NSArray<any> | any[]): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSKeyValueOperator = NSString

declare type NSKeyValueChangeKey = NSString

declare enum NSKeyValueObservingOptions {
  NSKeyValueObservingOptionNew = 0x01,
  NSKeyValueObservingOptionOld = 0x02,
  NSKeyValueObservingOptionInitial = 0x04,
  NSKeyValueObservingOptionPrior = 0x08,
}

declare enum NSKeyValueChange {
  NSKeyValueChangeSetting = 1,
  NSKeyValueChangeInsertion = 2,
  NSKeyValueChangeRemoval = 3,
  NSKeyValueChangeReplacement = 4,
}

declare enum NSKeyValueSetMutationKind {
  NSKeyValueUnionSetMutation = 1,
  NSKeyValueMinusSetMutation = 2,
  NSKeyValueIntersectSetMutation = 3,
  NSKeyValueSetSetMutation = 4,
}

declare class NSKeyedArchiver extends NSCoder {
  init<T extends NSKeyedArchiver>(): T;
  static archivedDataWithRootObject(rootObject: any): NSData;
  static archiveRootObject_toFile(rootObject: any, path: NSString | string): boolean;
  initForWritingWithMutableData<T extends NSKeyedArchiver>(data: NSMutableData): T;
  finishEncoding(): void;
  setClassName_forClass(codedName: NSString | string | null, cls: any): void;
  classNameForClass(cls: any): NSString;
  encodeObject_forKey(object: any | null, key: NSString | string): void;
  encodeConditionalObject_forKey(object: any | null, key: NSString | string): void;
  encodeBool_forKey(value: boolean, key: NSString | string): void;
  encodeInt_forKey(value: number, key: NSString | string): void;
  encodeInt32_forKey(value: number, key: NSString | string): void;
  encodeInt64_forKey(value: number, key: NSString | string): void;
  encodeFloat_forKey(value: number, key: NSString | string): void;
  encodeDouble_forKey(value: number, key: NSString | string): void;
  encodeBytes_length_forKey(bytes: number | null, length: NSUInteger, key: NSString | string): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  outputFormat(): NSPropertyListFormat;
  setOutputFormat(outputFormat: NSPropertyListFormat): void;
  encodedData(): NSData;
  setEncodedData(encodedData: NSData): void;
  requiresSecureCoding(): boolean;
  setRequiresSecureCoding(requiresSecureCoding: boolean): void;
}

declare class NSKeyedUnarchiver extends NSCoder {
  static unarchiveObjectWithData(data: NSData): any;
  static unarchiveObjectWithFile(path: NSString | string): any;
  initForReadingWithData<T extends NSKeyedUnarchiver>(data: NSData): T;
  finishDecoding(): void;
  setClass_forClassName(cls: any | null, codedName: NSString | string): void;
  classForClassName(codedName: NSString | string): any;
  containsValueForKey(key: NSString | string): boolean;
  decodeObjectForKey(key: NSString | string): any;
  decodeBoolForKey(key: NSString | string): boolean;
  decodeIntForKey(key: NSString | string): number;
  decodeInt32ForKey(key: NSString | string): number;
  decodeInt64ForKey(key: NSString | string): number;
  decodeFloatForKey(key: NSString | string): number;
  decodeDoubleForKey(key: NSString | string): number;
  decodeBytesForKey_returnedLength(key: NSString | string, lengthp: NSUInteger | null): number;

  delegate(): any;
  setDelegate(delegate: any): void;
  requiresSecureCoding(): boolean;
  setRequiresSecureCoding(requiresSecureCoding: boolean): void;
  decodingFailurePolicy(): NSDecodingFailurePolicy;
  setDecodingFailurePolicy(decodingFailurePolicy: NSDecodingFailurePolicy): void;
}

declare interface INSKeyedArchiverDelegate {
  archiver_willEncodeObject(archiver: NSKeyedArchiver, object: any): any;
  archiver_didEncodeObject(archiver: NSKeyedArchiver, object: any | null): void;
  archiver_willReplaceObject_withObject(archiver: NSKeyedArchiver, object: any | null, newObject: any | null): void;
  archiverWillFinish(archiver: NSKeyedArchiver): void;
  archiverDidFinish(archiver: NSKeyedArchiver): void;
}

declare interface INSKeyedUnarchiverDelegate {
  unarchiver_cannotDecodeObjectOfClassName_originalClasses(unarchiver: NSKeyedUnarchiver, name: NSString | string, classNames: NSArray<any> | any[]): any;
  unarchiver_willReplaceObject_withObject(unarchiver: NSKeyedUnarchiver, object: any, newObject: any): void;
  unarchiverWillFinish(unarchiver: NSKeyedUnarchiver): void;
  unarchiverDidFinish(unarchiver: NSKeyedUnarchiver): void;
}

declare class NSLengthFormatter extends NSFormatter {
  stringFromValue_unit(value: number, unit: NSLengthFormatterUnit): NSString;
  stringFromMeters(numberInMeters: number): NSString;
  unitStringFromValue_unit(value: number, unit: NSLengthFormatterUnit): NSString;
  unitStringFromMeters_usedUnit(numberInMeters: number, unitp: NSLengthFormatterUnit | null): NSString;
  getObjectValue_forString_errorDescription(obj: any, string: NSString | string, error: NSString | string): boolean;

  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
  unitStyle(): NSFormattingUnitStyle;
  setUnitStyle(unitStyle: NSFormattingUnitStyle): void;
  forPersonHeightUse(): boolean;
  setForPersonHeightUse(forPersonHeightUse: boolean): void;
}

declare enum NSLengthFormatterUnit {
  NSLengthFormatterUnitMillimeter = 8,
  NSLengthFormatterUnitCentimeter = 9,
  NSLengthFormatterUnitMeter = 11,
  NSLengthFormatterUnitKilometer = 14,
  NSLengthFormatterUnitInch,
  NSLengthFormatterUnitFoot,
  NSLengthFormatterUnitYard,
  NSLengthFormatterUnitMile,
}

declare class NSLinguisticTagger extends NSObject {
  initWithTagSchemes_options<T extends NSLinguisticTagger>(tagSchemes: NSArray<any> | any[], opts: NSUInteger): T;
  static availableTagSchemesForUnit_language(unit: NSLinguisticTaggerUnit, language: NSString | string): NSArray<any>;
  static availableTagSchemesForLanguage(language: NSString | string): NSArray<any>;
  setOrthography_range(orthography: NSOrthography | null, range: NSRange): void;
  orthographyAtIndex_effectiveRange(charIndex: NSUInteger, effectiveRange: NSRangePointer | null): NSOrthography;
  stringEditedInRange_changeInLength(newRange: NSRange, delta: NSInteger): void;
  tokenRangeAtIndex_unit(charIndex: NSUInteger, unit: NSLinguisticTaggerUnit): NSRange;
  sentenceRangeForRange(range: NSRange): NSRange;
  enumerateTagsInRange_unit_scheme_options_usingBlock(range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTaggerOptions, block: Block): void;
  tagAtIndex_unit_scheme_tokenRange(charIndex: NSUInteger, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, tokenRange: NSRangePointer | null): NSLinguisticTag;
  tagsInRange_unit_scheme_options_tokenRanges(range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTaggerOptions, tokenRanges: NSArray<any> | any[]): NSArray<any>;
  enumerateTagsInRange_scheme_options_usingBlock(range: NSRange, tagScheme: NSLinguisticTagScheme, opts: NSLinguisticTaggerOptions, block: Block): void;
  tagAtIndex_scheme_tokenRange_sentenceRange(charIndex: NSUInteger, scheme: NSLinguisticTagScheme, tokenRange: NSRangePointer | null, sentenceRange: NSRangePointer | null): NSLinguisticTag;
  tagsInRange_scheme_options_tokenRanges(range: NSRange, tagScheme: NSString | string, opts: NSLinguisticTaggerOptions, tokenRanges: NSArray<any> | any[]): NSArray<any>;
  static dominantLanguageForString(string: NSString | string): NSString;
  static tagForString_atIndex_unit_scheme_orthography_tokenRange(string: NSString | string, charIndex: NSUInteger, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, orthography: NSOrthography | null, tokenRange: NSRangePointer | null): NSLinguisticTag;
  static tagsForString_range_unit_scheme_options_orthography_tokenRanges(string: NSString | string, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTaggerOptions, orthography: NSOrthography | null, tokenRanges: NSArray<any> | any[]): NSArray<any>;
  static enumerateTagsForString_range_unit_scheme_options_orthography_usingBlock(string: NSString | string, range: NSRange, unit: NSLinguisticTaggerUnit, scheme: NSLinguisticTagScheme, options: NSLinguisticTaggerOptions, orthography: NSOrthography | null, block: Block): void;
  possibleTagsAtIndex_scheme_tokenRange_sentenceRange_scores(charIndex: NSUInteger, tagScheme: NSString | string, tokenRange: NSRangePointer | null, sentenceRange: NSRangePointer | null, scores: NSArray<any> | any[]): NSArray<any>;

  tagSchemes(): NSArray<any>;
  setTagSchemes(tagSchemes: NSArray<any> | any[]): void;
  string(): NSString;
  setString(string: NSString | string): void;
  dominantLanguage(): NSString;
  setDominantLanguage(dominantLanguage: NSString | string): void;
}

declare type NSLinguisticTagScheme = NSString

declare type NSLinguisticTag = NSString

declare enum NSLinguisticTaggerUnit {
  NSLinguisticTaggerUnitWord,
  NSLinguisticTaggerUnitSentence,
  NSLinguisticTaggerUnitParagraph,
  NSLinguisticTaggerUnitDocument,
}

declare enum NSLinguisticTaggerOptions {
  NSLinguisticTaggerOmitWords = 1 << 0,
  NSLinguisticTaggerOmitPunctuation = 1 << 1,
  NSLinguisticTaggerOmitWhitespace = 1 << 2,
  NSLinguisticTaggerOmitOther = 1 << 3,
  NSLinguisticTaggerJoinNames = 1 << 4,
}

declare class NSLocale extends NSObject implements INSCopying, INSSecureCoding {
  objectForKey(key: NSLocaleKey): any;
  displayNameForKey_value(key: NSLocaleKey, value: any): NSString;
  initWithLocaleIdentifier<T extends NSLocale>(string: NSString | string): T;
  initWithCoder<T extends NSLocale>(aDecoder: NSCoder): T;
  localizedStringForLocaleIdentifier(localeIdentifier: NSString | string): NSString;
  localizedStringForLanguageCode(languageCode: NSString | string): NSString;
  localizedStringForCountryCode(countryCode: NSString | string): NSString;
  localizedStringForScriptCode(scriptCode: NSString | string): NSString;
  localizedStringForVariantCode(variantCode: NSString | string): NSString;
  localizedStringForCalendarIdentifier(calendarIdentifier: NSString | string): NSString;
  localizedStringForCollationIdentifier(collationIdentifier: NSString | string): NSString;
  localizedStringForCurrencyCode(currencyCode: NSString | string): NSString;
  localizedStringForCollatorIdentifier(collatorIdentifier: NSString | string): NSString;
  static localeWithLocaleIdentifier(ident: NSString | string): NSLocale;
  static componentsFromLocaleIdentifier(string: NSString | string): NSDictionary<any, any>;
  static localeIdentifierFromComponents(dict: NSDictionary<any, any> | {[key: string]: any}): NSString;
  static canonicalLocaleIdentifierFromString(string: NSString | string): NSString;
  static canonicalLanguageIdentifierFromString(string: NSString | string): NSString;
  static localeIdentifierFromWindowsLocaleCode(lcid: number): NSString;
  static windowsLocaleCodeFromLocaleIdentifier(localeIdentifier: NSString | string): number;
  static characterDirectionForLanguage(isoLangCode: NSString | string): NSLocaleLanguageDirection;
  static lineDirectionForLanguage(isoLangCode: NSString | string): NSLocaleLanguageDirection;
  copyWithZone(zone: NSZone | null): any;

  localeIdentifier(): NSString;
  setLocaleIdentifier(localeIdentifier: NSString | string): void;
  languageCode(): NSString;
  setLanguageCode(languageCode: NSString | string): void;
  countryCode(): NSString;
  setCountryCode(countryCode: NSString | string): void;
  scriptCode(): NSString;
  setScriptCode(scriptCode: NSString | string): void;
  variantCode(): NSString;
  setVariantCode(variantCode: NSString | string): void;
  exemplarCharacterSet(): NSCharacterSet;
  setExemplarCharacterSet(exemplarCharacterSet: NSCharacterSet): void;
  calendarIdentifier(): NSString;
  setCalendarIdentifier(calendarIdentifier: NSString | string): void;
  collationIdentifier(): NSString;
  setCollationIdentifier(collationIdentifier: NSString | string): void;
  usesMetricSystem(): boolean;
  setUsesMetricSystem(usesMetricSystem: boolean): void;
  decimalSeparator(): NSString;
  setDecimalSeparator(decimalSeparator: NSString | string): void;
  groupingSeparator(): NSString;
  setGroupingSeparator(groupingSeparator: NSString | string): void;
  currencySymbol(): NSString;
  setCurrencySymbol(currencySymbol: NSString | string): void;
  currencyCode(): NSString;
  setCurrencyCode(currencyCode: NSString | string): void;
  collatorIdentifier(): NSString;
  setCollatorIdentifier(collatorIdentifier: NSString | string): void;
  quotationBeginDelimiter(): NSString;
  setQuotationBeginDelimiter(quotationBeginDelimiter: NSString | string): void;
  quotationEndDelimiter(): NSString;
  setQuotationEndDelimiter(quotationEndDelimiter: NSString | string): void;
  alternateQuotationBeginDelimiter(): NSString;
  setAlternateQuotationBeginDelimiter(alternateQuotationBeginDelimiter: NSString | string): void;
  alternateQuotationEndDelimiter(): NSString;
  setAlternateQuotationEndDelimiter(alternateQuotationEndDelimiter: NSString | string): void;
  static autoupdatingCurrentLocale(): NSLocale;
  static setAutoupdatingCurrentLocale(autoupdatingCurrentLocale: NSLocale): void;
  static currentLocale(): NSLocale;
  static setCurrentLocale(currentLocale: NSLocale): void;
  static systemLocale(): NSLocale;
  static setSystemLocale(systemLocale: NSLocale): void;
  static availableLocaleIdentifiers(): NSArray<any>;
  static setAvailableLocaleIdentifiers(availableLocaleIdentifiers: NSArray<any> | any[]): void;
  static ISOLanguageCodes(): NSArray<any>;
  static setISOLanguageCodes(ISOLanguageCodes: NSArray<any> | any[]): void;
  static ISOCountryCodes(): NSArray<any>;
  static setISOCountryCodes(ISOCountryCodes: NSArray<any> | any[]): void;
  static ISOCurrencyCodes(): NSArray<any>;
  static setISOCurrencyCodes(ISOCurrencyCodes: NSArray<any> | any[]): void;
  static commonISOCurrencyCodes(): NSArray<any>;
  static setCommonISOCurrencyCodes(commonISOCurrencyCodes: NSArray<any> | any[]): void;
  static preferredLanguages(): NSArray<any>;
  static setPreferredLanguages(preferredLanguages: NSArray<any> | any[]): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSLocaleKey = NSString

declare enum NSLocaleLanguageDirection {
  NSLocaleLanguageDirectionUnknown,
  NSLocaleLanguageDirectionLeftToRight,
  NSLocaleLanguageDirectionRightToLeft,
  NSLocaleLanguageDirectionTopToBottom,
  NSLocaleLanguageDirectionBottomToTop,
}

declare class NSLock extends NSObject implements INSLocking {
  tryLock(): boolean;
  lockBeforeDate(limit: NSDate): boolean;
  lock(): void;
  unlock(): void;

  name(): NSString;
  setName(name: NSString | string): void;
}

declare class NSConditionLock extends NSObject implements INSLocking {
  initWithCondition<T extends NSConditionLock>(condition: NSInteger): T;
  lockWhenCondition(condition: NSInteger): void;
  tryLock(): boolean;
  tryLockWhenCondition(condition: NSInteger): boolean;
  unlockWithCondition(condition: NSInteger): void;
  lockBeforeDate(limit: NSDate): boolean;
  lockWhenCondition_beforeDate(condition: NSInteger, limit: NSDate): boolean;
  lock(): void;
  unlock(): void;

  condition(): NSInteger;
  setCondition(condition: NSInteger): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare class NSRecursiveLock extends NSObject implements INSLocking {
  tryLock(): boolean;
  lockBeforeDate(limit: NSDate): boolean;
  lock(): void;
  unlock(): void;

  name(): NSString;
  setName(name: NSString | string): void;
}

declare class NSCondition extends NSObject implements INSLocking {
  wait(): void;
  waitUntilDate(limit: NSDate): boolean;
  signal(): void;
  broadcast(): void;
  lock(): void;
  unlock(): void;

  name(): NSString;
  setName(name: NSString | string): void;
}

declare interface INSLocking {
  lock(): void;
  unlock(): void;
}

declare class NSMapTable<KeyType, ObjectType> extends NSObject implements INSCopying, INSCoding, INSFastEnumeration {
  initWithKeyOptions_valueOptions_capacity<T extends NSMapTable<KeyType, ObjectType>>(keyOptions: NSPointerFunctionsOptions, valueOptions: NSPointerFunctionsOptions, initialCapacity: NSUInteger): T;
  initWithKeyPointerFunctions_valuePointerFunctions_capacity<T extends NSMapTable<KeyType, ObjectType>>(keyFunctions: NSPointerFunctions, valueFunctions: NSPointerFunctions, initialCapacity: NSUInteger): T;
  static mapTableWithKeyOptions_valueOptions(keyOptions: NSPointerFunctionsOptions, valueOptions: NSPointerFunctionsOptions): NSMapTable<any, any>;
  static mapTableWithStrongToStrongObjects(): any;
  static mapTableWithWeakToStrongObjects(): any;
  static mapTableWithStrongToWeakObjects(): any;
  static mapTableWithWeakToWeakObjects(): any;
  static strongToStrongObjectsMapTable(): NSMapTable<any, any>;
  static weakToStrongObjectsMapTable(): NSMapTable<any, any>;
  static strongToWeakObjectsMapTable(): NSMapTable<any, any>;
  static weakToWeakObjectsMapTable(): NSMapTable<any, any>;
  objectForKey(aKey: KeyType | null): ObjectType;
  removeObjectForKey(aKey: KeyType | null): void;
  setObject_forKey(anObject: ObjectType | null, aKey: KeyType | null): void;
  keyEnumerator(): NSEnumerator<any>;
  objectEnumerator(): NSEnumerator<any>;
  removeAllObjects(): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  enumerateKeysAndObjectsUsingBlock(block: Block): void;
  enumerateKeysUsingBlock(block: Block): void;
  enumerateObjectsUsingBlock(block: Block): void;
  objectForKeyedSubscript(key: any): any;
  setObject_forKeyedSubscript(obj: any, key: any): void;
  filter(block: BCMapTableFilterBlock): NSMapTable<any, any>;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSMapTable<KeyType, ObjectType>>(aDecoder: NSCoder): T;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  keyPointerFunctions(): NSPointerFunctions;
  setKeyPointerFunctions(keyPointerFunctions: NSPointerFunctions): void;
  valuePointerFunctions(): NSPointerFunctions;
  setValuePointerFunctions(valuePointerFunctions: NSPointerFunctions): void;
  count(): NSUInteger;
  setCount(count: NSUInteger): void;
}

declare type NSMapEnumerator = {
  _pi: NSUInteger
  _si: NSUInteger
  _bs: void
}

declare type NSMapTableKeyCallBacks = any

declare type NSMapTableValueCallBacks = any

declare type NSMapTableOptions = NSUInteger

declare class NSMassFormatter extends NSFormatter {
  stringFromValue_unit(value: number, unit: NSMassFormatterUnit): NSString;
  stringFromKilograms(numberInKilograms: number): NSString;
  unitStringFromValue_unit(value: number, unit: NSMassFormatterUnit): NSString;
  unitStringFromKilograms_usedUnit(numberInKilograms: number, unitp: NSMassFormatterUnit | null): NSString;
  getObjectValue_forString_errorDescription(obj: any, string: NSString | string, error: NSString | string): boolean;

  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
  unitStyle(): NSFormattingUnitStyle;
  setUnitStyle(unitStyle: NSFormattingUnitStyle): void;
  forPersonMassUse(): boolean;
  setForPersonMassUse(forPersonMassUse: boolean): void;
}

declare enum NSMassFormatterUnit {
  NSMassFormatterUnitGram = 11,
  NSMassFormatterUnitKilogram = 14,
  NSMassFormatterUnitOunce,
  NSMassFormatterUnitPound,
  NSMassFormatterUnitStone,
}

declare class NSMeasurement<UnitType> extends NSObject implements INSCopying, INSSecureCoding {
  initWithDoubleValue_unit<T extends NSMeasurement<UnitType>>(doubleValue: number, unit: UnitType): T;
  canBeConvertedToUnit(unit: NSUnit): boolean;
  measurementByConvertingToUnit(unit: NSUnit): NSMeasurement<any>;
  measurementByAddingMeasurement(measurement: NSMeasurement<any>): NSMeasurement<any>;
  measurementBySubtractingMeasurement(measurement: NSMeasurement<any>): NSMeasurement<any>;
  copyWithZone(zone: NSZone | null): any;

  unit(): UnitType;
  setUnit(unit: UnitType): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMeasurementFormatter extends NSFormatter implements INSSecureCoding {
  stringFromMeasurement(measurement: NSMeasurement<any>): NSString;
  stringFromUnit(unit: NSUnit): NSString;

  unitOptions(): NSMeasurementFormatterUnitOptions;
  setUnitOptions(unitOptions: NSMeasurementFormatterUnitOptions): void;
  unitStyle(): NSFormattingUnitStyle;
  setUnitStyle(unitStyle: NSFormattingUnitStyle): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSMeasurementFormatterUnitOptions {
  NSMeasurementFormatterUnitOptionsProvidedUnit,
  NSMeasurementFormatterUnitOptionsNaturalScale,
  NSMeasurementFormatterUnitOptionsTemperatureWithoutUnit,
}

declare class NSMetadataQuery extends NSObject {
  startQuery(): boolean;
  stopQuery(): void;
  disableUpdates(): void;
  enableUpdates(): void;
  resultAtIndex(idx: NSUInteger): any;
  enumerateResultsUsingBlock(block: Block): void;
  enumerateResultsWithOptions_usingBlock(opts: NSEnumerationOptions, block: Block): void;
  indexOfResult(result: any): NSUInteger;
  valueOfAttribute_forResultAtIndex(attrName: NSString | string, idx: NSUInteger): any;

  delegate(): any;
  setDelegate(delegate: any): void;
  predicate(): NSPredicate;
  setPredicate(predicate: NSPredicate): void;
  sortDescriptors(): NSArray<any>;
  setSortDescriptors(sortDescriptors: NSArray<any> | any[]): void;
  valueListAttributes(): NSArray<any>;
  setValueListAttributes(valueListAttributes: NSArray<any> | any[]): void;
  groupingAttributes(): NSArray<any>;
  setGroupingAttributes(groupingAttributes: NSArray<any> | any[]): void;
  notificationBatchingInterval(): NSTimeInterval;
  setNotificationBatchingInterval(notificationBatchingInterval: NSTimeInterval): void;
  searchScopes(): NSArray<any>;
  setSearchScopes(searchScopes: NSArray<any> | any[]): void;
  searchItems(): NSArray<any>;
  setSearchItems(searchItems: NSArray<any> | any[]): void;
  operationQueue(): NSOperationQueue;
  setOperationQueue(operationQueue: NSOperationQueue): void;
  started(): boolean;
  setStarted(started: boolean): void;
  gathering(): boolean;
  setGathering(gathering: boolean): void;
  stopped(): boolean;
  setStopped(stopped: boolean): void;
  resultCount(): NSUInteger;
  setResultCount(resultCount: NSUInteger): void;
  results(): NSArray<any>;
  setResults(results: NSArray<any> | any[]): void;
  valueLists(): NSDictionary<any, any>;
  setValueLists(valueLists: NSDictionary<any, any> | {[key: string]: any}): void;
  groupedResults(): NSArray<any>;
  setGroupedResults(groupedResults: NSArray<any> | any[]): void;
}

declare class NSMetadataItem extends NSObject {
  initWithURL<T extends NSMetadataItem>(url: NSURL): T;
  valueForAttribute(key: NSString | string): any;
  valuesForAttributes(keys: NSArray<any> | any[]): NSDictionary<any, any>;

  attributes(): NSArray<any>;
  setAttributes(attributes: NSArray<any> | any[]): void;
}

declare class NSMetadataQueryAttributeValueTuple extends NSObject {
  attribute(): NSString;
  setAttribute(attribute: NSString | string): void;
  value(): any;
  setValue(value: any): void;
  count(): NSUInteger;
  setCount(count: NSUInteger): void;
}

declare class NSMetadataQueryResultGroup extends NSObject {
  resultAtIndex(idx: NSUInteger): any;

  attribute(): NSString;
  setAttribute(attribute: NSString | string): void;
  value(): any;
  setValue(value: any): void;
  subgroups(): NSArray<any>;
  setSubgroups(subgroups: NSArray<any> | any[]): void;
  resultCount(): NSUInteger;
  setResultCount(resultCount: NSUInteger): void;
  results(): NSArray<any>;
  setResults(results: NSArray<any> | any[]): void;
}

declare interface INSMetadataQueryDelegate {
  metadataQuery_replacementObjectForResultObject(query: NSMetadataQuery, result: NSMetadataItem): any;
  metadataQuery_replacementValueForAttribute_value(query: NSMetadataQuery, attrName: NSString | string, attrValue: any): any;
}

declare class NSMethodSignature extends NSObject {
  static signatureWithObjCTypes(types: string): NSMethodSignature;
  getArgumentTypeAtIndex(idx: NSUInteger): string;
  isOneway(): boolean;

  numberOfArguments(): NSUInteger;
  setNumberOfArguments(numberOfArguments: NSUInteger): void;
  frameLength(): NSUInteger;
  setFrameLength(frameLength: NSUInteger): void;
  methodReturnType(): string;
  setMethodReturnType(methodReturnType: string): void;
  methodReturnLength(): NSUInteger;
  setMethodReturnLength(methodReturnLength: NSUInteger): void;
}

declare class NSNetService extends NSObject {
  initWithDomain_type_name_port<T extends NSNetService>(domain: NSString | string, type: NSString | string, name: NSString | string, port: number): T;
  initWithDomain_type_name<T extends NSNetService>(domain: NSString | string, type: NSString | string, name: NSString | string): T;
  scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  removeFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  publish(): void;
  publishWithOptions(options: NSNetServiceOptions): void;
  resolve(): void;
  stop(): void;
  static dictionaryFromTXTRecordData(txtData: NSData): NSDictionary<any, any>;
  static dataFromTXTRecordDictionary(txtDictionary: NSDictionary<any, any> | {[key: string]: any}): NSData;
  resolveWithTimeout(timeout: NSTimeInterval): void;
  getInputStream_outputStream(inputStream: NSInputStream, outputStream: NSOutputStream): boolean;
  setTXTRecordData(recordData: NSData | null): boolean;
  TXTRecordData(): NSData;
  startMonitoring(): void;
  stopMonitoring(): void;
  static addressStringWithData(data: NSData): NSString;

  delegate(): any;
  setDelegate(delegate: any): void;
  includesPeerToPeer(): boolean;
  setIncludesPeerToPeer(includesPeerToPeer: boolean): void;
  name(): NSString;
  setName(name: NSString | string): void;
  type(): NSString;
  setType(type: NSString | string): void;
  domain(): NSString;
  setDomain(domain: NSString | string): void;
  hostName(): NSString;
  setHostName(hostName: NSString | string): void;
  addresses(): NSArray<any>;
  setAddresses(addresses: NSArray<any> | any[]): void;
  port(): NSInteger;
  setPort(port: NSInteger): void;
  addressStrings(): NSArray<any>;
  setAddressStrings(addressStrings: NSArray<any> | any[]): void;
}

declare class NSNetServiceBrowser extends NSObject {
  init<T extends NSNetServiceBrowser>(): T;
  scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  removeFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  searchForBrowsableDomains(): void;
  searchForRegistrationDomains(): void;
  searchForServicesOfType_inDomain(type: NSString | string, domainString: NSString | string): void;
  stop(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  includesPeerToPeer(): boolean;
  setIncludesPeerToPeer(includesPeerToPeer: boolean): void;
}

declare interface INSNetServiceDelegate {
  netServiceWillPublish(sender: NSNetService): void;
  netServiceDidPublish(sender: NSNetService): void;
  netService_didNotPublish(sender: NSNetService, errorDict: NSDictionary<any, any> | {[key: string]: any}): void;
  netServiceWillResolve(sender: NSNetService): void;
  netServiceDidResolveAddress(sender: NSNetService): void;
  netService_didNotResolve(sender: NSNetService, errorDict: NSDictionary<any, any> | {[key: string]: any}): void;
  netServiceDidStop(sender: NSNetService): void;
  netService_didUpdateTXTRecordData(sender: NSNetService, data: NSData): void;
  netService_didAcceptConnectionWithInputStream_outputStream(sender: NSNetService, inputStream: NSInputStream, outputStream: NSOutputStream): void;
}

declare interface INSNetServiceBrowserDelegate {
  netServiceBrowserWillSearch(browser: NSNetServiceBrowser): void;
  netServiceBrowserDidStopSearch(browser: NSNetServiceBrowser): void;
  netServiceBrowser_didNotSearch(browser: NSNetServiceBrowser, errorDict: NSDictionary<any, any> | {[key: string]: any}): void;
  netServiceBrowser_didFindDomain_moreComing(browser: NSNetServiceBrowser, domainString: NSString | string, moreComing: boolean): void;
  netServiceBrowser_didFindService_moreComing(browser: NSNetServiceBrowser, service: NSNetService, moreComing: boolean): void;
  netServiceBrowser_didRemoveDomain_moreComing(browser: NSNetServiceBrowser, domainString: NSString | string, moreComing: boolean): void;
  netServiceBrowser_didRemoveService_moreComing(browser: NSNetServiceBrowser, service: NSNetService, moreComing: boolean): void;
}

declare enum NSNetServicesError {
  NSNetServicesUnknownError = -72000,
  NSNetServicesCollisionError = -72001,
  NSNetServicesNotFoundError = -72002,
  NSNetServicesActivityInProgress = -72003,
  NSNetServicesBadArgumentError = -72004,
  NSNetServicesCancelledError = -72005,
  NSNetServicesInvalidError = -72006,
  NSNetServicesTimeoutError = -72007,
}

declare enum NSNetServiceOptions {
  NSNetServiceNoAutoRename = 1 << 0,
  NSNetServiceListenForConnections = 1 << 1,
}

declare class NSNotification extends NSObject implements INSCopying, INSCoding {
  initWithName_object_userInfo<T extends NSNotification>(name: NSNotificationName, object: any | null, userInfo: NSDictionary<any, any> | {[key: string]: any} | null): T;
  initWithCoder<T extends NSNotification>(aDecoder: NSCoder): T;
  static notificationWithName_object(aName: NSNotificationName, anObject: any | null): NSNotification;
  static notificationWithName_object_userInfo(aName: NSNotificationName, anObject: any | null, aUserInfo: NSDictionary<any, any> | {[key: string]: any} | null): NSNotification;
  init<T extends NSNotification>(): T;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSNotification>(aDecoder: NSCoder): T;

  name(): NSNotificationName;
  setName(name: NSNotificationName): void;
  object(): any;
  setObject(object: any): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSNotificationCenter extends NSObject {
  addObserver_selector_name_object(observer: any, aSelector: string, aName: NSNotificationName | null, anObject: any | null): void;
  postNotification(notification: NSNotification): void;
  postNotificationName_object(aName: NSNotificationName, anObject: any | null): void;
  postNotificationName_object_userInfo(aName: NSNotificationName, anObject: any | null, aUserInfo: NSDictionary<any, any> | {[key: string]: any} | null): void;
  removeObserver(observer: any): void;
  removeObserver_name_object(observer: any, aName: NSNotificationName | null, anObject: any | null): void;
  addObserverForName_object_queue_usingBlock(name: NSNotificationName | null, obj: any | null, queue: NSOperationQueue | null, block: Block): any;

  static defaultCenter(): NSNotificationCenter;
  static setDefaultCenter(defaultCenter: NSNotificationCenter): void;
}

declare type NSNotificationName = NSString

declare class NSNotificationQueue extends NSObject {
  initWithNotificationCenter<T extends NSNotificationQueue>(notificationCenter: NSNotificationCenter): T;
  enqueueNotification_postingStyle(notification: NSNotification, postingStyle: NSPostingStyle): void;
  enqueueNotification_postingStyle_coalesceMask_forModes(notification: NSNotification, postingStyle: NSPostingStyle, coalesceMask: NSNotificationCoalescing, modes: NSArray<any> | any[] | null): void;
  dequeueNotificationsMatching_coalesceMask(notification: NSNotification, coalesceMask: NSUInteger): void;

  static defaultQueue(): NSNotificationQueue;
  static setDefaultQueue(defaultQueue: NSNotificationQueue): void;
}

declare enum NSPostingStyle {
  NSPostWhenIdle = 1,
  NSPostASAP = 2,
  NSPostNow = 3,
}

declare enum NSNotificationCoalescing {
  NSNotificationNoCoalescing = 0,
  NSNotificationCoalescingOnName = 1,
  NSNotificationCoalescingOnSender = 2,
}

declare class NSNumberFormatter extends NSFormatter {
  getObjectValue_forString_range_error(obj: any, string: NSString | string, rangep: NSRange, error: NSError): boolean;
  stringFromNumber(number: NSNumber | number): NSString;
  numberFromString(string: NSString | string): NSNumber;
  static localizedStringFromNumber_numberStyle(num: NSNumber | number, nstyle: NSNumberFormatterStyle): NSString;
  static defaultFormatterBehavior(): NSNumberFormatterBehavior;
  static setDefaultFormatterBehavior(behavior: NSNumberFormatterBehavior): void;

  formattingContext(): NSFormattingContext;
  setFormattingContext(formattingContext: NSFormattingContext): void;
  numberStyle(): NSNumberFormatterStyle;
  setNumberStyle(numberStyle: NSNumberFormatterStyle): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  generatesDecimalNumbers(): boolean;
  setGeneratesDecimalNumbers(generatesDecimalNumbers: boolean): void;
  formatterBehavior(): NSNumberFormatterBehavior;
  setFormatterBehavior(formatterBehavior: NSNumberFormatterBehavior): void;
  negativeFormat(): NSString;
  setNegativeFormat(negativeFormat: NSString | string): void;
  textAttributesForNegativeValues(): NSDictionary<any, any>;
  setTextAttributesForNegativeValues(textAttributesForNegativeValues: NSDictionary<any, any> | {[key: string]: any}): void;
  positiveFormat(): NSString;
  setPositiveFormat(positiveFormat: NSString | string): void;
  textAttributesForPositiveValues(): NSDictionary<any, any>;
  setTextAttributesForPositiveValues(textAttributesForPositiveValues: NSDictionary<any, any> | {[key: string]: any}): void;
  allowsFloats(): boolean;
  setAllowsFloats(allowsFloats: boolean): void;
  decimalSeparator(): NSString;
  setDecimalSeparator(decimalSeparator: NSString | string): void;
  alwaysShowsDecimalSeparator(): boolean;
  setAlwaysShowsDecimalSeparator(alwaysShowsDecimalSeparator: boolean): void;
  currencyDecimalSeparator(): NSString;
  setCurrencyDecimalSeparator(currencyDecimalSeparator: NSString | string): void;
  usesGroupingSeparator(): boolean;
  setUsesGroupingSeparator(usesGroupingSeparator: boolean): void;
  groupingSeparator(): NSString;
  setGroupingSeparator(groupingSeparator: NSString | string): void;
  zeroSymbol(): NSString;
  setZeroSymbol(zeroSymbol: NSString | string): void;
  textAttributesForZero(): NSDictionary<any, any>;
  setTextAttributesForZero(textAttributesForZero: NSDictionary<any, any> | {[key: string]: any}): void;
  nilSymbol(): NSString;
  setNilSymbol(nilSymbol: NSString | string): void;
  textAttributesForNil(): NSDictionary<any, any>;
  setTextAttributesForNil(textAttributesForNil: NSDictionary<any, any> | {[key: string]: any}): void;
  notANumberSymbol(): NSString;
  setNotANumberSymbol(notANumberSymbol: NSString | string): void;
  textAttributesForNotANumber(): NSDictionary<any, any>;
  setTextAttributesForNotANumber(textAttributesForNotANumber: NSDictionary<any, any> | {[key: string]: any}): void;
  positiveInfinitySymbol(): NSString;
  setPositiveInfinitySymbol(positiveInfinitySymbol: NSString | string): void;
  textAttributesForPositiveInfinity(): NSDictionary<any, any>;
  setTextAttributesForPositiveInfinity(textAttributesForPositiveInfinity: NSDictionary<any, any> | {[key: string]: any}): void;
  negativeInfinitySymbol(): NSString;
  setNegativeInfinitySymbol(negativeInfinitySymbol: NSString | string): void;
  textAttributesForNegativeInfinity(): NSDictionary<any, any>;
  setTextAttributesForNegativeInfinity(textAttributesForNegativeInfinity: NSDictionary<any, any> | {[key: string]: any}): void;
  positivePrefix(): NSString;
  setPositivePrefix(positivePrefix: NSString | string): void;
  positiveSuffix(): NSString;
  setPositiveSuffix(positiveSuffix: NSString | string): void;
  negativePrefix(): NSString;
  setNegativePrefix(negativePrefix: NSString | string): void;
  negativeSuffix(): NSString;
  setNegativeSuffix(negativeSuffix: NSString | string): void;
  currencyCode(): NSString;
  setCurrencyCode(currencyCode: NSString | string): void;
  currencySymbol(): NSString;
  setCurrencySymbol(currencySymbol: NSString | string): void;
  internationalCurrencySymbol(): NSString;
  setInternationalCurrencySymbol(internationalCurrencySymbol: NSString | string): void;
  percentSymbol(): NSString;
  setPercentSymbol(percentSymbol: NSString | string): void;
  perMillSymbol(): NSString;
  setPerMillSymbol(perMillSymbol: NSString | string): void;
  minusSign(): NSString;
  setMinusSign(minusSign: NSString | string): void;
  plusSign(): NSString;
  setPlusSign(plusSign: NSString | string): void;
  exponentSymbol(): NSString;
  setExponentSymbol(exponentSymbol: NSString | string): void;
  groupingSize(): NSUInteger;
  setGroupingSize(groupingSize: NSUInteger): void;
  secondaryGroupingSize(): NSUInteger;
  setSecondaryGroupingSize(secondaryGroupingSize: NSUInteger): void;
  multiplier(): NSNumber;
  setMultiplier(multiplier: NSNumber | number): void;
  formatWidth(): NSUInteger;
  setFormatWidth(formatWidth: NSUInteger): void;
  paddingCharacter(): NSString;
  setPaddingCharacter(paddingCharacter: NSString | string): void;
  paddingPosition(): NSNumberFormatterPadPosition;
  setPaddingPosition(paddingPosition: NSNumberFormatterPadPosition): void;
  roundingMode(): NSNumberFormatterRoundingMode;
  setRoundingMode(roundingMode: NSNumberFormatterRoundingMode): void;
  roundingIncrement(): NSNumber;
  setRoundingIncrement(roundingIncrement: NSNumber | number): void;
  minimumIntegerDigits(): NSUInteger;
  setMinimumIntegerDigits(minimumIntegerDigits: NSUInteger): void;
  maximumIntegerDigits(): NSUInteger;
  setMaximumIntegerDigits(maximumIntegerDigits: NSUInteger): void;
  minimumFractionDigits(): NSUInteger;
  setMinimumFractionDigits(minimumFractionDigits: NSUInteger): void;
  maximumFractionDigits(): NSUInteger;
  setMaximumFractionDigits(maximumFractionDigits: NSUInteger): void;
  minimum(): NSNumber;
  setMinimum(minimum: NSNumber | number): void;
  maximum(): NSNumber;
  setMaximum(maximum: NSNumber | number): void;
  currencyGroupingSeparator(): NSString;
  setCurrencyGroupingSeparator(currencyGroupingSeparator: NSString | string): void;
  lenient(): boolean;
  setLenient(lenient: boolean): void;
  usesSignificantDigits(): boolean;
  setUsesSignificantDigits(usesSignificantDigits: boolean): void;
  minimumSignificantDigits(): NSUInteger;
  setMinimumSignificantDigits(minimumSignificantDigits: NSUInteger): void;
  maximumSignificantDigits(): NSUInteger;
  setMaximumSignificantDigits(maximumSignificantDigits: NSUInteger): void;
  partialStringValidationEnabled(): boolean;
  setPartialStringValidationEnabled(partialStringValidationEnabled: boolean): void;
  hasThousandSeparators(): boolean;
  setHasThousandSeparators(hasThousandSeparators: boolean): void;
  thousandSeparator(): NSString;
  setThousandSeparator(thousandSeparator: NSString | string): void;
  localizesFormat(): boolean;
  setLocalizesFormat(localizesFormat: boolean): void;
  format(): NSString;
  setFormat(format: NSString | string): void;
  attributedStringForZero(): NSAttributedString;
  setAttributedStringForZero(attributedStringForZero: NSAttributedString): void;
  attributedStringForNil(): NSAttributedString;
  setAttributedStringForNil(attributedStringForNil: NSAttributedString): void;
  attributedStringForNotANumber(): NSAttributedString;
  setAttributedStringForNotANumber(attributedStringForNotANumber: NSAttributedString): void;
  roundingBehavior(): NSDecimalNumberHandler;
  setRoundingBehavior(roundingBehavior: NSDecimalNumberHandler): void;
}

declare enum NSNumberFormatterBehavior {
  NSNumberFormatterBehaviorDefault = 0,
  NSNumberFormatterBehavior10_0 = 1000,
}

declare enum NSNumberFormatterStyle {
  NSNumberFormatterNoStyle,
  NSNumberFormatterDecimalStyle,
  NSNumberFormatterCurrencyStyle,
  NSNumberFormatterPercentStyle,
  NSNumberFormatterScientificStyle,
  NSNumberFormatterSpellOutStyle,
  NSNumberFormatterOrdinalStyle,
  NSNumberFormatterCurrencyISOCodeStyle,
  NSNumberFormatterCurrencyPluralStyle,
  NSNumberFormatterCurrencyAccountingStyle,
}

declare enum NSNumberFormatterPadPosition {
  NSNumberFormatterPadBeforePrefix,
  NSNumberFormatterPadAfterPrefix,
  NSNumberFormatterPadBeforeSuffix,
  NSNumberFormatterPadAfterSuffix,
}

declare enum NSNumberFormatterRoundingMode {
  NSNumberFormatterRoundCeiling,
  NSNumberFormatterRoundFloor,
  NSNumberFormatterRoundDown,
  NSNumberFormatterRoundUp,
  NSNumberFormatterRoundHalfEven,
  NSNumberFormatterRoundHalfDown,
  NSNumberFormatterRoundHalfUp,
}

declare type NSInteger = number

declare type NSUInteger = number

declare type NSExceptionName = NSString

declare type NSRunLoopMode = NSString

declare enum NSComparisonResult {
  NSOrderedAscending = -1,
  NSOrderedSame,
  NSOrderedDescending,
}

declare enum NSEnumerationOptions {
  NSEnumerationConcurrent,
  NSEnumerationReverse,
}

declare enum NSSortOptions {
  NSSortConcurrent,
  NSSortStable,
}

declare enum NSQualityOfService {
  NSQualityOfServiceUserInteractive = 0x21,
  NSQualityOfServiceUserInitiated = 0x19,
  NSQualityOfServiceUtility = 0x11,
  NSQualityOfServiceBackground = 0x09,
  NSQualityOfServiceDefault = -1,
}

declare interface INSCopying {
  copyWithZone(zone: NSZone | null): any;
}

declare interface INSMutableCopying {
  mutableCopyWithZone(zone: NSZone | null): any;
}

declare interface INSCoding {
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends INSCoding>(aDecoder: NSCoder): T;
}

declare interface INSSecureCoding {
  // static supportsSecureCoding(): boolean;
  // static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare interface INSDiscardableContent {
  beginContentAccess(): boolean;
  endContentAccess(): void;
  discardContentIfPossible(): void;
  isContentDiscarded(): boolean;
}

declare class NSOperation extends NSObject {
  start(): void;
  main(): void;
  cancel(): void;
  addDependency(op: NSOperation): void;
  removeDependency(op: NSOperation): void;
  waitUntilFinished(): void;

  cancelled(): boolean;
  setCancelled(cancelled: boolean): void;
  executing(): boolean;
  setExecuting(executing: boolean): void;
  finished(): boolean;
  setFinished(finished: boolean): void;
  concurrent(): boolean;
  setConcurrent(concurrent: boolean): void;
  asynchronous(): boolean;
  setAsynchronous(asynchronous: boolean): void;
  ready(): boolean;
  setReady(ready: boolean): void;
  dependencies(): NSArray<any>;
  setDependencies(dependencies: NSArray<any> | any[]): void;
  queuePriority(): NSOperationQueuePriority;
  setQueuePriority(queuePriority: NSOperationQueuePriority): void;
  threadPriority(): number;
  setThreadPriority(threadPriority: number): void;
  qualityOfService(): NSQualityOfService;
  setQualityOfService(qualityOfService: NSQualityOfService): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare class NSBlockOperation extends NSOperation {
  static blockOperationWithBlock(block: Block): NSBlockOperation;
  addExecutionBlock(block: Block): void;

  executionBlocks(): NSArray<any>;
  setExecutionBlocks(executionBlocks: NSArray<any> | any[]): void;
}

declare class NSInvocationOperation extends NSOperation {
  initWithTarget_selector_object<T extends NSInvocationOperation>(target: any, sel: string, arg: any | null): T;
  initWithInvocation<T extends NSInvocationOperation>(inv: NSInvocation): T;

  invocation(): NSInvocation;
  setInvocation(invocation: NSInvocation): void;
  result(): any;
  setResult(result: any): void;
}

declare class NSOperationQueue extends NSObject {
  addOperation(op: NSOperation): void;
  addOperations_waitUntilFinished(ops: NSArray<any> | any[], wait: boolean): void;
  addOperationWithBlock(block: Block): void;
  cancelAllOperations(): void;
  waitUntilAllOperationsAreFinished(): void;

  operations(): NSArray<any>;
  setOperations(operations: NSArray<any> | any[]): void;
  operationCount(): NSUInteger;
  setOperationCount(operationCount: NSUInteger): void;
  maxConcurrentOperationCount(): NSInteger;
  setMaxConcurrentOperationCount(maxConcurrentOperationCount: NSInteger): void;
  suspended(): boolean;
  setSuspended(suspended: boolean): void;
  name(): NSString;
  setName(name: NSString | string): void;
  qualityOfService(): NSQualityOfService;
  setQualityOfService(qualityOfService: NSQualityOfService): void;
  underlyingQueue(): dispatch_queue_t;
  setUnderlyingQueue(underlyingQueue: dispatch_queue_t): void;
  static currentQueue(): NSOperationQueue;
  static setCurrentQueue(currentQueue: NSOperationQueue): void;
  static mainQueue(): NSOperationQueue;
  static setMainQueue(mainQueue: NSOperationQueue): void;
}

declare enum NSOperationQueuePriority {
  NSOperationQueuePriorityVeryLow = -8,
  NSOperationQueuePriorityLow = -4,
  NSOperationQueuePriorityNormal = 0,
  NSOperationQueuePriorityHigh = 4,
  NSOperationQueuePriorityVeryHigh = 8,
}

declare class NSMutableOrderedSet<ObjectType> extends NSOrderedSet<ObjectType> {
  insertObject_atIndex(object: ObjectType, idx: NSUInteger): void;
  removeObjectAtIndex(idx: NSUInteger): void;
  replaceObjectAtIndex_withObject(idx: NSUInteger, object: ObjectType): void;
  // initWithCoder<T extends NSMutableOrderedSet<ObjectType>>(aDecoder: NSCoder): T;
  // init<T extends NSMutableOrderedSet<ObjectType>>(): T;
  initWithCapacity<T extends NSMutableOrderedSet<ObjectType>>(numItems: NSUInteger): T;
  addObject(object: ObjectType): void;
  addObjects_count(objects: ObjectType[], count: NSUInteger): void;
  addObjectsFromArray(array: NSArray<any> | any[]): void;
  exchangeObjectAtIndex_withObjectAtIndex(idx1: NSUInteger, idx2: NSUInteger): void;
  moveObjectsAtIndexes_toIndex(indexes: NSIndexSet, idx: NSUInteger): void;
  insertObjects_atIndexes(objects: NSArray<any> | any[], indexes: NSIndexSet): void;
  setObject_atIndex(obj: ObjectType, idx: NSUInteger): void;
  setObject_atIndexedSubscript(obj: ObjectType, idx: NSUInteger): void;
  replaceObjectsInRange_withObjects_count(range: NSRange, objects: ObjectType[], count: NSUInteger): void;
  replaceObjectsAtIndexes_withObjects(indexes: NSIndexSet, objects: NSArray<any> | any[]): void;
  removeObjectsInRange(range: NSRange): void;
  removeObjectsAtIndexes(indexes: NSIndexSet): void;
  removeAllObjects(): void;
  removeObject(object: ObjectType): void;
  removeObjectsInArray(array: NSArray<any> | any[]): void;
  intersectOrderedSet(other: NSOrderedSet<any>): void;
  minusOrderedSet(other: NSOrderedSet<any>): void;
  unionOrderedSet(other: NSOrderedSet<any>): void;
  intersectSet(other: NSSet<any>): void;
  minusSet(other: NSSet<any>): void;
  unionSet(other: NSSet<any>): void;
  sortUsingComparator(cmptr: NSComparator): void;
  sortWithOptions_usingComparator(opts: NSSortOptions, cmptr: NSComparator): void;
  sortRange_options_usingComparator(range: NSRange, opts: NSSortOptions, cmptr: NSComparator): void;
  static orderedSetWithCapacity<ObjectType>(numItems: NSUInteger): NSMutableOrderedSet<ObjectType>;
  filterUsingPredicate(p: NSPredicate): void;
  sortUsingDescriptors(sortDescriptors: NSArray<any> | any[]): void;
  mo_setObject_forIndexedSubscript(obj: any, idx: NSUInteger): void;
}

declare class NSOrthography extends NSObject implements INSCopying, INSSecureCoding {
  initWithDominantScript_languageMap<T extends NSOrthography>(script: NSString | string, map: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithCoder<T extends NSOrthography>(aDecoder: NSCoder): T;
  languagesForScript(script: NSString | string): NSArray<any>;
  dominantLanguageForScript(script: NSString | string): NSString;
  static defaultOrthographyForLanguage(language: NSString | string): NSOrthography;
  static orthographyWithDominantScript_languageMap(script: NSString | string, map: NSDictionary<any, any> | {[key: string]: any}): NSOrthography;
  copyWithZone(zone: NSZone | null): any;

  dominantScript(): NSString;
  setDominantScript(dominantScript: NSString | string): void;
  languageMap(): NSDictionary<any, any>;
  setLanguageMap(languageMap: NSDictionary<any, any> | {[key: string]: any}): void;
  dominantLanguage(): NSString;
  setDominantLanguage(dominantLanguage: NSString | string): void;
  allScripts(): NSArray<any>;
  setAllScripts(allScripts: NSArray<any> | any[]): void;
  allLanguages(): NSArray<any>;
  setAllLanguages(allLanguages: NSArray<any> | any[]): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSSearchPathDirectory {
  NSApplicationDirectory = 1,
  NSDemoApplicationDirectory,
  NSDeveloperApplicationDirectory,
  NSAdminApplicationDirectory,
  NSLibraryDirectory,
  NSDeveloperDirectory,
  NSUserDirectory,
  NSDocumentationDirectory,
  NSDocumentDirectory,
  NSCoreServiceDirectory,
  NSAutosavedInformationDirectory = 11,
  NSDesktopDirectory = 12,
  NSCachesDirectory = 13,
  NSApplicationSupportDirectory = 14,
  NSDownloadsDirectory = 15,
  NSInputMethodsDirectory = 16,
  NSMoviesDirectory = 17,
  NSMusicDirectory = 18,
  NSPicturesDirectory = 19,
  NSPrinterDescriptionDirectory = 20,
  NSSharedPublicDirectory = 21,
  NSPreferencePanesDirectory = 22,
  NSApplicationScriptsDirectory = 23,
  NSItemReplacementDirectory = 99,
  NSAllApplicationsDirectory = 100,
  NSAllLibrariesDirectory = 101,
  NSTrashDirectory = 102,
}

declare enum NSSearchPathDomainMask {
  NSUserDomainMask = 1,
  NSLocalDomainMask = 2,
  NSNetworkDomainMask = 4,
  NSSystemDomainMask = 8,
  NSAllDomainsMask = 0x0ffff,
}

declare class NSPersonNameComponents extends NSObject implements INSCopying, INSSecureCoding {
  copyWithZone(zone: NSZone | null): any;

  namePrefix(): NSString;
  setNamePrefix(namePrefix: NSString | string): void;
  givenName(): NSString;
  setGivenName(givenName: NSString | string): void;
  middleName(): NSString;
  setMiddleName(middleName: NSString | string): void;
  familyName(): NSString;
  setFamilyName(familyName: NSString | string): void;
  nameSuffix(): NSString;
  setNameSuffix(nameSuffix: NSString | string): void;
  nickname(): NSString;
  setNickname(nickname: NSString | string): void;
  phoneticRepresentation(): NSPersonNameComponents;
  setPhoneticRepresentation(phoneticRepresentation: NSPersonNameComponents): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSPersonNameComponentsFormatter extends NSFormatter {
  static localizedStringFromPersonNameComponents_style_options(components: NSPersonNameComponents, nameFormatStyle: NSPersonNameComponentsFormatterStyle, nameOptions: NSPersonNameComponentsFormatterOptions): NSString;
  stringFromPersonNameComponents(components: NSPersonNameComponents): NSString;
  annotatedStringFromPersonNameComponents(components: NSPersonNameComponents): NSAttributedString;
  personNameComponentsFromString(string: NSString | string): NSPersonNameComponents;
  getObjectValue_forString_errorDescription(obj: any, string: NSString | string, error: NSString | string): boolean;

  style(): NSPersonNameComponentsFormatterStyle;
  setStyle(style: NSPersonNameComponentsFormatterStyle): void;
  phonetic(): boolean;
  setPhonetic(phonetic: boolean): void;
}

declare enum NSPersonNameComponentsFormatterStyle {
  NSPersonNameComponentsFormatterStyleDefault = 0,
  NSPersonNameComponentsFormatterStyleShort,
  NSPersonNameComponentsFormatterStyleMedium,
  NSPersonNameComponentsFormatterStyleLong,
  NSPersonNameComponentsFormatterStyleAbbreviated,
}

declare enum NSPersonNameComponentsFormatterOptions {
  NSPersonNameComponentsFormatterPhonetic,
}

declare class NSPointerArray extends NSObject implements INSFastEnumeration, INSCopying, INSCoding {
  initWithOptions<T extends NSPointerArray>(options: NSPointerFunctionsOptions): T;
  initWithPointerFunctions<T extends NSPointerArray>(functions: NSPointerFunctions): T;
  static pointerArrayWithOptions(options: NSPointerFunctionsOptions): NSPointerArray;
  static pointerArrayWithPointerFunctions(functions: NSPointerFunctions): NSPointerArray;
  pointerAtIndex(index: NSUInteger): void;
  addPointer(pointer: void | null): void;
  removePointerAtIndex(index: NSUInteger): void;
  insertPointer_atIndex(item: void | null, index: NSUInteger): void;
  replacePointerAtIndex_withPointer(index: NSUInteger, item: void | null): void;
  compact(): void;
  static pointerArrayWithStrongObjects(): any;
  static pointerArrayWithWeakObjects(): any;
  static strongObjectsPointerArray(): NSPointerArray;
  static weakObjectsPointerArray(): NSPointerArray;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSPointerArray>(aDecoder: NSCoder): T;

  pointerFunctions(): NSPointerFunctions;
  setPointerFunctions(pointerFunctions: NSPointerFunctions): void;
  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  allObjects(): NSArray<any>;
  setAllObjects(allObjects: NSArray<any> | any[]): void;
}

declare class NSPointerFunctions extends NSObject implements INSCopying {
  initWithOptions<T extends NSPointerFunctions>(options: NSPointerFunctionsOptions): T;
  static pointerFunctionsWithOptions(options: NSPointerFunctionsOptions): NSPointerFunctions;
  copyWithZone(zone: NSZone | null): any;

  usesStrongWriteBarrier(): boolean;
  setUsesStrongWriteBarrier(usesStrongWriteBarrier: boolean): void;
  usesWeakReadAndWriteBarriers(): boolean;
  setUsesWeakReadAndWriteBarriers(usesWeakReadAndWriteBarriers: boolean): void;
}

declare enum NSPointerFunctionsOptions {
  NSPointerFunctionsStrongMemory = (0 << 0),
  NSPointerFunctionsZeroingWeakMemory = (1 << 0),
  NSPointerFunctionsMallocMemory = (3 << 0),
  NSPointerFunctionsMachVirtualMemory = (4 << 0),
  NSPointerFunctionsWeakMemory = (5 << 0),
  NSPointerFunctionsObjectPersonality = (0 << 8),
  NSPointerFunctionsOpaquePersonality = (1 << 8),
  NSPointerFunctionsObjectPointerPersonality = (2 << 8),
  NSPointerFunctionsCStringPersonality = (3 << 8),
  NSPointerFunctionsStructPersonality = (4 << 8),
  NSPointerFunctionsIntegerPersonality = (5 << 8),
  NSPointerFunctionsCopyIn = (1 << 16),
}

declare class NSPort extends NSObject implements INSCopying, INSCoding {
  static port(): NSPort;
  invalidate(): void;
  setDelegate(anObject: any | null): void;
  delegate(): any;
  scheduleInRunLoop_forMode(runLoop: NSRunLoop, mode: NSRunLoopMode): void;
  removeFromRunLoop_forMode(runLoop: NSRunLoop, mode: NSRunLoopMode): void;
  sendBeforeDate_components_from_reserved(limitDate: NSDate, components: NSMutableArray<any> | any[] | null, receivePort: NSPort | null, headerSpaceReserved: NSUInteger): boolean;
  sendBeforeDate_msgid_components_from_reserved(limitDate: NSDate, msgID: NSUInteger, components: NSMutableArray<any> | any[] | null, receivePort: NSPort | null, headerSpaceReserved: NSUInteger): boolean;
  addConnection_toRunLoop_forMode(conn: NSConnection, runLoop: NSRunLoop, mode: NSRunLoopMode): void;
  removeConnection_fromRunLoop_forMode(conn: NSConnection, runLoop: NSRunLoop, mode: NSRunLoopMode): void;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSPort>(aDecoder: NSCoder): T;

  valid(): boolean;
  setValid(valid: boolean): void;
  reservedSpaceLength(): NSUInteger;
  setReservedSpaceLength(reservedSpaceLength: NSUInteger): void;
}

declare class NSMachPort extends NSPort {
  static portWithMachPort(machPort: number): NSPort;
  initWithMachPort<T extends NSMachPort>(machPort: number): T;
  setDelegate(anObject: any | null): void;
  delegate(): any;
  static portWithMachPort_options(machPort: number, f: NSMachPortOptions): NSPort;
  initWithMachPort_options<T extends NSMachPort>(machPort: number, f: NSMachPortOptions): T;
  scheduleInRunLoop_forMode(runLoop: NSRunLoop, mode: NSRunLoopMode): void;
  removeFromRunLoop_forMode(runLoop: NSRunLoop, mode: NSRunLoopMode): void;

  machPort(): number;
  setMachPort(machPort: number): void;
}

declare class NSMessagePort extends NSPort {}

declare class NSSocketPort extends NSPort {
  init<T extends NSSocketPort>(): T;
  initWithTCPPort<T extends NSSocketPort>(port: number): T;
  initWithProtocolFamily_socketType_protocol_address<T extends NSSocketPort>(family: number, type: number, protocol: number, address: NSData): T;
  initWithProtocolFamily_socketType_protocol_socket<T extends NSSocketPort>(family: number, type: number, protocol: number, sock: NSSocketNativeHandle): T;
  initRemoteWithTCPPort_host<T extends NSSocketPort>(port: number, hostName: NSString | string | null): T;
  initRemoteWithProtocolFamily_socketType_protocol_address<T extends NSSocketPort>(family: number, type: number, protocol: number, address: NSData): T;

  protocolFamily(): number;
  setProtocolFamily(protocolFamily: number): void;
  socketType(): number;
  setSocketType(socketType: number): void;
  protocol(): number;
  setProtocol(protocol: number): void;
  address(): NSData;
  setAddress(address: NSData): void;
  socket(): NSSocketNativeHandle;
  setSocket(socket: NSSocketNativeHandle): void;
}

declare interface INSPortDelegate {
  handlePortMessage(message: NSPortMessage): void;
}

declare interface INSMachPortDelegate {
  handleMachMessage(msg: void): void;
}

declare type NSSocketNativeHandle = number

declare enum NSMachPortOptions {
  NSMachPortDeallocateNone = 0,
  NSMachPortDeallocateSendRight,
  NSMachPortDeallocateReceiveRight,
}

declare class NSPortCoder extends NSCoder {
  isBycopy(): boolean;
  isByref(): boolean;
  encodePortObject(aport: NSPort): void;
  decodePortObject(): NSPort;
  connection(): NSConnection;
  static portCoderWithReceivePort_sendPort_components(rcvPort: NSPort | null, sndPort: NSPort | null, comps: NSArray<any> | any[] | null): any;
  initWithReceivePort_sendPort_components<T extends NSPortCoder>(rcvPort: NSPort | null, sndPort: NSPort | null, comps: NSArray<any> | any[] | null): T;
  dispatch(): void;
}

declare class NSPortMessage extends NSObject {
  initWithSendPort_receivePort_components<T extends NSPortMessage>(sendPort: NSPort | null, replyPort: NSPort | null, components: NSArray<any> | any[] | null): T;
  sendBeforeDate(date: NSDate): boolean;

  components(): NSArray<any>;
  setComponents(components: NSArray<any> | any[]): void;
  receivePort(): NSPort;
  setReceivePort(receivePort: NSPort): void;
  sendPort(): NSPort;
  setSendPort(sendPort: NSPort): void;
  msgid(): number;
  setMsgid(msgid: number): void;
}

declare class NSPortNameServer extends NSObject {
  static systemDefaultPortNameServer(): NSPortNameServer;
  portForName(name: NSString | string): NSPort;
  portForName_host(name: NSString | string, host: NSString | string | null): NSPort;
  registerPort_name(port: NSPort, name: NSString | string): boolean;
  removePortForName(name: NSString | string): boolean;
}

declare class NSMachBootstrapServer extends NSPortNameServer {
  static sharedInstance(): any;
  portForName(name: NSString | string): NSPort;
  portForName_host(name: NSString | string, host: NSString | string | null): NSPort;
  registerPort_name(port: NSPort, name: NSString | string): boolean;
  servicePortWithName(name: NSString | string): NSPort;
}

declare class NSMessagePortNameServer extends NSPortNameServer {
  static sharedInstance(): any;
  portForName(name: NSString | string): NSPort;
  portForName_host(name: NSString | string, host: NSString | string | null): NSPort;
}

declare class NSSocketPortNameServer extends NSPortNameServer {
  static sharedInstance(): any;
  portForName(name: NSString | string): NSPort;
  portForName_host(name: NSString | string, host: NSString | string | null): NSPort;
  registerPort_name(port: NSPort, name: NSString | string): boolean;
  removePortForName(name: NSString | string): boolean;
  portForName_host_nameServerPortNumber(name: NSString | string, host: NSString | string | null, portNumber: number): NSPort;
  registerPort_name_nameServerPortNumber(port: NSPort, name: NSString | string, portNumber: number): boolean;

  defaultNameServerPortNumber(): number;
  setDefaultNameServerPortNumber(defaultNameServerPortNumber: number): void;
}

declare class NSPredicate extends NSObject implements INSSecureCoding, INSCopying {
  static predicateWithFormat_argumentArray(predicateFormat: NSString | string, arguments: NSArray<any> | any[] | null): NSPredicate;
  static predicateWithFormat(predicateFormat: NSString | string, ...args: any[]): NSPredicate;
  static predicateWithFormat_arguments(predicateFormat: NSString | string, ...argList: any[]): NSPredicate;
  static predicateFromMetadataQueryString(queryString: NSString | string): NSPredicate;
  static predicateWithValue(value: boolean): NSPredicate;
  static predicateWithBlock(block: Block): NSPredicate;
  predicateWithSubstitutionVariables(variables: NSDictionary<any, any> | {[key: string]: any}): NSPredicate;
  evaluateWithObject(object: any | null): boolean;
  evaluateWithObject_substitutionVariables(object: any | null, bindings: NSDictionary<any, any> | {[key: string]: any} | null): boolean;
  allowEvaluation(): void;
  copyWithZone(zone: NSZone | null): any;

  predicateFormat(): NSString;
  setPredicateFormat(predicateFormat: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableSet<ObjectType> extends NSSet<ObjectType> {
  filterUsingPredicate(predicate: NSPredicate): void;
  addObject(object: ObjectType): void;
  removeObject(object: ObjectType): void;
  // initWithCoder<T extends NSMutableSet<ObjectType>>(aDecoder: NSCoder): T;
  // init<T extends NSMutableSet<ObjectType>>(): T;
  initWithCapacity<T extends NSMutableSet<ObjectType>>(numItems: NSUInteger): T;
  addObjectsFromArray(array: NSArray<any> | any[]): void;
  intersectSet(otherSet: NSSet<any>): void;
  minusSet(otherSet: NSSet<any>): void;
  removeAllObjects(): void;
  unionSet(otherSet: NSSet<any>): void;
  setSet(otherSet: NSSet<any>): void;
  static setWithCapacity<ObjectType>(numItems: NSUInteger): NSMutableSet<ObjectType>;
  addObjectIfNotNil(anObject: any): void;
}

declare class NSProcessInfo extends NSObject {
  operatingSystem(): NSUInteger;
  operatingSystemName(): NSString;
  isOperatingSystemAtLeastVersion(version: NSOperatingSystemVersion): boolean;
  disableSuddenTermination(): void;
  enableSuddenTermination(): void;
  disableAutomaticTermination(reason: NSString | string): void;
  enableAutomaticTermination(reason: NSString | string): void;
  beginActivityWithOptions_reason(options: NSActivityOptions, reason: NSString | string): any;
  endActivity(activity: any): void;
  performActivityWithOptions_reason_usingBlock(options: NSActivityOptions, reason: NSString | string, block: Block): void;
  performExpiringActivityWithReason_usingBlock(reason: NSString | string, block: Block): void;

  static processInfo(): NSProcessInfo;
  static setProcessInfo(processInfo: NSProcessInfo): void;
  environment(): NSDictionary<any, any>;
  setEnvironment(environment: NSDictionary<any, any> | {[key: string]: any}): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  hostName(): NSString;
  setHostName(hostName: NSString | string): void;
  processName(): NSString;
  setProcessName(processName: NSString | string): void;
  processIdentifier(): number;
  setProcessIdentifier(processIdentifier: number): void;
  globallyUniqueString(): NSString;
  setGloballyUniqueString(globallyUniqueString: NSString | string): void;
  operatingSystemVersionString(): NSString;
  setOperatingSystemVersionString(operatingSystemVersionString: NSString | string): void;
  operatingSystemVersion(): NSOperatingSystemVersion;
  setOperatingSystemVersion(operatingSystemVersion: NSOperatingSystemVersion): void;
  processorCount(): NSUInteger;
  setProcessorCount(processorCount: NSUInteger): void;
  activeProcessorCount(): NSUInteger;
  setActiveProcessorCount(activeProcessorCount: NSUInteger): void;
  physicalMemory(): number;
  setPhysicalMemory(physicalMemory: number): void;
  systemUptime(): NSTimeInterval;
  setSystemUptime(systemUptime: NSTimeInterval): void;
  automaticTerminationSupportEnabled(): boolean;
  setAutomaticTerminationSupportEnabled(automaticTerminationSupportEnabled: boolean): void;
  userName(): NSString;
  setUserName(userName: NSString | string): void;
  fullUserName(): NSString;
  setFullUserName(fullUserName: NSString | string): void;
  thermalState(): NSProcessInfoThermalState;
  setThermalState(thermalState: NSProcessInfoThermalState): void;
  lowPowerModeEnabled(): boolean;
  setLowPowerModeEnabled(lowPowerModeEnabled: boolean): void;
}

declare type NSOperatingSystemVersion = {
  majorVersion: NSInteger
  minorVersion: NSInteger
  patchVersion: NSInteger
}

declare enum NSActivityOptions {
  NSActivityIdleDisplaySleepDisabled,
  NSActivityIdleSystemSleepDisabled,
  NSActivitySuddenTerminationDisabled,
  NSActivityAutomaticTerminationDisabled,
  NSActivityUserInitiated,
  NSActivityUserInitiatedAllowingIdleSystemSleep,
  NSActivityBackground = 0x000000FF,
  NSActivityLatencyCritical = 0xFF00000000,
}

declare enum NSProcessInfoThermalState {
  NSProcessInfoThermalStateNominal,
  NSProcessInfoThermalStateFair,
  NSProcessInfoThermalStateSerious,
  NSProcessInfoThermalStateCritical,
}

declare class NSProgress extends NSObject {
  static currentProgress(): NSProgress;
  static progressWithTotalUnitCount(unitCount: number): NSProgress;
  static discreteProgressWithTotalUnitCount(unitCount: number): NSProgress;
  static progressWithTotalUnitCount_parent_pendingUnitCount(unitCount: number, parent: NSProgress, portionOfParentTotalUnitCount: number): NSProgress;
  initWithParent_userInfo<T extends NSProgress>(parentProgressOrNil: NSProgress | null, userInfoOrNil: NSDictionary<any, any> | {[key: string]: any} | null): T;
  becomeCurrentWithPendingUnitCount(unitCount: number): void;
  performAsCurrentWithPendingUnitCount_usingBlock(unitCount: number, work: Block): void;
  resignCurrent(): void;
  addChild_withPendingUnitCount(child: NSProgress, inUnitCount: number): void;
  setUserInfoObject_forKey(objectOrNil: any | null, key: NSProgressUserInfoKey): void;
  cancel(): void;
  pause(): void;
  resume(): void;
  publish(): void;
  unpublish(): void;
  static addSubscriberForFileURL_withPublishingHandler(url: NSURL, publishingHandler: NSProgressPublishingHandler): any;
  static removeSubscriber(subscriber: any): void;

  totalUnitCount(): number;
  setTotalUnitCount(totalUnitCount: number): void;
  completedUnitCount(): number;
  setCompletedUnitCount(completedUnitCount: number): void;
  localizedDescription(): NSString;
  setLocalizedDescription(localizedDescription: NSString | string): void;
  localizedAdditionalDescription(): NSString;
  setLocalizedAdditionalDescription(localizedAdditionalDescription: NSString | string): void;
  cancellable(): boolean;
  setCancellable(cancellable: boolean): void;
  pausable(): boolean;
  setPausable(pausable: boolean): void;
  cancelled(): boolean;
  setCancelled(cancelled: boolean): void;
  paused(): boolean;
  setPaused(paused: boolean): void;
  indeterminate(): boolean;
  setIndeterminate(indeterminate: boolean): void;
  fractionCompleted(): number;
  setFractionCompleted(fractionCompleted: number): void;
  finished(): boolean;
  setFinished(finished: boolean): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  kind(): NSProgressKind;
  setKind(kind: NSProgressKind): void;
  estimatedTimeRemaining(): NSNumber;
  setEstimatedTimeRemaining(estimatedTimeRemaining: NSNumber | number): void;
  throughput(): NSNumber;
  setThroughput(throughput: NSNumber | number): void;
  fileOperationKind(): NSProgressFileOperationKind;
  setFileOperationKind(fileOperationKind: NSProgressFileOperationKind): void;
  fileURL(): NSURL;
  setFileURL(fileURL: NSURL): void;
  fileTotalCount(): NSNumber;
  setFileTotalCount(fileTotalCount: NSNumber | number): void;
  fileCompletedCount(): NSNumber;
  setFileCompletedCount(fileCompletedCount: NSNumber | number): void;
  old(): boolean;
  setOld(old: boolean): void;
}

declare interface INSProgressReporting {
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
}

declare type NSProgressKind = NSString

declare type NSProgressUserInfoKey = NSString

declare type NSProgressFileOperationKind = NSString

declare class NSPropertyListSerialization extends NSObject {
  static propertyList_isValidForFormat(plist: any, format: NSPropertyListFormat): boolean;
  static dataWithPropertyList_format_options_error(plist: any, format: NSPropertyListFormat, opt: NSPropertyListWriteOptions, error: NSError): NSData;
  static writePropertyList_toStream_format_options_error(plist: any, stream: NSOutputStream, format: NSPropertyListFormat, opt: NSPropertyListWriteOptions, error: NSError): NSInteger;
  static propertyListWithData_options_format_error(data: NSData, opt: NSPropertyListReadOptions, format: NSPropertyListFormat | null, error: NSError): any;
  static propertyListWithStream_options_format_error(stream: NSInputStream, opt: NSPropertyListReadOptions, format: NSPropertyListFormat | null, error: NSError): any;
  static dataFromPropertyList_format_errorDescription(plist: any, format: NSPropertyListFormat, errorString: NSString | string): NSData;
  static propertyListFromData_mutabilityOption_format_errorDescription(data: NSData, opt: NSPropertyListMutabilityOptions, format: NSPropertyListFormat | null, errorString: NSString | string): any;
}

declare type NSPropertyListReadOptions = NSPropertyListMutabilityOptions

declare type NSPropertyListWriteOptions = NSUInteger

declare enum NSPropertyListMutabilityOptions {
  NSPropertyListImmutable,
  NSPropertyListMutableContainers,
  NSPropertyListMutableContainersAndLeaves,
}

declare enum NSPropertyListFormat {
  NSPropertyListOpenStepFormat,
  NSPropertyListXMLFormat_v1_0,
  NSPropertyListBinaryFormat_v1_0,
}

declare class NSProtocolChecker extends NSProxy {
  static protocolCheckerWithTarget_protocol(anObject: NSObject, aProtocol: Protocol): NSProtocolChecker;
  initWithTarget_protocol<T extends NSProtocolChecker>(anObject: NSObject, aProtocol: Protocol): T;

  protocol(): Protocol;
  setProtocol(protocol: Protocol): void;
  target(): NSObject;
  setTarget(target: NSObject): void;
}

declare class NSProxy {
  static alloc(): any;
  static class(): any;
  forwardInvocation(invocation: NSInvocation): void;
  methodSignatureForSelector(sel: string): NSMethodSignature;
  dealloc(): void;
  finalize(): void;
  static respondsToSelector(aSelector: string): boolean;

  description(): NSString;
  setDescription(description: NSString | string): void;
  debugDescription(): NSString;
  setDebugDescription(debugDescription: NSString | string): void;
}

declare type NSRange = {
  location: NSUInteger
  length: NSUInteger
}

declare type NSRangePointer = NSRange

declare class NSRegularExpression extends NSObject implements INSCopying, INSSecureCoding {
  static regularExpressionWithPattern_options_error(pattern: NSString | string, options: NSRegularExpressionOptions, error: NSError): NSRegularExpression;
  initWithPattern_options_error<T extends NSRegularExpression>(pattern: NSString | string, options: NSRegularExpressionOptions, error: NSError): T;
  static escapedPatternForString(string: NSString | string): NSString;
  enumerateMatchesInString_options_range_usingBlock(string: NSString | string, options: NSMatchingOptions, range: NSRange, block: Block): void;
  matchesInString_options_range(string: NSString | string, options: NSMatchingOptions, range: NSRange): NSArray<any>;
  numberOfMatchesInString_options_range(string: NSString | string, options: NSMatchingOptions, range: NSRange): NSUInteger;
  firstMatchInString_options_range(string: NSString | string, options: NSMatchingOptions, range: NSRange): NSTextCheckingResult;
  rangeOfFirstMatchInString_options_range(string: NSString | string, options: NSMatchingOptions, range: NSRange): NSRange;
  stringByReplacingMatchesInString_options_range_withTemplate(string: NSString | string, options: NSMatchingOptions, range: NSRange, templ: NSString | string): NSString;
  replaceMatchesInString_options_range_withTemplate(string: NSMutableString, options: NSMatchingOptions, range: NSRange, templ: NSString | string): NSUInteger;
  replacementStringForResult_inString_offset_template(result: NSTextCheckingResult, string: NSString | string, offset: NSInteger, templ: NSString | string): NSString;
  static escapedTemplateForString(string: NSString | string): NSString;
  copyWithZone(zone: NSZone | null): any;

  pattern(): NSString;
  setPattern(pattern: NSString | string): void;
  options(): NSRegularExpressionOptions;
  setOptions(options: NSRegularExpressionOptions): void;
  numberOfCaptureGroups(): NSUInteger;
  setNumberOfCaptureGroups(numberOfCaptureGroups: NSUInteger): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSDataDetector extends NSRegularExpression {
  static dataDetectorWithTypes_error(checkingTypes: NSTextCheckingTypes, error: NSError): NSDataDetector;
  initWithTypes_error<T extends NSDataDetector>(checkingTypes: NSTextCheckingTypes, error: NSError): T;

  checkingTypes(): NSTextCheckingTypes;
  setCheckingTypes(checkingTypes: NSTextCheckingTypes): void;
}

declare enum NSRegularExpressionOptions {
  NSRegularExpressionCaseInsensitive = 1 << 0,
  NSRegularExpressionAllowCommentsAndWhitespace = 1 << 1,
  NSRegularExpressionIgnoreMetacharacters = 1 << 2,
  NSRegularExpressionDotMatchesLineSeparators = 1 << 3,
  NSRegularExpressionAnchorsMatchLines = 1 << 4,
  NSRegularExpressionUseUnixLineSeparators = 1 << 5,
  NSRegularExpressionUseUnicodeWordBoundaries = 1 << 6,
}

declare enum NSMatchingOptions {
  NSMatchingReportProgress = 1 << 0,
  NSMatchingReportCompletion = 1 << 1,
  NSMatchingAnchored = 1 << 2,
  NSMatchingWithTransparentBounds = 1 << 3,
  NSMatchingWithoutAnchoringBounds = 1 << 4,
}

declare enum NSMatchingFlags {
  NSMatchingProgress = 1 << 0,
  NSMatchingCompleted = 1 << 1,
  NSMatchingHitEnd = 1 << 2,
  NSMatchingRequiredEnd = 1 << 3,
  NSMatchingInternalError = 1 << 4,
}

declare class NSRunLoop extends NSObject {
  addTimer_forMode(timer: NSTimer, mode: NSRunLoopMode): void;
  addPort_forMode(aPort: NSPort, mode: NSRunLoopMode): void;
  removePort_forMode(aPort: NSPort, mode: NSRunLoopMode): void;
  limitDateForMode(mode: NSRunLoopMode): NSDate;
  acceptInputForMode_beforeDate(mode: NSRunLoopMode, limitDate: NSDate): void;
  run(): void;
  runUntilDate(limitDate: NSDate): void;
  runMode_beforeDate(mode: NSRunLoopMode, limitDate: NSDate): boolean;
  configureAsServer(): void;
  performInModes_block(modes: NSArray<any> | any[], block: Block): void;
  performBlock(block: Block): void;
  performSelector_target_argument_order_modes(aSelector: string, target: any, arg: any | null, order: NSUInteger, modes: NSArray<any> | any[]): void;
  cancelPerformSelector_target_argument(aSelector: string, target: any, arg: any | null): void;
  cancelPerformSelectorsWithTarget(target: any): void;

  static currentRunLoop(): NSRunLoop;
  static setCurrentRunLoop(currentRunLoop: NSRunLoop): void;
  static mainRunLoop(): NSRunLoop;
  static setMainRunLoop(mainRunLoop: NSRunLoop): void;
  currentMode(): NSRunLoopMode;
  setCurrentMode(currentMode: NSRunLoopMode): void;
}

declare class NSScriptClassDescription extends NSClassDescription {
  static classDescriptionForClass(aClass: any): NSScriptClassDescription;
  initWithSuiteName_className_dictionary<T extends NSScriptClassDescription>(suiteName: NSString | string, className: NSString | string, classDeclaration: NSDictionary<any, any> | {[key: string]: any} | null): T;
  matchesAppleEventCode(appleEventCode: number): boolean;
  supportsCommand(commandDescription: NSScriptCommandDescription): boolean;
  selectorForCommand(commandDescription: NSScriptCommandDescription): string;
  typeForKey(key: NSString | string): NSString;
  classDescriptionForKey(key: NSString | string): NSScriptClassDescription;
  appleEventCodeForKey(key: NSString | string): number;
  keyWithAppleEventCode(appleEventCode: number): NSString;
  isLocationRequiredToCreateForKey(toManyRelationshipKey: NSString | string): boolean;
  hasPropertyForKey(key: NSString | string): boolean;
  hasOrderedToManyRelationshipForKey(key: NSString | string): boolean;
  hasReadablePropertyForKey(key: NSString | string): boolean;
  hasWritablePropertyForKey(key: NSString | string): boolean;
  isReadOnlyKey(key: NSString | string): boolean;

  suiteName(): NSString;
  setSuiteName(suiteName: NSString | string): void;
  className(): NSString;
  setClassName(className: NSString | string): void;
  implementationClassName(): NSString;
  setImplementationClassName(implementationClassName: NSString | string): void;
  superclassDescription(): NSScriptClassDescription;
  setSuperclassDescription(superclassDescription: NSScriptClassDescription): void;
  appleEventCode(): number;
  setAppleEventCode(appleEventCode: number): void;
  defaultSubcontainerAttributeKey(): NSString;
  setDefaultSubcontainerAttributeKey(defaultSubcontainerAttributeKey: NSString | string): void;
}

declare class NSScriptCoercionHandler extends NSObject {
  static sharedCoercionHandler(): NSScriptCoercionHandler;
  coerceValue_toClass(value: any, toClass: any): any;
  registerCoercer_selector_toConvertFromClass_toClass(coercer: any, selector: string, fromClass: any, toClass: any): void;
}

declare class NSScriptCommand extends NSObject implements INSCoding {
  initWithCommandDescription<T extends NSScriptCommand>(commandDef: NSScriptCommandDescription): T;
  initWithCoder<T extends NSScriptCommand>(inCoder: NSCoder): T;
  performDefaultImplementation(): any;
  executeCommand(): any;
  static currentCommand(): NSScriptCommand;
  suspendExecution(): void;
  resumeExecutionWithResult(result: any | null): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSScriptCommand>(aDecoder: NSCoder): T;

  commandDescription(): NSScriptCommandDescription;
  setCommandDescription(commandDescription: NSScriptCommandDescription): void;
  directParameter(): any;
  setDirectParameter(directParameter: any): void;
  receiversSpecifier(): NSScriptObjectSpecifier;
  setReceiversSpecifier(receiversSpecifier: NSScriptObjectSpecifier): void;
  evaluatedReceivers(): any;
  setEvaluatedReceivers(evaluatedReceivers: any): void;
  arguments(): NSDictionary<any, any>;
  setArguments(arguments: NSDictionary<any, any> | {[key: string]: any}): void;
  evaluatedArguments(): NSDictionary<any, any>;
  setEvaluatedArguments(evaluatedArguments: NSDictionary<any, any> | {[key: string]: any}): void;
  wellFormed(): boolean;
  setWellFormed(wellFormed: boolean): void;
  scriptErrorNumber(): NSInteger;
  setScriptErrorNumber(scriptErrorNumber: NSInteger): void;
  scriptErrorOffendingObjectDescriptor(): NSAppleEventDescriptor;
  setScriptErrorOffendingObjectDescriptor(scriptErrorOffendingObjectDescriptor: NSAppleEventDescriptor): void;
  scriptErrorExpectedTypeDescriptor(): NSAppleEventDescriptor;
  setScriptErrorExpectedTypeDescriptor(scriptErrorExpectedTypeDescriptor: NSAppleEventDescriptor): void;
  scriptErrorString(): NSString;
  setScriptErrorString(scriptErrorString: NSString | string): void;
  appleEvent(): NSAppleEventDescriptor;
  setAppleEvent(appleEvent: NSAppleEventDescriptor): void;
}

declare class NSScriptCommandDescription extends NSObject implements INSCoding {
  initWithSuiteName_commandName_dictionary<T extends NSScriptCommandDescription>(suiteName: NSString | string, commandName: NSString | string, commandDeclaration: NSDictionary<any, any> | {[key: string]: any} | null): T;
  initWithCoder<T extends NSScriptCommandDescription>(inCoder: NSCoder): T;
  typeForArgumentWithName(argumentName: NSString | string): NSString;
  appleEventCodeForArgumentWithName(argumentName: NSString | string): number;
  isOptionalArgumentWithName(argumentName: NSString | string): boolean;
  createCommandInstance(): NSScriptCommand;
  createCommandInstanceWithZone(zone: NSZone | null): NSScriptCommand;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSScriptCommandDescription>(aDecoder: NSCoder): T;

  suiteName(): NSString;
  setSuiteName(suiteName: NSString | string): void;
  commandName(): NSString;
  setCommandName(commandName: NSString | string): void;
  appleEventClassCode(): number;
  setAppleEventClassCode(appleEventClassCode: number): void;
  appleEventCode(): number;
  setAppleEventCode(appleEventCode: number): void;
  commandClassName(): NSString;
  setCommandClassName(commandClassName: NSString | string): void;
  returnType(): NSString;
  setReturnType(returnType: NSString | string): void;
  appleEventCodeForReturnType(): number;
  setAppleEventCodeForReturnType(appleEventCodeForReturnType: number): void;
  argumentNames(): NSArray<any>;
  setArgumentNames(argumentNames: NSArray<any> | any[]): void;
}

declare class NSScriptExecutionContext extends NSObject {
  static sharedScriptExecutionContext(): NSScriptExecutionContext;

  topLevelObject(): any;
  setTopLevelObject(topLevelObject: any): void;
  objectBeingTested(): any;
  setObjectBeingTested(objectBeingTested: any): void;
  rangeContainerObject(): any;
  setRangeContainerObject(rangeContainerObject: any): void;
}

declare class NSScriptObjectSpecifier extends NSObject implements INSCoding {
  static objectSpecifierWithDescriptor(descriptor: NSAppleEventDescriptor): NSScriptObjectSpecifier;
  initWithContainerSpecifier_key<T extends NSScriptObjectSpecifier>(container: NSScriptObjectSpecifier, property: NSString | string): T;
  initWithContainerClassDescription_containerSpecifier_key<T extends NSScriptObjectSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string): T;
  initWithCoder<T extends NSScriptObjectSpecifier>(inCoder: NSCoder): T;
  indicesOfObjectsByEvaluatingWithContainer_count(container: any, count: NSInteger): NSInteger;
  objectsByEvaluatingWithContainers(containers: any): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSScriptObjectSpecifier>(aDecoder: NSCoder): T;

  childSpecifier(): NSScriptObjectSpecifier;
  setChildSpecifier(childSpecifier: NSScriptObjectSpecifier): void;
  containerSpecifier(): NSScriptObjectSpecifier;
  setContainerSpecifier(containerSpecifier: NSScriptObjectSpecifier): void;
  containerIsObjectBeingTested(): boolean;
  setContainerIsObjectBeingTested(containerIsObjectBeingTested: boolean): void;
  containerIsRangeContainerObject(): boolean;
  setContainerIsRangeContainerObject(containerIsRangeContainerObject: boolean): void;
  key(): NSString;
  setKey(key: NSString | string): void;
  containerClassDescription(): NSScriptClassDescription;
  setContainerClassDescription(containerClassDescription: NSScriptClassDescription): void;
  keyClassDescription(): NSScriptClassDescription;
  setKeyClassDescription(keyClassDescription: NSScriptClassDescription): void;
  objectsByEvaluatingSpecifier(): any;
  setObjectsByEvaluatingSpecifier(objectsByEvaluatingSpecifier: any): void;
  evaluationErrorNumber(): NSInteger;
  setEvaluationErrorNumber(evaluationErrorNumber: NSInteger): void;
  evaluationErrorSpecifier(): NSScriptObjectSpecifier;
  setEvaluationErrorSpecifier(evaluationErrorSpecifier: NSScriptObjectSpecifier): void;
  descriptor(): NSAppleEventDescriptor;
  setDescriptor(descriptor: NSAppleEventDescriptor): void;
}

declare class NSIndexSpecifier extends NSScriptObjectSpecifier {
  initWithContainerClassDescription_containerSpecifier_key_index<T extends NSIndexSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string, index: NSInteger): T;

  index(): NSInteger;
  setIndex(index: NSInteger): void;
}

declare class NSMiddleSpecifier extends NSScriptObjectSpecifier {}

declare class NSNameSpecifier extends NSScriptObjectSpecifier {
  // initWithCoder<T extends NSNameSpecifier>(inCoder: NSCoder): T;
  initWithContainerClassDescription_containerSpecifier_key_name<T extends NSNameSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string, name: NSString | string): T;

  name(): NSString;
  setName(name: NSString | string): void;
}

declare class NSPositionalSpecifier extends NSObject {
  initWithPosition_objectSpecifier<T extends NSPositionalSpecifier>(position: NSInsertionPosition, specifier: NSScriptObjectSpecifier): T;
  setInsertionClassDescription(classDescription: NSScriptClassDescription): void;
  evaluate(): void;

  position(): NSInsertionPosition;
  setPosition(position: NSInsertionPosition): void;
  objectSpecifier(): NSScriptObjectSpecifier;
  setObjectSpecifier(objectSpecifier: NSScriptObjectSpecifier): void;
  insertionContainer(): any;
  setInsertionContainer(insertionContainer: any): void;
  insertionKey(): NSString;
  setInsertionKey(insertionKey: NSString | string): void;
  insertionIndex(): NSInteger;
  setInsertionIndex(insertionIndex: NSInteger): void;
  insertionReplaces(): boolean;
  setInsertionReplaces(insertionReplaces: boolean): void;
}

declare class NSPropertySpecifier extends NSScriptObjectSpecifier {}

declare class NSRandomSpecifier extends NSScriptObjectSpecifier {}

declare class NSRangeSpecifier extends NSScriptObjectSpecifier {
  // initWithCoder<T extends NSRangeSpecifier>(inCoder: NSCoder): T;
  initWithContainerClassDescription_containerSpecifier_key_startSpecifier_endSpecifier<T extends NSRangeSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string, startSpec: NSScriptObjectSpecifier | null, endSpec: NSScriptObjectSpecifier | null): T;

  startSpecifier(): NSScriptObjectSpecifier;
  setStartSpecifier(startSpecifier: NSScriptObjectSpecifier): void;
  endSpecifier(): NSScriptObjectSpecifier;
  setEndSpecifier(endSpecifier: NSScriptObjectSpecifier): void;
}

declare class NSRelativeSpecifier extends NSScriptObjectSpecifier {
  // initWithCoder<T extends NSRelativeSpecifier>(inCoder: NSCoder): T;
  initWithContainerClassDescription_containerSpecifier_key_relativePosition_baseSpecifier<T extends NSRelativeSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string, relPos: NSRelativePosition, baseSpecifier: NSScriptObjectSpecifier | null): T;

  relativePosition(): NSRelativePosition;
  setRelativePosition(relativePosition: NSRelativePosition): void;
  baseSpecifier(): NSScriptObjectSpecifier;
  setBaseSpecifier(baseSpecifier: NSScriptObjectSpecifier): void;
}

declare class NSUniqueIDSpecifier extends NSScriptObjectSpecifier {
  // initWithCoder<T extends NSUniqueIDSpecifier>(inCoder: NSCoder): T;
  initWithContainerClassDescription_containerSpecifier_key_uniqueID<T extends NSUniqueIDSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string, uniqueID: any): T;

  uniqueID(): any;
  setUniqueID(uniqueID: any): void;
}

declare class NSWhoseSpecifier extends NSScriptObjectSpecifier {
  // initWithCoder<T extends NSWhoseSpecifier>(inCoder: NSCoder): T;
  initWithContainerClassDescription_containerSpecifier_key_test<T extends NSWhoseSpecifier>(classDesc: NSScriptClassDescription, container: NSScriptObjectSpecifier | null, property: NSString | string, test: NSScriptWhoseTest): T;

  test(): NSScriptWhoseTest;
  setTest(test: NSScriptWhoseTest): void;
  startSubelementIdentifier(): NSWhoseSubelementIdentifier;
  setStartSubelementIdentifier(startSubelementIdentifier: NSWhoseSubelementIdentifier): void;
  startSubelementIndex(): NSInteger;
  setStartSubelementIndex(startSubelementIndex: NSInteger): void;
  endSubelementIdentifier(): NSWhoseSubelementIdentifier;
  setEndSubelementIdentifier(endSubelementIdentifier: NSWhoseSubelementIdentifier): void;
  endSubelementIndex(): NSInteger;
  setEndSubelementIndex(endSubelementIndex: NSInteger): void;
}

declare enum NSInsertionPosition {
  NSPositionAfter,
  NSPositionBefore,
  NSPositionBeginning,
  NSPositionEnd,
  NSPositionReplace,
}

declare enum NSRelativePosition {
  NSRelativeAfter = 0,
  NSRelativeBefore,
}

declare enum NSWhoseSubelementIdentifier {
  NSIndexSubelement = 0,
  NSEverySubelement = 1,
  NSMiddleSubelement = 2,
  NSRandomSubelement = 3,
  NSNoSubelement = 4,
}

declare class NSCloneCommand extends NSScriptCommand {
  setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier | null): void;

  keySpecifier(): NSScriptObjectSpecifier;
  setKeySpecifier(keySpecifier: NSScriptObjectSpecifier): void;
}

declare class NSCloseCommand extends NSScriptCommand {
  saveOptions(): NSSaveOptions;
  setSaveOptions(saveOptions: NSSaveOptions): void;
}

declare class NSCountCommand extends NSScriptCommand {}

declare class NSCreateCommand extends NSScriptCommand {
  createClassDescription(): NSScriptClassDescription;
  setCreateClassDescription(createClassDescription: NSScriptClassDescription): void;
  resolvedKeyDictionary(): NSDictionary<any, any>;
  setResolvedKeyDictionary(resolvedKeyDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSDeleteCommand extends NSScriptCommand {
  setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier | null): void;

  keySpecifier(): NSScriptObjectSpecifier;
  setKeySpecifier(keySpecifier: NSScriptObjectSpecifier): void;
}

declare class NSExistsCommand extends NSScriptCommand {}

declare class NSGetCommand extends NSScriptCommand {}

declare class NSMoveCommand extends NSScriptCommand {
  setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier | null): void;

  keySpecifier(): NSScriptObjectSpecifier;
  setKeySpecifier(keySpecifier: NSScriptObjectSpecifier): void;
}

declare class NSQuitCommand extends NSScriptCommand {
  saveOptions(): NSSaveOptions;
  setSaveOptions(saveOptions: NSSaveOptions): void;
}

declare class NSSetCommand extends NSScriptCommand {
  setReceiversSpecifier(receiversRef: NSScriptObjectSpecifier | null): void;

  keySpecifier(): NSScriptObjectSpecifier;
  setKeySpecifier(keySpecifier: NSScriptObjectSpecifier): void;
}

declare enum NSSaveOptions {
  NSSaveOptionsYes = 0,
  NSSaveOptionsNo,
  NSSaveOptionsAsk,
}

declare class NSScriptSuiteRegistry extends NSObject {
  static sharedScriptSuiteRegistry(): NSScriptSuiteRegistry;
  static setSharedScriptSuiteRegistry(registry: NSScriptSuiteRegistry): void;
  loadSuitesFromBundle(bundle: NSBundle): void;
  loadSuiteWithDictionary_fromBundle(suiteDeclaration: NSDictionary<any, any> | {[key: string]: any}, bundle: NSBundle): void;
  registerClassDescription(classDescription: NSScriptClassDescription): void;
  registerCommandDescription(commandDescription: NSScriptCommandDescription): void;
  appleEventCodeForSuite(suiteName: NSString | string): number;
  bundleForSuite(suiteName: NSString | string): NSBundle;
  classDescriptionsInSuite(suiteName: NSString | string): NSDictionary<any, any>;
  commandDescriptionsInSuite(suiteName: NSString | string): NSDictionary<any, any>;
  suiteForAppleEventCode(appleEventCode: number): NSString;
  classDescriptionWithAppleEventCode(appleEventCode: number): NSScriptClassDescription;
  commandDescriptionWithAppleEventClass_andAppleEventCode(appleEventClassCode: number, appleEventIDCode: number): NSScriptCommandDescription;
  aeteResource(languageName: NSString | string): NSData;

  suiteNames(): NSArray<any>;
  setSuiteNames(suiteNames: NSArray<any> | any[]): void;
}

declare class NSScriptWhoseTest extends NSObject implements INSCoding {
  isTrue(): boolean;
  init<T extends NSScriptWhoseTest>(): T;
  initWithCoder<T extends NSScriptWhoseTest>(inCoder: NSCoder): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSScriptWhoseTest>(aDecoder: NSCoder): T;
}

declare class NSLogicalTest extends NSScriptWhoseTest {
  initAndTestWithTests<T extends NSLogicalTest>(subTests: NSArray<any> | any[]): T;
  initOrTestWithTests<T extends NSLogicalTest>(subTests: NSArray<any> | any[]): T;
  initNotTestWithTest<T extends NSLogicalTest>(subTest: NSScriptWhoseTest): T;
}

declare class NSSpecifierTest extends NSScriptWhoseTest {
  // initWithCoder<T extends NSSpecifierTest>(inCoder: NSCoder): T;
  initWithObjectSpecifier_comparisonOperator_testObject<T extends NSSpecifierTest>(obj1: NSScriptObjectSpecifier | null, compOp: NSTestComparisonOperation, obj2: any | null): T;
}

declare enum NSTestComparisonOperation {
  NSEqualToComparison = 0,
  NSLessThanOrEqualToComparison,
  NSLessThanComparison,
  NSGreaterThanOrEqualToComparison,
  NSGreaterThanComparison,
  NSBeginsWithComparison,
  NSEndsWithComparison,
  NSContainsComparison,
}

declare class NSCountedSet<ObjectType> extends NSMutableSet<ObjectType> {
  // initWithCapacity<T extends NSCountedSet<ObjectType>>(numItems: NSUInteger): T;
  // initWithArray<T extends NSCountedSet<ObjectType>>(array: NSArray<any> | any[]): T;
  // initWithSet<T extends NSCountedSet<ObjectType>>(set: NSSet<any>): T;
  countForObject(object: ObjectType): NSUInteger;
  objectEnumerator(): NSEnumerator<any>;
  addObject(object: ObjectType): void;
  removeObject(object: ObjectType): void;
}

declare class NSSortDescriptor extends NSObject implements INSSecureCoding, INSCopying {
  static sortDescriptorWithKey_ascending(key: NSString | string | null, ascending: boolean): NSSortDescriptor;
  static sortDescriptorWithKey_ascending_selector(key: NSString | string | null, ascending: boolean, selector: string | null): NSSortDescriptor;
  initWithKey_ascending<T extends NSSortDescriptor>(key: NSString | string | null, ascending: boolean): T;
  initWithKey_ascending_selector<T extends NSSortDescriptor>(key: NSString | string | null, ascending: boolean, selector: string | null): T;
  initWithCoder<T extends NSSortDescriptor>(coder: NSCoder): T;
  allowEvaluation(): void;
  static sortDescriptorWithKey_ascending_comparator(key: NSString | string | null, ascending: boolean, cmptr: NSComparator): NSSortDescriptor;
  initWithKey_ascending_comparator<T extends NSSortDescriptor>(key: NSString | string | null, ascending: boolean, cmptr: NSComparator): T;
  compareObject_toObject(object1: any, object2: any): NSComparisonResult;
  static localizedCaseInsensitiveSortDescriptorWithKey_ascending(key: NSString | string | null, ascending: boolean): NSSortDescriptor;
  copyWithZone(zone: NSZone | null): any;

  key(): NSString;
  setKey(key: NSString | string): void;
  ascending(): boolean;
  setAscending(ascending: boolean): void;
  selector(): string;
  setSelector(selector: string): void;
  comparator(): NSComparator;
  setComparator(comparator: NSComparator): void;
  reversedSortDescriptor(): any;
  setReversedSortDescriptor(reversedSortDescriptor: any): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSSpellServer extends NSObject {
  registerLanguage_byVendor(language: NSString | string | null, vendor: NSString | string | null): boolean;
  isWordInUserDictionaries_caseSensitive(word: NSString | string, flag: boolean): boolean;
  run(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface INSSpellServerDelegate {
  spellServer_findMisspelledWordInString_language_wordCount_countOnly(sender: NSSpellServer, stringToCheck: NSString | string, language: NSString | string, wordCount: NSInteger, countOnly: boolean): NSRange;
  spellServer_suggestGuessesForWord_inLanguage(sender: NSSpellServer, word: NSString | string, language: NSString | string): NSArray<any>;
  spellServer_didLearnWord_inLanguage(sender: NSSpellServer, word: NSString | string, language: NSString | string): void;
  spellServer_didForgetWord_inLanguage(sender: NSSpellServer, word: NSString | string, language: NSString | string): void;
  spellServer_suggestCompletionsForPartialWordRange_inString_language(sender: NSSpellServer, range: NSRange, string: NSString | string, language: NSString | string): NSArray<any>;
  spellServer_checkGrammarInString_language_details(sender: NSSpellServer, stringToCheck: NSString | string, language: NSString | string | null, details: NSArray<any> | any[]): NSRange;
  spellServer_checkString_offset_types_options_orthography_wordCount(sender: NSSpellServer, stringToCheck: NSString | string, offset: NSUInteger, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any} | null, orthography: NSOrthography | null, wordCount: NSInteger): NSArray<any>;
  spellServer_recordResponse_toCorrection_forWord_language(sender: NSSpellServer, response: NSUInteger, correction: NSString | string, word: NSString | string, language: NSString | string): void;
}

declare class NSStream extends NSObject {
  open(): void;
  close(): void;
  propertyForKey(key: NSStreamPropertyKey): any;
  setProperty_forKey(property: any | null, key: NSStreamPropertyKey): boolean;
  scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  removeFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  static getStreamsToHostWithName_port_inputStream_outputStream(hostname: NSString | string, port: NSInteger, inputStream: NSInputStream, outputStream: NSOutputStream): void;
  static getStreamsToHost_port_inputStream_outputStream(host: NSHost, port: NSInteger, inputStream: NSInputStream, outputStream: NSOutputStream): void;
  static getBoundStreamsWithBufferSize_inputStream_outputStream(bufferSize: NSUInteger, inputStream: NSInputStream, outputStream: NSOutputStream): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  streamStatus(): NSStreamStatus;
  setStreamStatus(streamStatus: NSStreamStatus): void;
  streamError(): NSError;
  setStreamError(streamError: NSError): void;
}

declare class NSInputStream extends NSStream {
  read_maxLength(buffer: number, len: NSUInteger): NSInteger;
  getBuffer_length(buffer: number, len: NSUInteger): boolean;
  initWithData<T extends NSInputStream>(data: NSData): T;
  initWithURL<T extends NSInputStream>(url: NSURL): T;
  initWithFileAtPath<T extends NSInputStream>(path: NSString | string): T;
  static inputStreamWithData(data: NSData): NSInputStream;
  static inputStreamWithFileAtPath(path: NSString | string): NSInputStream;
  static inputStreamWithURL(url: NSURL): NSInputStream;

  hasBytesAvailable(): boolean;
  setHasBytesAvailable(hasBytesAvailable: boolean): void;
}

declare class NSOutputStream extends NSStream {
  write_maxLength(buffer: number, len: NSUInteger): NSInteger;
  initToMemory<T extends NSOutputStream>(): T;
  initToBuffer_capacity<T extends NSOutputStream>(buffer: number, capacity: NSUInteger): T;
  initWithURL_append<T extends NSOutputStream>(url: NSURL, shouldAppend: boolean): T;
  initToFileAtPath_append<T extends NSOutputStream>(path: NSString | string, shouldAppend: boolean): T;
  static outputStreamToMemory(): NSOutputStream;
  static outputStreamToBuffer_capacity(buffer: number, capacity: NSUInteger): NSOutputStream;
  static outputStreamToFileAtPath_append(path: NSString | string, shouldAppend: boolean): NSOutputStream;
  static outputStreamWithURL_append(url: NSURL, shouldAppend: boolean): NSOutputStream;

  hasSpaceAvailable(): boolean;
  setHasSpaceAvailable(hasSpaceAvailable: boolean): void;
}

declare interface INSStreamDelegate {
  stream_handleEvent(aStream: NSStream, eventCode: NSStreamEvent): void;
}

declare type NSStreamPropertyKey = NSString

declare type NSStreamSocketSecurityLevel = NSString

declare type NSStreamSOCKSProxyConfiguration = NSString

declare type NSStreamSOCKSProxyVersion = NSString

declare type NSStreamNetworkServiceTypeValue = NSString

declare enum NSStreamStatus {
  NSStreamStatusNotOpen = 0,
  NSStreamStatusOpening = 1,
  NSStreamStatusOpen = 2,
  NSStreamStatusReading = 3,
  NSStreamStatusWriting = 4,
  NSStreamStatusAtEnd = 5,
  NSStreamStatusClosed = 6,
  NSStreamStatusError = 7,
}

declare enum NSStreamEvent {
  NSStreamEventNone = 0,
  NSStreamEventOpenCompleted = 1 << 0,
  NSStreamEventHasBytesAvailable = 1 << 1,
  NSStreamEventHasSpaceAvailable = 1 << 2,
  NSStreamEventErrorOccurred = 1 << 3,
  NSStreamEventEndEncountered = 1 << 4,
}

declare class NSMutableString extends NSString {
  replaceCharactersInRange_withString(range: NSRange, aString: NSString | string): void;
  insertString_atIndex(aString: NSString | string, loc: NSUInteger): void;
  deleteCharactersInRange(range: NSRange): void;
  appendString(aString: NSString | string): void;
  appendFormat(format: NSString | string, ...args: any[]): void;
  setString(aString: NSString | string): void;
  replaceOccurrencesOfString_withString_options_range(target: NSString | string, replacement: NSString | string, options: NSStringCompareOptions, searchRange: NSRange): NSUInteger;
  applyTransform_reverse_range_updatedRange(transform: NSStringTransform, reverse: boolean, range: NSRange, resultingRange: NSRangePointer | null): boolean;
  initWithCapacity<T extends NSMutableString>(capacity: NSUInteger): T;
  static stringWithCapacity(capacity: NSUInteger): NSMutableString;
}

declare class NSSimpleCString extends NSString {}

declare class NSConstantString extends NSSimpleCString {}

declare type unichar = number

declare type NSStringEncoding = NSUInteger

declare type NSStringTransform = NSString

declare type NSStringEncodingDetectionOptionsKey = NSString

declare enum NSStringCompareOptions {
  NSCaseInsensitiveSearch = 1,
  NSLiteralSearch = 2,
  NSBackwardsSearch = 4,
  NSAnchoredSearch = 8,
  NSNumericSearch = 64,
  NSDiacriticInsensitiveSearch = 128,
  NSWidthInsensitiveSearch = 256,
  NSForcedOrderingSearch = 512,
  NSRegularExpressionSearch = 1024,
}

declare enum NSStringEncodingConversionOptions {
  NSStringEncodingConversionAllowLossy = 1,
  NSStringEncodingConversionExternalRepresentation = 2,
}

declare enum NSStringEnumerationOptions {
  NSStringEnumerationByLines = 0,
  NSStringEnumerationByParagraphs = 1,
  NSStringEnumerationByComposedCharacterSequences = 2,
  NSStringEnumerationByWords = 3,
  NSStringEnumerationBySentences = 4,
  NSStringEnumerationReverse = 1 << 8,
  NSStringEnumerationSubstringNotRequired = 1 << 9,
  NSStringEnumerationLocalized = 1 << 10,
}

declare class NSTask extends NSObject {
  init<T extends NSTask>(): T;
  launchAndReturnError(error: NSError): boolean;
  interrupt(): void;
  terminate(): void;
  suspend(): boolean;
  resume(): boolean;
  static launchedTaskWithExecutableURL_arguments_error_terminationHandler(url: NSURL, arguments: NSArray<any> | any[], error: NSError, terminationHandler: Block): NSTask;
  waitUntilExit(): void;
  launch(): void;
  static launchedTaskWithLaunchPath_arguments(path: NSString | string, arguments: NSArray<any> | any[]): NSTask;

  executableURL(): NSURL;
  setExecutableURL(executableURL: NSURL): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  environment(): NSDictionary<any, any>;
  setEnvironment(environment: NSDictionary<any, any> | {[key: string]: any}): void;
  currentDirectoryURL(): NSURL;
  setCurrentDirectoryURL(currentDirectoryURL: NSURL): void;
  standardInput(): any;
  setStandardInput(standardInput: any): void;
  standardOutput(): any;
  setStandardOutput(standardOutput: any): void;
  standardError(): any;
  setStandardError(standardError: any): void;
  processIdentifier(): number;
  setProcessIdentifier(processIdentifier: number): void;
  running(): boolean;
  setRunning(running: boolean): void;
  terminationStatus(): number;
  setTerminationStatus(terminationStatus: number): void;
  terminationReason(): NSTaskTerminationReason;
  setTerminationReason(terminationReason: NSTaskTerminationReason): void;
  qualityOfService(): NSQualityOfService;
  setQualityOfService(qualityOfService: NSQualityOfService): void;
  launchPath(): NSString;
  setLaunchPath(launchPath: NSString | string): void;
  currentDirectoryPath(): NSString;
  setCurrentDirectoryPath(currentDirectoryPath: NSString | string): void;
}

declare enum NSTaskTerminationReason {
  NSTaskTerminationReasonExit = 1,
  NSTaskTerminationReasonUncaughtSignal = 2,
}

declare class NSTextCheckingResult extends NSObject implements INSCopying, INSSecureCoding {
  rangeAtIndex(idx: NSUInteger): NSRange;
  rangeWithName(name: NSString | string): NSRange;
  resultByAdjustingRangesWithOffset(offset: NSInteger): NSTextCheckingResult;
  static orthographyCheckingResultWithRange_orthography(range: NSRange, orthography: NSOrthography): NSTextCheckingResult;
  static spellCheckingResultWithRange(range: NSRange): NSTextCheckingResult;
  static grammarCheckingResultWithRange_details(range: NSRange, details: NSArray<any> | any[]): NSTextCheckingResult;
  static dateCheckingResultWithRange_date(range: NSRange, date: NSDate): NSTextCheckingResult;
  static dateCheckingResultWithRange_date_timeZone_duration(range: NSRange, date: NSDate, timeZone: NSTimeZone, duration: NSTimeInterval): NSTextCheckingResult;
  static addressCheckingResultWithRange_components(range: NSRange, components: NSDictionary<any, any> | {[key: string]: any}): NSTextCheckingResult;
  static linkCheckingResultWithRange_URL(range: NSRange, url: NSURL): NSTextCheckingResult;
  static quoteCheckingResultWithRange_replacementString(range: NSRange, replacementString: NSString | string): NSTextCheckingResult;
  static dashCheckingResultWithRange_replacementString(range: NSRange, replacementString: NSString | string): NSTextCheckingResult;
  static replacementCheckingResultWithRange_replacementString(range: NSRange, replacementString: NSString | string): NSTextCheckingResult;
  static correctionCheckingResultWithRange_replacementString(range: NSRange, replacementString: NSString | string): NSTextCheckingResult;
  static correctionCheckingResultWithRange_replacementString_alternativeStrings(range: NSRange, replacementString: NSString | string, alternativeStrings: NSArray<any> | any[]): NSTextCheckingResult;
  static regularExpressionCheckingResultWithRanges_count_regularExpression(ranges: NSRangePointer, count: NSUInteger, regularExpression: NSRegularExpression): NSTextCheckingResult;
  static phoneNumberCheckingResultWithRange_phoneNumber(range: NSRange, phoneNumber: NSString | string): NSTextCheckingResult;
  static transitInformationCheckingResultWithRange_components(range: NSRange, components: NSDictionary<any, any> | {[key: string]: any}): NSTextCheckingResult;
  copyWithZone(zone: NSZone | null): any;

  resultType(): NSTextCheckingType;
  setResultType(resultType: NSTextCheckingType): void;
  range(): NSRange;
  setRange(range: NSRange): void;
  orthography(): NSOrthography;
  setOrthography(orthography: NSOrthography): void;
  grammarDetails(): NSArray<any>;
  setGrammarDetails(grammarDetails: NSArray<any> | any[]): void;
  date(): NSDate;
  setDate(date: NSDate): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  duration(): NSTimeInterval;
  setDuration(duration: NSTimeInterval): void;
  components(): NSDictionary<any, any>;
  setComponents(components: NSDictionary<any, any> | {[key: string]: any}): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
  replacementString(): NSString;
  setReplacementString(replacementString: NSString | string): void;
  alternativeStrings(): NSArray<any>;
  setAlternativeStrings(alternativeStrings: NSArray<any> | any[]): void;
  regularExpression(): NSRegularExpression;
  setRegularExpression(regularExpression: NSRegularExpression): void;
  phoneNumber(): NSString;
  setPhoneNumber(phoneNumber: NSString | string): void;
  numberOfRanges(): NSUInteger;
  setNumberOfRanges(numberOfRanges: NSUInteger): void;
  addressComponents(): NSDictionary<any, any>;
  setAddressComponents(addressComponents: NSDictionary<any, any> | {[key: string]: any}): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSTextCheckingTypes = number

declare type NSTextCheckingKey = NSString

declare enum NSTextCheckingType {
  NSTextCheckingTypeOrthography = 1 << 0,
  NSTextCheckingTypeSpelling = 1 << 1,
  NSTextCheckingTypeGrammar = 1 << 2,
  NSTextCheckingTypeDate = 1 << 3,
  NSTextCheckingTypeAddress = 1 << 4,
  NSTextCheckingTypeLink = 1 << 5,
  NSTextCheckingTypeQuote = 1 << 6,
  NSTextCheckingTypeDash = 1 << 7,
  NSTextCheckingTypeReplacement = 1 << 8,
  NSTextCheckingTypeCorrection = 1 << 9,
  NSTextCheckingTypeRegularExpression = 1 << 10,
  NSTextCheckingTypePhoneNumber = 1 << 11,
  NSTextCheckingTypeTransitInformation = 1 << 12,
}

declare class NSThread extends NSObject {
  static detachNewThreadWithBlock(block: Block): void;
  static detachNewThreadSelector_toTarget_withObject(selector: string, target: any, argument: any | null): void;
  static isMultiThreaded(): boolean;
  static sleepUntilDate(date: NSDate): void;
  static sleepForTimeInterval(ti: NSTimeInterval): void;
  static exit(): void;
  static threadPriority(): number;
  static setThreadPriority(p: number): boolean;
  init<T extends NSThread>(): T;
  initWithTarget_selector_object<T extends NSThread>(target: any, selector: string, argument: any | null): T;
  initWithBlock<T extends NSThread>(block: Block): T;
  cancel(): void;
  start(): void;
  main(): void;

  static currentThread(): NSThread;
  static setCurrentThread(currentThread: NSThread): void;
  threadDictionary(): NSMutableDictionary<any, any>;
  setThreadDictionary(threadDictionary: NSMutableDictionary<any, any> | {[key: string]: any}): void;
  threadPriority(): number;
  setThreadPriority(threadPriority: number): void;
  qualityOfService(): NSQualityOfService;
  setQualityOfService(qualityOfService: NSQualityOfService): void;
  static callStackReturnAddresses(): NSArray<any>;
  static setCallStackReturnAddresses(callStackReturnAddresses: NSArray<any> | any[]): void;
  static callStackSymbols(): NSArray<any>;
  static setCallStackSymbols(callStackSymbols: NSArray<any> | any[]): void;
  name(): NSString;
  setName(name: NSString | string): void;
  stackSize(): NSUInteger;
  setStackSize(stackSize: NSUInteger): void;
  static isMainThread(): boolean;
  static setIsMainThread(isMainThread: boolean): void;
  static mainThread(): NSThread;
  static setMainThread(mainThread: NSThread): void;
  executing(): boolean;
  setExecuting(executing: boolean): void;
  finished(): boolean;
  setFinished(finished: boolean): void;
  cancelled(): boolean;
  setCancelled(cancelled: boolean): void;
}

declare class NSTimeZone extends NSObject implements INSCopying, INSSecureCoding {
  secondsFromGMTForDate(aDate: NSDate): NSInteger;
  abbreviationForDate(aDate: NSDate): NSString;
  isDaylightSavingTimeForDate(aDate: NSDate): boolean;
  daylightSavingTimeOffsetForDate(aDate: NSDate): NSTimeInterval;
  nextDaylightSavingTimeTransitionAfterDate(aDate: NSDate): NSDate;
  static resetSystemTimeZone(): void;
  static abbreviationDictionary(): NSDictionary<any, any>;
  isEqualToTimeZone(aTimeZone: NSTimeZone): boolean;
  localizedName_locale(style: NSTimeZoneNameStyle, locale: NSLocale | null): NSString;
  static timeZoneWithName(tzName: NSString | string): NSTimeZone;
  static timeZoneWithName_data(tzName: NSString | string, aData: NSData | null): NSTimeZone;
  initWithName<T extends NSTimeZone>(tzName: NSString | string): T;
  initWithName_data<T extends NSTimeZone>(tzName: NSString | string, aData: NSData | null): T;
  static timeZoneForSecondsFromGMT(seconds: NSInteger): NSTimeZone;
  static timeZoneWithAbbreviation(abbreviation: NSString | string): NSTimeZone;
  copyWithZone(zone: NSZone | null): any;

  name(): NSString;
  setName(name: NSString | string): void;
  data(): NSData;
  setData(data: NSData): void;
  static systemTimeZone(): NSTimeZone;
  static setSystemTimeZone(systemTimeZone: NSTimeZone): void;
  static defaultTimeZone(): NSTimeZone;
  static setDefaultTimeZone(defaultTimeZone: NSTimeZone): void;
  static localTimeZone(): NSTimeZone;
  static setLocalTimeZone(localTimeZone: NSTimeZone): void;
  static knownTimeZoneNames(): NSArray<any>;
  static setKnownTimeZoneNames(knownTimeZoneNames: NSArray<any> | any[]): void;
  static abbreviationDictionary(): NSDictionary<any, any>;
  static setAbbreviationDictionary(abbreviationDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  static timeZoneDataVersion(): NSString;
  static setTimeZoneDataVersion(timeZoneDataVersion: NSString | string): void;
  secondsFromGMT(): NSInteger;
  setSecondsFromGMT(secondsFromGMT: NSInteger): void;
  abbreviation(): NSString;
  setAbbreviation(abbreviation: NSString | string): void;
  daylightSavingTime(): boolean;
  setDaylightSavingTime(daylightSavingTime: boolean): void;
  daylightSavingTimeOffset(): NSTimeInterval;
  setDaylightSavingTimeOffset(daylightSavingTimeOffset: NSTimeInterval): void;
  nextDaylightSavingTimeTransition(): NSDate;
  setNextDaylightSavingTimeTransition(nextDaylightSavingTimeTransition: NSDate): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSTimeZoneNameStyle {
  NSTimeZoneNameStyleStandard,
  NSTimeZoneNameStyleShortStandard,
  NSTimeZoneNameStyleDaylightSaving,
  NSTimeZoneNameStyleShortDaylightSaving,
  NSTimeZoneNameStyleGeneric,
  NSTimeZoneNameStyleShortGeneric,
}

declare class NSTimer extends NSObject {
  static timerWithTimeInterval_invocation_repeats(ti: NSTimeInterval, invocation: NSInvocation, yesOrNo: boolean): NSTimer;
  static scheduledTimerWithTimeInterval_invocation_repeats(ti: NSTimeInterval, invocation: NSInvocation, yesOrNo: boolean): NSTimer;
  static timerWithTimeInterval_target_selector_userInfo_repeats(ti: NSTimeInterval, aTarget: any, aSelector: string, userInfo: any | null, yesOrNo: boolean): NSTimer;
  static scheduledTimerWithTimeInterval_target_selector_userInfo_repeats(ti: NSTimeInterval, aTarget: any, aSelector: string, userInfo: any | null, yesOrNo: boolean): NSTimer;
  static timerWithTimeInterval_repeats_block(interval: NSTimeInterval, repeats: boolean, block: Block): NSTimer;
  static scheduledTimerWithTimeInterval_repeats_block(interval: NSTimeInterval, repeats: boolean, block: Block): NSTimer;
  initWithFireDate_interval_repeats_block<T extends NSTimer>(date: NSDate, interval: NSTimeInterval, repeats: boolean, block: Block): T;
  initWithFireDate_interval_target_selector_userInfo_repeats<T extends NSTimer>(date: NSDate, ti: NSTimeInterval, t: any, s: string, ui: any | null, rep: boolean): T;
  fire(): void;
  invalidate(): void;
  static scheduledTimerWithTimeInterval_repeats_block_ch(interval: NSTimeInterval, repeats: boolean, block: BCTimerBlock): NSTimer;

  fireDate(): NSDate;
  setFireDate(fireDate: NSDate): void;
  timeInterval(): NSTimeInterval;
  setTimeInterval(timeInterval: NSTimeInterval): void;
  tolerance(): NSTimeInterval;
  setTolerance(tolerance: NSTimeInterval): void;
  valid(): boolean;
  setValid(valid: boolean): void;
  userInfo(): any;
  setUserInfo(userInfo: any): void;
}

declare class NSURL extends NSObject implements INSSecureCoding, INSCopying {
  initWithScheme_host_path<T extends NSURL>(scheme: NSString | string, host: NSString | string | null, path: NSString | string): T;
  initFileURLWithPath_isDirectory_relativeToURL<T extends NSURL>(path: NSString | string, isDir: boolean, baseURL: NSURL | null): T;
  initFileURLWithPath_relativeToURL<T extends NSURL>(path: NSString | string, baseURL: NSURL | null): T;
  initFileURLWithPath_isDirectory<T extends NSURL>(path: NSString | string, isDir: boolean): T;
  initFileURLWithPath<T extends NSURL>(path: NSString | string): T;
  static fileURLWithPath_isDirectory_relativeToURL(path: NSString | string, isDir: boolean, baseURL: NSURL | null): NSURL;
  static fileURLWithPath_relativeToURL(path: NSString | string, baseURL: NSURL | null): NSURL;
  static fileURLWithPath_isDirectory(path: NSString | string, isDir: boolean): NSURL;
  static fileURLWithPath(path: NSString | string): NSURL;
  initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL<T extends NSURL>(path: string, isDir: boolean, baseURL: NSURL | null): T;
  static fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path: string, isDir: boolean, baseURL: NSURL | null): NSURL;
  initWithString<T extends NSURL>(URLString: NSString | string): T;
  initWithString_relativeToURL<T extends NSURL>(URLString: NSString | string, baseURL: NSURL | null): T;
  static URLWithString(URLString: NSString | string): NSURL;
  static URLWithString_relativeToURL(URLString: NSString | string, baseURL: NSURL | null): NSURL;
  initWithDataRepresentation_relativeToURL<T extends NSURL>(data: NSData, baseURL: NSURL | null): T;
  static URLWithDataRepresentation_relativeToURL(data: NSData, baseURL: NSURL | null): NSURL;
  initAbsoluteURLWithDataRepresentation_relativeToURL<T extends NSURL>(data: NSData, baseURL: NSURL | null): T;
  static absoluteURLWithDataRepresentation_relativeToURL(data: NSData, baseURL: NSURL | null): NSURL;
  getFileSystemRepresentation_maxLength(buffer: string, maxBufferLength: NSUInteger): boolean;
  checkResourceIsReachableAndReturnError_NS_SWIFT_NOTHROW(error: NSError): boolean;
  isFileReferenceURL(): boolean;
  fileReferenceURL(): NSURL;
  getResourceValue_forKey_error(value: any, key: NSURLResourceKey, error: NSError): boolean;
  resourceValuesForKeys_error(keys: NSArray<any> | any[], error: NSError): NSDictionary<any, any>;
  setResourceValue_forKey_error(value: any | null, key: NSURLResourceKey, error: NSError): boolean;
  setResourceValues_error(keyedValues: NSDictionary<any, any> | {[key: string]: any}, error: NSError): boolean;
  removeCachedResourceValueForKey(key: NSURLResourceKey): void;
  removeAllCachedResourceValues(): void;
  setTemporaryResourceValue_forKey(value: any | null, key: NSURLResourceKey): void;
  bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(options: NSURLBookmarkCreationOptions, keys: NSArray<any> | any[] | null, relativeURL: NSURL | null, error: NSError): NSData;
  initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error<T extends NSURL>(bookmarkData: NSData, options: NSURLBookmarkResolutionOptions, relativeURL: NSURL | null, isStale: boolean, error: NSError): T;
  static URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData: NSData, options: NSURLBookmarkResolutionOptions, relativeURL: NSURL | null, isStale: boolean, error: NSError): NSURL;
  static resourceValuesForKeys_fromBookmarkData(keys: NSArray<any> | any[], bookmarkData: NSData): NSDictionary<any, any>;
  static writeBookmarkData_toURL_options_error(bookmarkData: NSData, bookmarkFileURL: NSURL, options: NSURLBookmarkFileCreationOptions, error: NSError): boolean;
  static bookmarkDataWithContentsOfURL_error(bookmarkFileURL: NSURL, error: NSError): NSData;
  static URLByResolvingAliasFileAtURL_options_error(url: NSURL, options: NSURLBookmarkResolutionOptions, error: NSError): NSURL;
  startAccessingSecurityScopedResource(): boolean;
  stopAccessingSecurityScopedResource(): void;
  getPromisedItemResourceValue_forKey_error(value: any, key: NSURLResourceKey, error: NSError): boolean;
  promisedItemResourceValuesForKeys_error(keys: NSArray<any> | any[], error: NSError): NSDictionary<any, any>;
  checkPromisedItemIsReachableAndReturnError_NS_SWIFT_NOTHROW(error: NSError): boolean;
  static fileURLWithPathComponents(components: NSArray<any> | any[]): NSURL;
  URLByAppendingPathComponent(pathComponent: NSString | string): NSURL;
  URLByAppendingPathComponent_isDirectory(pathComponent: NSString | string, isDirectory: boolean): NSURL;
  URLByAppendingPathExtension(pathExtension: NSString | string): NSURL;
  resourceDataUsingCache(shouldUseCache: boolean): NSData;
  loadResourceDataNotifyingClient_usingCache(client: any, shouldUseCache: boolean): void;
  propertyForKey(propertyKey: NSString | string): any;
  setResourceData(data: NSData): boolean;
  setProperty_forKey(property: any, propertyKey: NSString | string): boolean;
  URLHandleUsingCache(shouldUseCache: boolean): NSURLHandle;
  static URLFromPasteboard(pasteBoard: NSPasteboard): NSURL;
  writeToPasteboard(pasteBoard: NSPasteboard): void;
  URLByStrippingInvisiblePeriod_bc(): NSURL;
  URLByAppendingNameWithSeparators_defaultName(name: NSString | string, defaultName: NSString | string): NSURL;
  hasExtension(extension: NSString | string): boolean;
  withExtension(extension: NSString | string): NSURL;
  URLByResolvingSymlinksAndAliases(): NSURL;
  isEqualToFileURL_bc(otherURL: NSURL): boolean;
  appendingCloudDeeplinkComponentsToArtboard(artboard: SCKArtboard | null): NSURL;
  appendingCloudDeeplinkComponentsInPageToArtboard(artboard: SCKArtboard | null): NSURL;
  appendingCloudAuthentication(authentication: any | null): NSURL;
  copyWithZone(zone: NSZone | null): any;

  dataRepresentation(): NSData;
  setDataRepresentation(dataRepresentation: NSData): void;
  absoluteString(): NSString;
  setAbsoluteString(absoluteString: NSString | string): void;
  relativeString(): NSString;
  setRelativeString(relativeString: NSString | string): void;
  baseURL(): NSURL;
  setBaseURL(baseURL: NSURL): void;
  absoluteURL(): NSURL;
  setAbsoluteURL(absoluteURL: NSURL): void;
  scheme(): NSString;
  setScheme(scheme: NSString | string): void;
  resourceSpecifier(): NSString;
  setResourceSpecifier(resourceSpecifier: NSString | string): void;
  host(): NSString;
  setHost(host: NSString | string): void;
  port(): NSNumber;
  setPort(port: NSNumber | number): void;
  user(): NSString;
  setUser(user: NSString | string): void;
  password(): NSString;
  setPassword(password: NSString | string): void;
  path(): NSString;
  setPath(path: NSString | string): void;
  fragment(): NSString;
  setFragment(fragment: NSString | string): void;
  parameterString(): NSString;
  setParameterString(parameterString: NSString | string): void;
  query(): NSString;
  setQuery(query: NSString | string): void;
  relativePath(): NSString;
  setRelativePath(relativePath: NSString | string): void;
  hasDirectoryPath(): boolean;
  setHasDirectoryPath(hasDirectoryPath: boolean): void;
  fileSystemRepresentation(): string;
  setFileSystemRepresentation(fileSystemRepresentation: string): void;
  fileURL(): boolean;
  setFileURL(fileURL: boolean): void;
  standardizedURL(): NSURL;
  setStandardizedURL(standardizedURL: NSURL): void;
  filePathURL(): NSURL;
  setFilePathURL(filePathURL: NSURL): void;
  pathComponents(): NSArray<any>;
  setPathComponents(pathComponents: NSArray<any> | any[]): void;
  lastPathComponent(): NSString;
  setLastPathComponent(lastPathComponent: NSString | string): void;
  pathExtension(): NSString;
  setPathExtension(pathExtension: NSString | string): void;
  URLByDeletingLastPathComponent(): NSURL;
  setURLByDeletingLastPathComponent(URLByDeletingLastPathComponent: NSURL): void;
  URLByDeletingPathExtension(): NSURL;
  setURLByDeletingPathExtension(URLByDeletingPathExtension: NSURL): void;
  URLByStandardizingPath(): NSURL;
  setURLByStandardizingPath(URLByStandardizingPath: NSURL): void;
  URLByResolvingSymlinksInPath(): NSURL;
  setURLByResolvingSymlinksInPath(URLByResolvingSymlinksInPath: NSURL): void;
  isInTrash_bc(): boolean;
  setIsInTrash_bc(isInTrash_bc: boolean): void;
  isCloudShare(): boolean;
  setIsCloudShare(isCloudShare: boolean): void;
  cloudShareURL(): NSURL;
  setCloudShareURL(cloudShareURL: NSURL): void;
  cloudShareShortID(): NSString;
  setCloudShareShortID(cloudShareShortID: NSString | string): void;
  cloudPageSlug(): NSString;
  setCloudPageSlug(cloudPageSlug: NSString | string): void;
  cloudArtboardSlug(): NSString;
  setCloudArtboardSlug(cloudArtboardSlug: NSString | string): void;
  cloudAPIName(): NSString;
  setCloudAPIName(cloudAPIName: NSString | string): void;
  cloudAPIEnvironment(): SCKEnvironment;
  setCloudAPIEnvironment(cloudAPIEnvironment: SCKEnvironment): void;
  isExportRequest(): boolean;
  setIsExportRequest(isExportRequest: boolean): void;
  exportRootLayerID(): NSString;
  setExportRootLayerID(exportRootLayerID: NSString | string): void;
  exportRect(): CGRect;
  setExportRect(exportRect: CGRect): void;
  exportScale(): CGFloat;
  setExportScale(exportScale: CGFloat): void;
  constrainedExportSize(): CGSize;
  setConstrainedExportSize(constrainedExportSize: CGSize): void;
  exportImageType(): NSString;
  setExportImageType(exportImageType: NSString | string): void;
  mirrorCacheKey(): NSString;
  setMirrorCacheKey(mirrorCacheKey: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSURLQueryItem extends NSObject implements INSSecureCoding, INSCopying {
  initWithName_value<T extends NSURLQueryItem>(name: NSString | string, value: NSString | string | null): T;
  static queryItemWithName_value(name: NSString | string, value: NSString | string | null): NSURLQueryItem;
  copyWithZone(zone: NSZone | null): any;

  name(): NSString;
  setName(name: NSString | string): void;
  value(): NSString;
  setValue(value: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSURLComponents extends NSObject implements INSCopying {
  init<T extends NSURLComponents>(): T;
  initWithURL_resolvingAgainstBaseURL<T extends NSURLComponents>(url: NSURL, resolve: boolean): T;
  static componentsWithURL_resolvingAgainstBaseURL(url: NSURL, resolve: boolean): NSURLComponents;
  initWithString<T extends NSURLComponents>(URLString: NSString | string): T;
  static componentsWithString(URLString: NSString | string): NSURLComponents;
  URLRelativeToURL(baseURL: NSURL | null): NSURL;
  copyWithZone(zone: NSZone | null): any;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  string(): NSString;
  setString(string: NSString | string): void;
  scheme(): NSString;
  setScheme(scheme: NSString | string): void;
  user(): NSString;
  setUser(user: NSString | string): void;
  password(): NSString;
  setPassword(password: NSString | string): void;
  host(): NSString;
  setHost(host: NSString | string): void;
  port(): NSNumber;
  setPort(port: NSNumber | number): void;
  path(): NSString;
  setPath(path: NSString | string): void;
  query(): NSString;
  setQuery(query: NSString | string): void;
  fragment(): NSString;
  setFragment(fragment: NSString | string): void;
  percentEncodedUser(): NSString;
  setPercentEncodedUser(percentEncodedUser: NSString | string): void;
  percentEncodedPassword(): NSString;
  setPercentEncodedPassword(percentEncodedPassword: NSString | string): void;
  percentEncodedHost(): NSString;
  setPercentEncodedHost(percentEncodedHost: NSString | string): void;
  percentEncodedPath(): NSString;
  setPercentEncodedPath(percentEncodedPath: NSString | string): void;
  percentEncodedQuery(): NSString;
  setPercentEncodedQuery(percentEncodedQuery: NSString | string): void;
  percentEncodedFragment(): NSString;
  setPercentEncodedFragment(percentEncodedFragment: NSString | string): void;
  rangeOfScheme(): NSRange;
  setRangeOfScheme(rangeOfScheme: NSRange): void;
  rangeOfUser(): NSRange;
  setRangeOfUser(rangeOfUser: NSRange): void;
  rangeOfPassword(): NSRange;
  setRangeOfPassword(rangeOfPassword: NSRange): void;
  rangeOfHost(): NSRange;
  setRangeOfHost(rangeOfHost: NSRange): void;
  rangeOfPort(): NSRange;
  setRangeOfPort(rangeOfPort: NSRange): void;
  rangeOfPath(): NSRange;
  setRangeOfPath(rangeOfPath: NSRange): void;
  rangeOfQuery(): NSRange;
  setRangeOfQuery(rangeOfQuery: NSRange): void;
  rangeOfFragment(): NSRange;
  setRangeOfFragment(rangeOfFragment: NSRange): void;
  queryItems(): NSArray<any>;
  setQueryItems(queryItems: NSArray<any> | any[]): void;
  percentEncodedQueryItems(): NSArray<any>;
  setPercentEncodedQueryItems(percentEncodedQueryItems: NSArray<any> | any[]): void;
}

declare class NSFileSecurity extends NSObject implements INSCopying, INSSecureCoding {
  initWithCoder<T extends NSFileSecurity>(aDecoder: NSCoder): T;
  copyWithZone(zone: NSZone | null): any;

  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSURLResourceKey = NSString

declare type NSURLFileResourceType = NSString

declare type NSURLThumbnailDictionaryItem = NSString

declare type NSURLFileProtectionType = NSString

declare type NSURLUbiquitousItemDownloadingStatus = NSString

declare type NSURLUbiquitousSharedItemRole = NSString

declare type NSURLUbiquitousSharedItemPermissions = NSString

declare type NSURLBookmarkFileCreationOptions = NSUInteger

declare enum NSURLBookmarkCreationOptions {
  NSURLBookmarkCreationPreferFileIDResolution,
  NSURLBookmarkCreationMinimalBookmark,
  NSURLBookmarkCreationSuitableForBookmarkFile,
  NSURLBookmarkCreationWithSecurityScope,
  NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess,
}

declare enum NSURLBookmarkResolutionOptions {
  NSURLBookmarkResolutionWithoutUI,
  NSURLBookmarkResolutionWithoutMounting,
  NSURLBookmarkResolutionWithSecurityScope,
}

declare class NSURLAuthenticationChallenge extends NSObject implements INSSecureCoding {
  initWithProtectionSpace_proposedCredential_previousFailureCount_failureResponse_error_sender<T extends NSURLAuthenticationChallenge>(space: NSURLProtectionSpace, credential: NSURLCredential | null, previousFailureCount: NSInteger, response: NSURLResponse | null, error: NSError | null, sender: any): T;
  initWithAuthenticationChallenge_sender<T extends NSURLAuthenticationChallenge>(challenge: NSURLAuthenticationChallenge, sender: any): T;

  protectionSpace(): NSURLProtectionSpace;
  setProtectionSpace(protectionSpace: NSURLProtectionSpace): void;
  proposedCredential(): NSURLCredential;
  setProposedCredential(proposedCredential: NSURLCredential): void;
  previousFailureCount(): NSInteger;
  setPreviousFailureCount(previousFailureCount: NSInteger): void;
  failureResponse(): NSURLResponse;
  setFailureResponse(failureResponse: NSURLResponse): void;
  error(): NSError;
  setError(error: NSError): void;
  sender(): any;
  setSender(sender: any): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare interface INSURLAuthenticationChallengeSender {
  useCredential_forAuthenticationChallenge(credential: NSURLCredential, challenge: NSURLAuthenticationChallenge): void;
  continueWithoutCredentialForAuthenticationChallenge(challenge: NSURLAuthenticationChallenge): void;
  cancelAuthenticationChallenge(challenge: NSURLAuthenticationChallenge): void;
  performDefaultHandlingForAuthenticationChallenge(challenge: NSURLAuthenticationChallenge): void;
  rejectProtectionSpaceAndContinueWithChallenge(challenge: NSURLAuthenticationChallenge): void;
}

declare class NSCachedURLResponse extends NSObject implements INSSecureCoding, INSCopying {
  initWithResponse_data<T extends NSCachedURLResponse>(response: NSURLResponse, data: NSData): T;
  initWithResponse_data_userInfo_storagePolicy<T extends NSCachedURLResponse>(response: NSURLResponse, data: NSData, userInfo: NSDictionary<any, any> | {[key: string]: any} | null, storagePolicy: NSURLCacheStoragePolicy): T;
  copyWithZone(zone: NSZone | null): any;

  response(): NSURLResponse;
  setResponse(response: NSURLResponse): void;
  data(): NSData;
  setData(data: NSData): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  storagePolicy(): NSURLCacheStoragePolicy;
  setStoragePolicy(storagePolicy: NSURLCacheStoragePolicy): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSURLCache extends NSObject {
  initWithMemoryCapacity_diskCapacity_diskPath<T extends NSURLCache>(memoryCapacity: NSUInteger, diskCapacity: NSUInteger, path: NSString | string | null): T;
  cachedResponseForRequest(request: NSURLRequest): NSCachedURLResponse;
  storeCachedResponse_forRequest(cachedResponse: NSCachedURLResponse, request: NSURLRequest): void;
  removeCachedResponseForRequest(request: NSURLRequest): void;
  removeAllCachedResponses(): void;
  removeCachedResponsesSinceDate(date: NSDate): void;
  storeCachedResponse_forDataTask(cachedResponse: NSCachedURLResponse, dataTask: NSURLSessionDataTask): void;
  getCachedResponseForDataTask_completionHandler(dataTask: NSURLSessionDataTask, completionHandler: Block): void;
  removeCachedResponseForDataTask(dataTask: NSURLSessionDataTask): void;

  static sharedURLCache(): NSURLCache;
  static setSharedURLCache(sharedURLCache: NSURLCache): void;
  memoryCapacity(): NSUInteger;
  setMemoryCapacity(memoryCapacity: NSUInteger): void;
  diskCapacity(): NSUInteger;
  setDiskCapacity(diskCapacity: NSUInteger): void;
  currentMemoryUsage(): NSUInteger;
  setCurrentMemoryUsage(currentMemoryUsage: NSUInteger): void;
  currentDiskUsage(): NSUInteger;
  setCurrentDiskUsage(currentDiskUsage: NSUInteger): void;
}

declare enum NSURLCacheStoragePolicy {
  NSURLCacheStorageAllowed,
  NSURLCacheStorageAllowedInMemoryOnly,
  NSURLCacheStorageNotAllowed,
}

declare class NSURLConnection extends NSObject {
  initWithRequest_delegate_startImmediately<T extends NSURLConnection>(request: NSURLRequest, delegate: any | null, startImmediately: boolean): T;
  initWithRequest_delegate___WATCHOS_PROHIBITED<T extends NSURLConnection>(request: NSURLRequest, delegate: any | null): T;
  static connectionWithRequest_delegate___WATCHOS_PROHIBITED(request: NSURLRequest, delegate: any | null): NSURLConnection;
  start(): void;
  cancel(): void;
  scheduleInRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  unscheduleFromRunLoop_forMode(aRunLoop: NSRunLoop, mode: NSRunLoopMode): void;
  setDelegateQueue(queue: NSOperationQueue | null): void;
  static canHandleRequest(request: NSURLRequest): boolean;
  static sendSynchronousRequest_returningResponse_error___WATCHOS_PROHIBITED(request: NSURLRequest, response: NSURLResponse, error: NSError): NSData;
  static sendAsynchronousRequest_queue_completionHandler___WATCHOS_PROHIBITED(request: NSURLRequest, queue: NSOperationQueue, handler: Block): void;

  originalRequest(): NSURLRequest;
  setOriginalRequest(originalRequest: NSURLRequest): void;
  currentRequest(): NSURLRequest;
  setCurrentRequest(currentRequest: NSURLRequest): void;
}

declare interface INSURLConnectionDelegate {
  connection_didFailWithError(connection: NSURLConnection, error: NSError): void;
  connectionShouldUseCredentialStorage(connection: NSURLConnection): boolean;
  connection_willSendRequestForAuthenticationChallenge(connection: NSURLConnection, challenge: NSURLAuthenticationChallenge): void;
  connection_canAuthenticateAgainstProtectionSpace(connection: NSURLConnection, protectionSpace: NSURLProtectionSpace): boolean;
  connection_didReceiveAuthenticationChallenge(connection: NSURLConnection, challenge: NSURLAuthenticationChallenge): void;
  connection_didCancelAuthenticationChallenge(connection: NSURLConnection, challenge: NSURLAuthenticationChallenge): void;
}

declare interface INSURLConnectionDataDelegate {
  connection_willSendRequest_redirectResponse(connection: NSURLConnection, request: NSURLRequest, response: NSURLResponse | null): NSURLRequest;
  connection_didReceiveResponse(connection: NSURLConnection, response: NSURLResponse): void;
  connection_didReceiveData(connection: NSURLConnection, data: NSData): void;
  connection_needNewBodyStream(connection: NSURLConnection, request: NSURLRequest): NSInputStream;
  connection_didSendBodyData_totalBytesWritten_totalBytesExpectedToWrite(connection: NSURLConnection, bytesWritten: NSInteger, totalBytesWritten: NSInteger, totalBytesExpectedToWrite: NSInteger): void;
  connection_willCacheResponse(connection: NSURLConnection, cachedResponse: NSCachedURLResponse): NSCachedURLResponse;
  connectionDidFinishLoading(connection: NSURLConnection): void;
}

declare interface INSURLConnectionDownloadDelegate {
  connection_didWriteData_totalBytesWritten_expectedTotalBytes(connection: NSURLConnection, bytesWritten: number, totalBytesWritten: number, expectedTotalBytes: number): void;
  connectionDidResumeDownloading_totalBytesWritten_expectedTotalBytes(connection: NSURLConnection, totalBytesWritten: number, expectedTotalBytes: number): void;
  connectionDidFinishDownloading_destinationURL(connection: NSURLConnection, destinationURL: NSURL): void;
}

declare class NSURLCredential extends NSObject implements INSSecureCoding, INSCopying {
  initWithUser_password_persistence<T extends NSURLCredential>(user: NSString | string, password: NSString | string, persistence: NSURLCredentialPersistence): T;
  static credentialWithUser_password_persistence(user: NSString | string, password: NSString | string, persistence: NSURLCredentialPersistence): NSURLCredential;
  initWithIdentity_certificates_persistence<T extends NSURLCredential>(identity: SecIdentityRef, certArray: NSArray<any> | any[] | null, persistence: NSURLCredentialPersistence): T;
  static credentialWithIdentity_certificates_persistence(identity: SecIdentityRef, certArray: NSArray<any> | any[] | null, persistence: NSURLCredentialPersistence): NSURLCredential;
  initWithTrust<T extends NSURLCredential>(trust: SecTrustRef): T;
  static credentialForTrust(trust: SecTrustRef): NSURLCredential;
  copyWithZone(zone: NSZone | null): any;

  persistence(): NSURLCredentialPersistence;
  setPersistence(persistence: NSURLCredentialPersistence): void;
  user(): NSString;
  setUser(user: NSString | string): void;
  password(): NSString;
  setPassword(password: NSString | string): void;
  hasPassword(): boolean;
  setHasPassword(hasPassword: boolean): void;
  identity(): SecIdentityRef;
  setIdentity(identity: SecIdentityRef): void;
  certificates(): NSArray<any>;
  setCertificates(certificates: NSArray<any> | any[]): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSURLCredentialPersistence {
  NSURLCredentialPersistenceNone,
  NSURLCredentialPersistenceForSession,
  NSURLCredentialPersistencePermanent,
  NSURLCredentialPersistenceSynchronizable,
}

declare class NSURLCredentialStorage extends NSObject {
  credentialsForProtectionSpace(space: NSURLProtectionSpace): NSDictionary<any, any>;
  setCredential_forProtectionSpace(credential: NSURLCredential, space: NSURLProtectionSpace): void;
  removeCredential_forProtectionSpace(credential: NSURLCredential, space: NSURLProtectionSpace): void;
  removeCredential_forProtectionSpace_options(credential: NSURLCredential, space: NSURLProtectionSpace, options: NSDictionary<any, any> | {[key: string]: any} | null): void;
  defaultCredentialForProtectionSpace(space: NSURLProtectionSpace): NSURLCredential;
  setDefaultCredential_forProtectionSpace(credential: NSURLCredential, space: NSURLProtectionSpace): void;
  getCredentialsForProtectionSpace_task_completionHandler(protectionSpace: NSURLProtectionSpace, task: NSURLSessionTask, completionHandler: Block): void;
  setCredential_forProtectionSpace_task(credential: NSURLCredential, protectionSpace: NSURLProtectionSpace, task: NSURLSessionTask): void;
  removeCredential_forProtectionSpace_options_task(credential: NSURLCredential, protectionSpace: NSURLProtectionSpace, options: NSDictionary<any, any> | {[key: string]: any} | null, task: NSURLSessionTask): void;
  getDefaultCredentialForProtectionSpace_task_completionHandler(space: NSURLProtectionSpace, task: NSURLSessionTask, completionHandler: Block): void;
  setDefaultCredential_forProtectionSpace_task(credential: NSURLCredential, protectionSpace: NSURLProtectionSpace, task: NSURLSessionTask): void;

  static sharedCredentialStorage(): NSURLCredentialStorage;
  static setSharedCredentialStorage(sharedCredentialStorage: NSURLCredentialStorage): void;
  allCredentials(): NSDictionary<any, any>;
  setAllCredentials(allCredentials: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSURLDownload extends NSObject {
  static canResumeDownloadDecodedWithEncodingMIMEType(MIMEType: NSString | string): boolean;
  initWithRequest_delegate<T extends NSURLDownload>(request: NSURLRequest, delegate: any | null): T;
  initWithResumeData_delegate_path<T extends NSURLDownload>(resumeData: NSData, delegate: any | null, path: NSString | string): T;
  cancel(): void;
  setDestination_allowOverwrite(path: NSString | string, allowOverwrite: boolean): void;

  request(): NSURLRequest;
  setRequest(request: NSURLRequest): void;
  resumeData(): NSData;
  setResumeData(resumeData: NSData): void;
  deletesFileUponFailure(): boolean;
  setDeletesFileUponFailure(deletesFileUponFailure: boolean): void;
}

declare interface INSURLDownloadDelegate {
  downloadDidBegin(download: NSURLDownload): void;
  download_willSendRequest_redirectResponse(download: NSURLDownload, request: NSURLRequest, redirectResponse: NSURLResponse | null): NSURLRequest;
  download_canAuthenticateAgainstProtectionSpace(connection: NSURLDownload, protectionSpace: NSURLProtectionSpace): boolean;
  download_didReceiveAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  download_didCancelAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  downloadShouldUseCredentialStorage(download: NSURLDownload): boolean;
  download_didReceiveResponse(download: NSURLDownload, response: NSURLResponse): void;
  download_willResumeWithResponse_fromByte(download: NSURLDownload, response: NSURLResponse, startingByte: number): void;
  download_didReceiveDataOfLength(download: NSURLDownload, length: NSUInteger): void;
  download_shouldDecodeSourceDataOfMIMEType(download: NSURLDownload, encodingType: NSString | string): boolean;
  download_decideDestinationWithSuggestedFilename(download: NSURLDownload, filename: NSString | string): void;
  download_didCreateDestination(download: NSURLDownload, path: NSString | string): void;
  downloadDidFinish(download: NSURLDownload): void;
  download_didFailWithError(download: NSURLDownload, error: NSError): void;
}

declare class NSURLHandle {
  static registerURLHandleClass(anURLHandleSubclass: any): void;
  static URLHandleClassForURL(anURL: NSURL): any;
  status(): NSURLHandleStatus;
  failureReason(): NSString;
  addClient(client: any): void;
  removeClient(client: any): void;
  loadInBackground(): void;
  cancelLoadInBackground(): void;
  resourceData(): NSData;
  availableResourceData(): NSData;
  expectedResourceDataSize(): number;
  flushCachedData(): void;
  backgroundLoadDidFailWithReason(reason: NSString | string): void;
  didLoadBytes_loadComplete(newBytes: NSData, yorn: boolean): void;
  static canInitWithURL(anURL: NSURL): boolean;
  static cachedHandleForURL(anURL: NSURL): NSURLHandle;
  propertyForKey(propertyKey: NSString | string): any;
  propertyForKeyIfAvailable(propertyKey: NSString | string): any;
  writeProperty_forKey(propertyValue: any, propertyKey: NSString | string): boolean;
  writeData(data: NSData): boolean;
  loadInForeground(): NSData;
  beginLoadInBackground(): void;
  endLoadInBackground(): void;
}

declare interface INSURLHandleClient {
  URLHandle_resourceDataDidBecomeAvailable(sender: NSURLHandle, newBytes: NSData): void;
  URLHandleResourceDidBeginLoading(sender: NSURLHandle): void;
  URLHandleResourceDidFinishLoading(sender: NSURLHandle): void;
  URLHandleResourceDidCancelLoading(sender: NSURLHandle): void;
  URLHandle_resourceDidFailLoadingWithReason(sender: NSURLHandle, reason: NSString | string): void;
}

declare enum NSURLHandleStatus {
  NSURLHandleNotLoaded = 0,
  NSURLHandleLoadSucceeded,
  NSURLHandleLoadInProgress,
  NSURLHandleLoadFailed,
}

declare class NSURLProtectionSpace extends NSObject implements INSSecureCoding, INSCopying {
  initWithHost_port_protocol_realm_authenticationMethod<T extends NSURLProtectionSpace>(host: NSString | string, port: NSInteger, protocol: NSString | string | null, realm: NSString | string | null, authenticationMethod: NSString | string | null): T;
  initWithProxyHost_port_type_realm_authenticationMethod<T extends NSURLProtectionSpace>(host: NSString | string, port: NSInteger, type: NSString | string | null, realm: NSString | string | null, authenticationMethod: NSString | string | null): T;
  copyWithZone(zone: NSZone | null): any;

  realm(): NSString;
  setRealm(realm: NSString | string): void;
  receivesCredentialSecurely(): boolean;
  setReceivesCredentialSecurely(receivesCredentialSecurely: boolean): void;
  isProxy(): boolean;
  setIsProxy(isProxy: boolean): void;
  host(): NSString;
  setHost(host: NSString | string): void;
  port(): NSInteger;
  setPort(port: NSInteger): void;
  proxyType(): NSString;
  setProxyType(proxyType: NSString | string): void;
  protocol(): NSString;
  setProtocol(protocol: NSString | string): void;
  authenticationMethod(): NSString;
  setAuthenticationMethod(authenticationMethod: NSString | string): void;
  distinguishedNames(): NSArray<any>;
  setDistinguishedNames(distinguishedNames: NSArray<any> | any[]): void;
  serverTrust(): SecTrustRef;
  setServerTrust(serverTrust: SecTrustRef): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSURLProtocol extends NSObject {
  initWithRequest_cachedResponse_client<T extends NSURLProtocol>(request: NSURLRequest, cachedResponse: NSCachedURLResponse | null, client: any | null): T;
  static canInitWithRequest(request: NSURLRequest): boolean;
  static canonicalRequestForRequest(request: NSURLRequest): NSURLRequest;
  static requestIsCacheEquivalent_toRequest(a: NSURLRequest, b: NSURLRequest): boolean;
  startLoading(): void;
  stopLoading(): void;
  static propertyForKey_inRequest(key: NSString | string, request: NSURLRequest): any;
  static setProperty_forKey_inRequest(value: any, key: NSString | string, request: NSMutableURLRequest): void;
  static removePropertyForKey_inRequest(key: NSString | string, request: NSMutableURLRequest): void;
  static registerClass(protocolClass: any): boolean;
  static unregisterClass(protocolClass: any): void;
  static canInitWithTask(task: NSURLSessionTask): boolean;
  initWithTask_cachedResponse_client<T extends NSURLProtocol>(task: NSURLSessionTask, cachedResponse: NSCachedURLResponse | null, client: any | null): T;

  client(): any;
  setClient(client: any): void;
  request(): NSURLRequest;
  setRequest(request: NSURLRequest): void;
  cachedResponse(): NSCachedURLResponse;
  setCachedResponse(cachedResponse: NSCachedURLResponse): void;
  task(): NSURLSessionTask;
  setTask(task: NSURLSessionTask): void;
}

declare interface INSURLProtocolClient {
  URLProtocol_wasRedirectedToRequest_redirectResponse(protocol: NSURLProtocol, request: NSURLRequest, redirectResponse: NSURLResponse): void;
  URLProtocol_cachedResponseIsValid(protocol: NSURLProtocol, cachedResponse: NSCachedURLResponse): void;
  URLProtocol_didReceiveResponse_cacheStoragePolicy(protocol: NSURLProtocol, response: NSURLResponse, policy: NSURLCacheStoragePolicy): void;
  URLProtocol_didLoadData(protocol: NSURLProtocol, data: NSData): void;
  URLProtocolDidFinishLoading(protocol: NSURLProtocol): void;
  URLProtocol_didFailWithError(protocol: NSURLProtocol, error: NSError): void;
  URLProtocol_didReceiveAuthenticationChallenge(protocol: NSURLProtocol, challenge: NSURLAuthenticationChallenge): void;
  URLProtocol_didCancelAuthenticationChallenge(protocol: NSURLProtocol, challenge: NSURLAuthenticationChallenge): void;
}

declare class NSURLRequest extends NSObject implements INSSecureCoding, INSCopying, INSMutableCopying {
  static requestWithURL(URL: NSURL): NSURLRequest;
  static requestWithURL_cachePolicy_timeoutInterval(URL: NSURL, cachePolicy: NSURLRequestCachePolicy, timeoutInterval: NSTimeInterval): NSURLRequest;
  initWithURL<T extends NSURLRequest>(URL: NSURL): T;
  initWithURL_cachePolicy_timeoutInterval<T extends NSURLRequest>(URL: NSURL, cachePolicy: NSURLRequestCachePolicy, timeoutInterval: NSTimeInterval): T;
  valueForHTTPHeaderField(field: NSString | string): NSString;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
  cachePolicy(): NSURLRequestCachePolicy;
  setCachePolicy(cachePolicy: NSURLRequestCachePolicy): void;
  timeoutInterval(): NSTimeInterval;
  setTimeoutInterval(timeoutInterval: NSTimeInterval): void;
  mainDocumentURL(): NSURL;
  setMainDocumentURL(mainDocumentURL: NSURL): void;
  networkServiceType(): NSURLRequestNetworkServiceType;
  setNetworkServiceType(networkServiceType: NSURLRequestNetworkServiceType): void;
  allowsCellularAccess(): boolean;
  setAllowsCellularAccess(allowsCellularAccess: boolean): void;
  HTTPMethod(): NSString;
  setHTTPMethod(HTTPMethod: NSString | string): void;
  allHTTPHeaderFields(): NSDictionary<any, any>;
  setAllHTTPHeaderFields(allHTTPHeaderFields: NSDictionary<any, any> | {[key: string]: any}): void;
  HTTPBody(): NSData;
  setHTTPBody(HTTPBody: NSData): void;
  HTTPBodyStream(): NSInputStream;
  setHTTPBodyStream(HTTPBodyStream: NSInputStream): void;
  HTTPShouldHandleCookies(): boolean;
  setHTTPShouldHandleCookies(HTTPShouldHandleCookies: boolean): void;
  HTTPShouldUsePipelining(): boolean;
  setHTTPShouldUsePipelining(HTTPShouldUsePipelining: boolean): void;
}

declare class NSMutableURLRequest extends NSURLRequest {
  setValue_forHTTPHeaderField(value: NSString | string | null, field: NSString | string): void;
  addValue_forHTTPHeaderField(value: NSString | string, field: NSString | string): void;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  cachePolicy(): NSURLRequestCachePolicy;
  setCachePolicy(cachePolicy: NSURLRequestCachePolicy): void;
  timeoutInterval(): NSTimeInterval;
  setTimeoutInterval(timeoutInterval: NSTimeInterval): void;
  mainDocumentURL(): NSURL;
  setMainDocumentURL(mainDocumentURL: NSURL): void;
  networkServiceType(): NSURLRequestNetworkServiceType;
  setNetworkServiceType(networkServiceType: NSURLRequestNetworkServiceType): void;
  allowsCellularAccess(): boolean;
  setAllowsCellularAccess(allowsCellularAccess: boolean): void;
  HTTPMethod(): NSString;
  setHTTPMethod(HTTPMethod: NSString | string): void;
  allHTTPHeaderFields(): NSDictionary<any, any>;
  setAllHTTPHeaderFields(allHTTPHeaderFields: NSDictionary<any, any> | {[key: string]: any}): void;
  HTTPBody(): NSData;
  setHTTPBody(HTTPBody: NSData): void;
  HTTPBodyStream(): NSInputStream;
  setHTTPBodyStream(HTTPBodyStream: NSInputStream): void;
  HTTPShouldHandleCookies(): boolean;
  setHTTPShouldHandleCookies(HTTPShouldHandleCookies: boolean): void;
  HTTPShouldUsePipelining(): boolean;
  setHTTPShouldUsePipelining(HTTPShouldUsePipelining: boolean): void;
}

declare enum NSURLRequestCachePolicy {
  NSURLRequestUseProtocolCachePolicy = 0,
  NSURLRequestReloadIgnoringLocalCacheData = 1,
  NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4,
  NSURLRequestReloadIgnoringCacheData,
  NSURLRequestReturnCacheDataElseLoad = 2,
  NSURLRequestReturnCacheDataDontLoad = 3,
  NSURLRequestReloadRevalidatingCacheData = 5,
}

declare enum NSURLRequestNetworkServiceType {
  NSURLNetworkServiceTypeDefault = 0,
  NSURLNetworkServiceTypeVoIP = 1,
  NSURLNetworkServiceTypeVideo = 2,
  NSURLNetworkServiceTypeBackground = 3,
  NSURLNetworkServiceTypeVoice = 4,
  NSURLNetworkServiceTypeCallSignaling = 11,
}

declare class NSURLResponse extends NSObject implements INSSecureCoding, INSCopying {
  initWithURL_MIMEType_expectedContentLength_textEncodingName<T extends NSURLResponse>(URL: NSURL, MIMEType: NSString | string | null, length: NSInteger, name: NSString | string | null): T;
  copyWithZone(zone: NSZone | null): any;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  MIMEType(): NSString;
  setMIMEType(MIMEType: NSString | string): void;
  expectedContentLength(): number;
  setExpectedContentLength(expectedContentLength: number): void;
  textEncodingName(): NSString;
  setTextEncodingName(textEncodingName: NSString | string): void;
  suggestedFilename(): NSString;
  setSuggestedFilename(suggestedFilename: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSHTTPURLResponse extends NSURLResponse {
  initWithURL_statusCode_HTTPVersion_headerFields<T extends NSHTTPURLResponse>(url: NSURL, statusCode: NSInteger, HTTPVersion: NSString | string | null, headerFields: NSDictionary<any, any> | {[key: string]: any} | null): T;
  static localizedStringForStatusCode(statusCode: NSInteger): NSString;

  statusCode(): NSInteger;
  setStatusCode(statusCode: NSInteger): void;
  allHeaderFields(): NSDictionary<any, any>;
  setAllHeaderFields(allHeaderFields: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSURLSession extends NSObject {
  static sessionWithConfiguration(configuration: NSURLSessionConfiguration): NSURLSession;
  static sessionWithConfiguration_delegate_delegateQueue(configuration: NSURLSessionConfiguration, delegate: any | null, queue: NSOperationQueue | null): NSURLSession;
  finishTasksAndInvalidate(): void;
  invalidateAndCancel(): void;
  resetWithCompletionHandler(completionHandler: Block): void;
  flushWithCompletionHandler(completionHandler: Block): void;
  getTasksWithCompletionHandler(completionHandler: Block): void;
  getAllTasksWithCompletionHandler(completionHandler: Block): void;
  dataTaskWithRequest(request: NSURLRequest): NSURLSessionDataTask;
  dataTaskWithURL(url: NSURL): NSURLSessionDataTask;
  uploadTaskWithRequest_fromFile(request: NSURLRequest, fileURL: NSURL): NSURLSessionUploadTask;
  uploadTaskWithRequest_fromData(request: NSURLRequest, bodyData: NSData): NSURLSessionUploadTask;
  uploadTaskWithStreamedRequest(request: NSURLRequest): NSURLSessionUploadTask;
  downloadTaskWithRequest(request: NSURLRequest): NSURLSessionDownloadTask;
  downloadTaskWithURL(url: NSURL): NSURLSessionDownloadTask;
  downloadTaskWithResumeData(resumeData: NSData): NSURLSessionDownloadTask;
  streamTaskWithHostName_port(hostname: NSString | string, port: NSInteger): NSURLSessionStreamTask;
  streamTaskWithNetService___WATCHOS_PROHIBITED(service: NSNetService): NSURLSessionStreamTask;
  dataTaskWithRequest_completionHandler(request: NSURLRequest, completionHandler: Block): NSURLSessionDataTask;
  dataTaskWithURL_completionHandler(url: NSURL, completionHandler: Block): NSURLSessionDataTask;
  uploadTaskWithRequest_fromFile_completionHandler(request: NSURLRequest, fileURL: NSURL, completionHandler: Block): NSURLSessionUploadTask;
  uploadTaskWithRequest_fromData_completionHandler(request: NSURLRequest, bodyData: NSData | null, completionHandler: Block): NSURLSessionUploadTask;
  downloadTaskWithRequest_completionHandler(request: NSURLRequest, completionHandler: Block): NSURLSessionDownloadTask;
  downloadTaskWithURL_completionHandler(url: NSURL, completionHandler: Block): NSURLSessionDownloadTask;
  downloadTaskWithResumeData_completionHandler(resumeData: NSData, completionHandler: Block): NSURLSessionDownloadTask;

  static sharedSession(): NSURLSession;
  static setSharedSession(sharedSession: NSURLSession): void;
  delegateQueue(): NSOperationQueue;
  setDelegateQueue(delegateQueue: NSOperationQueue): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  configuration(): NSURLSessionConfiguration;
  setConfiguration(configuration: NSURLSessionConfiguration): void;
  sessionDescription(): NSString;
  setSessionDescription(sessionDescription: NSString | string): void;
}

declare class NSURLSessionTask extends NSObject implements INSCopying, INSProgressReporting {
  cancel(): void;
  suspend(): void;
  resume(): void;
  copyWithZone(zone: NSZone | null): any;

  taskIdentifier(): NSUInteger;
  setTaskIdentifier(taskIdentifier: NSUInteger): void;
  originalRequest(): NSURLRequest;
  setOriginalRequest(originalRequest: NSURLRequest): void;
  currentRequest(): NSURLRequest;
  setCurrentRequest(currentRequest: NSURLRequest): void;
  response(): NSURLResponse;
  setResponse(response: NSURLResponse): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
  earliestBeginDate(): NSDate;
  setEarliestBeginDate(earliestBeginDate: NSDate): void;
  countOfBytesClientExpectsToSend(): number;
  setCountOfBytesClientExpectsToSend(countOfBytesClientExpectsToSend: number): void;
  countOfBytesClientExpectsToReceive(): number;
  setCountOfBytesClientExpectsToReceive(countOfBytesClientExpectsToReceive: number): void;
  countOfBytesReceived(): number;
  setCountOfBytesReceived(countOfBytesReceived: number): void;
  countOfBytesSent(): number;
  setCountOfBytesSent(countOfBytesSent: number): void;
  countOfBytesExpectedToSend(): number;
  setCountOfBytesExpectedToSend(countOfBytesExpectedToSend: number): void;
  countOfBytesExpectedToReceive(): number;
  setCountOfBytesExpectedToReceive(countOfBytesExpectedToReceive: number): void;
  taskDescription(): NSString;
  setTaskDescription(taskDescription: NSString | string): void;
  state(): NSURLSessionTaskState;
  setState(state: NSURLSessionTaskState): void;
  error(): NSError;
  setError(error: NSError): void;
  priority(): number;
  setPriority(priority: number): void;
}

declare class NSURLSessionDataTask extends NSURLSessionTask {}

declare class NSURLSessionUploadTask extends NSURLSessionDataTask {}

declare class NSURLSessionDownloadTask extends NSURLSessionTask {
  cancelByProducingResumeData(completionHandler: Block): void;
}

declare class NSURLSessionStreamTask extends NSURLSessionTask {
  readDataOfMinLength_maxLength_timeout_completionHandler(minBytes: NSUInteger, maxBytes: NSUInteger, timeout: NSTimeInterval, completionHandler: Block): void;
  writeData_timeout_completionHandler(data: NSData, timeout: NSTimeInterval, completionHandler: Block): void;
  captureStreams(): void;
  closeWrite(): void;
  closeRead(): void;
  startSecureConnection(): void;
  stopSecureConnection(): void;
}

declare class NSURLSessionConfiguration extends NSObject implements INSCopying {
  static backgroundSessionConfigurationWithIdentifier(identifier: NSString | string): NSURLSessionConfiguration;
  static backgroundSessionConfiguration(identifier: NSString | string): NSURLSessionConfiguration;
  copyWithZone(zone: NSZone | null): any;

  static defaultSessionConfiguration(): NSURLSessionConfiguration;
  static setDefaultSessionConfiguration(defaultSessionConfiguration: NSURLSessionConfiguration): void;
  static ephemeralSessionConfiguration(): NSURLSessionConfiguration;
  static setEphemeralSessionConfiguration(ephemeralSessionConfiguration: NSURLSessionConfiguration): void;
  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  requestCachePolicy(): NSURLRequestCachePolicy;
  setRequestCachePolicy(requestCachePolicy: NSURLRequestCachePolicy): void;
  timeoutIntervalForRequest(): NSTimeInterval;
  setTimeoutIntervalForRequest(timeoutIntervalForRequest: NSTimeInterval): void;
  timeoutIntervalForResource(): NSTimeInterval;
  setTimeoutIntervalForResource(timeoutIntervalForResource: NSTimeInterval): void;
  networkServiceType(): NSURLRequestNetworkServiceType;
  setNetworkServiceType(networkServiceType: NSURLRequestNetworkServiceType): void;
  allowsCellularAccess(): boolean;
  setAllowsCellularAccess(allowsCellularAccess: boolean): void;
  waitsForConnectivity(): boolean;
  setWaitsForConnectivity(waitsForConnectivity: boolean): void;
  discretionary(): boolean;
  setDiscretionary(discretionary: boolean): void;
  sharedContainerIdentifier(): NSString;
  setSharedContainerIdentifier(sharedContainerIdentifier: NSString | string): void;
  sessionSendsLaunchEvents(): boolean;
  setSessionSendsLaunchEvents(sessionSendsLaunchEvents: boolean): void;
  connectionProxyDictionary(): NSDictionary<any, any>;
  setConnectionProxyDictionary(connectionProxyDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  TLSMinimumSupportedProtocol(): SSLProtocol;
  setTLSMinimumSupportedProtocol(TLSMinimumSupportedProtocol: SSLProtocol): void;
  TLSMaximumSupportedProtocol(): SSLProtocol;
  setTLSMaximumSupportedProtocol(TLSMaximumSupportedProtocol: SSLProtocol): void;
  HTTPShouldUsePipelining(): boolean;
  setHTTPShouldUsePipelining(HTTPShouldUsePipelining: boolean): void;
  HTTPShouldSetCookies(): boolean;
  setHTTPShouldSetCookies(HTTPShouldSetCookies: boolean): void;
  HTTPCookieAcceptPolicy(): NSHTTPCookieAcceptPolicy;
  setHTTPCookieAcceptPolicy(HTTPCookieAcceptPolicy: NSHTTPCookieAcceptPolicy): void;
  HTTPAdditionalHeaders(): NSDictionary<any, any>;
  setHTTPAdditionalHeaders(HTTPAdditionalHeaders: NSDictionary<any, any> | {[key: string]: any}): void;
  HTTPMaximumConnectionsPerHost(): NSInteger;
  setHTTPMaximumConnectionsPerHost(HTTPMaximumConnectionsPerHost: NSInteger): void;
  HTTPCookieStorage(): NSHTTPCookieStorage;
  setHTTPCookieStorage(HTTPCookieStorage: NSHTTPCookieStorage): void;
  URLCredentialStorage(): NSURLCredentialStorage;
  setURLCredentialStorage(URLCredentialStorage: NSURLCredentialStorage): void;
  URLCache(): NSURLCache;
  setURLCache(URLCache: NSURLCache): void;
  shouldUseExtendedBackgroundIdleMode(): boolean;
  setShouldUseExtendedBackgroundIdleMode(shouldUseExtendedBackgroundIdleMode: boolean): void;
  protocolClasses(): NSArray<any>;
  setProtocolClasses(protocolClasses: NSArray<any> | any[]): void;
  multipathServiceType(): NSURLSessionMultipathServiceType;
  setMultipathServiceType(multipathServiceType: NSURLSessionMultipathServiceType): void;
}

declare class NSURLSessionTaskTransactionMetrics extends NSObject {
  request(): NSURLRequest;
  setRequest(request: NSURLRequest): void;
  response(): NSURLResponse;
  setResponse(response: NSURLResponse): void;
  fetchStartDate(): NSDate;
  setFetchStartDate(fetchStartDate: NSDate): void;
  domainLookupStartDate(): NSDate;
  setDomainLookupStartDate(domainLookupStartDate: NSDate): void;
  domainLookupEndDate(): NSDate;
  setDomainLookupEndDate(domainLookupEndDate: NSDate): void;
  connectStartDate(): NSDate;
  setConnectStartDate(connectStartDate: NSDate): void;
  secureConnectionStartDate(): NSDate;
  setSecureConnectionStartDate(secureConnectionStartDate: NSDate): void;
  secureConnectionEndDate(): NSDate;
  setSecureConnectionEndDate(secureConnectionEndDate: NSDate): void;
  connectEndDate(): NSDate;
  setConnectEndDate(connectEndDate: NSDate): void;
  requestStartDate(): NSDate;
  setRequestStartDate(requestStartDate: NSDate): void;
  requestEndDate(): NSDate;
  setRequestEndDate(requestEndDate: NSDate): void;
  responseStartDate(): NSDate;
  setResponseStartDate(responseStartDate: NSDate): void;
  responseEndDate(): NSDate;
  setResponseEndDate(responseEndDate: NSDate): void;
  networkProtocolName(): NSString;
  setNetworkProtocolName(networkProtocolName: NSString | string): void;
  proxyConnection(): boolean;
  setProxyConnection(proxyConnection: boolean): void;
  reusedConnection(): boolean;
  setReusedConnection(reusedConnection: boolean): void;
  resourceFetchType(): NSURLSessionTaskMetricsResourceFetchType;
  setResourceFetchType(resourceFetchType: NSURLSessionTaskMetricsResourceFetchType): void;
}

declare class NSURLSessionTaskMetrics extends NSObject {
  transactionMetrics(): NSArray<any>;
  setTransactionMetrics(transactionMetrics: NSArray<any> | any[]): void;
  taskInterval(): NSDateInterval;
  setTaskInterval(taskInterval: NSDateInterval): void;
  redirectCount(): NSUInteger;
  setRedirectCount(redirectCount: NSUInteger): void;
}

declare interface INSURLSessionDelegate {
  URLSession_didBecomeInvalidWithError(session: NSURLSession, error: NSError | null): void;
  URLSession_didReceiveChallenge_completionHandler(session: NSURLSession, challenge: NSURLAuthenticationChallenge, completionHandler: Block): void;
  URLSessionDidFinishEventsForBackgroundURLSession(session: NSURLSession): void;
}

declare interface INSURLSessionTaskDelegate {
  URLSession_task_willBeginDelayedRequest_completionHandler(session: NSURLSession, task: NSURLSessionTask, request: NSURLRequest, completionHandler: Block): void;
  URLSession_taskIsWaitingForConnectivity(session: NSURLSession, task: NSURLSessionTask): void;
  URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler(session: NSURLSession, task: NSURLSessionTask, response: NSHTTPURLResponse, request: NSURLRequest, completionHandler: Block): void;
  URLSession_task_didReceiveChallenge_completionHandler(session: NSURLSession, task: NSURLSessionTask, challenge: NSURLAuthenticationChallenge, completionHandler: Block): void;
  URLSession_task_needNewBodyStream(session: NSURLSession, task: NSURLSessionTask, completionHandler: Block): void;
  URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend(session: NSURLSession, task: NSURLSessionTask, bytesSent: number, totalBytesSent: number, totalBytesExpectedToSend: number): void;
  URLSession_task_didFinishCollectingMetrics(session: NSURLSession, task: NSURLSessionTask, metrics: NSURLSessionTaskMetrics): void;
  URLSession_task_didCompleteWithError(session: NSURLSession, task: NSURLSessionTask, error: NSError | null): void;
}

declare interface INSURLSessionDataDelegate {
  URLSession_dataTask_didReceiveResponse_completionHandler(session: NSURLSession, dataTask: NSURLSessionDataTask, response: NSURLResponse, completionHandler: Block): void;
  URLSession_dataTask_didBecomeDownloadTask(session: NSURLSession, dataTask: NSURLSessionDataTask, downloadTask: NSURLSessionDownloadTask): void;
  URLSession_dataTask_didBecomeStreamTask(session: NSURLSession, dataTask: NSURLSessionDataTask, streamTask: NSURLSessionStreamTask): void;
  URLSession_dataTask_didReceiveData(session: NSURLSession, dataTask: NSURLSessionDataTask, data: NSData): void;
  URLSession_dataTask_willCacheResponse_completionHandler(session: NSURLSession, dataTask: NSURLSessionDataTask, proposedResponse: NSCachedURLResponse, completionHandler: Block): void;
}

declare interface INSURLSessionDownloadDelegate {
  URLSession_downloadTask_didFinishDownloadingToURL(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, location: NSURL): void;
  URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, bytesWritten: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, fileOffset: number, expectedTotalBytes: number): void;
}

declare interface INSURLSessionStreamDelegate {
  URLSession_readClosedForStreamTask(session: NSURLSession, streamTask: NSURLSessionStreamTask): void;
  URLSession_writeClosedForStreamTask(session: NSURLSession, streamTask: NSURLSessionStreamTask): void;
  URLSession_betterRouteDiscoveredForStreamTask(session: NSURLSession, streamTask: NSURLSessionStreamTask): void;
  URLSession_streamTask_didBecomeInputStream_outputStream(session: NSURLSession, streamTask: NSURLSessionStreamTask, inputStream: NSInputStream, outputStream: NSOutputStream): void;
}

declare enum NSURLSessionTaskState {
  NSURLSessionTaskStateRunning = 0,
  NSURLSessionTaskStateSuspended = 1,
  NSURLSessionTaskStateCanceling = 2,
  NSURLSessionTaskStateCompleted = 3,
}

declare enum NSURLSessionMultipathServiceType {
  NSURLSessionMultipathServiceTypeNone = 0,
  NSURLSessionMultipathServiceTypeHandover = 1,
  NSURLSessionMultipathServiceTypeInteractive = 2,
  NSURLSessionMultipathServiceTypeAggregate = 3,
}

declare enum NSURLSessionDelayedRequestDisposition {
  NSURLSessionDelayedRequestContinueLoading = 0,
  NSURLSessionDelayedRequestUseNewRequest = 1,
  NSURLSessionDelayedRequestCancel = 2,
}

declare enum NSURLSessionAuthChallengeDisposition {
  NSURLSessionAuthChallengeUseCredential = 0,
  NSURLSessionAuthChallengePerformDefaultHandling = 1,
  NSURLSessionAuthChallengeCancelAuthenticationChallenge = 2,
  NSURLSessionAuthChallengeRejectProtectionSpace = 3,
}

declare enum NSURLSessionResponseDisposition {
  NSURLSessionResponseCancel = 0,
  NSURLSessionResponseAllow = 1,
  NSURLSessionResponseBecomeDownload = 2,
  NSURLSessionResponseBecomeStream = 3,
}

declare enum NSURLSessionTaskMetricsResourceFetchType {
  NSURLSessionTaskMetricsResourceFetchTypeUnknown,
  NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad,
  NSURLSessionTaskMetricsResourceFetchTypeServerPush,
  NSURLSessionTaskMetricsResourceFetchTypeLocalCache,
}

declare class NSUUID extends NSObject implements INSCopying, INSSecureCoding {
  static UUID(): NSUUID;
  init<T extends NSUUID>(): T;
  initWithUUIDString<T extends NSUUID>(string: NSString | string): T;
  initWithUUIDBytes<T extends NSUUID>(bytes: uuid_t): T;
  getUUIDBytes(uuid: uuid_t): void;
  copyWithZone(zone: NSZone | null): any;

  UUIDString(): NSString;
  setUUIDString(UUIDString: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUbiquitousKeyValueStore extends NSObject {
  objectForKey(aKey: NSString | string): any;
  setObject_forKey(anObject: any | null, aKey: NSString | string): void;
  removeObjectForKey(aKey: NSString | string): void;
  stringForKey(aKey: NSString | string): NSString;
  arrayForKey(aKey: NSString | string): NSArray<any>;
  dictionaryForKey(aKey: NSString | string): NSDictionary<any, any>;
  dataForKey(aKey: NSString | string): NSData;
  longLongForKey(aKey: NSString | string): number;
  doubleForKey(aKey: NSString | string): number;
  boolForKey(aKey: NSString | string): boolean;
  setString_forKey(aString: NSString | string | null, aKey: NSString | string): void;
  setData_forKey(aData: NSData | null, aKey: NSString | string): void;
  setArray_forKey(anArray: NSArray<any> | any[] | null, aKey: NSString | string): void;
  setDictionary_forKey(aDictionary: NSDictionary<any, any> | {[key: string]: any} | null, aKey: NSString | string): void;
  setLongLong_forKey(value: number, aKey: NSString | string): void;
  setDouble_forKey(value: number, aKey: NSString | string): void;
  setBool_forKey(value: boolean, aKey: NSString | string): void;
  synchronize(): boolean;

  static defaultStore(): NSUbiquitousKeyValueStore;
  static setDefaultStore(defaultStore: NSUbiquitousKeyValueStore): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSUndoManager extends NSObject {
  beginUndoGrouping(): void;
  endUndoGrouping(): void;
  disableUndoRegistration(): void;
  enableUndoRegistration(): void;
  undo(): void;
  redo(): void;
  undoNestedGroup(): void;
  removeAllActions(): void;
  removeAllActionsWithTarget(target: any): void;
  registerUndoWithTarget_selector_object(target: any, selector: string, anObject: any | null): void;
  prepareWithInvocationTarget(target: any): any;
  registerUndoWithTarget_handler(target: any, undoHandler: Block): void;
  setActionIsDiscardable(discardable: boolean): void;
  setActionName(actionName: NSString | string): void;
  undoMenuTitleForUndoActionName(actionName: NSString | string): NSString;
  redoMenuTitleForUndoActionName(actionName: NSString | string): NSString;
  setActionName_sender(actionName: NSString | string, senderID: NSString | string): void;

  groupingLevel(): NSInteger;
  setGroupingLevel(groupingLevel: NSInteger): void;
  undoRegistrationEnabled(): boolean;
  setUndoRegistrationEnabled(undoRegistrationEnabled: boolean): void;
  groupsByEvent(): boolean;
  setGroupsByEvent(groupsByEvent: boolean): void;
  levelsOfUndo(): NSUInteger;
  setLevelsOfUndo(levelsOfUndo: NSUInteger): void;
  runLoopModes(): NSArray<any>;
  setRunLoopModes(runLoopModes: NSArray<any> | any[]): void;
  canUndo(): boolean;
  setCanUndo(canUndo: boolean): void;
  canRedo(): boolean;
  setCanRedo(canRedo: boolean): void;
  undoing(): boolean;
  setUndoing(undoing: boolean): void;
  redoing(): boolean;
  setRedoing(redoing: boolean): void;
  undoActionIsDiscardable(): boolean;
  setUndoActionIsDiscardable(undoActionIsDiscardable: boolean): void;
  redoActionIsDiscardable(): boolean;
  setRedoActionIsDiscardable(redoActionIsDiscardable: boolean): void;
  undoActionName(): NSString;
  setUndoActionName(undoActionName: NSString | string): void;
  redoActionName(): NSString;
  setRedoActionName(redoActionName: NSString | string): void;
  undoMenuItemTitle(): NSString;
  setUndoMenuItemTitle(undoMenuItemTitle: NSString | string): void;
  redoMenuItemTitle(): NSString;
  setRedoMenuItemTitle(redoMenuItemTitle: NSString | string): void;
}

declare class NSUnitConverter extends NSObject {
  baseUnitValueFromValue(value: number): number;
  valueFromBaseUnitValue(baseUnitValue: number): number;
}

declare class NSUnitConverterLinear extends NSUnitConverter implements INSSecureCoding {
  initWithCoefficient<T extends NSUnitConverterLinear>(coefficient: number): T;
  initWithCoefficient_constant<T extends NSUnitConverterLinear>(coefficient: number, constant: number): T;

  coefficient(): number;
  setCoefficient(coefficient: number): void;
  constant(): number;
  setConstant(constant: number): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnit extends NSObject implements INSCopying, INSSecureCoding {
  initWithSymbol<T extends NSUnit>(symbol: NSString | string): T;
  copyWithZone(zone: NSZone | null): any;

  symbol(): NSString;
  setSymbol(symbol: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSDimension extends NSUnit implements INSSecureCoding {
  initWithSymbol_converter<T extends NSDimension>(symbol: NSString | string, converter: NSUnitConverter): T;
  static baseUnit(): NSDimension;

  converter(): NSUnitConverter;
  setConverter(converter: NSUnitConverter): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitAcceleration extends NSDimension implements INSSecureCoding {
  static metersPerSecondSquared(): NSUnitAcceleration;
  static setMetersPerSecondSquared(metersPerSecondSquared: NSUnitAcceleration): void;
  static gravity(): NSUnitAcceleration;
  static setGravity(gravity: NSUnitAcceleration): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitAngle extends NSDimension implements INSSecureCoding {
  static degrees(): NSUnitAngle;
  static setDegrees(degrees: NSUnitAngle): void;
  static arcMinutes(): NSUnitAngle;
  static setArcMinutes(arcMinutes: NSUnitAngle): void;
  static arcSeconds(): NSUnitAngle;
  static setArcSeconds(arcSeconds: NSUnitAngle): void;
  static radians(): NSUnitAngle;
  static setRadians(radians: NSUnitAngle): void;
  static gradians(): NSUnitAngle;
  static setGradians(gradians: NSUnitAngle): void;
  static revolutions(): NSUnitAngle;
  static setRevolutions(revolutions: NSUnitAngle): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitArea extends NSDimension implements INSSecureCoding {
  static squareMegameters(): NSUnitArea;
  static setSquareMegameters(squareMegameters: NSUnitArea): void;
  static squareKilometers(): NSUnitArea;
  static setSquareKilometers(squareKilometers: NSUnitArea): void;
  static squareMeters(): NSUnitArea;
  static setSquareMeters(squareMeters: NSUnitArea): void;
  static squareCentimeters(): NSUnitArea;
  static setSquareCentimeters(squareCentimeters: NSUnitArea): void;
  static squareMillimeters(): NSUnitArea;
  static setSquareMillimeters(squareMillimeters: NSUnitArea): void;
  static squareMicrometers(): NSUnitArea;
  static setSquareMicrometers(squareMicrometers: NSUnitArea): void;
  static squareNanometers(): NSUnitArea;
  static setSquareNanometers(squareNanometers: NSUnitArea): void;
  static squareInches(): NSUnitArea;
  static setSquareInches(squareInches: NSUnitArea): void;
  static squareFeet(): NSUnitArea;
  static setSquareFeet(squareFeet: NSUnitArea): void;
  static squareYards(): NSUnitArea;
  static setSquareYards(squareYards: NSUnitArea): void;
  static squareMiles(): NSUnitArea;
  static setSquareMiles(squareMiles: NSUnitArea): void;
  static acres(): NSUnitArea;
  static setAcres(acres: NSUnitArea): void;
  static ares(): NSUnitArea;
  static setAres(ares: NSUnitArea): void;
  static hectares(): NSUnitArea;
  static setHectares(hectares: NSUnitArea): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitConcentrationMass extends NSDimension implements INSSecureCoding {
  static millimolesPerLiterWithGramsPerMole(gramsPerMole: number): NSUnitConcentrationMass;

  static gramsPerLiter(): NSUnitConcentrationMass;
  static setGramsPerLiter(gramsPerLiter: NSUnitConcentrationMass): void;
  static milligramsPerDeciliter(): NSUnitConcentrationMass;
  static setMilligramsPerDeciliter(milligramsPerDeciliter: NSUnitConcentrationMass): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitDispersion extends NSDimension implements INSSecureCoding {
  static partsPerMillion(): NSUnitDispersion;
  static setPartsPerMillion(partsPerMillion: NSUnitDispersion): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitDuration extends NSDimension implements INSSecureCoding {
  static seconds(): NSUnitDuration;
  static setSeconds(seconds: NSUnitDuration): void;
  static minutes(): NSUnitDuration;
  static setMinutes(minutes: NSUnitDuration): void;
  static hours(): NSUnitDuration;
  static setHours(hours: NSUnitDuration): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitElectricCharge extends NSDimension implements INSSecureCoding {
  static coulombs(): NSUnitElectricCharge;
  static setCoulombs(coulombs: NSUnitElectricCharge): void;
  static megaampereHours(): NSUnitElectricCharge;
  static setMegaampereHours(megaampereHours: NSUnitElectricCharge): void;
  static kiloampereHours(): NSUnitElectricCharge;
  static setKiloampereHours(kiloampereHours: NSUnitElectricCharge): void;
  static ampereHours(): NSUnitElectricCharge;
  static setAmpereHours(ampereHours: NSUnitElectricCharge): void;
  static milliampereHours(): NSUnitElectricCharge;
  static setMilliampereHours(milliampereHours: NSUnitElectricCharge): void;
  static microampereHours(): NSUnitElectricCharge;
  static setMicroampereHours(microampereHours: NSUnitElectricCharge): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitElectricCurrent extends NSDimension implements INSSecureCoding {
  static megaamperes(): NSUnitElectricCurrent;
  static setMegaamperes(megaamperes: NSUnitElectricCurrent): void;
  static kiloamperes(): NSUnitElectricCurrent;
  static setKiloamperes(kiloamperes: NSUnitElectricCurrent): void;
  static amperes(): NSUnitElectricCurrent;
  static setAmperes(amperes: NSUnitElectricCurrent): void;
  static milliamperes(): NSUnitElectricCurrent;
  static setMilliamperes(milliamperes: NSUnitElectricCurrent): void;
  static microamperes(): NSUnitElectricCurrent;
  static setMicroamperes(microamperes: NSUnitElectricCurrent): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitElectricPotentialDifference extends NSDimension implements INSSecureCoding {
  static megavolts(): NSUnitElectricPotentialDifference;
  static setMegavolts(megavolts: NSUnitElectricPotentialDifference): void;
  static kilovolts(): NSUnitElectricPotentialDifference;
  static setKilovolts(kilovolts: NSUnitElectricPotentialDifference): void;
  static volts(): NSUnitElectricPotentialDifference;
  static setVolts(volts: NSUnitElectricPotentialDifference): void;
  static millivolts(): NSUnitElectricPotentialDifference;
  static setMillivolts(millivolts: NSUnitElectricPotentialDifference): void;
  static microvolts(): NSUnitElectricPotentialDifference;
  static setMicrovolts(microvolts: NSUnitElectricPotentialDifference): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitElectricResistance extends NSDimension implements INSSecureCoding {
  static megaohms(): NSUnitElectricResistance;
  static setMegaohms(megaohms: NSUnitElectricResistance): void;
  static kiloohms(): NSUnitElectricResistance;
  static setKiloohms(kiloohms: NSUnitElectricResistance): void;
  static ohms(): NSUnitElectricResistance;
  static setOhms(ohms: NSUnitElectricResistance): void;
  static milliohms(): NSUnitElectricResistance;
  static setMilliohms(milliohms: NSUnitElectricResistance): void;
  static microohms(): NSUnitElectricResistance;
  static setMicroohms(microohms: NSUnitElectricResistance): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitEnergy extends NSDimension implements INSSecureCoding {
  static kilojoules(): NSUnitEnergy;
  static setKilojoules(kilojoules: NSUnitEnergy): void;
  static joules(): NSUnitEnergy;
  static setJoules(joules: NSUnitEnergy): void;
  static kilocalories(): NSUnitEnergy;
  static setKilocalories(kilocalories: NSUnitEnergy): void;
  static calories(): NSUnitEnergy;
  static setCalories(calories: NSUnitEnergy): void;
  static kilowattHours(): NSUnitEnergy;
  static setKilowattHours(kilowattHours: NSUnitEnergy): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitFrequency extends NSDimension implements INSSecureCoding {
  static terahertz(): NSUnitFrequency;
  static setTerahertz(terahertz: NSUnitFrequency): void;
  static gigahertz(): NSUnitFrequency;
  static setGigahertz(gigahertz: NSUnitFrequency): void;
  static megahertz(): NSUnitFrequency;
  static setMegahertz(megahertz: NSUnitFrequency): void;
  static kilohertz(): NSUnitFrequency;
  static setKilohertz(kilohertz: NSUnitFrequency): void;
  static hertz(): NSUnitFrequency;
  static setHertz(hertz: NSUnitFrequency): void;
  static millihertz(): NSUnitFrequency;
  static setMillihertz(millihertz: NSUnitFrequency): void;
  static microhertz(): NSUnitFrequency;
  static setMicrohertz(microhertz: NSUnitFrequency): void;
  static nanohertz(): NSUnitFrequency;
  static setNanohertz(nanohertz: NSUnitFrequency): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitFuelEfficiency extends NSDimension implements INSSecureCoding {
  static litersPer100Kilometers(): NSUnitFuelEfficiency;
  static setLitersPer100Kilometers(litersPer100Kilometers: NSUnitFuelEfficiency): void;
  static milesPerImperialGallon(): NSUnitFuelEfficiency;
  static setMilesPerImperialGallon(milesPerImperialGallon: NSUnitFuelEfficiency): void;
  static milesPerGallon(): NSUnitFuelEfficiency;
  static setMilesPerGallon(milesPerGallon: NSUnitFuelEfficiency): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitLength extends NSDimension implements INSSecureCoding {
  static megameters(): NSUnitLength;
  static setMegameters(megameters: NSUnitLength): void;
  static kilometers(): NSUnitLength;
  static setKilometers(kilometers: NSUnitLength): void;
  static hectometers(): NSUnitLength;
  static setHectometers(hectometers: NSUnitLength): void;
  static decameters(): NSUnitLength;
  static setDecameters(decameters: NSUnitLength): void;
  static meters(): NSUnitLength;
  static setMeters(meters: NSUnitLength): void;
  static decimeters(): NSUnitLength;
  static setDecimeters(decimeters: NSUnitLength): void;
  static centimeters(): NSUnitLength;
  static setCentimeters(centimeters: NSUnitLength): void;
  static millimeters(): NSUnitLength;
  static setMillimeters(millimeters: NSUnitLength): void;
  static micrometers(): NSUnitLength;
  static setMicrometers(micrometers: NSUnitLength): void;
  static nanometers(): NSUnitLength;
  static setNanometers(nanometers: NSUnitLength): void;
  static picometers(): NSUnitLength;
  static setPicometers(picometers: NSUnitLength): void;
  static inches(): NSUnitLength;
  static setInches(inches: NSUnitLength): void;
  static feet(): NSUnitLength;
  static setFeet(feet: NSUnitLength): void;
  static yards(): NSUnitLength;
  static setYards(yards: NSUnitLength): void;
  static miles(): NSUnitLength;
  static setMiles(miles: NSUnitLength): void;
  static scandinavianMiles(): NSUnitLength;
  static setScandinavianMiles(scandinavianMiles: NSUnitLength): void;
  static lightyears(): NSUnitLength;
  static setLightyears(lightyears: NSUnitLength): void;
  static nauticalMiles(): NSUnitLength;
  static setNauticalMiles(nauticalMiles: NSUnitLength): void;
  static fathoms(): NSUnitLength;
  static setFathoms(fathoms: NSUnitLength): void;
  static furlongs(): NSUnitLength;
  static setFurlongs(furlongs: NSUnitLength): void;
  static astronomicalUnits(): NSUnitLength;
  static setAstronomicalUnits(astronomicalUnits: NSUnitLength): void;
  static parsecs(): NSUnitLength;
  static setParsecs(parsecs: NSUnitLength): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitIlluminance extends NSDimension implements INSSecureCoding {
  static lux(): NSUnitIlluminance;
  static setLux(lux: NSUnitIlluminance): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitMass extends NSDimension implements INSSecureCoding {
  static kilograms(): NSUnitMass;
  static setKilograms(kilograms: NSUnitMass): void;
  static grams(): NSUnitMass;
  static setGrams(grams: NSUnitMass): void;
  static decigrams(): NSUnitMass;
  static setDecigrams(decigrams: NSUnitMass): void;
  static centigrams(): NSUnitMass;
  static setCentigrams(centigrams: NSUnitMass): void;
  static milligrams(): NSUnitMass;
  static setMilligrams(milligrams: NSUnitMass): void;
  static micrograms(): NSUnitMass;
  static setMicrograms(micrograms: NSUnitMass): void;
  static nanograms(): NSUnitMass;
  static setNanograms(nanograms: NSUnitMass): void;
  static picograms(): NSUnitMass;
  static setPicograms(picograms: NSUnitMass): void;
  static ounces(): NSUnitMass;
  static setOunces(ounces: NSUnitMass): void;
  static poundsMass(): NSUnitMass;
  static setPoundsMass(poundsMass: NSUnitMass): void;
  static stones(): NSUnitMass;
  static setStones(stones: NSUnitMass): void;
  static metricTons(): NSUnitMass;
  static setMetricTons(metricTons: NSUnitMass): void;
  static shortTons(): NSUnitMass;
  static setShortTons(shortTons: NSUnitMass): void;
  static carats(): NSUnitMass;
  static setCarats(carats: NSUnitMass): void;
  static ouncesTroy(): NSUnitMass;
  static setOuncesTroy(ouncesTroy: NSUnitMass): void;
  static slugs(): NSUnitMass;
  static setSlugs(slugs: NSUnitMass): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitPower extends NSDimension implements INSSecureCoding {
  static terawatts(): NSUnitPower;
  static setTerawatts(terawatts: NSUnitPower): void;
  static gigawatts(): NSUnitPower;
  static setGigawatts(gigawatts: NSUnitPower): void;
  static megawatts(): NSUnitPower;
  static setMegawatts(megawatts: NSUnitPower): void;
  static kilowatts(): NSUnitPower;
  static setKilowatts(kilowatts: NSUnitPower): void;
  static watts(): NSUnitPower;
  static setWatts(watts: NSUnitPower): void;
  static milliwatts(): NSUnitPower;
  static setMilliwatts(milliwatts: NSUnitPower): void;
  static microwatts(): NSUnitPower;
  static setMicrowatts(microwatts: NSUnitPower): void;
  static nanowatts(): NSUnitPower;
  static setNanowatts(nanowatts: NSUnitPower): void;
  static picowatts(): NSUnitPower;
  static setPicowatts(picowatts: NSUnitPower): void;
  static femtowatts(): NSUnitPower;
  static setFemtowatts(femtowatts: NSUnitPower): void;
  static horsepower(): NSUnitPower;
  static setHorsepower(horsepower: NSUnitPower): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitPressure extends NSDimension implements INSSecureCoding {
  static newtonsPerMetersSquared(): NSUnitPressure;
  static setNewtonsPerMetersSquared(newtonsPerMetersSquared: NSUnitPressure): void;
  static gigapascals(): NSUnitPressure;
  static setGigapascals(gigapascals: NSUnitPressure): void;
  static megapascals(): NSUnitPressure;
  static setMegapascals(megapascals: NSUnitPressure): void;
  static kilopascals(): NSUnitPressure;
  static setKilopascals(kilopascals: NSUnitPressure): void;
  static hectopascals(): NSUnitPressure;
  static setHectopascals(hectopascals: NSUnitPressure): void;
  static inchesOfMercury(): NSUnitPressure;
  static setInchesOfMercury(inchesOfMercury: NSUnitPressure): void;
  static bars(): NSUnitPressure;
  static setBars(bars: NSUnitPressure): void;
  static millibars(): NSUnitPressure;
  static setMillibars(millibars: NSUnitPressure): void;
  static millimetersOfMercury(): NSUnitPressure;
  static setMillimetersOfMercury(millimetersOfMercury: NSUnitPressure): void;
  static poundsForcePerSquareInch(): NSUnitPressure;
  static setPoundsForcePerSquareInch(poundsForcePerSquareInch: NSUnitPressure): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitSpeed extends NSDimension implements INSSecureCoding {
  static metersPerSecond(): NSUnitSpeed;
  static setMetersPerSecond(metersPerSecond: NSUnitSpeed): void;
  static kilometersPerHour(): NSUnitSpeed;
  static setKilometersPerHour(kilometersPerHour: NSUnitSpeed): void;
  static milesPerHour(): NSUnitSpeed;
  static setMilesPerHour(milesPerHour: NSUnitSpeed): void;
  static knots(): NSUnitSpeed;
  static setKnots(knots: NSUnitSpeed): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitTemperature extends NSDimension implements INSSecureCoding {
  static kelvin(): NSUnitTemperature;
  static setKelvin(kelvin: NSUnitTemperature): void;
  static celsius(): NSUnitTemperature;
  static setCelsius(celsius: NSUnitTemperature): void;
  static fahrenheit(): NSUnitTemperature;
  static setFahrenheit(fahrenheit: NSUnitTemperature): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUnitVolume extends NSDimension implements INSSecureCoding {
  static megaliters(): NSUnitVolume;
  static setMegaliters(megaliters: NSUnitVolume): void;
  static kiloliters(): NSUnitVolume;
  static setKiloliters(kiloliters: NSUnitVolume): void;
  static liters(): NSUnitVolume;
  static setLiters(liters: NSUnitVolume): void;
  static deciliters(): NSUnitVolume;
  static setDeciliters(deciliters: NSUnitVolume): void;
  static centiliters(): NSUnitVolume;
  static setCentiliters(centiliters: NSUnitVolume): void;
  static milliliters(): NSUnitVolume;
  static setMilliliters(milliliters: NSUnitVolume): void;
  static cubicKilometers(): NSUnitVolume;
  static setCubicKilometers(cubicKilometers: NSUnitVolume): void;
  static cubicMeters(): NSUnitVolume;
  static setCubicMeters(cubicMeters: NSUnitVolume): void;
  static cubicDecimeters(): NSUnitVolume;
  static setCubicDecimeters(cubicDecimeters: NSUnitVolume): void;
  static cubicCentimeters(): NSUnitVolume;
  static setCubicCentimeters(cubicCentimeters: NSUnitVolume): void;
  static cubicMillimeters(): NSUnitVolume;
  static setCubicMillimeters(cubicMillimeters: NSUnitVolume): void;
  static cubicInches(): NSUnitVolume;
  static setCubicInches(cubicInches: NSUnitVolume): void;
  static cubicFeet(): NSUnitVolume;
  static setCubicFeet(cubicFeet: NSUnitVolume): void;
  static cubicYards(): NSUnitVolume;
  static setCubicYards(cubicYards: NSUnitVolume): void;
  static cubicMiles(): NSUnitVolume;
  static setCubicMiles(cubicMiles: NSUnitVolume): void;
  static acreFeet(): NSUnitVolume;
  static setAcreFeet(acreFeet: NSUnitVolume): void;
  static bushels(): NSUnitVolume;
  static setBushels(bushels: NSUnitVolume): void;
  static teaspoons(): NSUnitVolume;
  static setTeaspoons(teaspoons: NSUnitVolume): void;
  static tablespoons(): NSUnitVolume;
  static setTablespoons(tablespoons: NSUnitVolume): void;
  static fluidOunces(): NSUnitVolume;
  static setFluidOunces(fluidOunces: NSUnitVolume): void;
  static cups(): NSUnitVolume;
  static setCups(cups: NSUnitVolume): void;
  static pints(): NSUnitVolume;
  static setPints(pints: NSUnitVolume): void;
  static quarts(): NSUnitVolume;
  static setQuarts(quarts: NSUnitVolume): void;
  static gallons(): NSUnitVolume;
  static setGallons(gallons: NSUnitVolume): void;
  static imperialTeaspoons(): NSUnitVolume;
  static setImperialTeaspoons(imperialTeaspoons: NSUnitVolume): void;
  static imperialTablespoons(): NSUnitVolume;
  static setImperialTablespoons(imperialTablespoons: NSUnitVolume): void;
  static imperialFluidOunces(): NSUnitVolume;
  static setImperialFluidOunces(imperialFluidOunces: NSUnitVolume): void;
  static imperialPints(): NSUnitVolume;
  static setImperialPints(imperialPints: NSUnitVolume): void;
  static imperialQuarts(): NSUnitVolume;
  static setImperialQuarts(imperialQuarts: NSUnitVolume): void;
  static imperialGallons(): NSUnitVolume;
  static setImperialGallons(imperialGallons: NSUnitVolume): void;
  static metricCups(): NSUnitVolume;
  static setMetricCups(metricCups: NSUnitVolume): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSUserActivity extends NSObject {
  initWithActivityType<T extends NSUserActivity>(activityType: NSString | string): T;
  init<T extends NSUserActivity>(): T;
  addUserInfoEntriesFromDictionary(otherDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  becomeCurrent(): void;
  resignCurrent(): void;
  invalidate(): void;
  getContinuationStreamsWithCompletionHandler(completionHandler: Block): void;

  activityType(): NSString;
  setActivityType(activityType: NSString | string): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  requiredUserInfoKeys(): NSSet<any>;
  setRequiredUserInfoKeys(requiredUserInfoKeys: NSSet<any>): void;
  needsSave(): boolean;
  setNeedsSave(needsSave: boolean): void;
  webpageURL(): NSURL;
  setWebpageURL(webpageURL: NSURL): void;
  referrerURL(): NSURL;
  setReferrerURL(referrerURL: NSURL): void;
  expirationDate(): NSDate;
  setExpirationDate(expirationDate: NSDate): void;
  keywords(): NSSet<any>;
  setKeywords(keywords: NSSet<any>): void;
  supportsContinuationStreams(): boolean;
  setSupportsContinuationStreams(supportsContinuationStreams: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  eligibleForHandoff(): boolean;
  setEligibleForHandoff(eligibleForHandoff: boolean): void;
  eligibleForSearch(): boolean;
  setEligibleForSearch(eligibleForSearch: boolean): void;
  eligibleForPublicIndexing(): boolean;
  setEligibleForPublicIndexing(eligibleForPublicIndexing: boolean): void;
}

declare interface INSUserActivityDelegate {
  userActivityWillSave(userActivity: NSUserActivity): void;
  userActivityWasContinued(userActivity: NSUserActivity): void;
  userActivity_didReceiveInputStream_outputStream(userActivity: NSUserActivity, inputStream: NSInputStream, outputStream: NSOutputStream): void;
}

declare class NSUserDefaults extends NSObject {
  static resetStandardUserDefaults(): void;
  init<T extends NSUserDefaults>(): T;
  initWithSuiteName<T extends NSUserDefaults>(suitename: NSString | string | null): T;
  initWithUser<T extends NSUserDefaults>(username: NSString | string): T;
  objectForKey(defaultName: NSString | string): any;
  setObject_forKey(value: any | null, defaultName: NSString | string): void;
  removeObjectForKey(defaultName: NSString | string): void;
  stringForKey(defaultName: NSString | string): NSString;
  arrayForKey(defaultName: NSString | string): NSArray<any>;
  dictionaryForKey(defaultName: NSString | string): NSDictionary<any, any>;
  dataForKey(defaultName: NSString | string): NSData;
  stringArrayForKey(defaultName: NSString | string): NSArray<any>;
  integerForKey(defaultName: NSString | string): NSInteger;
  floatForKey(defaultName: NSString | string): number;
  doubleForKey(defaultName: NSString | string): number;
  boolForKey(defaultName: NSString | string): boolean;
  URLForKey(defaultName: NSString | string): NSURL;
  setInteger_forKey(value: NSInteger, defaultName: NSString | string): void;
  setFloat_forKey(value: number, defaultName: NSString | string): void;
  setDouble_forKey(value: number, defaultName: NSString | string): void;
  setBool_forKey(value: boolean, defaultName: NSString | string): void;
  setURL_forKey(url: NSURL | null, defaultName: NSString | string): void;
  registerDefaults(registrationDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  addSuiteNamed(suiteName: NSString | string): void;
  removeSuiteNamed(suiteName: NSString | string): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  volatileDomainForName(domainName: NSString | string): NSDictionary<any, any>;
  setVolatileDomain_forName(domain: NSDictionary<any, any> | {[key: string]: any}, domainName: NSString | string): void;
  removeVolatileDomainForName(domainName: NSString | string): void;
  persistentDomainNames(): NSArray<any>;
  persistentDomainForName(domainName: NSString | string): NSDictionary<any, any>;
  setPersistentDomain_forName(domain: NSDictionary<any, any> | {[key: string]: any}, domainName: NSString | string): void;
  removePersistentDomainForName(domainName: NSString | string): void;
  synchronize(): boolean;
  objectIsForcedForKey(key: NSString | string): boolean;
  objectIsForcedForKey_inDomain(key: NSString | string, domain: NSString | string): boolean;
  setColor_forKey(color: NSColor, key: NSString | string): void;
  colorForKey(key: NSString | string): NSColor;

  static standardUserDefaults(): NSUserDefaults;
  static setStandardUserDefaults(standardUserDefaults: NSUserDefaults): void;
  volatileDomainNames(): NSArray<any>;
  setVolatileDomainNames(volatileDomainNames: NSArray<any> | any[]): void;
}

declare class NSUserNotification extends NSObject implements INSCopying {
  init<T extends NSUserNotification>(): T;
  copyWithZone(zone: NSZone | null): any;

  title(): NSString;
  setTitle(title: NSString | string): void;
  subtitle(): NSString;
  setSubtitle(subtitle: NSString | string): void;
  informativeText(): NSString;
  setInformativeText(informativeText: NSString | string): void;
  actionButtonTitle(): NSString;
  setActionButtonTitle(actionButtonTitle: NSString | string): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  deliveryDate(): NSDate;
  setDeliveryDate(deliveryDate: NSDate): void;
  deliveryTimeZone(): NSTimeZone;
  setDeliveryTimeZone(deliveryTimeZone: NSTimeZone): void;
  deliveryRepeatInterval(): NSDateComponents;
  setDeliveryRepeatInterval(deliveryRepeatInterval: NSDateComponents): void;
  actualDeliveryDate(): NSDate;
  setActualDeliveryDate(actualDeliveryDate: NSDate): void;
  presented(): boolean;
  setPresented(presented: boolean): void;
  remote(): boolean;
  setRemote(remote: boolean): void;
  soundName(): NSString;
  setSoundName(soundName: NSString | string): void;
  hasActionButton(): boolean;
  setHasActionButton(hasActionButton: boolean): void;
  activationType(): NSUserNotificationActivationType;
  setActivationType(activationType: NSUserNotificationActivationType): void;
  otherButtonTitle(): NSString;
  setOtherButtonTitle(otherButtonTitle: NSString | string): void;
  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  contentImage(): NSImage;
  setContentImage(contentImage: NSImage): void;
  hasReplyButton(): boolean;
  setHasReplyButton(hasReplyButton: boolean): void;
  responsePlaceholder(): NSString;
  setResponsePlaceholder(responsePlaceholder: NSString | string): void;
  response(): NSAttributedString;
  setResponse(response: NSAttributedString): void;
  additionalActions(): NSArray<any>;
  setAdditionalActions(additionalActions: NSArray<any> | any[]): void;
  additionalActivationAction(): NSUserNotificationAction;
  setAdditionalActivationAction(additionalActivationAction: NSUserNotificationAction): void;
}

declare class NSUserNotificationAction extends NSObject implements INSCopying {
  static actionWithIdentifier_title(identifier: NSString | string | null, title: NSString | string | null): NSUserNotificationAction;
  copyWithZone(zone: NSZone | null): any;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
}

declare class NSUserNotificationCenter extends NSObject {
  scheduleNotification(notification: NSUserNotification): void;
  removeScheduledNotification(notification: NSUserNotification): void;
  deliverNotification(notification: NSUserNotification): void;
  removeDeliveredNotification(notification: NSUserNotification): void;
  removeAllDeliveredNotifications(): void;

  static defaultUserNotificationCenter(): NSUserNotificationCenter;
  static setDefaultUserNotificationCenter(defaultUserNotificationCenter: NSUserNotificationCenter): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  scheduledNotifications(): NSArray<any>;
  setScheduledNotifications(scheduledNotifications: NSArray<any> | any[]): void;
  deliveredNotifications(): NSArray<any>;
  setDeliveredNotifications(deliveredNotifications: NSArray<any> | any[]): void;
}

declare interface INSUserNotificationCenterDelegate {
  userNotificationCenter_didDeliverNotification(center: NSUserNotificationCenter, notification: NSUserNotification): void;
  userNotificationCenter_didActivateNotification(center: NSUserNotificationCenter, notification: NSUserNotification): void;
  userNotificationCenter_shouldPresentNotification(center: NSUserNotificationCenter, notification: NSUserNotification): boolean;
}

declare enum NSUserNotificationActivationType {
  NSUserNotificationActivationTypeNone = 0,
  NSUserNotificationActivationTypeContentsClicked = 1,
  NSUserNotificationActivationTypeActionButtonClicked = 2,
  NSUserNotificationActivationTypeReplied = 3,
  NSUserNotificationActivationTypeAdditionalActionClicked = 4,
}

declare class NSUserScriptTask extends NSObject {
  initWithURL_error<T extends NSUserScriptTask>(url: NSURL, error: NSError): T;
  executeWithCompletionHandler(handler: NSUserScriptTaskCompletionHandler | null): void;

  scriptURL(): NSURL;
  setScriptURL(scriptURL: NSURL): void;
}

declare class NSUserUnixTask extends NSUserScriptTask {
  executeWithArguments_completionHandler(arguments: NSArray<any> | any[] | null, handler: NSUserUnixTaskCompletionHandler | null): void;

  standardInput(): NSFileHandle;
  setStandardInput(standardInput: NSFileHandle): void;
  standardOutput(): NSFileHandle;
  setStandardOutput(standardOutput: NSFileHandle): void;
  standardError(): NSFileHandle;
  setStandardError(standardError: NSFileHandle): void;
}

declare class NSUserAppleScriptTask extends NSUserScriptTask {
  executeWithAppleEvent_completionHandler(event: NSAppleEventDescriptor | null, handler: NSUserAppleScriptTaskCompletionHandler | null): void;
}

declare class NSUserAutomatorTask extends NSUserScriptTask {
  executeWithInput_completionHandler(input: any | null, handler: NSUserAutomatorTaskCompletionHandler | null): void;

  variables(): NSDictionary<any, any>;
  setVariables(variables: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSValueTransformer extends NSObject {
  static setValueTransformer_forName(transformer: NSValueTransformer | null, name: NSValueTransformerName): void;
  static valueTransformerForName(name: NSValueTransformerName): NSValueTransformer;
  static valueTransformerNames(): NSArray<any>;
  static transformedValueClass(): any;
  static allowsReverseTransformation(): boolean;
  transformedValue(value: any | null): any;
  reverseTransformedValue(value: any | null): any;
}

declare type NSValueTransformerName = NSString

declare class NSXMLDTD extends NSXMLNode {
  // init<T extends NSXMLDTD>(): T;
  initWithContentsOfURL_options_error<T extends NSXMLDTD>(url: NSURL, mask: NSXMLNodeOptions, error: NSError): T;
  initWithData_options_error<T extends NSXMLDTD>(data: NSData, mask: NSXMLNodeOptions, error: NSError): T;
  insertChild_atIndex(child: NSXMLNode, index: NSUInteger): void;
  insertChildren_atIndex(children: NSArray<any> | any[], index: NSUInteger): void;
  removeChildAtIndex(index: NSUInteger): void;
  setChildren(children: NSArray<any> | any[] | null): void;
  addChild(child: NSXMLNode): void;
  replaceChildAtIndex_withNode(index: NSUInteger, node: NSXMLNode): void;
  entityDeclarationForName(name: NSString | string): NSXMLDTDNode;
  notationDeclarationForName(name: NSString | string): NSXMLDTDNode;
  elementDeclarationForName(name: NSString | string): NSXMLDTDNode;
  attributeDeclarationForName_elementName(name: NSString | string, elementName: NSString | string): NSXMLDTDNode;
  static predefinedEntityDeclarationForName(name: NSString | string): NSXMLDTDNode;

  publicID(): NSString;
  setPublicID(publicID: NSString | string): void;
  systemID(): NSString;
  setSystemID(systemID: NSString | string): void;
}

declare class NSXMLDTDNode extends NSXMLNode {
  initWithXMLString<T extends NSXMLDTDNode>(string: NSString | string): T;
  // initWithKind_options<T extends NSXMLDTDNode>(kind: NSXMLNodeKind, options: NSXMLNodeOptions): T;
  // init<T extends NSXMLDTDNode>(): T;

  DTDKind(): NSXMLDTDNodeKind;
  setDTDKind(DTDKind: NSXMLDTDNodeKind): void;
  external(): boolean;
  setExternal(external: boolean): void;
  publicID(): NSString;
  setPublicID(publicID: NSString | string): void;
  systemID(): NSString;
  setSystemID(systemID: NSString | string): void;
  notationName(): NSString;
  setNotationName(notationName: NSString | string): void;
}

declare enum NSXMLDTDNodeKind {
  NSXMLEntityGeneralKind = 1,
  NSXMLEntityParsedKind,
  NSXMLEntityUnparsedKind,
  NSXMLEntityParameterKind,
  NSXMLEntityPredefined,
  NSXMLAttributeCDATAKind,
  NSXMLAttributeIDKind,
  NSXMLAttributeIDRefKind,
  NSXMLAttributeIDRefsKind,
  NSXMLAttributeEntityKind,
  NSXMLAttributeEntitiesKind,
  NSXMLAttributeNMTokenKind,
  NSXMLAttributeNMTokensKind,
  NSXMLAttributeEnumerationKind,
  NSXMLAttributeNotationKind,
  NSXMLElementDeclarationUndefinedKind,
  NSXMLElementDeclarationEmptyKind,
  NSXMLElementDeclarationAnyKind,
  NSXMLElementDeclarationMixedKind,
  NSXMLElementDeclarationElementKind,
}

declare class NSXMLDocument extends NSXMLNode {
  // init<T extends NSXMLDocument>(): T;
  initWithXMLString_options_error<T extends NSXMLDocument>(string: NSString | string, mask: NSXMLNodeOptions, error: NSError): T;
  initWithContentsOfURL_options_error<T extends NSXMLDocument>(url: NSURL, mask: NSXMLNodeOptions, error: NSError): T;
  initWithData_options_error<T extends NSXMLDocument>(data: NSData, mask: NSXMLNodeOptions, error: NSError): T;
  initWithRootElement<T extends NSXMLDocument>(element: NSXMLElement | null): T;
  static replacementClassForClass(cls: any): any;
  setRootElement(root: NSXMLElement): void;
  rootElement(): NSXMLElement;
  insertChild_atIndex(child: NSXMLNode, index: NSUInteger): void;
  insertChildren_atIndex(children: NSArray<any> | any[], index: NSUInteger): void;
  removeChildAtIndex(index: NSUInteger): void;
  setChildren(children: NSArray<any> | any[] | null): void;
  addChild(child: NSXMLNode): void;
  replaceChildAtIndex_withNode(index: NSUInteger, node: NSXMLNode): void;
  XMLDataWithOptions(options: NSXMLNodeOptions): NSData;
  objectByApplyingXSLT_arguments_error(xslt: NSData, arguments: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): any;
  objectByApplyingXSLTString_arguments_error(xslt: NSString | string, arguments: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): any;
  objectByApplyingXSLTAtURL_arguments_error(xsltURL: NSURL, argument: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): any;
  validateAndReturnError(error: NSError): boolean;
  static SVGDocumentWithBezierPath(bezierPath: NSBezierPath): any;
  createSVGForBezierPath(bezierPath: NSBezierPath): any;
  bezierPathElement(path: NSBezierPath): NSXMLNode;
  data(): NSData;

  characterEncoding(): NSString;
  setCharacterEncoding(characterEncoding: NSString | string): void;
  version(): NSString;
  setVersion(version: NSString | string): void;
  standalone(): boolean;
  setStandalone(standalone: boolean): void;
  documentContentKind(): NSXMLDocumentContentKind;
  setDocumentContentKind(documentContentKind: NSXMLDocumentContentKind): void;
  MIMEType(): NSString;
  setMIMEType(MIMEType: NSString | string): void;
  DTD(): NSXMLDTD;
  setDTD(DTD: NSXMLDTD): void;
  XMLData(): NSData;
  setXMLData(XMLData: NSData): void;
}

declare enum NSXMLDocumentContentKind {
  NSXMLDocumentXMLKind = 0,
  NSXMLDocumentXHTMLKind,
  NSXMLDocumentHTMLKind,
  NSXMLDocumentTextKind,
}

declare class NSXMLElement extends NSXMLNode {
  initWithName<T extends NSXMLElement>(name: NSString | string): T;
  initWithName_URI<T extends NSXMLElement>(name: NSString | string, URI: NSString | string | null): T;
  initWithName_stringValue<T extends NSXMLElement>(name: NSString | string, string: NSString | string | null): T;
  initWithXMLString_error<T extends NSXMLElement>(string: NSString | string, error: NSError): T;
  // initWithKind_options<T extends NSXMLElement>(kind: NSXMLNodeKind, options: NSXMLNodeOptions): T;
  elementsForName(name: NSString | string): NSArray<any>;
  elementsForLocalName_URI(localName: NSString | string, URI: NSString | string | null): NSArray<any>;
  addAttribute(attribute: NSXMLNode): void;
  removeAttributeForName(name: NSString | string): void;
  setAttributesWithDictionary(attributes: NSDictionary<any, any> | {[key: string]: any}): void;
  attributeForName(name: NSString | string): NSXMLNode;
  attributeForLocalName_URI(localName: NSString | string, URI: NSString | string | null): NSXMLNode;
  addNamespace(aNamespace: NSXMLNode): void;
  removeNamespaceForPrefix(name: NSString | string): void;
  namespaceForPrefix(name: NSString | string): NSXMLNode;
  resolveNamespaceForName(name: NSString | string): NSXMLNode;
  resolvePrefixForNamespaceURI(namespaceURI: NSString | string): NSString;
  insertChild_atIndex(child: NSXMLNode, index: NSUInteger): void;
  insertChildren_atIndex(children: NSArray<any> | any[], index: NSUInteger): void;
  removeChildAtIndex(index: NSUInteger): void;
  setChildren(children: NSArray<any> | any[] | null): void;
  addChild(child: NSXMLNode): void;
  replaceChildAtIndex_withNode(index: NSUInteger, node: NSXMLNode): void;
  normalizeAdjacentTextNodesPreservingCDATA(preserve: boolean): void;
  setAttributesAsDictionary(attributes: NSDictionary<any, any> | {[key: string]: any}): void;
  gotAttributeWithName(name: NSString | string): boolean;
  doubleValueFromAttributeWithName(name: NSString | string): number;
  doubleValueFromAttributeWithName_scale(name: NSString | string, scale: CGFloat): number;
  doubleValueFromAttributeWithName_orDefault(name: NSString | string, def: number): number;
  doubleValueFromPercentageAttributeWithName(name: NSString | string): number;
  doubleValueFromPercentageAttributeWithName_orDefault(name: NSString | string, def: number): number;
  doubleValueFromAttributeWithName_alternate(name: NSString | string, alternate: NSString | string): number;
  doubleValueFromPercentageAttributeWithName_alternate(name: NSString | string, alternate: NSString | string): number;
  numberFromAttributeWithName(name: NSString | string): NSNumber;
  numberFromAttributeWithName_scale(name: NSString | string, scale: CGFloat): NSNumber;
  numbersFromAttributeWithName(name: NSString | string): NSArray<any>;
  numbersFromAttributeWithName_scale(name: NSString | string, scale: CGFloat): NSArray<any>;
  intValueFromAttributeWithName(name: NSString | string): NSInteger;
  rectValueFromAttributeWithName(name: NSString | string): NSRect;
  rectValue(): NSRect;
  rectValueWithXScale_yScale(xScale: CGFloat, yScale: CGFloat): NSRect;
  colorFromAttributeWithName(name: NSString | string): MSImmutableColor;
  stringFromAttributeWithName(name: NSString | string): NSString;
  stringFromAttributeWithName_orDefault(name: NSString | string, def: NSString | string): NSString;
  stringForHREFLink(): NSString;
  nodeOrParentNodeWithName(name: NSString | string): NSXMLNode;
  attributesWithStyleMergedDefaults(defaults: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  simplifyAttributesIgnoringElements_attributes(elementsToIgnore: NSArray<any> | any[], attributesToIgnore: NSArray<any> | any[]): NSArray<any>;
  urlLink(): NSString;
  localLink(): NSString;
  cssClassNamesWithBase(base: NSString | string): NSArray<any>;
  addAttributeWithName_stringValue(name: NSString | string, value: NSString | string): void;
  addAttributeWithName_pixelValue(name: NSString | string, value: CGFloat): void;
  addAttributeWithName_numberValue(name: NSString | string, value: CGFloat): void;
  addAttributeWithName_percentageValue(name: NSString | string, value: CGFloat): void;
  addAttributeWithName_percentageFractionalValue(name: NSString | string, value: CGFloat): void;

  attributes(): NSArray<any>;
  setAttributes(attributes: NSArray<any> | any[]): void;
  namespaces(): NSArray<any>;
  setNamespaces(namespaces: NSArray<any> | any[]): void;
}

declare class NSXMLNode extends NSObject implements INSCopying {
  init<T extends NSXMLNode>(): T;
  initWithKind<T extends NSXMLNode>(kind: NSXMLNodeKind): T;
  initWithKind_options<T extends NSXMLNode>(kind: NSXMLNodeKind, options: NSXMLNodeOptions): T;
  static document(): any;
  static documentWithRootElement(element: NSXMLElement): any;
  static elementWithName(name: NSString | string): any;
  static elementWithName_URI(name: NSString | string, URI: NSString | string): any;
  static elementWithName_stringValue(name: NSString | string, string: NSString | string): any;
  static elementWithName_children_attributes(name: NSString | string, children: NSArray<any> | any[] | null, attributes: NSArray<any> | any[] | null): any;
  static attributeWithName_stringValue(name: NSString | string, stringValue: NSString | string): any;
  static attributeWithName_URI_stringValue(name: NSString | string, URI: NSString | string, stringValue: NSString | string): any;
  static namespaceWithName_stringValue(name: NSString | string, stringValue: NSString | string): any;
  static processingInstructionWithName_stringValue(name: NSString | string, stringValue: NSString | string): any;
  static commentWithStringValue(stringValue: NSString | string): any;
  static textWithStringValue(stringValue: NSString | string): any;
  static DTDNodeWithXMLString(string: NSString | string): any;
  setStringValue_resolvingEntities(string: NSString | string, resolve: boolean): void;
  childAtIndex(index: NSUInteger): NSXMLNode;
  detach(): void;
  static localNameForName(name: NSString | string): NSString;
  static prefixForName(name: NSString | string): NSString;
  static predefinedNamespaceForPrefix(name: NSString | string): NSXMLNode;
  XMLStringWithOptions(options: NSXMLNodeOptions): NSString;
  canonicalXMLStringPreservingComments(comments: boolean): NSString;
  nodesForXPath_error(xpath: NSString | string, error: NSError): NSArray<any>;
  objectsForXQuery_constants_error(xquery: NSString | string, constants: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): NSArray<any>;
  objectsForXQuery_error(xquery: NSString | string, error: NSError): NSArray<any>;
  static doubleFromString_scale(string: NSString | string, scale: CGFloat): number;
  static numberFromString_scale(string: NSString | string, scale: CGFloat): NSNumber;
  static numbersFromString_scale(string: NSString | string, scale: CGFloat): NSArray<any>;
  doubleValueFromAttributeWithName(name: NSString | string): number;
  doubleValue(): number;
  doubleValueWithScale(scale: CGFloat): number;
  numberValue(): NSNumber;
  numberValueWithScale(scale: CGFloat): NSNumber;
  numberValues(): NSArray<any>;
  numberValuesWithScale(scale: CGFloat): NSArray<any>;
  integerValue(): NSInteger;
  rectValue(): NSRect;
  static attributeWithName_pixelValue(name: NSString | string, value: CGFloat): any;
  static attributeWithName_numberValue(name: NSString | string, value: CGFloat): any;
  static attributeWithName_percentageValue(name: NSString | string, value: CGFloat): any;
  static attributeWithName_percentageFractionalValue(name: NSString | string, value: CGFloat): any;
  simplifyAttributesIgnoringElements_attributes(elementsToIgnore: NSArray<any> | any[], attributesToIgnore: NSArray<any> | any[]): NSArray<any>;
  cssClassNamesWithBase(base: NSString | string): NSArray<any>;
  copyWithZone(zone: NSZone | null): any;

  kind(): NSXMLNodeKind;
  setKind(kind: NSXMLNodeKind): void;
  name(): NSString;
  setName(name: NSString | string): void;
  objectValue(): any;
  setObjectValue(objectValue: any): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  index(): NSUInteger;
  setIndex(index: NSUInteger): void;
  level(): NSUInteger;
  setLevel(level: NSUInteger): void;
  rootDocument(): NSXMLDocument;
  setRootDocument(rootDocument: NSXMLDocument): void;
  parent(): NSXMLNode;
  setParent(parent: NSXMLNode): void;
  childCount(): NSUInteger;
  setChildCount(childCount: NSUInteger): void;
  children(): NSArray<any>;
  setChildren(children: NSArray<any> | any[]): void;
  previousSibling(): NSXMLNode;
  setPreviousSibling(previousSibling: NSXMLNode): void;
  nextSibling(): NSXMLNode;
  setNextSibling(nextSibling: NSXMLNode): void;
  previousNode(): NSXMLNode;
  setPreviousNode(previousNode: NSXMLNode): void;
  nextNode(): NSXMLNode;
  setNextNode(nextNode: NSXMLNode): void;
  XPath(): NSString;
  setXPath(XPath: NSString | string): void;
  localName(): NSString;
  setLocalName(localName: NSString | string): void;
  prefix(): NSString;
  setPrefix(prefix: NSString | string): void;
  URI(): NSString;
  setURI(URI: NSString | string): void;
  description(): NSString;
  setDescription(description: NSString | string): void;
  XMLString(): NSString;
  setXMLString(XMLString: NSString | string): void;
}

declare enum NSXMLNodeKind {
  NSXMLInvalidKind = 0,
  NSXMLDocumentKind,
  NSXMLElementKind,
  NSXMLAttributeKind,
  NSXMLNamespaceKind,
  NSXMLProcessingInstructionKind,
  NSXMLCommentKind,
  NSXMLTextKind,
  NSXMLDTDKind,
  NSXMLEntityDeclarationKind,
  NSXMLAttributeDeclarationKind,
  NSXMLElementDeclarationKind,
  NSXMLNotationDeclarationKind,
}

declare enum NSXMLNodeOptions {
  NSXMLNodeOptionsNone = 0,
  NSXMLNodeIsCDATA = 1 << 0,
  NSXMLNodeExpandEmptyElement = 1 << 1,
  NSXMLNodeCompactEmptyElement = 1 << 2,
  NSXMLNodeUseSingleQuotes = 1 << 3,
  NSXMLNodeUseDoubleQuotes = 1 << 4,
  NSXMLNodeNeverEscapeContents = 1 << 5,
  NSXMLDocumentTidyHTML = 1 << 9,
  NSXMLDocumentTidyXML = 1 << 10,
  NSXMLDocumentValidate = 1 << 13,
  NSXMLNodeLoadExternalEntitiesAlways = 1 << 14,
  NSXMLNodeLoadExternalEntitiesSameOriginOnly = 1 << 15,
  NSXMLNodeLoadExternalEntitiesNever = 1 << 19,
  NSXMLDocumentXInclude = 1 << 16,
  NSXMLNodePrettyPrint = 1 << 17,
  NSXMLDocumentIncludeContentTypeDeclaration = 1 << 18,
  NSXMLNodePreserveNamespaceOrder = 1 << 20,
  NSXMLNodePreserveAttributeOrder = 1 << 21,
  NSXMLNodePreserveEntities = 1 << 22,
  NSXMLNodePreservePrefixes = 1 << 23,
  NSXMLNodePreserveCDATA = 1 << 24,
  NSXMLNodePreserveWhitespace = 1 << 25,
  NSXMLNodePreserveDTD = 1 << 26,
  NSXMLNodePreserveCharacterReferences = 1 << 27,
  NSXMLNodePromoteSignificantWhitespace = 1 << 28,
  NSXMLNodePreserveEmptyElements,
  NSXMLNodePreserveQuotes,
  NSXMLNodePreserveAll,
}

declare class NSXMLParser extends NSObject {
  initWithContentsOfURL<T extends NSXMLParser>(url: NSURL): T;
  initWithData<T extends NSXMLParser>(data: NSData): T;
  initWithStream<T extends NSXMLParser>(stream: NSInputStream): T;
  parse(): boolean;
  abortParsing(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  shouldProcessNamespaces(): boolean;
  setShouldProcessNamespaces(shouldProcessNamespaces: boolean): void;
  shouldReportNamespacePrefixes(): boolean;
  setShouldReportNamespacePrefixes(shouldReportNamespacePrefixes: boolean): void;
  externalEntityResolvingPolicy(): NSXMLParserExternalEntityResolvingPolicy;
  setExternalEntityResolvingPolicy(externalEntityResolvingPolicy: NSXMLParserExternalEntityResolvingPolicy): void;
  allowedExternalEntityURLs(): NSSet<any>;
  setAllowedExternalEntityURLs(allowedExternalEntityURLs: NSSet<any>): void;
  parserError(): NSError;
  setParserError(parserError: NSError): void;
  shouldResolveExternalEntities(): boolean;
  setShouldResolveExternalEntities(shouldResolveExternalEntities: boolean): void;
  publicID(): NSString;
  setPublicID(publicID: NSString | string): void;
  systemID(): NSString;
  setSystemID(systemID: NSString | string): void;
  lineNumber(): NSInteger;
  setLineNumber(lineNumber: NSInteger): void;
  columnNumber(): NSInteger;
  setColumnNumber(columnNumber: NSInteger): void;
}

declare interface INSXMLParserDelegate {
  parserDidStartDocument(parser: NSXMLParser): void;
  parserDidEndDocument(parser: NSXMLParser): void;
  parser_foundNotationDeclarationWithName_publicID_systemID(parser: NSXMLParser, name: NSString | string, publicID: NSString | string | null, systemID: NSString | string | null): void;
  parser_foundUnparsedEntityDeclarationWithName_publicID_systemID_notationName(parser: NSXMLParser, name: NSString | string, publicID: NSString | string | null, systemID: NSString | string | null, notationName: NSString | string | null): void;
  parser_foundAttributeDeclarationWithName_forElement_type_defaultValue(parser: NSXMLParser, attributeName: NSString | string, elementName: NSString | string, type: NSString | string | null, defaultValue: NSString | string | null): void;
  parser_foundElementDeclarationWithName_model(parser: NSXMLParser, elementName: NSString | string, model: NSString | string): void;
  parser_foundInternalEntityDeclarationWithName_value(parser: NSXMLParser, name: NSString | string, value: NSString | string | null): void;
  parser_foundExternalEntityDeclarationWithName_publicID_systemID(parser: NSXMLParser, name: NSString | string, publicID: NSString | string | null, systemID: NSString | string | null): void;
  parser_didStartElement_namespaceURI_qualifiedName_attributes(parser: NSXMLParser, elementName: NSString | string, namespaceURI: NSString | string | null, qName: NSString | string | null, attributeDict: NSDictionary<any, any> | {[key: string]: any}): void;
  parser_didEndElement_namespaceURI_qualifiedName(parser: NSXMLParser, elementName: NSString | string, namespaceURI: NSString | string | null, qName: NSString | string | null): void;
  parser_didStartMappingPrefix_toURI(parser: NSXMLParser, prefix: NSString | string, namespaceURI: NSString | string): void;
  parser_didEndMappingPrefix(parser: NSXMLParser, prefix: NSString | string): void;
  parser_foundCharacters(parser: NSXMLParser, string: NSString | string): void;
  parser_foundIgnorableWhitespace(parser: NSXMLParser, whitespaceString: NSString | string): void;
  parser_foundProcessingInstructionWithTarget_data(parser: NSXMLParser, target: NSString | string, data: NSString | string | null): void;
  parser_foundComment(parser: NSXMLParser, comment: NSString | string): void;
  parser_foundCDATA(parser: NSXMLParser, CDATABlock: NSData): void;
  parser_resolveExternalEntityName_systemID(parser: NSXMLParser, name: NSString | string, systemID: NSString | string | null): NSData;
  parser_parseErrorOccurred(parser: NSXMLParser, parseError: NSError): void;
  parser_validationErrorOccurred(parser: NSXMLParser, validationError: NSError): void;
}

declare enum NSXMLParserExternalEntityResolvingPolicy {
  NSXMLParserResolveExternalEntitiesNever = 0,
  NSXMLParserResolveExternalEntitiesNoNetwork,
  NSXMLParserResolveExternalEntitiesSameOriginOnly,
  NSXMLParserResolveExternalEntitiesAlways,
}

declare enum NSXMLParserError {
  NSXMLParserInternalError = 1,
  NSXMLParserOutOfMemoryError = 2,
  NSXMLParserDocumentStartError = 3,
  NSXMLParserEmptyDocumentError = 4,
  NSXMLParserPrematureDocumentEndError = 5,
  NSXMLParserInvalidHexCharacterRefError = 6,
  NSXMLParserInvalidDecimalCharacterRefError = 7,
  NSXMLParserInvalidCharacterRefError = 8,
  NSXMLParserInvalidCharacterError = 9,
  NSXMLParserCharacterRefAtEOFError = 10,
  NSXMLParserCharacterRefInPrologError = 11,
  NSXMLParserCharacterRefInEpilogError = 12,
  NSXMLParserCharacterRefInDTDError = 13,
  NSXMLParserEntityRefAtEOFError = 14,
  NSXMLParserEntityRefInPrologError = 15,
  NSXMLParserEntityRefInEpilogError = 16,
  NSXMLParserEntityRefInDTDError = 17,
  NSXMLParserParsedEntityRefAtEOFError = 18,
  NSXMLParserParsedEntityRefInPrologError = 19,
  NSXMLParserParsedEntityRefInEpilogError = 20,
  NSXMLParserParsedEntityRefInInternalSubsetError = 21,
  NSXMLParserEntityReferenceWithoutNameError = 22,
  NSXMLParserEntityReferenceMissingSemiError = 23,
  NSXMLParserParsedEntityRefNoNameError = 24,
  NSXMLParserParsedEntityRefMissingSemiError = 25,
  NSXMLParserUndeclaredEntityError = 26,
  NSXMLParserUnparsedEntityError = 28,
  NSXMLParserEntityIsExternalError = 29,
  NSXMLParserEntityIsParameterError = 30,
  NSXMLParserUnknownEncodingError = 31,
  NSXMLParserEncodingNotSupportedError = 32,
  NSXMLParserStringNotStartedError = 33,
  NSXMLParserStringNotClosedError = 34,
  NSXMLParserNamespaceDeclarationError = 35,
  NSXMLParserEntityNotStartedError = 36,
  NSXMLParserEntityNotFinishedError = 37,
  NSXMLParserLessThanSymbolInAttributeError = 38,
  NSXMLParserAttributeNotStartedError = 39,
  NSXMLParserAttributeNotFinishedError = 40,
  NSXMLParserAttributeHasNoValueError = 41,
  NSXMLParserAttributeRedefinedError = 42,
  NSXMLParserLiteralNotStartedError = 43,
  NSXMLParserLiteralNotFinishedError = 44,
  NSXMLParserCommentNotFinishedError = 45,
  NSXMLParserProcessingInstructionNotStartedError = 46,
  NSXMLParserProcessingInstructionNotFinishedError = 47,
  NSXMLParserNotationNotStartedError = 48,
  NSXMLParserNotationNotFinishedError = 49,
  NSXMLParserAttributeListNotStartedError = 50,
  NSXMLParserAttributeListNotFinishedError = 51,
  NSXMLParserMixedContentDeclNotStartedError = 52,
  NSXMLParserMixedContentDeclNotFinishedError = 53,
  NSXMLParserElementContentDeclNotStartedError = 54,
  NSXMLParserElementContentDeclNotFinishedError = 55,
  NSXMLParserXMLDeclNotStartedError = 56,
  NSXMLParserXMLDeclNotFinishedError = 57,
  NSXMLParserConditionalSectionNotStartedError = 58,
  NSXMLParserConditionalSectionNotFinishedError = 59,
  NSXMLParserExternalSubsetNotFinishedError = 60,
  NSXMLParserDOCTYPEDeclNotFinishedError = 61,
  NSXMLParserMisplacedCDATAEndStringError = 62,
  NSXMLParserCDATANotFinishedError = 63,
  NSXMLParserMisplacedXMLDeclarationError = 64,
  NSXMLParserSpaceRequiredError = 65,
  NSXMLParserSeparatorRequiredError = 66,
  NSXMLParserNMTOKENRequiredError = 67,
  NSXMLParserNAMERequiredError = 68,
  NSXMLParserPCDATARequiredError = 69,
  NSXMLParserURIRequiredError = 70,
  NSXMLParserPublicIdentifierRequiredError = 71,
  NSXMLParserLTRequiredError = 72,
  NSXMLParserGTRequiredError = 73,
  NSXMLParserLTSlashRequiredError = 74,
  NSXMLParserEqualExpectedError = 75,
  NSXMLParserTagNameMismatchError = 76,
  NSXMLParserUnfinishedTagError = 77,
  NSXMLParserStandaloneValueError = 78,
  NSXMLParserInvalidEncodingNameError = 79,
  NSXMLParserCommentContainsDoubleHyphenError = 80,
  NSXMLParserInvalidEncodingError = 81,
  NSXMLParserExternalStandaloneEntityError = 82,
  NSXMLParserInvalidConditionalSectionError = 83,
  NSXMLParserEntityValueRequiredError = 84,
  NSXMLParserNotWellBalancedError = 85,
  NSXMLParserExtraContentError = 86,
  NSXMLParserInvalidCharacterInEntityError = 87,
  NSXMLParserParsedEntityRefInInternalError = 88,
  NSXMLParserEntityRefLoopError = 89,
  NSXMLParserEntityBoundaryError = 90,
  NSXMLParserInvalidURIError = 91,
  NSXMLParserURIFragmentError = 92,
  NSXMLParserNoDTDError = 94,
  NSXMLParserDelegateAbortedParseError = 512,
}

declare class NSXPCListener extends NSObject {
  static serviceListener(): NSXPCListener;
  static anonymousListener(): NSXPCListener;
  resume(): void;
  suspend(): void;
  invalidate(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  endpoint(): NSXPCListenerEndpoint;
  setEndpoint(endpoint: NSXPCListenerEndpoint): void;
}

declare class NSXPCInterface extends NSObject {
  static interfaceWithProtocol(protocol: Protocol): NSXPCInterface;
  setClasses_forSelector_argumentIndex_ofReply(classes: NSSet<any>, sel: string, arg: NSUInteger, ofReply: boolean): void;
  classesForSelector_argumentIndex_ofReply(sel: string, arg: NSUInteger, ofReply: boolean): NSSet<any>;
  setInterface_forSelector_argumentIndex_ofReply(ifc: NSXPCInterface, sel: string, arg: NSUInteger, ofReply: boolean): void;
  interfaceForSelector_argumentIndex_ofReply(sel: string, arg: NSUInteger, ofReply: boolean): NSXPCInterface;

  protocol(): Protocol;
  setProtocol(protocol: Protocol): void;
}

declare class NSXPCListenerEndpoint extends NSObject implements INSSecureCoding {
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSXPCConnectionOptions {
  NSXPCConnectionPrivileged,
}

declare type NSZone = any

declare class NSATSTypesetter extends NSTypesetter {
  lineFragmentRectForProposedRect_remainingRect(proposedRect: NSRect, remainingRect: NSRectPointer): NSRect;
  substituteFontForFont(originalFont: NSFont): NSFont;
  textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: CGFloat, direction: NSWritingDirection, maxLocation: CGFloat): NSTextTab;
  setParagraphGlyphRange_separatorGlyphRange(paragraphRange: NSRange, paragraphSeparatorRange: NSRange): void;
  layoutParagraphAtPoint(lineFragmentOrigin: NSPoint): NSUInteger;
  lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  setHardInvalidation_forGlyphRange(flag: boolean, glyphRange: NSRange): void;
  getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: NSRect, lineFragmentUsedRect: NSRect, paragraphSeparatorGlyphRange: NSRange, lineOrigin: NSPoint): void;
  willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: NSRect, glyphRange: NSRange, usedRect: NSRect, baselineOffset: CGFloat): void;
  shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: NSUInteger): boolean;
  shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: NSUInteger): boolean;
  hyphenationFactorForGlyphAtIndex(glyphIndex: NSUInteger): number;
  hyphenCharacterForGlyphAtIndex(glyphIndex: NSUInteger): string;
  boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: NSUInteger, textContainer: NSTextContainer, proposedRect: NSRect, glyphPosition: NSPoint, charIndex: NSUInteger): NSRect;
  getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits(glyphsRange: NSRange, glyphBuffer: NSGlyph, charIndexBuffer: NSUInteger, inscribeBuffer: NSGlyphInscription, elasticBuffer: boolean): NSUInteger;

  static sharedTypesetter(): NSATSTypesetter;
  static setSharedTypesetter(sharedTypesetter: NSATSTypesetter): void;
  usesFontLeading(): boolean;
  setUsesFontLeading(usesFontLeading: boolean): void;
  typesetterBehavior(): NSTypesetterBehavior;
  setTypesetterBehavior(typesetterBehavior: NSTypesetterBehavior): void;
  hyphenationFactor(): number;
  setHyphenationFactor(hyphenationFactor: number): void;
  lineFragmentPadding(): CGFloat;
  setLineFragmentPadding(lineFragmentPadding: CGFloat): void;
  bidiProcessingEnabled(): boolean;
  setBidiProcessingEnabled(bidiProcessingEnabled: boolean): void;
  attributedString(): NSAttributedString;
  setAttributedString(attributedString: NSAttributedString): void;
  paragraphGlyphRange(): NSRange;
  setParagraphGlyphRange(paragraphGlyphRange: NSRange): void;
  paragraphSeparatorGlyphRange(): NSRange;
  setParagraphSeparatorGlyphRange(paragraphSeparatorGlyphRange: NSRange): void;
  layoutManager(): NSLayoutManager;
  setLayoutManager(layoutManager: NSLayoutManager): void;
  currentTextContainer(): NSTextContainer;
  setCurrentTextContainer(currentTextContainer: NSTextContainer): void;
}

declare class NSWorkspace extends NSObject {
  openFile(fullPath: NSString | string): boolean;
  openFile_withApplication(fullPath: NSString | string, appName: NSString | string | null): boolean;
  openFile_withApplication_andDeactivate(fullPath: NSString | string, appName: NSString | string | null, flag: boolean): boolean;
  openURL(url: NSURL): boolean;
  launchApplication(appName: NSString | string): boolean;
  launchApplicationAtURL_options_configuration_error(url: NSURL, options: NSWorkspaceLaunchOptions, configuration: NSDictionary<any, any> | {[key: string]: any}, error: NSError): NSRunningApplication;
  openURL_options_configuration_error(url: NSURL, options: NSWorkspaceLaunchOptions, configuration: NSDictionary<any, any> | {[key: string]: any}, error: NSError): NSRunningApplication;
  openURLs_withApplicationAtURL_options_configuration_error(urls: NSArray<any> | any[], applicationURL: NSURL, options: NSWorkspaceLaunchOptions, configuration: NSDictionary<any, any> | {[key: string]: any}, error: NSError): NSRunningApplication;
  launchApplication_showIcon_autolaunch(appName: NSString | string, showIcon: boolean, autolaunch: boolean): boolean;
  fullPathForApplication(appName: NSString | string): NSString;
  selectFile_inFileViewerRootedAtPath(fullPath: NSString | string | null, rootFullPath: NSString | string): boolean;
  activateFileViewerSelectingURLs(fileURLs: NSArray<any> | any[]): void;
  showSearchResultsForQueryString(queryString: NSString | string): boolean;
  noteFileSystemChanged(path: NSString | string): void;
  getInfoForFile_application_type(fullPath: NSString | string, appName: NSString | string, type: NSString | string): boolean;
  isFilePackageAtPath(fullPath: NSString | string): boolean;
  iconForFile(fullPath: NSString | string): NSImage;
  iconForFiles(fullPaths: NSArray<any> | any[]): NSImage;
  iconForFileType(fileType: NSString | string): NSImage;
  setIcon_forFile_options(image: NSImage | null, fullPath: NSString | string, options: NSWorkspaceIconCreationOptions): boolean;
  recycleURLs_completionHandler(URLs: NSArray<any> | any[], handler: Block): void;
  duplicateURLs_completionHandler(URLs: NSArray<any> | any[], handler: Block): void;
  getFileSystemInfoForPath_isRemovable_isWritable_isUnmountable_description_type(fullPath: NSString | string, removableFlag: boolean | null, writableFlag: boolean | null, unmountableFlag: boolean | null, description: NSString | string, fileSystemType: NSString | string): boolean;
  unmountAndEjectDeviceAtPath(path: NSString | string): boolean;
  unmountAndEjectDeviceAtURL_error(url: NSURL, error: NSError): boolean;
  extendPowerOffBy(requested: NSInteger): NSInteger;
  hideOtherApplications(): void;
  URLForApplicationWithBundleIdentifier(bundleIdentifier: NSString | string): NSURL;
  URLForApplicationToOpenURL(url: NSURL): NSURL;
  absolutePathForAppBundleWithIdentifier(bundleIdentifier: NSString | string): NSString;
  launchAppWithBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifier(bundleIdentifier: NSString | string, options: NSWorkspaceLaunchOptions, descriptor: NSAppleEventDescriptor | null, identifier: NSNumber | number): boolean;
  openURLs_withAppBundleIdentifier_options_additionalEventParamDescriptor_launchIdentifiers(urls: NSArray<any> | any[], bundleIdentifier: NSString | string | null, options: NSWorkspaceLaunchOptions, descriptor: NSAppleEventDescriptor | null, identifiers: NSArray<any> | any[]): boolean;
  typeOfFile_error(absoluteFilePath: NSString | string, outError: NSError): NSString;
  localizedDescriptionForType(typeName: NSString | string): NSString;
  preferredFilenameExtensionForType(typeName: NSString | string): NSString;
  filenameExtension_isValidForType(filenameExtension: NSString | string, typeName: NSString | string): boolean;
  type_conformsToType(firstTypeName: NSString | string, secondTypeName: NSString | string): boolean;
  setDesktopImageURL_forScreen_options_error(url: NSURL, screen: NSScreen, options: NSDictionary<any, any> | {[key: string]: any}, error: NSError): boolean;
  desktopImageURLForScreen(screen: NSScreen): NSURL;
  desktopImageOptionsForScreen(screen: NSScreen): NSDictionary<any, any>;
  openTempFile(fullPath: NSString | string): boolean;
  findApplications(): void;
  noteUserDefaultsChanged(): void;
  slideImage_from_to(image: NSImage, fromPoint: NSPoint, toPoint: NSPoint): void;
  checkForRemovableMedia(): void;
  noteFileSystemChanged(): void;
  fileSystemChanged(): boolean;
  userDefaultsChanged(): boolean;
  mountNewRemovableMedia(): NSArray<any>;
  activeApplication(): NSDictionary<any, any>;
  mountedLocalVolumePaths(): NSArray<any>;
  mountedRemovableMedia(): NSArray<any>;
  launchedApplications(): NSArray<any>;
  openFile_fromImage_at_inView(fullPath: NSString | string, image: NSImage | null, point: NSPoint, view: NSView | null): boolean;
  performFileOperation_source_destination_files_tag(operation: NSWorkspaceFileOperationName, source: NSString | string, destination: NSString | string, files: NSArray<any> | any[], tag: NSInteger | null): boolean;
  applicationSupportDirectory(): NSString;
  setApplicationSupportDirectory(path: NSString | string): void;
  applicationSupportDirectoryWithSubDirectory_createIfNeeded(directoryName: NSString | string, create: boolean): NSString;
  sharedApplicationSupportDirectory(): NSString;
  openCloudURLByAuthenticating(url: NSURL): void;

  accessibilityDisplayShouldIncreaseContrast(): boolean;
  setAccessibilityDisplayShouldIncreaseContrast(accessibilityDisplayShouldIncreaseContrast: boolean): void;
  accessibilityDisplayShouldDifferentiateWithoutColor(): boolean;
  setAccessibilityDisplayShouldDifferentiateWithoutColor(accessibilityDisplayShouldDifferentiateWithoutColor: boolean): void;
  accessibilityDisplayShouldReduceTransparency(): boolean;
  setAccessibilityDisplayShouldReduceTransparency(accessibilityDisplayShouldReduceTransparency: boolean): void;
  accessibilityDisplayShouldReduceMotion(): boolean;
  setAccessibilityDisplayShouldReduceMotion(accessibilityDisplayShouldReduceMotion: boolean): void;
  accessibilityDisplayShouldInvertColors(): boolean;
  setAccessibilityDisplayShouldInvertColors(accessibilityDisplayShouldInvertColors: boolean): void;
  voiceOverEnabled(): boolean;
  setVoiceOverEnabled(voiceOverEnabled: boolean): void;
  switchControlEnabled(): boolean;
  setSwitchControlEnabled(switchControlEnabled: boolean): void;
  runningApplications(): NSArray<any>;
  setRunningApplications(runningApplications: NSArray<any> | any[]): void;
  static sharedWorkspace(): NSWorkspace;
  static setSharedWorkspace(sharedWorkspace: NSWorkspace): void;
  notificationCenter(): NSNotificationCenter;
  setNotificationCenter(notificationCenter: NSNotificationCenter): void;
  fileLabels(): NSArray<any>;
  setFileLabels(fileLabels: NSArray<any> | any[]): void;
  fileLabelColors(): NSArray<any>;
  setFileLabelColors(fileLabelColors: NSArray<any> | any[]): void;
  frontmostApplication(): NSRunningApplication;
  setFrontmostApplication(frontmostApplication: NSRunningApplication): void;
  menuBarOwningApplication(): NSRunningApplication;
  setMenuBarOwningApplication(menuBarOwningApplication: NSRunningApplication): void;
}

declare type NSAccessibilityAttributeName = NSString

declare type NSAccessibilityParameterizedAttributeName = NSString

declare type NSAccessibilityAnnotationAttributeKey = NSString

declare type NSAccessibilityFontAttributeKey = NSString

declare type NSAccessibilityOrientationValue = NSString

declare type NSAccessibilitySortDirectionValue = NSString

declare type NSAccessibilityRulerMarkerTypeValue = NSString

declare type NSAccessibilityRulerUnitValue = NSString

declare type NSAccessibilityActionName = NSString

declare type NSAccessibilityNotificationName = NSString

declare type NSAccessibilityRole = NSString

declare type NSAccessibilitySubrole = NSString

declare type NSAccessibilityNotificationUserInfoKey = NSString

declare type NSAccessibilityLoadingToken = any

declare enum NSAccessibilityAnnotationPosition {
  NSAccessibilityAnnotationPositionFullRange,
  NSAccessibilityAnnotationPositionStart,
  NSAccessibilityAnnotationPositionEnd,
}

declare enum NSAccessibilityOrientation {
  NSAccessibilityOrientationUnknown = 0,
  NSAccessibilityOrientationVertical = 1,
  NSAccessibilityOrientationHorizontal = 2,
}

declare enum NSAccessibilitySortDirection {
  NSAccessibilitySortDirectionUnknown = 0,
  NSAccessibilitySortDirectionAscending = 1,
  NSAccessibilitySortDirectionDescending = 2,
}

declare enum NSAccessibilityRulerMarkerType {
  NSAccessibilityRulerMarkerTypeUnknown = 0,
  NSAccessibilityRulerMarkerTypeTabStopLeft = 1,
  NSAccessibilityRulerMarkerTypeTabStopRight = 2,
  NSAccessibilityRulerMarkerTypeTabStopCenter = 3,
  NSAccessibilityRulerMarkerTypeTabStopDecimal = 4,
  NSAccessibilityRulerMarkerTypeIndentHead = 5,
  NSAccessibilityRulerMarkerTypeIndentTail = 6,
  NSAccessibilityRulerMarkerTypeIndentFirstLine = 7,
}

declare enum NSAccessibilityUnits {
  NSAccessibilityUnitsUnknown = 0,
  NSAccessibilityUnitsInches = 1,
  NSAccessibilityUnitsCentimeters = 2,
  NSAccessibilityUnitsPoints = 3,
  NSAccessibilityUnitsPicas = 4,
}

declare enum NSAccessibilityPriorityLevel {
  NSAccessibilityPriorityLow = 10,
  NSAccessibilityPriorityMedium = 50,
  NSAccessibilityPriorityHigh = 90,
}

declare class NSAccessibilityCustomAction extends NSObject {
  initWithName_handler<T extends NSAccessibilityCustomAction>(name: NSString | string, handler: Block): T;
  initWithName_target_selector<T extends NSAccessibilityCustomAction>(name: NSString | string, target: any, selector: string): T;

  name(): NSString;
  setName(name: NSString | string): void;
  target(): any;
  setTarget(target: any): void;
  selector(): string;
  setSelector(selector: string): void;
}

declare class NSAccessibilityCustomRotor extends NSObject {
  initWithLabel_itemSearchDelegate<T extends NSAccessibilityCustomRotor>(label: NSString | string, itemSearchDelegate: any): T;
  initWithRotorType_itemSearchDelegate<T extends NSAccessibilityCustomRotor>(rotorType: NSAccessibilityCustomRotorType, itemSearchDelegate: any): T;

  type(): NSAccessibilityCustomRotorType;
  setType(type: NSAccessibilityCustomRotorType): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  itemSearchDelegate(): any;
  setItemSearchDelegate(itemSearchDelegate: any): void;
  itemLoadingDelegate(): any;
  setItemLoadingDelegate(itemLoadingDelegate: any): void;
}

declare class NSAccessibilityCustomRotorSearchParameters extends NSObject {
  currentItem(): NSAccessibilityCustomRotorItemResult;
  setCurrentItem(currentItem: NSAccessibilityCustomRotorItemResult): void;
  searchDirection(): NSAccessibilityCustomRotorSearchDirection;
  setSearchDirection(searchDirection: NSAccessibilityCustomRotorSearchDirection): void;
  filterString(): NSString;
  setFilterString(filterString: NSString | string): void;
}

declare class NSAccessibilityCustomRotorItemResult extends NSObject {
  initWithTargetElement<T extends NSAccessibilityCustomRotorItemResult>(targetElement: any): T;
  initWithItemLoadingToken_customLabel<T extends NSAccessibilityCustomRotorItemResult>(itemLoadingToken: NSAccessibilityLoadingToken, customLabel: NSString | string): T;

  targetElement(): any;
  setTargetElement(targetElement: any): void;
  itemLoadingToken(): NSAccessibilityLoadingToken;
  setItemLoadingToken(itemLoadingToken: NSAccessibilityLoadingToken): void;
  targetRange(): NSRange;
  setTargetRange(targetRange: NSRange): void;
  customLabel(): NSString;
  setCustomLabel(customLabel: NSString | string): void;
}

declare interface INSAccessibilityCustomRotorItemSearchDelegate {
  rotor_resultForSearchParameters(rotor: NSAccessibilityCustomRotor, searchParameters: NSAccessibilityCustomRotorSearchParameters): NSAccessibilityCustomRotorItemResult;
}

declare enum NSAccessibilityCustomRotorSearchDirection {
  NSAccessibilityCustomRotorSearchDirectionPrevious,
  NSAccessibilityCustomRotorSearchDirectionNext,
}

declare enum NSAccessibilityCustomRotorType {
  NSAccessibilityCustomRotorTypeCustom = 0,
  NSAccessibilityCustomRotorTypeAny = 1,
  NSAccessibilityCustomRotorTypeAnnotation,
  NSAccessibilityCustomRotorTypeBoldText,
  NSAccessibilityCustomRotorTypeHeading,
  NSAccessibilityCustomRotorTypeHeadingLevel1,
  NSAccessibilityCustomRotorTypeHeadingLevel2,
  NSAccessibilityCustomRotorTypeHeadingLevel3,
  NSAccessibilityCustomRotorTypeHeadingLevel4,
  NSAccessibilityCustomRotorTypeHeadingLevel5,
  NSAccessibilityCustomRotorTypeHeadingLevel6,
  NSAccessibilityCustomRotorTypeImage,
  NSAccessibilityCustomRotorTypeItalicText,
  NSAccessibilityCustomRotorTypeLandmark,
  NSAccessibilityCustomRotorTypeLink,
  NSAccessibilityCustomRotorTypeList,
  NSAccessibilityCustomRotorTypeMisspelledWord,
  NSAccessibilityCustomRotorTypeTable,
  NSAccessibilityCustomRotorTypeTextField,
  NSAccessibilityCustomRotorTypeUnderlinedText,
  NSAccessibilityCustomRotorTypeVisitedLink,
}

declare class NSAccessibilityElement extends NSObject implements INSAccessibility {
  static accessibilityElementWithRole_frame_label_parent(role: NSAccessibilityRole, frame: NSRect, label: NSString | string | null, parent: any | null): any;
  accessibilityAddChildElement(childElement: NSAccessibilityElement): void;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  accessibilityFrameInParentSpace(): NSRect;
  setAccessibilityFrameInParentSpace(accessibilityFrameInParentSpace: NSRect): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare interface INSAccessibilityElement {
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
}

declare interface INSAccessibilityGroup {}

declare interface INSAccessibilityButton {
  accessibilityLabel(): NSString;
  accessibilityPerformPress(): boolean;
}

declare interface INSAccessibilitySwitch {
  accessibilityValue(): NSString;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformDecrement(): boolean;
}

declare interface INSAccessibilityRadioButton {
  accessibilityValue(): NSNumber;
}

declare interface INSAccessibilityCheckBox {
  accessibilityValue(): NSNumber;
}

declare interface INSAccessibilityStaticText {
  accessibilityValue(): NSString;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityVisibleCharacterRange(): NSRange;
}

declare interface INSAccessibilityNavigableStaticText {
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityRangeForLine(lineNumber: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
}

declare interface INSAccessibilityProgressIndicator {
  accessibilityValue(): NSNumber;
}

declare interface INSAccessibilityStepper {
  accessibilityLabel(): NSString;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityValue(): any;
}

declare interface INSAccessibilitySlider {
  accessibilityLabel(): NSString;
  accessibilityValue(): any;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformDecrement(): boolean;
}

declare interface INSAccessibilityImage {
  accessibilityLabel(): NSString;
}

declare interface INSAccessibilityContainsTransientUI {
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  isAccessibilityAlternateUIVisible(): boolean;
}

declare interface INSAccessibilityOutline {}

declare interface INSAccessibilityList {}

declare interface INSAccessibilityRow {
  accessibilityIndex(): NSInteger;
  accessibilityDisclosureLevel(): NSInteger;
}

declare interface INSAccessibilityLayoutArea {
  accessibilityLabel(): NSString;
  accessibilityChildren(): NSArray<any>;
  accessibilitySelectedChildren(): NSArray<any>;

  accessibilityFocusedUIElement(): any;
  setAccessibilityFocusedUIElement(accessibilityFocusedUIElement: any): void;
}

declare interface INSAccessibilityLayoutItem {
  setAccessibilityFrame(frame: NSRect): void;
}

declare interface INSAccessibilityElementLoading {
  accessibilityElementWithToken(token: NSAccessibilityLoadingToken): any;
  accessibilityRangeInTargetElementWithToken(token: NSAccessibilityLoadingToken): NSRange;
}

declare interface INSAccessibility {
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare class NSActionCell extends NSCell {
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
}

declare class NSAlert extends NSObject {
  static alertWithError(error: NSError): NSAlert;
  addButtonWithTitle(title: NSString | string): NSButton;
  layout(): void;
  runModal(): NSModalResponse;
  beginSheetModalForWindow_completionHandler(sheetWindow: NSWindow, handler: Block): void;
  static alertWithMessageText_defaultButton_alternateButton_otherButton_informativeTextWithFormat(message: NSString | string | null, defaultButton: NSString | string | null, alternateButton: NSString | string | null, otherButton: NSString | string | null, format: NSString | string, ...args: any[]): NSAlert;
  beginSheetModalForWindow_modalDelegate_didEndSelector_contextInfo(window: NSWindow, delegate: any | null, didEndSelector: string | null, contextInfo: void | null): void;
  static runModalWithMessage_info(message: NSString | string, info: NSString | string): NSModalResponse;
  static runSheetWithMessage_info(message: NSString | string, info: NSString | string): void;
  static runModalWithMessage_info_buttons(message: NSString | string, info: NSString | string, buttons: NSArray<any> | any[]): NSModalResponse;
  static runModalSessionWithMessage_info_buttons(message: NSString | string, info: NSString | string, buttons: NSArray<any> | any[]): NSModalResponse;
  static alertWithMessage_info_buttons(message: NSString | string, info: NSString | string, buttons: NSArray<any> | any[]): NSAlert;
  static runConfirmationSheetWithLocalizedStrings_completionBlock(dialogPrefix: NSString | string, block: BCVoidBlock): void;
  static runConfirmationSheetWithLocalizedStrings_withSuppressionButton_completionBlock(dialogPrefix: NSString | string, showSuppressionButton: boolean, block: BCVoidBlock): void;
  static runConfirmationSheetWithLocalizedStrings_format_withSuppressionButton_completionBlock(dialogPrefix: NSString | string, format: NSString | string, showSuppressionButton: boolean, block: BCVoidBlock): void;

  messageText(): NSString;
  setMessageText(messageText: NSString | string): void;
  informativeText(): NSString;
  setInformativeText(informativeText: NSString | string): void;
  icon(): NSImage;
  setIcon(icon: NSImage): void;
  buttons(): NSArray<any>;
  setButtons(buttons: NSArray<any> | any[]): void;
  showsHelp(): boolean;
  setShowsHelp(showsHelp: boolean): void;
  helpAnchor(): NSHelpAnchorName;
  setHelpAnchor(helpAnchor: NSHelpAnchorName): void;
  alertStyle(): NSAlertStyle;
  setAlertStyle(alertStyle: NSAlertStyle): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  showsSuppressionButton(): boolean;
  setShowsSuppressionButton(showsSuppressionButton: boolean): void;
  suppressionButton(): NSButton;
  setSuppressionButton(suppressionButton: NSButton): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
  window(): NSWindow;
  setWindow(window: NSWindow): void;
}

declare interface INSAlertDelegate {
  alertShowHelp(alert: NSAlert): boolean;
}

declare enum NSAlertStyle {
  NSAlertStyleWarning = 0,
  NSAlertStyleInformational = 1,
  NSAlertStyleCritical = 2,
}

declare class NSAlignmentFeedbackFilter extends NSObject {
  updateWithEvent(event: NSEvent): void;
  updateWithPanRecognizer(panRecognizer: NSPanGestureRecognizer): void;
  alignmentFeedbackTokenForMovementInView_previousPoint_alignedPoint_defaultPoint(view: NSView | null, previousPoint: NSPoint, alignedPoint: NSPoint, defaultPoint: NSPoint): any;
  alignmentFeedbackTokenForHorizontalMovementInView_previousX_alignedX_defaultX(view: NSView | null, previousX: CGFloat, alignedX: CGFloat, defaultX: CGFloat): any;
  alignmentFeedbackTokenForVerticalMovementInView_previousY_alignedY_defaultY(view: NSView | null, previousY: CGFloat, alignedY: CGFloat, defaultY: CGFloat): any;
  performFeedback_performanceTime(alignmentFeedbackTokens: NSArray<any> | any[], performanceTime: NSHapticFeedbackPerformanceTime): void;

  static inputEventMask(): NSEventMask;
  static setInputEventMask(inputEventMask: NSEventMask): void;
}

declare interface INSAlignmentFeedbackToken {}

declare class NSAnimation extends NSObject implements INSCopying, INSCoding {
  initWithDuration_animationCurve<T extends NSAnimation>(duration: NSTimeInterval, animationCurve: NSAnimationCurve): T;
  initWithCoder<T extends NSAnimation>(coder: NSCoder): T;
  startAnimation(): void;
  stopAnimation(): void;
  addProgressMark(progressMark: NSAnimationProgress): void;
  removeProgressMark(progressMark: NSAnimationProgress): void;
  startWhenAnimation_reachesProgress(animation: NSAnimation, startProgress: NSAnimationProgress): void;
  stopWhenAnimation_reachesProgress(animation: NSAnimation, stopProgress: NSAnimationProgress): void;
  clearStartAnimation(): void;
  clearStopAnimation(): void;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSAnimation>(aDecoder: NSCoder): T;

  animating(): boolean;
  setAnimating(animating: boolean): void;
  currentProgress(): NSAnimationProgress;
  setCurrentProgress(currentProgress: NSAnimationProgress): void;
  duration(): NSTimeInterval;
  setDuration(duration: NSTimeInterval): void;
  animationBlockingMode(): NSAnimationBlockingMode;
  setAnimationBlockingMode(animationBlockingMode: NSAnimationBlockingMode): void;
  frameRate(): number;
  setFrameRate(frameRate: number): void;
  animationCurve(): NSAnimationCurve;
  setAnimationCurve(animationCurve: NSAnimationCurve): void;
  currentValue(): number;
  setCurrentValue(currentValue: number): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  progressMarks(): NSArray<any>;
  setProgressMarks(progressMarks: NSArray<any> | any[]): void;
  runLoopModesForAnimating(): NSArray<any>;
  setRunLoopModesForAnimating(runLoopModesForAnimating: NSArray<any> | any[]): void;
}

declare class NSViewAnimation extends NSAnimation {
  initWithViewAnimations<T extends NSViewAnimation>(viewAnimations: NSArray<any> | any[]): T;

  viewAnimations(): NSArray<any>;
  setViewAnimations(viewAnimations: NSArray<any> | any[]): void;
}

declare interface INSAnimationDelegate {
  animationShouldStart(animation: NSAnimation): boolean;
  animationDidStop(animation: NSAnimation): void;
  animationDidEnd(animation: NSAnimation): void;
  animation_valueForProgress(animation: NSAnimation, progress: NSAnimationProgress): number;
  animation_didReachProgressMark(animation: NSAnimation, progress: NSAnimationProgress): void;
}

declare interface INSAnimatablePropertyContainer {
  animator(): INSAnimatablePropertyContainer;
  animationForKey(key: NSAnimatablePropertyKey): any;

  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare type NSAnimationProgress = number

declare type NSViewAnimationKey = NSString

declare type NSViewAnimationEffectName = NSString

declare type NSAnimatablePropertyKey = NSString

declare enum NSAnimationCurve {
  NSAnimationEaseInOut,
  NSAnimationEaseIn,
  NSAnimationEaseOut,
  NSAnimationLinear,
}

declare enum NSAnimationBlockingMode {
  NSAnimationBlocking,
  NSAnimationNonblocking,
  NSAnimationNonblockingThreaded,
}

declare class NSAnimationContext extends NSObject {
  static runAnimationGroup_completionHandler(changes: Block, completionHandler: Block | null): void;
  static beginGrouping(): void;
  static endGrouping(): void;

  static currentContext(): NSAnimationContext;
  static setCurrentContext(currentContext: NSAnimationContext): void;
  duration(): NSTimeInterval;
  setDuration(duration: NSTimeInterval): void;
  timingFunction(): CAMediaTimingFunction;
  setTimingFunction(timingFunction: CAMediaTimingFunction): void;
  allowsImplicitAnimation(): boolean;
  setAllowsImplicitAnimation(allowsImplicitAnimation: boolean): void;
}

declare class NSAppearance extends NSObject implements INSCoding {
  static appearanceNamed(name: NSAppearanceName): NSAppearance;
  initWithAppearanceNamed_bundle<T extends NSAppearance>(name: NSAppearanceName, bundle: NSBundle | null): T;
  initWithCoder<T extends NSAppearance>(aDecoder: NSCoder): T;
  static sketchDefaultDarkAppearance(): NSAppearance;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSAppearance>(aDecoder: NSCoder): T;

  name(): NSAppearanceName;
  setName(name: NSAppearanceName): void;
  static currentAppearance(): NSAppearance;
  static setCurrentAppearance(currentAppearance: NSAppearance): void;
  allowsVibrancy(): boolean;
  setAllowsVibrancy(allowsVibrancy: boolean): void;
  isDark_bc(): boolean;
  setIsDark_bc(isDark_bc: boolean): void;
}

declare interface INSAppearanceCustomization {
  appearance(): NSAppearance;
  setAppearance(appearance: NSAppearance): void;
  effectiveAppearance(): NSAppearance;
  setEffectiveAppearance(effectiveAppearance: NSAppearance): void;
}

declare type NSAppearanceName = NSString

declare class NSApplication extends NSResponder implements INSUserInterfaceValidations, INSAccessibilityElement, INSAccessibility {
  hide(sender: any | null): void;
  unhide(sender: any | null): void;
  unhideWithoutActivation(): void;
  windowWithWindowNumber(windowNum: NSInteger): NSWindow;
  deactivate(): void;
  activateIgnoringOtherApps(flag: boolean): void;
  hideOtherApplications(sender: any | null): void;
  unhideAllApplications(sender: any | null): void;
  finishLaunching(): void;
  run(): void;
  runModalForWindow(window: NSWindow): NSModalResponse;
  stop(sender: any | null): void;
  stopModal(): void;
  stopModalWithCode(returnCode: NSModalResponse): void;
  abortModal(): void;
  beginModalSessionForWindow(window: NSWindow): NSModalSession;
  runModalSession(session: NSModalSession): NSModalResponse;
  endModalSession(session: NSModalSession): void;
  terminate(sender: any | null): void;
  requestUserAttention(requestType: NSRequestUserAttentionType): NSInteger;
  cancelUserAttentionRequest(request: NSInteger): void;
  enumerateWindowsWithOptions_usingBlock(options: NSWindowListOptions, block: Block): void;
  preventWindowOrdering(): void;
  setWindowsNeedUpdate(needUpdate: boolean): void;
  updateWindows(): void;
  activationPolicy(): NSApplicationActivationPolicy;
  setActivationPolicy(activationPolicy: NSApplicationActivationPolicy): boolean;
  reportException(exception: NSException | Error): void;
  static detachDrawingThread_toTarget_withObject(selector: string, target: any, argument: any | null): void;
  replyToApplicationShouldTerminate(shouldTerminate: boolean): void;
  replyToOpenOrPrint(reply: NSApplicationDelegateReply): void;
  orderFrontCharacterPalette(sender: any | null): void;
  sendEvent(event: NSEvent): void;
  postEvent_atStart(event: NSEvent, flag: boolean): void;
  nextEventMatchingMask_untilDate_inMode_dequeue(mask: NSUInteger, expiration: NSDate | null, mode: NSRunLoopMode, deqFlag: boolean): NSEvent;
  discardEventsMatchingMask_beforeEvent(mask: NSUInteger, lastEvent: NSEvent | null): void;
  sendAction_to_from(action: string, target: any | null, sender: any | null): boolean;
  targetForAction(action: string): any;
  targetForAction_to_from(action: string, target: any | null, sender: any | null): any;
  tryToPerform_with(action: string, object: any | null): boolean;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  arrangeInFront(sender: any | null): void;
  removeWindowsItem(win: NSWindow): void;
  addWindowsItem_title_filename(win: NSWindow, string: NSString | string, isFilename: boolean): void;
  changeWindowsItem_title_filename(win: NSWindow, string: NSString | string, isFilename: boolean): void;
  updateWindowsItem(win: NSWindow): void;
  miniaturizeAll(sender: any | null): void;
  registerServicesMenuSendTypes_returnTypes(sendTypes: NSArray<any> | any[], returnTypes: NSArray<any> | any[]): void;
  orderFrontStandardAboutPanel(sender: any | null): void;
  orderFrontStandardAboutPanelWithOptions(optionsDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  disableRelaunchOnLogin(): void;
  enableRelaunchOnLogin(): void;
  registerForRemoteNotificationTypes(types: NSRemoteNotificationType): void;
  unregisterForRemoteNotifications(): void;
  runModalForWindow_relativeToWindow(window: NSWindow, docWindow: NSWindow): NSInteger;
  beginModalSessionForWindow_relativeToWindow(window: NSWindow, docWindow: NSWindow): NSModalSession;
  application_printFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  beginSheet_modalForWindow_modalDelegate_didEndSelector_contextInfo(sheet: NSWindow, docWindow: NSWindow, modalDelegate: any | null, didEndSelector: string | null, contextInfo: void): void;
  endSheet(sheet: NSWindow): void;
  endSheet_returnCode(sheet: NSWindow, returnCode: NSInteger): void;
  makeWindowsPerform_inOrder(selector: string, flag: boolean): NSWindow;
  orderFrontColorPanel(sender: any | null): void;
  activateContextHelpMode(sender: any | null): void;
  showHelp(sender: any | null): void;
  runPageLayout(sender: any | null): void;
  toggleTouchBarCustomizationPalette(sender: any | null): IBAction;
  registerUserInterfaceItemSearchHandler(handler: any): void;
  unregisterUserInterfaceItemSearchHandler(handler: any): void;
  searchString_inUserInterfaceItemString_searchRange_foundRange(searchString: NSString | string, stringToSearch: NSString | string, searchRange: NSRange, foundRange: NSRange | null): boolean;
  restoreWindowWithIdentifier_state_completionHandler(identifier: NSUserInterfaceItemIdentifier, state: NSCoder, completionHandler: Block): boolean;
  extendStateRestoration(): void;
  completeStateRestoration(): void;
  applicationName(): NSString;
  applicationVersion(): NSString;
  applicationBuild(): NSString;
  isActiveApplication(): boolean;
  open(pathToFile: NSString | string): any;
  validateUserInterfaceItem(item: any): boolean;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  static sharedApplication(): NSApplication;
  static setSharedApplication(sharedApplication: NSApplication): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  mainWindow(): NSWindow;
  setMainWindow(mainWindow: NSWindow): void;
  keyWindow(): NSWindow;
  setKeyWindow(keyWindow: NSWindow): void;
  active(): boolean;
  setActive(active: boolean): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  running(): boolean;
  setRunning(running: boolean): void;
  modalWindow(): NSWindow;
  setModalWindow(modalWindow: NSWindow): void;
  windows(): NSArray<any>;
  setWindows(windows: NSArray<any> | any[]): void;
  mainMenu(): NSMenu;
  setMainMenu(mainMenu: NSMenu): void;
  helpMenu(): NSMenu;
  setHelpMenu(helpMenu: NSMenu): void;
  applicationIconImage(): NSImage;
  setApplicationIconImage(applicationIconImage: NSImage): void;
  dockTile(): NSDockTile;
  setDockTile(dockTile: NSDockTile): void;
  presentationOptions(): NSApplicationPresentationOptions;
  setPresentationOptions(presentationOptions: NSApplicationPresentationOptions): void;
  currentSystemPresentationOptions(): NSApplicationPresentationOptions;
  setCurrentSystemPresentationOptions(currentSystemPresentationOptions: NSApplicationPresentationOptions): void;
  occlusionState(): NSApplicationOcclusionState;
  setOcclusionState(occlusionState: NSApplicationOcclusionState): void;
  currentEvent(): NSEvent;
  setCurrentEvent(currentEvent: NSEvent): void;
  windowsMenu(): NSMenu;
  setWindowsMenu(windowsMenu: NSMenu): void;
  fullKeyboardAccessEnabled(): boolean;
  setFullKeyboardAccessEnabled(fullKeyboardAccessEnabled: boolean): void;
  servicesMenu(): NSMenu;
  setServicesMenu(servicesMenu: NSMenu): void;
  servicesProvider(): any;
  setServicesProvider(servicesProvider: any): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  enabledRemoteNotificationTypes(): NSRemoteNotificationType;
  setEnabledRemoteNotificationTypes(enabledRemoteNotificationTypes: NSRemoteNotificationType): void;
  context(): NSGraphicsContext;
  setContext(context: NSGraphicsContext): void;
  orderedDocuments(): NSArray<any>;
  setOrderedDocuments(orderedDocuments: NSArray<any> | any[]): void;
  orderedWindows(): NSArray<any>;
  setOrderedWindows(orderedWindows: NSArray<any> | any[]): void;
  automaticCustomizeTouchBarMenuItemEnabled(): boolean;
  setAutomaticCustomizeTouchBarMenuItemEnabled(automaticCustomizeTouchBarMenuItemEnabled: boolean): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare interface INSApplicationDelegate {
  applicationShouldTerminate(sender: NSApplication): NSApplicationTerminateReply;
  application_openURLs(application: NSApplication, urls: NSArray<any> | any[]): void;
  application_openFile(sender: NSApplication, filename: NSString | string): boolean;
  application_openFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  application_openTempFile(sender: NSApplication, filename: NSString | string): boolean;
  applicationShouldOpenUntitledFile(sender: NSApplication): boolean;
  applicationOpenUntitledFile(sender: NSApplication): boolean;
  application_openFileWithoutUI(sender: any, filename: NSString | string): boolean;
  application_printFile(sender: NSApplication, filename: NSString | string): boolean;
  application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: NSArray<any> | any[], printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanels: boolean): NSApplicationPrintReply;
  applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication): boolean;
  applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: boolean): boolean;
  applicationDockMenu(sender: NSApplication): NSMenu;
  application_willPresentError(application: NSApplication, error: NSError): NSError;
  application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData): void;
  application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError): void;
  application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  application_willEncodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_didDecodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_willContinueUserActivityWithType(application: NSApplication, userActivityType: NSString | string): boolean;
  application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: Block): boolean;
  application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: NSString | string, error: NSError): void;
  application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity): void;
  application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata): void;
  applicationWillFinishLaunching(notification: NSNotification): void;
  applicationDidFinishLaunching(notification: NSNotification): void;
  applicationWillHide(notification: NSNotification): void;
  applicationDidHide(notification: NSNotification): void;
  applicationWillUnhide(notification: NSNotification): void;
  applicationDidUnhide(notification: NSNotification): void;
  applicationWillBecomeActive(notification: NSNotification): void;
  applicationDidBecomeActive(notification: NSNotification): void;
  applicationWillResignActive(notification: NSNotification): void;
  applicationDidResignActive(notification: NSNotification): void;
  applicationWillUpdate(notification: NSNotification): void;
  applicationDidUpdate(notification: NSNotification): void;
  applicationWillTerminate(notification: NSNotification): void;
  applicationDidChangeScreenParameters(notification: NSNotification): void;
  applicationDidChangeOcclusionState(notification: NSNotification): void;
}

declare interface INSServicesMenuRequestor {
  writeSelectionToPasteboard_types(pboard: NSPasteboard, types: NSArray<any> | any[]): boolean;
  readSelectionFromPasteboard(pboard: NSPasteboard): boolean;
}

declare type NSAppKitVersion = number

declare type NSModalResponse = NSInteger

declare type NSModalSession = any

declare type NSAboutPanelOptionKey = NSString

declare type NSServiceProviderName = NSString

declare enum NSApplicationPresentationOptions {
  NSApplicationPresentationDefault = 0,
  NSApplicationPresentationAutoHideDock,
  NSApplicationPresentationHideDock,
  NSApplicationPresentationAutoHideMenuBar,
  NSApplicationPresentationHideMenuBar,
  NSApplicationPresentationDisableAppleMenu,
  NSApplicationPresentationDisableProcessSwitching,
  NSApplicationPresentationDisableForceQuit,
  NSApplicationPresentationDisableSessionTermination,
  NSApplicationPresentationDisableHideApplication,
  NSApplicationPresentationDisableMenuBarTransparency,
  NSApplicationPresentationFullScreen,
  NSApplicationPresentationAutoHideToolbar,
  NSApplicationPresentationDisableCursorLocationAssistance,
}

declare enum NSApplicationOcclusionState {
  NSApplicationOcclusionStateVisible = 1 << 1,
}

declare enum NSWindowListOptions {
  NSWindowListOrderedFrontToBack,
}

declare enum NSRequestUserAttentionType {
  NSCriticalRequest = 0,
  NSInformationalRequest = 10,
}

declare enum NSApplicationDelegateReply {
  NSApplicationDelegateReplySuccess = 0,
  NSApplicationDelegateReplyCancel = 1,
  NSApplicationDelegateReplyFailure = 2,
}

declare enum NSApplicationTerminateReply {
  NSTerminateCancel = 0,
  NSTerminateNow = 1,
  NSTerminateLater = 2,
}

declare enum NSApplicationPrintReply {
  NSPrintingCancelled = 0,
  NSPrintingSuccess = 1,
  NSPrintingFailure = 3,
  NSPrintingReplyLater = 2,
}

declare enum NSRemoteNotificationType {
  NSRemoteNotificationTypeNone = 0,
  NSRemoteNotificationTypeBadge = 1 << 0,
  NSRemoteNotificationTypeSound = 1 << 1,
  NSRemoteNotificationTypeAlert = 1 << 2,
}

declare class NSArrayController extends NSObjectController {
  rearrangeObjects(): void;
  didChangeArrangementCriteria(): void;
  arrangeObjects(objects: NSArray<any> | any[]): NSArray<any>;
  setSelectionIndexes(indexes: NSIndexSet): boolean;
  setSelectionIndex(index: NSUInteger): boolean;
  addSelectionIndexes(indexes: NSIndexSet): boolean;
  removeSelectionIndexes(indexes: NSIndexSet): boolean;
  setSelectedObjects(objects: NSArray<any> | any[]): boolean;
  addSelectedObjects(objects: NSArray<any> | any[]): boolean;
  removeSelectedObjects(objects: NSArray<any> | any[]): boolean;
  add(sender: any | null): IBAction;
  remove(sender: any | null): IBAction;
  insert(sender: any | null): IBAction;
  selectNext(sender: any | null): IBAction;
  selectPrevious(sender: any | null): IBAction;
  addObject(object: any): void;
  addObjects(objects: NSArray<any> | any[]): void;
  insertObject_atArrangedObjectIndex(object: any, index: NSUInteger): void;
  insertObjects_atArrangedObjectIndexes(objects: NSArray<any> | any[], indexes: NSIndexSet): void;
  removeObjectAtArrangedObjectIndex(index: NSUInteger): void;
  removeObjectsAtArrangedObjectIndexes(indexes: NSIndexSet): void;
  removeObject(object: any): void;
  removeObjects(objects: NSArray<any> | any[]): void;

  automaticallyRearrangesObjects(): boolean;
  setAutomaticallyRearrangesObjects(automaticallyRearrangesObjects: boolean): void;
  automaticRearrangementKeyPaths(): NSArray<any>;
  setAutomaticRearrangementKeyPaths(automaticRearrangementKeyPaths: NSArray<any> | any[]): void;
  sortDescriptors(): NSArray<any>;
  setSortDescriptors(sortDescriptors: NSArray<any> | any[]): void;
  filterPredicate(): NSPredicate;
  setFilterPredicate(filterPredicate: NSPredicate): void;
  clearsFilterPredicateOnInsertion(): boolean;
  setClearsFilterPredicateOnInsertion(clearsFilterPredicateOnInsertion: boolean): void;
  arrangedObjects(): any;
  setArrangedObjects(arrangedObjects: any): void;
  avoidsEmptySelection(): boolean;
  setAvoidsEmptySelection(avoidsEmptySelection: boolean): void;
  preservesSelection(): boolean;
  setPreservesSelection(preservesSelection: boolean): void;
  selectsInsertedObjects(): boolean;
  setSelectsInsertedObjects(selectsInsertedObjects: boolean): void;
  alwaysUsesMultipleValuesMarker(): boolean;
  setAlwaysUsesMultipleValuesMarker(alwaysUsesMultipleValuesMarker: boolean): void;
  selectionIndexes(): NSIndexSet;
  setSelectionIndexes(selectionIndexes: NSIndexSet): void;
  selectionIndex(): NSUInteger;
  setSelectionIndex(selectionIndex: NSUInteger): void;
  selectedObjects(): NSArray<any>;
  setSelectedObjects(selectedObjects: NSArray<any> | any[]): void;
  canInsert(): boolean;
  setCanInsert(canInsert: boolean): void;
  canSelectNext(): boolean;
  setCanSelectNext(canSelectNext: boolean): void;
  canSelectPrevious(): boolean;
  setCanSelectPrevious(canSelectPrevious: boolean): void;
}

declare type NSTextEffectStyle = NSString

declare type NSAttributedStringDocumentType = NSString

declare type NSTextLayoutSectionKey = NSString

declare type NSAttributedStringDocumentAttributeKey = NSString

declare type NSAttributedStringDocumentReadingOptionKey = NSString

declare enum NSUnderlineStyle {
  NSUnderlineStyleNone = 0x00,
  NSUnderlineStyleSingle = 0x01,
  NSUnderlineStyleThick = 0x02,
  NSUnderlineStyleDouble = 0x09,
  NSUnderlinePatternSolid = 0x0000,
  NSUnderlinePatternDot = 0x0100,
  NSUnderlinePatternDash = 0x0200,
  NSUnderlinePatternDashDot = 0x0300,
  NSUnderlinePatternDashDotDot = 0x0400,
  NSUnderlineByWord = 0x8000,
}

declare enum NSWritingDirectionFormatType {
  NSWritingDirectionEmbedding,
  NSWritingDirectionOverride,
}

declare enum NSSpellingState {
  NSSpellingStateSpellingFlag,
  NSSpellingStateGrammarFlag,
}

declare class NSBezierPath extends NSObject implements INSCopying, INSCoding {
  static bezierPath(): NSBezierPath;
  static bezierPathWithRect(rect: NSRect): NSBezierPath;
  static bezierPathWithOvalInRect(rect: NSRect): NSBezierPath;
  static bezierPathWithRoundedRect_xRadius_yRadius(rect: NSRect, xRadius: CGFloat, yRadius: CGFloat): NSBezierPath;
  static fillRect(rect: NSRect): void;
  static strokeRect(rect: NSRect): void;
  static clipRect(rect: NSRect): void;
  static strokeLineFromPoint_toPoint(point1: NSPoint, point2: NSPoint): void;
  static drawPackedGlyphs_atPoint(packedGlyphs: string, point: NSPoint): void;
  moveToPoint(point: NSPoint): void;
  lineToPoint(point: NSPoint): void;
  curveToPoint_controlPoint1_controlPoint2(endPoint: NSPoint, controlPoint1: NSPoint, controlPoint2: NSPoint): void;
  closePath(): void;
  removeAllPoints(): void;
  relativeMoveToPoint(point: NSPoint): void;
  relativeLineToPoint(point: NSPoint): void;
  relativeCurveToPoint_controlPoint1_controlPoint2(endPoint: NSPoint, controlPoint1: NSPoint, controlPoint2: NSPoint): void;
  getLineDash_count_phase(pattern: CGFloat | null, count: NSInteger | null, phase: CGFloat | null): void;
  setLineDash_count_phase(pattern: CGFloat | null, count: NSInteger, phase: CGFloat): void;
  stroke(): void;
  fill(): void;
  addClip(): void;
  setClip(): void;
  transformUsingAffineTransform(transform: NSAffineTransform): void;
  elementAtIndex_associatedPoints(index: NSInteger, points: NSPointArray | null): NSBezierPathElement;
  elementAtIndex(index: NSInteger): NSBezierPathElement;
  setAssociatedPoints_atIndex(points: NSPointArray | null, index: NSInteger): void;
  appendBezierPath(path: NSBezierPath): void;
  appendBezierPathWithRect(rect: NSRect): void;
  appendBezierPathWithPoints_count(points: NSPointArray, count: NSInteger): void;
  appendBezierPathWithOvalInRect(rect: NSRect): void;
  appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise(center: NSPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: boolean): void;
  appendBezierPathWithArcWithCenter_radius_startAngle_endAngle(center: NSPoint, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat): void;
  appendBezierPathWithArcFromPoint_toPoint_radius(point1: NSPoint, point2: NSPoint, radius: CGFloat): void;
  appendBezierPathWithCGGlyph_inFont(glyph: CGGlyph, font: NSFont): void;
  appendBezierPathWithCGGlyphs_count_inFont(glyphs: CGGlyph, count: NSInteger, font: NSFont): void;
  appendBezierPathWithRoundedRect_xRadius_yRadius(rect: NSRect, xRadius: CGFloat, yRadius: CGFloat): void;
  containsPoint(point: NSPoint): boolean;
  cachesBezierPath(): boolean;
  setCachesBezierPath(flag: boolean): void;
  appendBezierPathWithGlyph_inFont(glyph: NSGlyph, font: NSFont): void;
  appendBezierPathWithGlyphs_count_inFont(glyphs: NSGlyph, count: NSInteger, font: NSFont): void;
  appendBezierPathWithPackedGlyphs(packedGlyphs: string): void;
  static bezierPathWithCGPath(path: CGPathRef): NSBezierPath;
  strokeOutside(): void;
  strokeInside(): void;
  static bezierPathFromPoint_toPoint(p1: NSPoint, p2: NSPoint): NSBezierPath;
  static bezierCurveFromPoint_toPoint_controlPoint1_controlPoint2(from: NSPoint, to: NSPoint, cp1: NSPoint, cp2: NSPoint): NSBezierPath;
  outlinePath(): NSBezierPath;
  drawInnerShadow(shadow: NSShadow): void;
  bezierPathByGrowingBy(offset: CGFloat): NSBezierPath;
  bezierPathWithOuterPathOfSize(amount: CGFloat): NSBezierPath;
  safeBounds(): NSRect;
  isClosed(): boolean;
  clipInBlock(block: BCVoidBlock): void;
  writeDebugFileNamed(name: NSString | string): void;
  bezierPathByMakingClockwiseIfNecessary(): NSBezierPath;
  bezierPathByMakingAntiClockwiseIfNecessary(): NSBezierPath;
  subPathsOrderedBySizeAfterOutlining(): NSArray<any>;
  bezierPathByCurveFitting(): NSBezierPath;
  booleanOp_withPath(op: MSBooleanOperation, otherPath: NSBezierPath): NSBezierPath;
  booleanUnionWith(otherPath: NSBezierPath): NSBezierPath;
  booleanIntersectWith(otherPath: NSBezierPath): NSBezierPath;
  booleanSubtractWith(otherPath: NSBezierPath): NSBezierPath;
  booleanExclusiveOrWith(otherPath: NSBezierPath): NSBezierPath;
  bezierPathBySubtractingPaths(paths: NSArray<any> | any[]): NSBezierPath;
  debugScale_ms(): CGFloat;
  appendSquareAtPoint_ms_size_scale(point: NSPoint, size: CGFloat, scale: CGFloat): void;
  appendCircleAtPoint_ms_radius_scale(point: NSPoint, radius: CGFloat, scale: CGFloat): void;
  appendArrowAtPoint_ms_tangent_size_scale(point: NSPoint, tangent: MSLine, size: CGFloat, scale: CGFloat): void;
  enumerator(): any;
  reverseEnumerator(): any;
  itemAtIndex(index: NSInteger): any;
  lastItem(): any;
  appendBezierPathItem(item: any): void;
  bezierCurves(): NSArray<any>;
  customIsEqual(other: NSBezierPath): boolean;
  animatedGIFRepresentation_ms(): NSData;
  static bezierPathWithJSON_ms(json: any): NSBezierPath;
  static bezierPathWithJSONString_ms(json: NSString | string): NSBezierPath;
  JSONRepresetation_ms(): any;
  JSONDescription_ms(): NSString;
  static bezierPathWithPath(path: MSPath): NSBezierPath;
  lastPoint(): NSPoint;
  firstPoint(): NSPoint;
  slopeOnPathAtLength(length: CGFloat): CGFloat;
  pointOnPathAtLength(length: CGFloat): NSPoint;
  pointOnPathAtLength_slope(length: CGFloat, slope: CGFloat): NSPoint;
  bezierPathByTrimmingFromLength(trimLength: CGFloat): NSBezierPath;
  bezierPathByTrimmingFromLength_withMaximumError(trimLength: CGFloat, maxError: CGFloat): NSBezierPath;
  bezierPathByTrimmingToLength(trimLength: CGFloat): NSBezierPath;
  bezierPathByTrimmingToLength_withMaximumError(trimLength: CGFloat, maxError: CGFloat): NSBezierPath;
  bezierPathFromIndex_toIndex(from: NSUInteger, to: NSUInteger): NSBezierPath;
  length(): CGFloat;
  lengthWithMaximumError(maxError: CGFloat): CGFloat;
  appendBezierPathByRemovingMoveToPoint(path: NSBezierPath): void;
  isEqualToBezierPath(bezierPath: NSBezierPath): boolean;
  pointAtIndex(index: NSInteger): NSPoint;
  subDivideAtPoint(aPoint: NSPoint): NSArray<any>;
  bezierPathByApplyingModifierBlock(block: MSBezierPathModifierBlock): NSBezierPath;
  drawDebugWithZoom___unused(zoom: CGFloat): void;
  scaleBy(zoom: CGFloat): NSBezierPath;
  simplify(): NSBezierPath;
  simplifyWithMargin(margin: NSInteger): NSBezierPath;
  subPaths(): NSArray<any>;
  setDashPattern(dashPattern: NSArray<any> | any[]): void;
  static validDashLengthFromProposedDashLength(dashLength: CGFloat): CGFloat;
  static validDashPatternFromProposedDashPattern_padIfNeeded(proposed: NSArray<any> | any[], canPad: boolean): NSArray<any>;
  static impliedDashPatternFromDashPattern_paddingToLength(dashPattern: NSArray<any> | any[], length: NSUInteger): NSArray<any>;
  debugWriteToFileNamed(name: NSString | string): void;
  containsRect(rect: NSRect): boolean;
  outlinePathWithWidth(width: CGFloat): NSBezierPath;
  outlinePathWithWidth_containsPoint(width: CGFloat, point: NSPoint): boolean;
  insetPathBy(size: CGFloat): NSBezierPath;
  outerPathWithRect(rect: NSRect): NSBezierPath;
  bezierPathWithLineWidth(lineWidth: CGFloat): NSBezierPath;
  bezierPathWithSquareLineCapStyle(): NSBezierPath;
  fillNonZero(): void;
  strokeWithWidth(lineWidth: CGFloat): void;
  static bezierPathWithSubPaths(subPaths: NSArray<any> | any[]): NSBezierPath;
  static bezierPathFromSVGString(contents: NSString | string): NSBezierPath;
  addSVGArcWithAngle_radius_from_to_largeArc_sweep(angle: CGFloat, radius: NSSize, from: NSPoint, to: NSPoint, largeArcFlag: boolean, sweepFlag: boolean): void;
  svgPathAttribute(): NSXMLNode;
  fb_union(path: NSBezierPath): NSBezierPath;
  fb_intersect(path: NSBezierPath): NSBezierPath;
  fb_difference(path: NSBezierPath): NSBezierPath;
  fb_xor(path: NSBezierPath): NSBezierPath;
  fb_fitCurve(errorThreshold: CGFloat): NSBezierPath;
  fb_simplify(threshold: CGFloat): NSBezierPath;
  fb_pointAtIndex(index: NSUInteger): NSPoint;
  fb_elementAtIndex(index: NSUInteger): NSBezierElement;
  fb_subpathWithRange(range: NSRange): NSBezierPath;
  fb_copyAttributesFrom(path: NSBezierPath): void;
  fb_appendPath(path: NSBezierPath): void;
  fb_appendElement(element: NSBezierElement): void;
  static bezierPathFromEPSString(aString: NSString | string): NSBezierPath;
  static circleAtPoint(point: NSPoint): NSBezierPath;
  static rectAtPoint(point: NSPoint): NSBezierPath;
  static triangleAtPoint_direction(point: NSPoint, tangent: NSPoint): NSBezierPath;
  static smallCircleAtPoint(point: NSPoint): NSBezierPath;
  static smallRectAtPoint(point: NSPoint): NSBezierPath;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSBezierPath>(aDecoder: NSCoder): T;

  static defaultMiterLimit(): CGFloat;
  static setDefaultMiterLimit(defaultMiterLimit: CGFloat): void;
  static defaultFlatness(): CGFloat;
  static setDefaultFlatness(defaultFlatness: CGFloat): void;
  static defaultWindingRule(): NSWindingRule;
  static setDefaultWindingRule(defaultWindingRule: NSWindingRule): void;
  static defaultLineCapStyle(): NSLineCapStyle;
  static setDefaultLineCapStyle(defaultLineCapStyle: NSLineCapStyle): void;
  static defaultLineJoinStyle(): NSLineJoinStyle;
  static setDefaultLineJoinStyle(defaultLineJoinStyle: NSLineJoinStyle): void;
  static defaultLineWidth(): CGFloat;
  static setDefaultLineWidth(defaultLineWidth: CGFloat): void;
  lineWidth(): CGFloat;
  setLineWidth(lineWidth: CGFloat): void;
  lineCapStyle(): NSLineCapStyle;
  setLineCapStyle(lineCapStyle: NSLineCapStyle): void;
  lineJoinStyle(): NSLineJoinStyle;
  setLineJoinStyle(lineJoinStyle: NSLineJoinStyle): void;
  windingRule(): NSWindingRule;
  setWindingRule(windingRule: NSWindingRule): void;
  miterLimit(): CGFloat;
  setMiterLimit(miterLimit: CGFloat): void;
  flatness(): CGFloat;
  setFlatness(flatness: CGFloat): void;
  bezierPathByFlatteningPath(): NSBezierPath;
  setBezierPathByFlatteningPath(bezierPathByFlatteningPath: NSBezierPath): void;
  bezierPathByReversingPath(): NSBezierPath;
  setBezierPathByReversingPath(bezierPathByReversingPath: NSBezierPath): void;
  empty(): boolean;
  setEmpty(empty: boolean): void;
  currentPoint(): NSPoint;
  setCurrentPoint(currentPoint: NSPoint): void;
  controlPointBounds(): NSRect;
  setControlPointBounds(controlPointBounds: NSRect): void;
  bounds(): NSRect;
  setBounds(bounds: NSRect): void;
  elementCount(): NSInteger;
  setElementCount(elementCount: NSInteger): void;
}

declare enum NSLineCapStyle {
  NSButtLineCapStyle = 0,
  NSRoundLineCapStyle = 1,
  NSSquareLineCapStyle = 2,
}

declare enum NSLineJoinStyle {
  NSMiterLineJoinStyle = 0,
  NSRoundLineJoinStyle = 1,
  NSBevelLineJoinStyle = 2,
}

declare enum NSWindingRule {
  NSNonZeroWindingRule = 0,
  NSEvenOddWindingRule = 1,
}

declare enum NSBezierPathElement {
  NSMoveToBezierPathElement,
  NSLineToBezierPathElement,
  NSCurveToBezierPathElement,
  NSClosePathBezierPathElement,
}

declare class NSBitmapImageRep extends NSImageRep implements INSSecureCoding {
  initWithFocusedViewRect<T extends NSBitmapImageRep>(rect: NSRect): T;
  initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel<T extends NSBitmapImageRep>(planes: string, width: NSInteger, height: NSInteger, bps: NSInteger, spp: NSInteger, alpha: boolean, isPlanar: boolean, colorSpaceName: NSColorSpaceName, rBytes: NSInteger, pBits: NSInteger): T;
  initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel<T extends NSBitmapImageRep>(planes: string, width: NSInteger, height: NSInteger, bps: NSInteger, spp: NSInteger, alpha: boolean, isPlanar: boolean, colorSpaceName: NSColorSpaceName, bitmapFormat: NSBitmapFormat, rBytes: NSInteger, pBits: NSInteger): T;
  initWithCGImage<T extends NSBitmapImageRep>(cgImage: CGImageRef): T;
  initWithCIImage<T extends NSBitmapImageRep>(ciImage: CIImage): T;
  static imageRepsWithData(data: NSData): NSArray<any>;
  static imageRepWithData(data: NSData): NSBitmapImageRep;
  initWithData<T extends NSBitmapImageRep>(data: NSData): T;
  getBitmapDataPlanes(data: string): void;
  getCompression_factor(compression: NSTIFFCompression | null, factor: number | null): void;
  setCompression_factor(compression: NSTIFFCompression, factor: number): void;
  TIFFRepresentationUsingCompression_factor(comp: NSTIFFCompression, factor: number): NSData;
  static TIFFRepresentationOfImageRepsInArray(array: NSArray<any> | any[]): NSData;
  static TIFFRepresentationOfImageRepsInArray_usingCompression_factor(array: NSArray<any> | any[], comp: NSTIFFCompression, factor: number): NSData;
  static getTIFFCompressionTypes_count(list: NSTIFFCompression, numTypes: NSInteger): void;
  static localizedNameForTIFFCompressionType(compression: NSTIFFCompression): NSString;
  canBeCompressedUsing(compression: NSTIFFCompression): boolean;
  colorizeByMappingGray_toColor_blackMapping_whiteMapping(midPoint: CGFloat, midPointColor: NSColor | null, shadowColor: NSColor | null, lightColor: NSColor | null): void;
  initForIncrementalLoad<T extends NSBitmapImageRep>(): T;
  incrementalLoadFromData_complete(data: NSData, complete: boolean): NSInteger;
  setColor_atX_y(color: NSColor, x: NSInteger, y: NSInteger): void;
  colorAtX_y(x: NSInteger, y: NSInteger): NSColor;
  getPixel_atX_y(p: NSUInteger[], x: NSInteger, y: NSInteger): void;
  setPixel_atX_y(p: NSUInteger[], x: NSInteger, y: NSInteger): void;
  bitmapImageRepByConvertingToColorSpace_renderingIntent(targetSpace: NSColorSpace, renderingIntent: NSColorRenderingIntent): NSBitmapImageRep;
  bitmapImageRepByRetaggingWithColorSpace(newSpace: NSColorSpace): NSBitmapImageRep;
  static representationOfImageRepsInArray_usingType_properties(imageReps: NSArray<any> | any[], storageType: NSBitmapImageFileType, properties: NSDictionary<any, any> | {[key: string]: any}): NSData;
  representationUsingType_properties(storageType: NSBitmapImageFileType, properties: NSDictionary<any, any> | {[key: string]: any}): NSData;
  setProperty_withValue(property: NSBitmapImageRepPropertyKey, value: any | null): void;
  valueForProperty(property: NSBitmapImageRepPropertyKey): any;
  JPGRepresentationWithCompression_progressive(compression: CGFloat, progressive: boolean): NSData;
  PNGRepresentationWithInterlaced(interlaced: boolean): NSData;
  PNGRepresentationWithInterlaced_includeAlpha(interlaced: boolean, includeAlpha: boolean): NSData;
  static bitmapImageRepWithSize_flags_colorSpace_drawingBlock(size: NSSize, flags: DKCGContextCreateFlags, space: NSColorSpace, block: CGContextDrawBlock): NSBitmapImageRep;
  static bitmapImageRepWithSize_pixelSize_flags_colorSpace_drawingBlock(size: NSSize, pixelSize: NSSize, flags: DKCGContextCreateFlags, space: NSColorSpace, block: CGContextDrawBlock): NSBitmapImageRep;
  rectForTrimming(): NSRect;
  rectForTrimming(isBlankImage: boolean): NSRect;
  bitmapImageRepByCroppingToRect(r: NSRect): NSBitmapImageRep;
  bitmapImageRepByFlippingVertical(): NSBitmapImageRep;
  bitSafeBitmapImageRep(): NSBitmapImageRep;
  bitSafeFastRectForTrimming(): NSRect;
  bitSafeFastRectForTrimming(isBlankImage: boolean): NSRect;
  hasTransparentPixels(): boolean;

  bitmapData(): string;
  setBitmapData(bitmapData: string): void;
  planar(): boolean;
  setPlanar(planar: boolean): void;
  samplesPerPixel(): NSInteger;
  setSamplesPerPixel(samplesPerPixel: NSInteger): void;
  bitsPerPixel(): NSInteger;
  setBitsPerPixel(bitsPerPixel: NSInteger): void;
  bytesPerRow(): NSInteger;
  setBytesPerRow(bytesPerRow: NSInteger): void;
  bytesPerPlane(): NSInteger;
  setBytesPerPlane(bytesPerPlane: NSInteger): void;
  numberOfPlanes(): NSInteger;
  setNumberOfPlanes(numberOfPlanes: NSInteger): void;
  bitmapFormat(): NSBitmapFormat;
  setBitmapFormat(bitmapFormat: NSBitmapFormat): void;
  TIFFRepresentation(): NSData;
  setTIFFRepresentation(TIFFRepresentation: NSData): void;
  CGImage(): CGImageRef;
  setCGImage(CGImage: CGImageRef): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSBitmapImageRepPropertyKey = NSString

declare enum NSTIFFCompression {
  NSTIFFCompressionNone = 1,
  NSTIFFCompressionCCITTFAX3 = 3,
  NSTIFFCompressionCCITTFAX4 = 4,
  NSTIFFCompressionLZW = 5,
  NSTIFFCompressionJPEG = 6,
  NSTIFFCompressionNEXT = 32766,
  NSTIFFCompressionPackBits = 32773,
  NSTIFFCompressionOldJPEG = 32865,
}

declare enum NSBitmapImageFileType {
  NSBitmapImageFileTypeTIFF,
  NSBitmapImageFileTypeBMP,
  NSBitmapImageFileTypeGIF,
  NSBitmapImageFileTypeJPEG,
  NSBitmapImageFileTypePNG,
  NSBitmapImageFileTypeJPEG2000,
}

declare enum NSImageRepLoadStatus {
  NSImageRepLoadStatusUnknownType = -1,
  NSImageRepLoadStatusReadingHeader = -2,
  NSImageRepLoadStatusWillNeedAllData = -3,
  NSImageRepLoadStatusInvalidData = -4,
  NSImageRepLoadStatusUnexpectedEOF = -5,
  NSImageRepLoadStatusCompleted = -6,
}

declare enum NSBitmapFormat {
  NSBitmapFormatAlphaFirst = 1 << 0,
  NSBitmapFormatAlphaNonpremultiplied = 1 << 1,
  NSBitmapFormatFloatingPointSamples = 1 << 2,
  NSBitmapFormatSixteenBitLittleEndian,
  NSBitmapFormatThirtyTwoBitLittleEndian,
  NSBitmapFormatSixteenBitBigEndian,
  NSBitmapFormatThirtyTwoBitBigEndian,
}

declare class NSBox extends NSView {
  sizeToFit(): void;
  setFrameFromContentFrame(contentFrame: NSRect): void;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;

  borderType(): NSBorderType;
  setBorderType(borderType: NSBorderType): void;
  titlePosition(): NSTitlePosition;
  setTitlePosition(titlePosition: NSTitlePosition): void;
  boxType(): NSBoxType;
  setBoxType(boxType: NSBoxType): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  titleFont(): NSFont;
  setTitleFont(titleFont: NSFont): void;
  borderRect(): NSRect;
  setBorderRect(borderRect: NSRect): void;
  titleRect(): NSRect;
  setTitleRect(titleRect: NSRect): void;
  titleCell(): any;
  setTitleCell(titleCell: any): void;
  contentViewMargins(): NSSize;
  setContentViewMargins(contentViewMargins: NSSize): void;
  contentView(): NSView;
  setContentView(contentView: NSView): void;
  transparent(): boolean;
  setTransparent(transparent: boolean): void;
  borderWidth(): CGFloat;
  setBorderWidth(borderWidth: CGFloat): void;
  cornerRadius(): CGFloat;
  setCornerRadius(cornerRadius: CGFloat): void;
  borderColor(): NSColor;
  setBorderColor(borderColor: NSColor): void;
  fillColor(): NSColor;
  setFillColor(fillColor: NSColor): void;
}

declare enum NSTitlePosition {
  NSNoTitle = 0,
  NSAboveTop = 1,
  NSAtTop = 2,
  NSBelowTop = 3,
  NSAboveBottom = 4,
  NSAtBottom = 5,
  NSBelowBottom = 6,
}

declare enum NSBoxType {
  NSBoxPrimary = 0,
  NSBoxSecondary = 1,
  NSBoxSeparator = 2,
  NSBoxOldStyle = 3,
  NSBoxCustom = 4,
}

declare class NSBrowser extends NSControl {
  loadColumnZero(): void;
  setCellClass(factoryId: any): void;
  itemAtIndexPath(indexPath: NSIndexPath): any;
  itemAtRow_inColumn(row: NSInteger, column: NSInteger): any;
  indexPathForColumn(column: NSInteger): NSIndexPath;
  isLeafItem(item: any | null): boolean;
  reloadDataForRowIndexes_inColumn(rowIndexes: NSIndexSet, column: NSInteger): void;
  parentForItemsInColumn(column: NSInteger): any;
  scrollRowToVisible_inColumn(row: NSInteger, column: NSInteger): void;
  setTitle_ofColumn(string: NSString | string, column: NSInteger): void;
  titleOfColumn(column: NSInteger): NSString;
  setPath(path: NSString | string): boolean;
  path(): NSString;
  pathToColumn(column: NSInteger): NSString;
  selectedCellInColumn(column: NSInteger): any;
  selectRow_inColumn(row: NSInteger, column: NSInteger): void;
  selectedRowInColumn(column: NSInteger): NSInteger;
  selectRowIndexes_inColumn(indexes: NSIndexSet, column: NSInteger): void;
  selectedRowIndexesInColumn(column: NSInteger): NSIndexSet;
  reloadColumn(column: NSInteger): void;
  validateVisibleColumns(): void;
  scrollColumnsRightBy(shiftAmount: NSInteger): void;
  scrollColumnsLeftBy(shiftAmount: NSInteger): void;
  scrollColumnToVisible(column: NSInteger): void;
  addColumn(): void;
  loadedCellAtRow_column(row: NSInteger, col: NSInteger): any;
  selectAll(sender: any | null): void;
  tile(): void;
  doClick(sender: any | null): void;
  doDoubleClick(sender: any | null): void;
  sendAction(): boolean;
  titleFrameOfColumn(column: NSInteger): NSRect;
  drawTitleOfColumn_inRect(column: NSInteger, rect: NSRect): void;
  frameOfColumn(column: NSInteger): NSRect;
  frameOfInsideOfColumn(column: NSInteger): NSRect;
  frameOfRow_inColumn(row: NSInteger, column: NSInteger): NSRect;
  getRow_column_forPoint(row: NSInteger | null, column: NSInteger | null, point: NSPoint): boolean;
  columnWidthForColumnContentWidth(columnContentWidth: CGFloat): CGFloat;
  columnContentWidthForColumnWidth(columnWidth: CGFloat): CGFloat;
  setWidth_ofColumn(columnWidth: CGFloat, columnIndex: NSInteger): void;
  widthOfColumn(column: NSInteger): CGFloat;
  noteHeightOfRowsWithIndexesChanged_inColumn(indexSet: NSIndexSet, columnIndex: NSInteger): void;
  setDefaultColumnWidth(columnWidth: CGFloat): void;
  defaultColumnWidth(): CGFloat;
  static removeSavedColumnsWithAutosaveName(name: NSBrowserColumnsAutosaveName): void;
  canDragRowsWithIndexes_inColumn_withEvent(rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent): boolean;
  draggingImageForRowsWithIndexes_inColumn_withEvent_offset(rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent, dragImageOffset: NSPointPointer | null): NSImage;
  setDraggingSourceOperationMask_forLocal(mask: NSDragOperation, isLocal: boolean): void;
  editItemAtIndexPath_withEvent_select(indexPath: NSIndexPath, event: NSEvent | null, select: boolean): void;
  setAcceptsArrowKeys(flag: boolean): void;
  acceptsArrowKeys(): boolean;
  displayColumn(column: NSInteger): void;
  displayAllColumns(): void;
  scrollViaScroller(sender: NSScroller): void;
  updateScroller(): void;
  setMatrixClass(factoryId: any): void;
  matrixClass(): any;
  columnOfMatrix(matrix: NSMatrix): NSInteger;
  matrixInColumn(column: NSInteger): NSMatrix;

  static cellClass(): any;
  static setCellClass(cellClass: any): void;
  loaded(): boolean;
  setLoaded(loaded: boolean): void;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  cellPrototype(): any;
  setCellPrototype(cellPrototype: any): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  reusesColumns(): boolean;
  setReusesColumns(reusesColumns: boolean): void;
  hasHorizontalScroller(): boolean;
  setHasHorizontalScroller(hasHorizontalScroller: boolean): void;
  autohidesScroller(): boolean;
  setAutohidesScroller(autohidesScroller: boolean): void;
  separatesColumns(): boolean;
  setSeparatesColumns(separatesColumns: boolean): void;
  titled(): boolean;
  setTitled(titled: boolean): void;
  minColumnWidth(): CGFloat;
  setMinColumnWidth(minColumnWidth: CGFloat): void;
  maxVisibleColumns(): NSInteger;
  setMaxVisibleColumns(maxVisibleColumns: NSInteger): void;
  allowsMultipleSelection(): boolean;
  setAllowsMultipleSelection(allowsMultipleSelection: boolean): void;
  allowsBranchSelection(): boolean;
  setAllowsBranchSelection(allowsBranchSelection: boolean): void;
  allowsEmptySelection(): boolean;
  setAllowsEmptySelection(allowsEmptySelection: boolean): void;
  takesTitleFromPreviousColumn(): boolean;
  setTakesTitleFromPreviousColumn(takesTitleFromPreviousColumn: boolean): void;
  sendsActionOnArrowKeys(): boolean;
  setSendsActionOnArrowKeys(sendsActionOnArrowKeys: boolean): void;
  pathSeparator(): NSString;
  setPathSeparator(pathSeparator: NSString | string): void;
  clickedColumn(): NSInteger;
  setClickedColumn(clickedColumn: NSInteger): void;
  clickedRow(): NSInteger;
  setClickedRow(clickedRow: NSInteger): void;
  selectedColumn(): NSInteger;
  setSelectedColumn(selectedColumn: NSInteger): void;
  selectedCell(): any;
  setSelectedCell(selectedCell: any): void;
  selectedCells(): NSArray<any>;
  setSelectedCells(selectedCells: NSArray<any> | any[]): void;
  selectionIndexPath(): NSIndexPath;
  setSelectionIndexPath(selectionIndexPath: NSIndexPath): void;
  selectionIndexPaths(): NSArray<any>;
  setSelectionIndexPaths(selectionIndexPaths: NSArray<any> | any[]): void;
  lastColumn(): NSInteger;
  setLastColumn(lastColumn: NSInteger): void;
  numberOfVisibleColumns(): NSInteger;
  setNumberOfVisibleColumns(numberOfVisibleColumns: NSInteger): void;
  firstVisibleColumn(): NSInteger;
  setFirstVisibleColumn(firstVisibleColumn: NSInteger): void;
  lastVisibleColumn(): NSInteger;
  setLastVisibleColumn(lastVisibleColumn: NSInteger): void;
  titleHeight(): CGFloat;
  setTitleHeight(titleHeight: CGFloat): void;
  columnResizingType(): NSBrowserColumnResizingType;
  setColumnResizingType(columnResizingType: NSBrowserColumnResizingType): void;
  prefersAllColumnUserResizing(): boolean;
  setPrefersAllColumnUserResizing(prefersAllColumnUserResizing: boolean): void;
  rowHeight(): CGFloat;
  setRowHeight(rowHeight: CGFloat): void;
  columnsAutosaveName(): NSBrowserColumnsAutosaveName;
  setColumnsAutosaveName(columnsAutosaveName: NSBrowserColumnsAutosaveName): void;
  allowsTypeSelect(): boolean;
  setAllowsTypeSelect(allowsTypeSelect: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
}

declare interface INSBrowserDelegate {
  browser_numberOfRowsInColumn(sender: NSBrowser, column: NSInteger): NSInteger;
  browser_createRowsForColumn_inMatrix(sender: NSBrowser, column: NSInteger, matrix: NSMatrix): void;
  browser_numberOfChildrenOfItem(browser: NSBrowser, item: any | null): NSInteger;
  browser_child_ofItem(browser: NSBrowser, index: NSInteger, item: any | null): any;
  browser_isLeafItem(browser: NSBrowser, item: any | null): boolean;
  browser_objectValueForItem(browser: NSBrowser, item: any | null): any;
  browser_heightOfRow_inColumn(browser: NSBrowser, row: NSInteger, columnIndex: NSInteger): CGFloat;
  rootItemForBrowser(browser: NSBrowser): any;
  browser_setObjectValue_forItem(browser: NSBrowser, object: any | null, item: any | null): void;
  browser_shouldEditItem(browser: NSBrowser, item: any | null): boolean;
  browser_willDisplayCell_atRow_column(sender: NSBrowser, cell: any, row: NSInteger, column: NSInteger): void;
  browser_titleOfColumn(sender: NSBrowser, column: NSInteger): NSString;
  browser_selectCellWithString_inColumn(sender: NSBrowser, title: NSString | string, column: NSInteger): boolean;
  browser_selectRow_inColumn(sender: NSBrowser, row: NSInteger, column: NSInteger): boolean;
  browser_isColumnValid(sender: NSBrowser, column: NSInteger): boolean;
  browserWillScroll(sender: NSBrowser): void;
  browserDidScroll(sender: NSBrowser): void;
  browser_shouldSizeColumn_forUserResize_toWidth(browser: NSBrowser, columnIndex: NSInteger, forUserResize: boolean, suggestedWidth: CGFloat): CGFloat;
  browser_sizeToFitWidthOfColumn(browser: NSBrowser, columnIndex: NSInteger): CGFloat;
  browserColumnConfigurationDidChange(notification: NSNotification): void;
  browser_shouldShowCellExpansionForRow_column(browser: NSBrowser, row: NSInteger, column: NSInteger): boolean;
  browser_writeRowsWithIndexes_inColumn_toPasteboard(browser: NSBrowser, rowIndexes: NSIndexSet, column: NSInteger, pasteboard: NSPasteboard): boolean;
  browser_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes_inColumn(browser: NSBrowser, dropDestination: NSURL, rowIndexes: NSIndexSet, column: NSInteger): NSArray<any>;
  browser_canDragRowsWithIndexes_inColumn_withEvent(browser: NSBrowser, rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent): boolean;
  browser_draggingImageForRowsWithIndexes_inColumn_withEvent_offset(browser: NSBrowser, rowIndexes: NSIndexSet, column: NSInteger, event: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  browser_validateDrop_proposedRow_column_dropOperation(browser: NSBrowser, info: any, row: NSInteger, column: NSInteger, dropOperation: NSBrowserDropOperation): NSDragOperation;
  browser_acceptDrop_atRow_column_dropOperation(browser: NSBrowser, info: any, row: NSInteger, column: NSInteger, dropOperation: NSBrowserDropOperation): boolean;
  browser_typeSelectStringForRow_inColumn(browser: NSBrowser, row: NSInteger, column: NSInteger): NSString;
  browser_shouldTypeSelectForEvent_withCurrentSearchString(browser: NSBrowser, event: NSEvent, searchString: NSString | string | null): boolean;
  browser_nextTypeSelectMatchFromRow_toRow_inColumn_forString(browser: NSBrowser, startRow: NSInteger, endRow: NSInteger, column: NSInteger, searchString: NSString | string | null): NSInteger;
  browser_previewViewControllerForLeafItem(browser: NSBrowser, item: any): NSViewController;
  browser_headerViewControllerForItem(browser: NSBrowser, item: any | null): NSViewController;
  browser_didChangeLastColumn_toColumn(browser: NSBrowser, oldLastColumn: NSInteger, column: NSInteger): void;
  browser_selectionIndexesForProposedSelection_inColumn(browser: NSBrowser, proposedSelectionIndexes: NSIndexSet, column: NSInteger): NSIndexSet;
}

declare type NSBrowserColumnsAutosaveName = NSString

declare enum NSBrowserColumnResizingType {
  NSBrowserNoColumnResizing = 0,
  NSBrowserAutoColumnResizing = 1,
  NSBrowserUserColumnResizing = 2,
}

declare enum NSBrowserDropOperation {
  NSBrowserDropOn,
  NSBrowserDropAbove,
}

declare class NSBrowserCell extends NSCell {
  // initTextCell<T extends NSBrowserCell>(string: NSString | string): T;
  // initImageCell<T extends NSBrowserCell>(image: NSImage | null): T;
  // initWithCoder<T extends NSBrowserCell>(coder: NSCoder): T;
  highlightColorInView(controlView: NSView): NSColor;
  reset(): void;
  set(): void;

  static branchImage(): NSImage;
  static setBranchImage(branchImage: NSImage): void;
  static highlightedBranchImage(): NSImage;
  static setHighlightedBranchImage(highlightedBranchImage: NSImage): void;
  leaf(): boolean;
  setLeaf(leaf: boolean): void;
  loaded(): boolean;
  setLoaded(loaded: boolean): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  alternateImage(): NSImage;
  setAlternateImage(alternateImage: NSImage): void;
}

declare class NSButton extends NSControl implements INSUserInterfaceValidations, INSAccessibilityButton, INSUserInterfaceCompression {
  setButtonType(type: NSButtonType): void;
  setPeriodicDelay_interval(delay: number, interval: number): void;
  getPeriodicDelay_interval(delay: number, interval: number): void;
  highlight(flag: boolean): void;
  performKeyEquivalent(key: NSEvent): boolean;
  compressWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): void;
  minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): NSSize;
  static buttonWithTitle_image_target_action(title: NSString | string, image: NSImage, target: any | null, action: string | null): NSButton;
  static buttonWithTitle_target_action(title: NSString | string, target: any | null, action: string | null): NSButton;
  static buttonWithImage_target_action(image: NSImage, target: any | null, action: string | null): NSButton;
  static checkboxWithTitle_target_action(title: NSString | string, target: any | null, action: string | null): NSButton;
  static radioButtonWithTitle_target_action(title: NSString | string, target: any | null, action: string | null): NSButton;
  setNextState(): void;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  validateUserInterfaceItem(item: any): boolean;
  accessibilityLabel(): NSString;
  accessibilityPerformPress(): boolean;
  compressWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): void;
  minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): NSSize;

  title(): NSString;
  setTitle(title: NSString | string): void;
  alternateTitle(): NSString;
  setAlternateTitle(alternateTitle: NSString | string): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  alternateImage(): NSImage;
  setAlternateImage(alternateImage: NSImage): void;
  imagePosition(): NSCellImagePosition;
  setImagePosition(imagePosition: NSCellImagePosition): void;
  imageScaling(): NSImageScaling;
  setImageScaling(imageScaling: NSImageScaling): void;
  imageHugsTitle(): boolean;
  setImageHugsTitle(imageHugsTitle: boolean): void;
  state(): NSControlStateValue;
  setState(state: NSControlStateValue): void;
  bordered(): boolean;
  setBordered(bordered: boolean): void;
  transparent(): boolean;
  setTransparent(transparent: boolean): void;
  keyEquivalent(): NSString;
  setKeyEquivalent(keyEquivalent: NSString | string): void;
  keyEquivalentModifierMask(): NSEventModifierFlags;
  setKeyEquivalentModifierMask(keyEquivalentModifierMask: NSEventModifierFlags): void;
  springLoaded(): boolean;
  setSpringLoaded(springLoaded: boolean): void;
  maxAcceleratorLevel(): NSInteger;
  setMaxAcceleratorLevel(maxAcceleratorLevel: NSInteger): void;
  bezelColor(): NSColor;
  setBezelColor(bezelColor: NSColor): void;
  activeCompressionOptions(): NSUserInterfaceCompressionOptions;
  setActiveCompressionOptions(activeCompressionOptions: NSUserInterfaceCompressionOptions): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  attributedAlternateTitle(): NSAttributedString;
  setAttributedAlternateTitle(attributedAlternateTitle: NSAttributedString): void;
  bezelStyle(): NSBezelStyle;
  setBezelStyle(bezelStyle: NSBezelStyle): void;
  allowsMixedState(): boolean;
  setAllowsMixedState(allowsMixedState: boolean): void;
  showsBorderOnlyWhileMouseInside(): boolean;
  setShowsBorderOnlyWhileMouseInside(showsBorderOnlyWhileMouseInside: boolean): void;
  sound(): NSSound;
  setSound(sound: NSSound): void;
}

declare class NSButtonCell extends NSActionCell {
  // initTextCell<T extends NSButtonCell>(string: NSString | string): T;
  // initImageCell<T extends NSButtonCell>(image: NSImage | null): T;
  // initWithCoder<T extends NSButtonCell>(coder: NSCoder): T;
  setButtonType(type: NSButtonType): void;
  setPeriodicDelay_interval(delay: number, interval: number): void;
  getPeriodicDelay_interval(delay: number, interval: number): void;
  setKeyEquivalentFont_size(fontName: NSString | string, fontSize: CGFloat): void;
  performClick(sender: any | null): void;
  drawImage_withFrame_inView(image: NSImage, frame: NSRect, controlView: NSView): void;
  drawTitle_withFrame_inView(title: NSAttributedString, frame: NSRect, controlView: NSView): NSRect;
  drawBezelWithFrame_inView(frame: NSRect, controlView: NSView): void;
  mouseEntered(event: NSEvent): void;
  mouseExited(event: NSEvent): void;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  setAlternateTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  setAlternateMnemonicLocation(location: NSUInteger): void;
  alternateMnemonicLocation(): NSUInteger;
  alternateMnemonic(): NSString;

  title(): NSString;
  setTitle(title: NSString | string): void;
  alternateTitle(): NSString;
  setAlternateTitle(alternateTitle: NSString | string): void;
  alternateImage(): NSImage;
  setAlternateImage(alternateImage: NSImage): void;
  imagePosition(): NSCellImagePosition;
  setImagePosition(imagePosition: NSCellImagePosition): void;
  imageScaling(): NSImageScaling;
  setImageScaling(imageScaling: NSImageScaling): void;
  highlightsBy(): NSCellStyleMask;
  setHighlightsBy(highlightsBy: NSCellStyleMask): void;
  showsStateBy(): NSCellStyleMask;
  setShowsStateBy(showsStateBy: NSCellStyleMask): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  transparent(): boolean;
  setTransparent(transparent: boolean): void;
  keyEquivalent(): NSString;
  setKeyEquivalent(keyEquivalent: NSString | string): void;
  keyEquivalentModifierMask(): NSEventModifierFlags;
  setKeyEquivalentModifierMask(keyEquivalentModifierMask: NSEventModifierFlags): void;
  keyEquivalentFont(): NSFont;
  setKeyEquivalentFont(keyEquivalentFont: NSFont): void;
  imageDimsWhenDisabled(): boolean;
  setImageDimsWhenDisabled(imageDimsWhenDisabled: boolean): void;
  showsBorderOnlyWhileMouseInside(): boolean;
  setShowsBorderOnlyWhileMouseInside(showsBorderOnlyWhileMouseInside: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  attributedAlternateTitle(): NSAttributedString;
  setAttributedAlternateTitle(attributedAlternateTitle: NSAttributedString): void;
  bezelStyle(): NSBezelStyle;
  setBezelStyle(bezelStyle: NSBezelStyle): void;
  sound(): NSSound;
  setSound(sound: NSSound): void;
  gradientType(): NSGradientType;
  setGradientType(gradientType: NSGradientType): void;
}

declare enum NSButtonType {
  NSButtonTypeMomentaryLight = 0,
  NSButtonTypePushOnPushOff = 1,
  NSButtonTypeToggle = 2,
  NSButtonTypeSwitch = 3,
  NSButtonTypeRadio = 4,
  NSButtonTypeMomentaryChange = 5,
  NSButtonTypeOnOff = 6,
  NSButtonTypeMomentaryPushIn = 7,
  NSButtonTypeAccelerator = 8,
  NSButtonTypeMultiLevelAccelerator = 9,
}

declare enum NSBezelStyle {
  NSBezelStyleRounded = 1,
  NSBezelStyleRegularSquare = 2,
  NSBezelStyleDisclosure = 5,
  NSBezelStyleShadowlessSquare = 6,
  NSBezelStyleCircular = 7,
  NSBezelStyleTexturedSquare = 8,
  NSBezelStyleHelpButton = 9,
  NSBezelStyleSmallSquare = 10,
  NSBezelStyleTexturedRounded = 11,
  NSBezelStyleRoundRect = 12,
  NSBezelStyleRecessed = 13,
  NSBezelStyleRoundedDisclosure = 14,
  NSBezelStyleInline = 15,
}

declare enum NSGradientType {
  NSGradientNone = 0,
  NSGradientConcaveWeak = 1,
  NSGradientConcaveStrong = 2,
  NSGradientConvexWeak = 3,
  NSGradientConvexStrong = 4,
}

declare class NSCIImageRep extends NSImageRep {
  static imageRepWithCIImage(image: CIImage): NSCIImageRep;
  initWithCIImage<T extends NSCIImageRep>(image: CIImage): T;

  CIImage(): CIImage;
  setCIImage(CIImage: CIImage): void;
}

declare class CIImage {
  initWithBitmapImageRep<T extends CIImage>(bitmapImageRep: NSBitmapImageRep): T;
  drawInRect_fromRect_operation_fraction(rect: NSRect, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  drawAtPoint_fromRect_operation_fraction(point: NSPoint, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  PNGRepresentationWithInterlaced(interlaced: boolean): NSData;
  imageByFlippingVertically(): CIImage;
}

declare class NSCachedImageRep extends NSImageRep {
  initWithWindow_rect<T extends NSCachedImageRep>(win: NSWindow, rect: NSRect): T;
  initWithSize_depth_separate_alpha<T extends NSCachedImageRep>(size: NSSize, depth: NSWindowDepth, flag: boolean, alpha: boolean): T;
  window(): NSWindow;
  rect(): NSRect;
}

declare class NSCandidateListTouchBarItem<CandidateType> extends NSTouchBarItem {
  updateWithInsertionPointVisibility(isVisible: boolean): void;
  setCandidates_forSelectedRange_inString(candidates: NSArray<any> | any[], selectedRange: NSRange, originalString: NSString | string | null): void;

  client(): NSView;
  setClient(client: NSView): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  collapsed(): boolean;
  setCollapsed(collapsed: boolean): void;
  allowsCollapsing(): boolean;
  setAllowsCollapsing(allowsCollapsing: boolean): void;
  candidateListVisible(): boolean;
  setCandidateListVisible(candidateListVisible: boolean): void;
  allowsTextInputContextCandidates(): boolean;
  setAllowsTextInputContextCandidates(allowsTextInputContextCandidates: boolean): void;
  candidates(): NSArray<any>;
  setCandidates(candidates: NSArray<any> | any[]): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
}

declare class NSView extends NSResponder implements INSAnimatablePropertyContainer, INSUserInterfaceItemIdentification, INSDraggingDestination, INSAppearanceCustomization, INSAccessibilityElement, INSAccessibility {
  reflectScrolledClipView(clipView: NSClipView): void;
  scrollClipView_toPoint(clipView: NSClipView, point: NSPoint): void;
  addConstraint(constraint: NSLayoutConstraint): void;
  addConstraints(constraints: NSArray<any> | any[]): void;
  removeConstraint(constraint: NSLayoutConstraint): void;
  removeConstraints(constraints: NSArray<any> | any[]): void;
  updateConstraintsForSubtreeIfNeeded(): void;
  layoutSubtreeIfNeeded(): void;
  layout(): void;
  alignmentRectForFrame(frame: NSRect): NSRect;
  frameForAlignmentRect(alignmentRect: NSRect): NSRect;
  invalidateIntrinsicContentSize(): void;
  contentHuggingPriorityForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutPriority;
  setContentHuggingPriority_forOrientation(priority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation): void;
  contentCompressionResistancePriorityForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutPriority;
  setContentCompressionResistancePriority_forOrientation(priority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation): void;
  constraintsAffectingLayoutForOrientation(orientation: NSLayoutConstraintOrientation): NSArray<any>;
  exerciseAmbiguityInLayout(): void;
  addLayoutGuide(guide: NSLayoutGuide): void;
  removeLayoutGuide(guide: NSLayoutGuide): void;
  rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent): void;
  rulerView_willSetClientView(ruler: NSRulerView, newClient: NSView): void;
  rulerView_locationForPoint(ruler: NSRulerView, point: NSPoint): CGFloat;
  rulerView_pointForLocation(ruler: NSRulerView, point: CGFloat): NSPoint;
  initWithFrame<T extends NSView>(frameRect: NSRect): T;
  // initWithCoder<T extends NSView>(decoder: NSCoder): T;
  isDescendantOf(view: NSView): boolean;
  ancestorSharedWithView(view: NSView): NSView;
  getRectsBeingDrawn_count(rects: NSRect, count: NSInteger | null): void;
  needsToDrawRect(rect: NSRect): boolean;
  viewDidHide(): void;
  viewDidUnhide(): void;
  addSubview(view: NSView): void;
  addSubview_positioned_relativeTo(view: NSView, place: NSWindowOrderingMode, otherView: NSView | null): void;
  viewWillMoveToWindow(newWindow: NSWindow | null): void;
  viewDidMoveToWindow(): void;
  viewWillMoveToSuperview(newSuperview: NSView | null): void;
  viewDidMoveToSuperview(): void;
  didAddSubview(subview: NSView): void;
  willRemoveSubview(subview: NSView): void;
  removeFromSuperview(): void;
  replaceSubview_with(oldView: NSView, newView: NSView): void;
  removeFromSuperviewWithoutNeedingDisplay(): void;
  viewDidChangeBackingProperties(): void;
  resizeSubviewsWithOldSize(oldSize: NSSize): void;
  resizeWithOldSuperviewSize(oldSize: NSSize): void;
  setFrameOrigin(newOrigin: NSPoint): void;
  setFrameSize(newSize: NSSize): void;
  setBoundsOrigin(newOrigin: NSPoint): void;
  setBoundsSize(newSize: NSSize): void;
  translateOriginToPoint(translation: NSPoint): void;
  scaleUnitSquareToSize(newUnitSize: NSSize): void;
  rotateByAngle(angle: CGFloat): void;
  convertPoint_fromView(point: NSPoint, view: NSView | null): NSPoint;
  convertPoint_toView(point: NSPoint, view: NSView | null): NSPoint;
  convertSize_fromView(size: NSSize, view: NSView | null): NSSize;
  convertSize_toView(size: NSSize, view: NSView | null): NSSize;
  convertRect_fromView(rect: NSRect, view: NSView | null): NSRect;
  convertRect_toView(rect: NSRect, view: NSView | null): NSRect;
  backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions): NSRect;
  centerScanRect(rect: NSRect): NSRect;
  convertPointToBacking(point: NSPoint): NSPoint;
  convertPointFromBacking(point: NSPoint): NSPoint;
  convertSizeToBacking(size: NSSize): NSSize;
  convertSizeFromBacking(size: NSSize): NSSize;
  convertRectToBacking(rect: NSRect): NSRect;
  convertRectFromBacking(rect: NSRect): NSRect;
  convertPointToLayer(point: NSPoint): NSPoint;
  convertPointFromLayer(point: NSPoint): NSPoint;
  convertSizeToLayer(size: NSSize): NSSize;
  convertSizeFromLayer(size: NSSize): NSSize;
  convertRectToLayer(rect: NSRect): NSRect;
  convertRectFromLayer(rect: NSRect): NSRect;
  setNeedsDisplayInRect(invalidRect: NSRect): void;
  lockFocus(): void;
  unlockFocus(): void;
  lockFocusIfCanDraw(): boolean;
  lockFocusIfCanDrawInContext(context: NSGraphicsContext): boolean;
  display(): void;
  displayIfNeeded(): void;
  displayIfNeededIgnoringOpacity(): void;
  displayRect(rect: NSRect): void;
  displayIfNeededInRect(rect: NSRect): void;
  displayRectIgnoringOpacity(rect: NSRect): void;
  displayIfNeededInRectIgnoringOpacity(rect: NSRect): void;
  drawRect(dirtyRect: NSRect): void;
  displayRectIgnoringOpacity_inContext(rect: NSRect, context: NSGraphicsContext): void;
  bitmapImageRepForCachingDisplayInRect(rect: NSRect): NSBitmapImageRep;
  cacheDisplayInRect_toBitmapImageRep(rect: NSRect, bitmapImageRep: NSBitmapImageRep): void;
  viewWillDraw(): void;
  scrollPoint(point: NSPoint): void;
  scrollRectToVisible(rect: NSRect): boolean;
  autoscroll(event: NSEvent): boolean;
  adjustScroll(newVisible: NSRect): NSRect;
  scrollRect_by(rect: NSRect, delta: NSSize): void;
  translateRectsNeedingDisplayInRect_by(clipRect: NSRect, delta: NSSize): void;
  hitTest(point: NSPoint): NSView;
  mouse_inRect(point: NSPoint, rect: NSRect): boolean;
  viewWithTag(tag: NSInteger): NSView;
  performKeyEquivalent(event: NSEvent): boolean;
  acceptsFirstMouse(event: NSEvent | null): boolean;
  shouldDelayWindowOrderingForEvent(event: NSEvent): boolean;
  addCursorRect_cursor(rect: NSRect, object: NSCursor): void;
  removeCursorRect_cursor(rect: NSRect, object: NSCursor): void;
  discardCursorRects(): void;
  resetCursorRects(): void;
  addTrackingRect_owner_userData_assumeInside(rect: NSRect, owner: any, data: void | null, flag: boolean): NSTrackingRectTag;
  removeTrackingRect(tag: NSTrackingRectTag): void;
  makeBackingLayer(): CALayer;
  updateLayer(): void;
  addTrackingArea(trackingArea: NSTrackingArea): void;
  removeTrackingArea(trackingArea: NSTrackingArea): void;
  updateTrackingAreas(): void;
  menuForEvent(event: NSEvent): NSMenu;
  willOpenMenu_withEvent(menu: NSMenu, event: NSEvent): void;
  didCloseMenu_withEvent(menu: NSMenu, event: NSEvent | null): void;
  addToolTipRect_owner_userData(rect: NSRect, owner: any, data: void | null): NSToolTipTag;
  removeToolTip(tag: NSToolTipTag): void;
  removeAllToolTips(): void;
  viewWillStartLiveResize(): void;
  viewDidEndLiveResize(): void;
  getRectsExposedDuringLiveResize_count(exposedRects: [NSRect, NSRect, NSRect, NSRect], count: NSInteger): void;
  rectForSmartMagnificationAtPoint_inRect(location: NSPoint, visibleRect: NSRect): NSRect;
  prepareForReuse(): void;
  prepareContentInRect(rect: NSRect): void;
  setKeyboardFocusRingNeedsDisplayInRect(rect: NSRect): void;
  drawFocusRingMask(): void;
  noteFocusRingMaskChanged(): void;
  writeEPSInsideRect_toPasteboard(rect: NSRect, pasteboard: NSPasteboard): void;
  dataWithEPSInsideRect(rect: NSRect): NSData;
  writePDFInsideRect_toPasteboard(rect: NSRect, pasteboard: NSPasteboard): void;
  dataWithPDFInsideRect(rect: NSRect): NSData;
  print(sender: any | null): void;
  knowsPageRange(range: NSRangePointer): boolean;
  adjustPageWidthNew_left_right_limit(newRight: CGFloat, oldLeft: CGFloat, oldRight: CGFloat, rightLimit: CGFloat): void;
  adjustPageHeightNew_top_bottom_limit(newBottom: CGFloat, oldTop: CGFloat, oldBottom: CGFloat, bottomLimit: CGFloat): void;
  rectForPage(page: NSInteger): NSRect;
  locationOfPrintRect(rect: NSRect): NSPoint;
  drawPageBorderWithSize(borderSize: NSSize): void;
  drawSheetBorderWithSize(borderSize: NSSize): void;
  beginDocument(): void;
  endDocument(): void;
  beginPageInRect_atPlacement(rect: NSRect, location: NSPoint): void;
  endPage(): void;
  beginDraggingSessionWithItems_event_source(items: NSArray<any> | any[], event: NSEvent, source: any): NSDraggingSession;
  registerForDraggedTypes(newTypes: NSArray<any> | any[]): void;
  unregisterDraggedTypes(): void;
  enterFullScreenMode_withOptions(screen: NSScreen, options: NSDictionary<any, any> | {[key: string]: any} | null): boolean;
  exitFullScreenModeWithOptions(options: NSDictionary<any, any> | {[key: string]: any} | null): void;
  showDefinitionForAttributedString_atPoint(attrString: NSAttributedString | null, textBaselineOrigin: NSPoint): void;
  showDefinitionForAttributedString_range_options_baselineOriginProvider(attrString: NSAttributedString | null, targetRange: NSRange, options: NSDictionary<any, any> | {[key: string]: any} | null, originProvider: Block): void;
  addGestureRecognizer(gestureRecognizer: NSGestureRecognizer): void;
  removeGestureRecognizer(gestureRecognizer: NSGestureRecognizer): void;
  dragImage_at_offset_event_pasteboard_source_slideBack(image: NSImage, viewLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: any, slideFlag: boolean): void;
  dragFile_fromRect_slideBack_event(filename: NSString | string, rect: NSRect, flag: boolean, event: NSEvent): boolean;
  dragPromisedFilesOfTypes_fromRect_source_slideBack_event(typeArray: NSArray<any> | any[], rect: NSRect, sourceObject: any, flag: boolean, event: NSEvent): boolean;
  convertPointToBase(point: NSPoint): NSPoint;
  convertPointFromBase(point: NSPoint): NSPoint;
  convertSizeToBase(size: NSSize): NSSize;
  convertSizeFromBase(size: NSSize): NSSize;
  convertRectToBase(rect: NSRect): NSRect;
  convertRectFromBase(rect: NSRect): NSRect;
  performMnemonic(string: NSString | string): boolean;
  shouldDrawColor(): boolean;
  gState(): NSInteger;
  allocateGState(): void;
  releaseGState(): void;
  setUpGState(): void;
  renewGState(): void;
  addSubview_constrainedBy_priority(subview: NSView, insets: NSEdgeInsets, priority: NSLayoutPriority): void;
  constrainHeight(height: CGFloat): void;
  constrainHeight_priority(height: CGFloat, priority: NSLayoutPriority): void;
  constrainWidth(width: CGFloat): void;
  constrainWidth_priority(width: CGFloat, priority: NSLayoutPriority): void;
  heightConstraint(): NSLayoutConstraint;
  hideWithZeroHeight(): void;
  hideWithZeroWidth(): void;
  showWithHeight(height: CGFloat): void;
  showWithWidth(width: CGFloat): void;
  horizontalConstraintWithView(anotherView: NSView): NSLayoutConstraint;
  horizontalConstraintsWithView(anotherView: NSView): NSArray<any>;
  verticalConstraintWithView(anotherView: NSView): NSLayoutConstraint;
  verticalConstraintsWithView(anotherView: NSView): NSArray<any>;
  widthConstraint(): NSLayoutConstraint;
  setFrameHeight(height: CGFloat): void;
  setFrameWidth(width: CGFloat): void;
  setFrameOriginX(x: CGFloat): void;
  setFrameOriginY(y: CGFloat): void;
  setNeedsDisplay(): void;
  imageRepresentation(): NSImage;
  beginDragFromEvent_image_type_data(event: NSEvent, image: NSImage, type: NSString | string, propertyListData: any): void;
  beginDragFromEvent_image_writersBlock(event: NSEvent, image: NSImage, block: MSPasteboardItemWritingBlock): void;
  containingAncestorViewOfClass(ancestorViewClass: any): NSView;
  nestedSubviewWithIdentifier(identifer: NSUserInterfaceItemIdentifier): NSView;
  animateToFrameOrigin_completionBlock(origin: NSPoint, block: MSAnimationBlock): void;
  animateToFrameOriginX_completionBlock(x: NSInteger, block: MSAnimationBlock): void;
  animateToFrameOriginX(x: NSInteger): void;
  subViewsForResponderFixer(): NSArray<any>;
  enclosingStackView(): MSInspectorStackView;
  viewHistoryMaker(): MSHistoryMaker;
  clickShouldDismissPopover(popover: BCPopover): boolean;
  wantsSeparatorBetweenSelfAndView(view: NSView): boolean;
  separatorInsetBetweenSelfAndView(view: NSView): NSEdgeInsets;
  animator(): NSView;
  animationForKey(key: NSAnimatablePropertyKey): any;
  static defaultAnimationForKey(key: NSAnimatablePropertyKey): any;
  draggingEntered(sender: any): NSDragOperation;
  draggingUpdated(sender: any): NSDragOperation;
  draggingExited(sender: any | null): void;
  prepareForDragOperation(sender: any): boolean;
  performDragOperation(sender: any): boolean;
  concludeDragOperation(sender: any | null): void;
  draggingEnded(sender: any): void;
  wantsPeriodicDraggingUpdates(): boolean;
  updateDraggingItemsForDrag(sender: any | null): void;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
  setCandidateListTouchBarItem(candidateListTouchBarItem: NSCandidateListTouchBarItem<any>): void;
  leadingAnchor(): NSLayoutXAxisAnchor;
  setLeadingAnchor(leadingAnchor: NSLayoutXAxisAnchor): void;
  trailingAnchor(): NSLayoutXAxisAnchor;
  setTrailingAnchor(trailingAnchor: NSLayoutXAxisAnchor): void;
  leftAnchor(): NSLayoutXAxisAnchor;
  setLeftAnchor(leftAnchor: NSLayoutXAxisAnchor): void;
  rightAnchor(): NSLayoutXAxisAnchor;
  setRightAnchor(rightAnchor: NSLayoutXAxisAnchor): void;
  topAnchor(): NSLayoutYAxisAnchor;
  setTopAnchor(topAnchor: NSLayoutYAxisAnchor): void;
  bottomAnchor(): NSLayoutYAxisAnchor;
  setBottomAnchor(bottomAnchor: NSLayoutYAxisAnchor): void;
  widthAnchor(): NSLayoutDimension;
  setWidthAnchor(widthAnchor: NSLayoutDimension): void;
  heightAnchor(): NSLayoutDimension;
  setHeightAnchor(heightAnchor: NSLayoutDimension): void;
  centerXAnchor(): NSLayoutXAxisAnchor;
  setCenterXAnchor(centerXAnchor: NSLayoutXAxisAnchor): void;
  centerYAnchor(): NSLayoutYAxisAnchor;
  setCenterYAnchor(centerYAnchor: NSLayoutYAxisAnchor): void;
  firstBaselineAnchor(): NSLayoutYAxisAnchor;
  setFirstBaselineAnchor(firstBaselineAnchor: NSLayoutYAxisAnchor): void;
  lastBaselineAnchor(): NSLayoutYAxisAnchor;
  setLastBaselineAnchor(lastBaselineAnchor: NSLayoutYAxisAnchor): void;
  constraints(): NSArray<any>;
  setConstraints(constraints: NSArray<any> | any[]): void;
  needsUpdateConstraints(): boolean;
  setNeedsUpdateConstraints(needsUpdateConstraints: boolean): void;
  needsLayout(): boolean;
  setNeedsLayout(needsLayout: boolean): void;
  translatesAutoresizingMaskIntoConstraints(): boolean;
  setTranslatesAutoresizingMaskIntoConstraints(translatesAutoresizingMaskIntoConstraints: boolean): void;
  static requiresConstraintBasedLayout(): boolean;
  static setRequiresConstraintBasedLayout(requiresConstraintBasedLayout: boolean): void;
  alignmentRectInsets(): NSEdgeInsets;
  setAlignmentRectInsets(alignmentRectInsets: NSEdgeInsets): void;
  firstBaselineOffsetFromTop(): CGFloat;
  setFirstBaselineOffsetFromTop(firstBaselineOffsetFromTop: CGFloat): void;
  lastBaselineOffsetFromBottom(): CGFloat;
  setLastBaselineOffsetFromBottom(lastBaselineOffsetFromBottom: CGFloat): void;
  baselineOffsetFromBottom(): CGFloat;
  setBaselineOffsetFromBottom(baselineOffsetFromBottom: CGFloat): void;
  intrinsicContentSize(): NSSize;
  setIntrinsicContentSize(intrinsicContentSize: NSSize): void;
  fittingSize(): NSSize;
  setFittingSize(fittingSize: NSSize): void;
  hasAmbiguousLayout(): boolean;
  setHasAmbiguousLayout(hasAmbiguousLayout: boolean): void;
  layoutGuides(): NSArray<any>;
  setLayoutGuides(layoutGuides: NSArray<any> | any[]): void;
  enclosingMenuItem(): NSMenuItem;
  setEnclosingMenuItem(enclosingMenuItem: NSMenuItem): void;
  wantsBestResolutionOpenGLSurface(): boolean;
  setWantsBestResolutionOpenGLSurface(wantsBestResolutionOpenGLSurface: boolean): void;
  wantsExtendedDynamicRangeOpenGLSurface(): boolean;
  setWantsExtendedDynamicRangeOpenGLSurface(wantsExtendedDynamicRangeOpenGLSurface: boolean): void;
  pressureConfiguration(): NSPressureConfiguration;
  setPressureConfiguration(pressureConfiguration: NSPressureConfiguration): void;
  window(): NSWindow;
  setWindow(window: NSWindow): void;
  superview(): NSView;
  setSuperview(superview: NSView): void;
  subviews(): NSArray<any>;
  setSubviews(subviews: NSArray<any> | any[]): void;
  opaqueAncestor(): NSView;
  setOpaqueAncestor(opaqueAncestor: NSView): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  hiddenOrHasHiddenAncestor(): boolean;
  setHiddenOrHasHiddenAncestor(hiddenOrHasHiddenAncestor: boolean): void;
  wantsDefaultClipping(): boolean;
  setWantsDefaultClipping(wantsDefaultClipping: boolean): void;
  postsFrameChangedNotifications(): boolean;
  setPostsFrameChangedNotifications(postsFrameChangedNotifications: boolean): void;
  autoresizesSubviews(): boolean;
  setAutoresizesSubviews(autoresizesSubviews: boolean): void;
  autoresizingMask(): NSAutoresizingMaskOptions;
  setAutoresizingMask(autoresizingMask: NSAutoresizingMaskOptions): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
  frameRotation(): CGFloat;
  setFrameRotation(frameRotation: CGFloat): void;
  frameCenterRotation(): CGFloat;
  setFrameCenterRotation(frameCenterRotation: CGFloat): void;
  boundsRotation(): CGFloat;
  setBoundsRotation(boundsRotation: CGFloat): void;
  bounds(): NSRect;
  setBounds(bounds: NSRect): void;
  flipped(): boolean;
  setFlipped(flipped: boolean): void;
  rotatedFromBase(): boolean;
  setRotatedFromBase(rotatedFromBase: boolean): void;
  rotatedOrScaledFromBase(): boolean;
  setRotatedOrScaledFromBase(rotatedOrScaledFromBase: boolean): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  canDrawConcurrently(): boolean;
  setCanDrawConcurrently(canDrawConcurrently: boolean): void;
  canDraw(): boolean;
  setCanDraw(canDraw: boolean): void;
  needsDisplay(): boolean;
  setNeedsDisplay(needsDisplay: boolean): void;
  static focusView(): NSView;
  static setFocusView(focusView: NSView): void;
  visibleRect(): NSRect;
  setVisibleRect(visibleRect: NSRect): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
  needsPanelToBecomeKey(): boolean;
  setNeedsPanelToBecomeKey(needsPanelToBecomeKey: boolean): void;
  mouseDownCanMoveWindow(): boolean;
  setMouseDownCanMoveWindow(mouseDownCanMoveWindow: boolean): void;
  acceptsTouchEvents(): boolean;
  setAcceptsTouchEvents(acceptsTouchEvents: boolean): void;
  wantsRestingTouches(): boolean;
  setWantsRestingTouches(wantsRestingTouches: boolean): void;
  layerContentsRedrawPolicy(): NSViewLayerContentsRedrawPolicy;
  setLayerContentsRedrawPolicy(layerContentsRedrawPolicy: NSViewLayerContentsRedrawPolicy): void;
  layerContentsPlacement(): NSViewLayerContentsPlacement;
  setLayerContentsPlacement(layerContentsPlacement: NSViewLayerContentsPlacement): void;
  wantsLayer(): boolean;
  setWantsLayer(wantsLayer: boolean): void;
  layer(): CALayer;
  setLayer(layer: CALayer): void;
  wantsUpdateLayer(): boolean;
  setWantsUpdateLayer(wantsUpdateLayer: boolean): void;
  canDrawSubviewsIntoLayer(): boolean;
  setCanDrawSubviewsIntoLayer(canDrawSubviewsIntoLayer: boolean): void;
  alphaValue(): CGFloat;
  setAlphaValue(alphaValue: CGFloat): void;
  layerUsesCoreImageFilters(): boolean;
  setLayerUsesCoreImageFilters(layerUsesCoreImageFilters: boolean): void;
  backgroundFilters(): NSArray<any>;
  setBackgroundFilters(backgroundFilters: NSArray<any> | any[]): void;
  compositingFilter(): CIFilter;
  setCompositingFilter(compositingFilter: CIFilter): void;
  contentFilters(): NSArray<any>;
  setContentFilters(contentFilters: NSArray<any> | any[]): void;
  shadow(): NSShadow;
  setShadow(shadow: NSShadow): void;
  trackingAreas(): NSArray<any>;
  setTrackingAreas(trackingAreas: NSArray<any> | any[]): void;
  postsBoundsChangedNotifications(): boolean;
  setPostsBoundsChangedNotifications(postsBoundsChangedNotifications: boolean): void;
  enclosingScrollView(): NSScrollView;
  setEnclosingScrollView(enclosingScrollView: NSScrollView): void;
  static defaultMenu(): NSMenu;
  static setDefaultMenu(defaultMenu: NSMenu): void;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
  inLiveResize(): boolean;
  setInLiveResize(inLiveResize: boolean): void;
  preservesContentDuringLiveResize(): boolean;
  setPreservesContentDuringLiveResize(preservesContentDuringLiveResize: boolean): void;
  rectPreservedDuringLiveResize(): NSRect;
  setRectPreservedDuringLiveResize(rectPreservedDuringLiveResize: NSRect): void;
  inputContext(): NSTextInputContext;
  setInputContext(inputContext: NSTextInputContext): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  static compatibleWithResponsiveScrolling(): boolean;
  static setCompatibleWithResponsiveScrolling(compatibleWithResponsiveScrolling: boolean): void;
  preparedContentRect(): NSRect;
  setPreparedContentRect(preparedContentRect: NSRect): void;
  allowsVibrancy(): boolean;
  setAllowsVibrancy(allowsVibrancy: boolean): void;
  nextKeyView(): NSView;
  setNextKeyView(nextKeyView: NSView): void;
  previousKeyView(): NSView;
  setPreviousKeyView(previousKeyView: NSView): void;
  nextValidKeyView(): NSView;
  setNextValidKeyView(nextValidKeyView: NSView): void;
  previousValidKeyView(): NSView;
  setPreviousValidKeyView(previousValidKeyView: NSView): void;
  canBecomeKeyView(): boolean;
  setCanBecomeKeyView(canBecomeKeyView: boolean): void;
  focusRingType(): NSFocusRingType;
  setFocusRingType(focusRingType: NSFocusRingType): void;
  static defaultFocusRingType(): NSFocusRingType;
  static setDefaultFocusRingType(defaultFocusRingType: NSFocusRingType): void;
  focusRingMaskBounds(): NSRect;
  setFocusRingMaskBounds(focusRingMaskBounds: NSRect): void;
  heightAdjustLimit(): CGFloat;
  setHeightAdjustLimit(heightAdjustLimit: CGFloat): void;
  widthAdjustLimit(): CGFloat;
  setWidthAdjustLimit(widthAdjustLimit: CGFloat): void;
  pageHeader(): NSAttributedString;
  setPageHeader(pageHeader: NSAttributedString): void;
  pageFooter(): NSAttributedString;
  setPageFooter(pageFooter: NSAttributedString): void;
  printJobTitle(): NSString;
  setPrintJobTitle(printJobTitle: NSString | string): void;
  registeredDraggedTypes(): NSArray<any>;
  setRegisteredDraggedTypes(registeredDraggedTypes: NSArray<any> | any[]): void;
  inFullScreenMode(): boolean;
  setInFullScreenMode(inFullScreenMode: boolean): void;
  drawingFindIndicator(): boolean;
  setDrawingFindIndicator(drawingFindIndicator: boolean): void;
  gestureRecognizers(): NSArray<any>;
  setGestureRecognizers(gestureRecognizers: NSArray<any> | any[]): void;
  allowedTouchTypes(): NSTouchTypeMask;
  setAllowedTouchTypes(allowedTouchTypes: NSTouchTypeMask): void;
  dropDelegate_bc(): NSObject;
  setDropDelegate_bc(dropDelegate_bc: NSObject): void;
  allSubviews(): NSArray<any>;
  setAllSubviews(allSubviews: NSArray<any> | any[]): void;
  canBeKeyView(): boolean;
  setCanBeKeyView(canBeKeyView: boolean): void;
  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  appearance(): NSAppearance;
  setAppearance(appearance: NSAppearance): void;
  effectiveAppearance(): NSAppearance;
  setEffectiveAppearance(effectiveAppearance: NSAppearance): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare interface INSCandidateListTouchBarItemDelegate {
  candidateListTouchBarItem_beginSelectingCandidateAtIndex(anItem: NSCandidateListTouchBarItem<any>, index: NSInteger): void;
  candidateListTouchBarItem_changeSelectionFromCandidateAtIndex_toIndex(anItem: NSCandidateListTouchBarItem<any>, previousIndex: NSInteger, index: NSInteger): void;
  candidateListTouchBarItem_endSelectingCandidateAtIndex(anItem: NSCandidateListTouchBarItem<any>, index: NSInteger): void;
  candidateListTouchBarItem_changedCandidateListVisibility(anItem: NSCandidateListTouchBarItem<any>, isVisible: boolean): void;
}

declare class NSCell extends NSObject implements INSCopying, INSCoding, INSUserInterfaceItemIdentification, INSAccessibilityElement, INSAccessibility {
  init<T extends NSCell>(): T;
  initTextCell<T extends NSCell>(string: NSString | string): T;
  initImageCell<T extends NSCell>(image: NSImage | null): T;
  initWithCoder<T extends NSCell>(coder: NSCoder): T;
  sendActionOn(mask: NSInteger): NSInteger;
  compare(otherCell: any): NSComparisonResult;
  takeIntValueFrom(sender: any | null): void;
  takeFloatValueFrom(sender: any | null): void;
  takeDoubleValueFrom(sender: any | null): void;
  takeStringValueFrom(sender: any | null): void;
  takeObjectValueFrom(sender: any | null): void;
  cellAttribute(parameter: NSCellAttribute): NSInteger;
  setCellAttribute_to(parameter: NSCellAttribute, value: NSInteger): void;
  imageRectForBounds(rect: NSRect): NSRect;
  titleRectForBounds(rect: NSRect): NSRect;
  drawingRectForBounds(rect: NSRect): NSRect;
  cellSizeForBounds(rect: NSRect): NSSize;
  highlightColorWithFrame_inView(cellFrame: NSRect, controlView: NSView): NSColor;
  calcDrawInfo(rect: NSRect): void;
  setUpFieldEditorAttributes(textObj: NSText): NSText;
  drawInteriorWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  highlight_withFrame_inView(flag: boolean, cellFrame: NSRect, controlView: NSView): void;
  getPeriodicDelay_interval(delay: number, interval: number): void;
  startTrackingAt_inView(startPoint: NSPoint, controlView: NSView): boolean;
  continueTracking_at_inView(lastPoint: NSPoint, currentPoint: NSPoint, controlView: NSView): boolean;
  stopTracking_at_inView_mouseIsUp(lastPoint: NSPoint, stopPoint: NSPoint, controlView: NSView, flag: boolean): void;
  trackMouse_inRect_ofView_untilMouseUp(event: NSEvent, cellFrame: NSRect, controlView: NSView, flag: boolean): boolean;
  editWithFrame_inView_editor_delegate_event(rect: NSRect, controlView: NSView, textObj: NSText, delegate: any | null, event: NSEvent | null): void;
  selectWithFrame_inView_editor_delegate_start_length(rect: NSRect, controlView: NSView, textObj: NSText, delegate: any | null, selStart: NSInteger, selLength: NSInteger): void;
  endEditing(textObj: NSText): void;
  resetCursorRect_inView(cellFrame: NSRect, controlView: NSView): void;
  menuForEvent_inRect_ofView(event: NSEvent, cellFrame: NSRect, view: NSView): NSMenu;
  takeIntegerValueFrom(sender: any | null): void;
  fieldEditorForView(controlView: NSView): NSTextView;
  draggingImageComponentsWithFrame_inView(frame: NSRect, view: NSView): NSArray<any>;
  performClick(sender: any | null): void;
  drawFocusRingMaskWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  focusRingMaskBoundsForFrame_inView(cellFrame: NSRect, controlView: NSView): NSRect;
  setNextState(): void;
  hitTestForEvent_inRect_ofView(event: NSEvent, cellFrame: NSRect, controlView: NSView): NSCellHitResult;
  expansionFrameWithFrame_inView(cellFrame: NSRect, view: NSView): NSRect;
  drawWithExpansionFrame_inView(cellFrame: NSRect, view: NSView): void;
  entryType(): NSInteger;
  setEntryType(type: NSInteger): void;
  isEntryAcceptable(string: NSString | string): boolean;
  setFloatingPointFormat_left_right(autoRange: boolean, leftDigits: NSUInteger, rightDigits: NSUInteger): void;
  setMnemonicLocation(location: NSUInteger): void;
  mnemonicLocation(): NSUInteger;
  mnemonic(): NSString;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  inheritedBackgroundStyle(): NSBackgroundStyle;
  currentInspectorIconColor(): NSColor;
  drawInspectorButtonImage_centeredInRect(image: NSImage, rect: NSRect): void;
  drawInspectorButtonImage_centeredInRect_accented(image: NSImage, rect: NSRect, accented: boolean): void;
  drawInspectorStatelessControlImage_centeredInRect(image: NSImage, rect: NSRect): void;
  drawInspectorButtonPath_accented_highlighted(path: NSBezierPath, accented: boolean, highlighted: boolean): void;
  drawInspectorTextFieldBackgroundWithPath(path: NSBezierPath): void;
  drawInspectorFocusRingMaskWithWithPath(path: NSBezierPath): void;
  inspectorFocusRingMaskBoundsForFrame_inView(cellFrame: NSRect, controlView: NSView): NSRect;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSCell>(aDecoder: NSCoder): T;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  static prefersTrackingUntilMouseUp(): boolean;
  static setPrefersTrackingUntilMouseUp(prefersTrackingUntilMouseUp: boolean): void;
  controlView(): NSView;
  setControlView(controlView: NSView): void;
  type(): NSCellType;
  setType(type: NSCellType): void;
  state(): NSControlStateValue;
  setState(state: NSControlStateValue): void;
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  continuous(): boolean;
  setContinuous(continuous: boolean): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  bordered(): boolean;
  setBordered(bordered: boolean): void;
  bezeled(): boolean;
  setBezeled(bezeled: boolean): void;
  scrollable(): boolean;
  setScrollable(scrollable: boolean): void;
  highlighted(): boolean;
  setHighlighted(highlighted: boolean): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  wraps(): boolean;
  setWraps(wraps: boolean): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  keyEquivalent(): NSString;
  setKeyEquivalent(keyEquivalent: NSString | string): void;
  formatter(): NSFormatter;
  setFormatter(formatter: NSFormatter): void;
  objectValue(): any;
  setObjectValue(objectValue: any): void;
  hasValidObjectValue(): boolean;
  setHasValidObjectValue(hasValidObjectValue: boolean): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  intValue(): number;
  setIntValue(intValue: number): void;
  floatValue(): number;
  setFloatValue(floatValue: number): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  controlTint(): NSControlTint;
  setControlTint(controlTint: NSControlTint): void;
  controlSize(): NSControlSize;
  setControlSize(controlSize: NSControlSize): void;
  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  cellSize(): NSSize;
  setCellSize(cellSize: NSSize): void;
  mouseDownFlags(): NSInteger;
  setMouseDownFlags(mouseDownFlags: NSInteger): void;
  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  static defaultMenu(): NSMenu;
  static setDefaultMenu(defaultMenu: NSMenu): void;
  sendsActionOnEndEditing(): boolean;
  setSendsActionOnEndEditing(sendsActionOnEndEditing: boolean): void;
  baseWritingDirection(): NSWritingDirection;
  setBaseWritingDirection(baseWritingDirection: NSWritingDirection): void;
  lineBreakMode(): NSLineBreakMode;
  setLineBreakMode(lineBreakMode: NSLineBreakMode): void;
  allowsUndo(): boolean;
  setAllowsUndo(allowsUndo: boolean): void;
  integerValue(): NSInteger;
  setIntegerValue(integerValue: NSInteger): void;
  truncatesLastVisibleLine(): boolean;
  setTruncatesLastVisibleLine(truncatesLastVisibleLine: boolean): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  usesSingleLineMode(): boolean;
  setUsesSingleLineMode(usesSingleLineMode: boolean): void;
  refusesFirstResponder(): boolean;
  setRefusesFirstResponder(refusesFirstResponder: boolean): void;
  acceptsFirstResponder(): boolean;
  setAcceptsFirstResponder(acceptsFirstResponder: boolean): void;
  showsFirstResponder(): boolean;
  setShowsFirstResponder(showsFirstResponder: boolean): void;
  focusRingType(): NSFocusRingType;
  setFocusRingType(focusRingType: NSFocusRingType): void;
  static defaultFocusRingType(): NSFocusRingType;
  static setDefaultFocusRingType(defaultFocusRingType: NSFocusRingType): void;
  wantsNotificationForMarkedText(): boolean;
  setWantsNotificationForMarkedText(wantsNotificationForMarkedText: boolean): void;
  attributedStringValue(): NSAttributedString;
  setAttributedStringValue(attributedStringValue: NSAttributedString): void;
  allowsEditingTextAttributes(): boolean;
  setAllowsEditingTextAttributes(allowsEditingTextAttributes: boolean): void;
  importsGraphics(): boolean;
  setImportsGraphics(importsGraphics: boolean): void;
  allowsMixedState(): boolean;
  setAllowsMixedState(allowsMixedState: boolean): void;
  nextState(): NSInteger;
  setNextState(nextState: NSInteger): void;
  backgroundStyle(): NSBackgroundStyle;
  setBackgroundStyle(backgroundStyle: NSBackgroundStyle): void;
  interiorBackgroundStyle(): NSBackgroundStyle;
  setInteriorBackgroundStyle(interiorBackgroundStyle: NSBackgroundStyle): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare type NSControlStateValue = NSInteger

declare type NSCellStateValue = NSControlStateValue

declare enum NSCellType {
  NSNullCellType = 0,
  NSTextCellType = 1,
  NSImageCellType = 2,
}

declare enum NSCellAttribute {
  NSCellDisabled = 0,
  NSCellState = 1,
  NSPushInCell = 2,
  NSCellEditable = 3,
  NSChangeGrayCell = 4,
  NSCellHighlighted = 5,
  NSCellLightsByContents = 6,
  NSCellLightsByGray = 7,
  NSChangeBackgroundCell = 8,
  NSCellLightsByBackground = 9,
  NSCellIsBordered = 10,
  NSCellHasOverlappingImage = 11,
  NSCellHasImageHorizontal = 12,
  NSCellHasImageOnLeftOrBottom = 13,
  NSCellChangesContents = 14,
  NSCellIsInsetButton = 15,
  NSCellAllowsMixedState = 16,
}

declare enum NSCellImagePosition {
  NSNoImage = 0,
  NSImageOnly = 1,
  NSImageLeft = 2,
  NSImageRight = 3,
  NSImageBelow = 4,
  NSImageAbove = 5,
  NSImageOverlaps = 6,
  NSImageLeading = 7,
  NSImageTrailing = 8,
}

declare enum NSImageScaling {
  NSImageScaleProportionallyDown = 0,
  NSImageScaleAxesIndependently,
  NSImageScaleNone,
  NSImageScaleProportionallyUpOrDown,
  NSScaleProportionally = 0,
  NSScaleToFit,
  NSScaleNone,
}

declare enum NSCellStyleMask {
  NSNoCellMask = 0,
  NSContentsCellMask = 1,
  NSPushInCellMask = 2,
  NSChangeGrayCellMask = 4,
  NSChangeBackgroundCellMask = 8,
}

declare enum NSControlTint {
  NSDefaultControlTint = 0,
  NSBlueControlTint = 1,
  NSGraphiteControlTint = 6,
  NSClearControlTint = 7,
}

declare enum NSControlSize {
  NSControlSizeRegular,
  NSControlSizeSmall,
  NSControlSizeMini,
}

declare enum NSCellHitResult {
  NSCellHitNone = 0,
  NSCellHitContentArea = 1 << 0,
  NSCellHitEditableTextArea = 1 << 1,
  NSCellHitTrackableArea = 1 << 2,
}

declare enum NSBackgroundStyle {
  NSBackgroundStyleLight = 0,
  NSBackgroundStyleDark,
  NSBackgroundStyleRaised,
  NSBackgroundStyleLowered,
}

declare class NSClickGestureRecognizer extends NSGestureRecognizer implements INSCoding {
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends NSClickGestureRecognizer>(aDecoder: NSCoder): T;

  buttonMask(): NSUInteger;
  setButtonMask(buttonMask: NSUInteger): void;
  numberOfClicksRequired(): NSInteger;
  setNumberOfClicksRequired(numberOfClicksRequired: NSInteger): void;
  numberOfTouchesRequired(): NSInteger;
  setNumberOfTouchesRequired(numberOfTouchesRequired: NSInteger): void;
}

declare class NSClipView extends NSView {
  viewFrameChanged(notification: NSNotification): void;
  viewBoundsChanged(notification: NSNotification): void;
  autoscroll(event: NSEvent): boolean;
  scrollToPoint(newOrigin: NSPoint): void;
  constrainBoundsRect(proposedBounds: NSRect): NSRect;
  constrainScrollPoint(newOrigin: NSPoint): NSPoint;

  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  documentView(): NSView;
  setDocumentView(documentView: NSView): void;
  documentRect(): NSRect;
  setDocumentRect(documentRect: NSRect): void;
  documentCursor(): NSCursor;
  setDocumentCursor(documentCursor: NSCursor): void;
  documentVisibleRect(): NSRect;
  setDocumentVisibleRect(documentVisibleRect: NSRect): void;
  copiesOnScroll(): boolean;
  setCopiesOnScroll(copiesOnScroll: boolean): void;
  contentInsets(): NSEdgeInsets;
  setContentInsets(contentInsets: NSEdgeInsets): void;
  automaticallyAdjustsContentInsets(): boolean;
  setAutomaticallyAdjustsContentInsets(automaticallyAdjustsContentInsets: boolean): void;
}

declare class NSCollectionViewItem extends NSViewController implements INSCopying, INSCollectionViewElement {
  copyWithZone(zone: NSZone | null): any;

  collectionView(): NSCollectionView;
  setCollectionView(collectionView: NSCollectionView): void;
  selected(): boolean;
  setSelected(selected: boolean): void;
  highlightState(): NSCollectionViewItemHighlightState;
  setHighlightState(highlightState: NSCollectionViewItemHighlightState): void;
  imageView(): NSImageView;
  setImageView(imageView: NSImageView): void;
  textField(): NSTextField;
  setTextField(textField: NSTextField): void;
  draggingImageComponents(): NSArray<any>;
  setDraggingImageComponents(draggingImageComponents: NSArray<any> | any[]): void;
}

declare class NSCollectionView extends NSView implements INSDraggingSource, INSDraggingDestination {
  reloadData(): void;
  layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForSupplementaryElementOfKind_atIndexPath(kind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  frameForItemAtIndex(index: NSUInteger): NSRect;
  frameForItemAtIndex_withNumberOfItems(index: NSUInteger, numberOfItems: NSUInteger): NSRect;
  numberOfItemsInSection(section: NSInteger): NSInteger;
  selectItemsAtIndexPaths_scrollPosition(indexPaths: NSSet<any>, scrollPosition: NSCollectionViewScrollPosition): void;
  deselectItemsAtIndexPaths(indexPaths: NSSet<any>): void;
  selectAll(sender: any | null): IBAction;
  deselectAll(sender: any | null): IBAction;
  registerClass_forItemWithIdentifier(itemClass: any | null, identifier: NSUserInterfaceItemIdentifier): void;
  registerNib_forItemWithIdentifier(nib: NSNib | null, identifier: NSUserInterfaceItemIdentifier): void;
  registerClass_forSupplementaryViewOfKind_withIdentifier(viewClass: any | null, kind: NSCollectionViewSupplementaryElementKind, identifier: NSUserInterfaceItemIdentifier): void;
  registerNib_forSupplementaryViewOfKind_withIdentifier(nib: NSNib | null, kind: NSCollectionViewSupplementaryElementKind, identifier: NSUserInterfaceItemIdentifier): void;
  makeItemWithIdentifier_forIndexPath(identifier: NSUserInterfaceItemIdentifier, indexPath: NSIndexPath): NSCollectionViewItem;
  makeSupplementaryViewOfKind_withIdentifier_forIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, identifier: NSUserInterfaceItemIdentifier, indexPath: NSIndexPath): NSView;
  newItemForRepresentedObject(object: any): NSCollectionViewItem;
  itemAtIndex(index: NSUInteger): NSCollectionViewItem;
  itemAtIndexPath(indexPath: NSIndexPath): NSCollectionViewItem;
  visibleItems(): NSArray<any>;
  indexPathsForVisibleItems(): NSSet<any>;
  indexPathForItem(item: NSCollectionViewItem): NSIndexPath;
  indexPathForItemAtPoint(point: NSPoint): NSIndexPath;
  supplementaryViewForElementKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): NSView;
  visibleSupplementaryViewsOfKind(elementKind: NSCollectionViewSupplementaryElementKind): NSArray<any>;
  indexPathsForVisibleSupplementaryElementsOfKind(elementKind: NSCollectionViewSupplementaryElementKind): NSSet<any>;
  insertSections(sections: NSIndexSet): void;
  deleteSections(sections: NSIndexSet): void;
  reloadSections(sections: NSIndexSet): void;
  moveSection_toSection(section: NSInteger, newSection: NSInteger): void;
  insertItemsAtIndexPaths(indexPaths: NSSet<any>): void;
  deleteItemsAtIndexPaths(indexPaths: NSSet<any>): void;
  reloadItemsAtIndexPaths(indexPaths: NSSet<any>): void;
  moveItemAtIndexPath_toIndexPath(indexPath: NSIndexPath, newIndexPath: NSIndexPath): void;
  performBatchUpdates_completionHandler(updates: Block, completionHandler: Block): void;
  toggleSectionCollapse(sender: any): IBAction;
  scrollToItemsAtIndexPaths_scrollPosition(indexPaths: NSSet<any>, scrollPosition: NSCollectionViewScrollPosition): void;
  setDraggingSourceOperationMask_forLocal(dragOperationMask: NSDragOperation, localDestination: boolean): void;
  draggingImageForItemsAtIndexPaths_withEvent_offset(indexPaths: NSSet<any>, event: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  draggingImageForItemsAtIndexes_withEvent_offset(indexes: NSIndexSet, event: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
  draggingEntered(sender: any): NSDragOperation;
  draggingUpdated(sender: any): NSDragOperation;
  draggingExited(sender: any | null): void;
  prepareForDragOperation(sender: any): boolean;
  performDragOperation(sender: any): boolean;
  concludeDragOperation(sender: any | null): void;
  draggingEnded(sender: any): void;
  wantsPeriodicDraggingUpdates(): boolean;
  updateDraggingItemsForDrag(sender: any | null): void;

  dataSource(): any;
  setDataSource(dataSource: any): void;
  prefetchDataSource(): any;
  setPrefetchDataSource(prefetchDataSource: any): void;
  content(): NSArray<any>;
  setContent(content: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  backgroundView(): NSView;
  setBackgroundView(backgroundView: NSView): void;
  backgroundViewScrollsWithContent(): boolean;
  setBackgroundViewScrollsWithContent(backgroundViewScrollsWithContent: boolean): void;
  collectionViewLayout(): NSCollectionViewLayout;
  setCollectionViewLayout(collectionViewLayout: NSCollectionViewLayout): void;
  maxNumberOfRows(): NSUInteger;
  setMaxNumberOfRows(maxNumberOfRows: NSUInteger): void;
  maxNumberOfColumns(): NSUInteger;
  setMaxNumberOfColumns(maxNumberOfColumns: NSUInteger): void;
  minItemSize(): NSSize;
  setMinItemSize(minItemSize: NSSize): void;
  maxItemSize(): NSSize;
  setMaxItemSize(maxItemSize: NSSize): void;
  backgroundColors(): NSArray<any>;
  setBackgroundColors(backgroundColors: NSArray<any> | any[]): void;
  numberOfSections(): NSInteger;
  setNumberOfSections(numberOfSections: NSInteger): void;
  firstResponder(): boolean;
  setFirstResponder(firstResponder: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  allowsEmptySelection(): boolean;
  setAllowsEmptySelection(allowsEmptySelection: boolean): void;
  allowsMultipleSelection(): boolean;
  setAllowsMultipleSelection(allowsMultipleSelection: boolean): void;
  selectionIndexes(): NSIndexSet;
  setSelectionIndexes(selectionIndexes: NSIndexSet): void;
  selectionIndexPaths(): NSSet<any>;
  setSelectionIndexPaths(selectionIndexPaths: NSSet<any>): void;
  itemPrototype(): NSCollectionViewItem;
  setItemPrototype(itemPrototype: NSCollectionViewItem): void;
}

declare interface INSCollectionViewSectionHeaderView {
  sectionCollapseButton(): NSButton;
  setSectionCollapseButton(sectionCollapseButton: NSButton): void;
}

declare interface INSCollectionViewDataSource {
  collectionView_numberOfItemsInSection(collectionView: NSCollectionView, section: NSInteger): NSInteger;
  collectionView_itemForRepresentedObjectAtIndexPath(collectionView: NSCollectionView, indexPath: NSIndexPath): NSCollectionViewItem;
  numberOfSectionsInCollectionView(collectionView: NSCollectionView): NSInteger;
  collectionView_viewForSupplementaryElementOfKind_atIndexPath(collectionView: NSCollectionView, kind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): NSView;
}

declare interface INSCollectionViewPrefetching {
  collectionView_prefetchItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSArray<any> | any[]): void;
  collectionView_cancelPrefetchingForItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSArray<any> | any[]): void;
}

declare interface INSCollectionViewDelegate {
  collectionView_canDragItemsAtIndexPaths_withEvent(collectionView: NSCollectionView, indexPaths: NSSet<any>, event: NSEvent): boolean;
  collectionView_canDragItemsAtIndexes_withEvent(collectionView: NSCollectionView, indexes: NSIndexSet, event: NSEvent): boolean;
  collectionView_writeItemsAtIndexPaths_toPasteboard(collectionView: NSCollectionView, indexPaths: NSSet<any>, pasteboard: NSPasteboard): boolean;
  collectionView_writeItemsAtIndexes_toPasteboard(collectionView: NSCollectionView, indexes: NSIndexSet, pasteboard: NSPasteboard): boolean;
  collectionView_namesOfPromisedFilesDroppedAtDestination_forDraggedItemsAtIndexPaths(collectionView: NSCollectionView, dropURL: NSURL, indexPaths: NSSet<any>): NSArray<any>;
  collectionView_namesOfPromisedFilesDroppedAtDestination_forDraggedItemsAtIndexes(collectionView: NSCollectionView, dropURL: NSURL, indexes: NSIndexSet): NSArray<any>;
  collectionView_draggingImageForItemsAtIndexPaths_withEvent_offset(collectionView: NSCollectionView, indexPaths: NSSet<any>, event: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  collectionView_draggingImageForItemsAtIndexes_withEvent_offset(collectionView: NSCollectionView, indexes: NSIndexSet, event: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  collectionView_validateDrop_proposedIndexPath_dropOperation(collectionView: NSCollectionView, draggingInfo: any, proposedDropIndexPath: NSIndexPath, proposedDropOperation: NSCollectionViewDropOperation): NSDragOperation;
  collectionView_validateDrop_proposedIndex_dropOperation(collectionView: NSCollectionView, draggingInfo: any, proposedDropIndex: NSInteger, proposedDropOperation: NSCollectionViewDropOperation): NSDragOperation;
  collectionView_acceptDrop_indexPath_dropOperation(collectionView: NSCollectionView, draggingInfo: any, indexPath: NSIndexPath, dropOperation: NSCollectionViewDropOperation): boolean;
  collectionView_acceptDrop_index_dropOperation(collectionView: NSCollectionView, draggingInfo: any, index: NSInteger, dropOperation: NSCollectionViewDropOperation): boolean;
  collectionView_pasteboardWriterForItemAtIndexPath(collectionView: NSCollectionView, indexPath: NSIndexPath): any;
  collectionView_pasteboardWriterForItemAtIndex(collectionView: NSCollectionView, index: NSUInteger): any;
  collectionView_draggingSession_willBeginAtPoint_forItemsAtIndexPaths(collectionView: NSCollectionView, session: NSDraggingSession, screenPoint: NSPoint, indexPaths: NSSet<any>): void;
  collectionView_draggingSession_willBeginAtPoint_forItemsAtIndexes(collectionView: NSCollectionView, session: NSDraggingSession, screenPoint: NSPoint, indexes: NSIndexSet): void;
  collectionView_draggingSession_endedAtPoint_dragOperation(collectionView: NSCollectionView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  collectionView_updateDraggingItemsForDrag(collectionView: NSCollectionView, draggingInfo: any): void;
  collectionView_shouldChangeItemsAtIndexPaths_toHighlightState(collectionView: NSCollectionView, indexPaths: NSSet<any>, highlightState: NSCollectionViewItemHighlightState): NSSet<any>;
  collectionView_didChangeItemsAtIndexPaths_toHighlightState(collectionView: NSCollectionView, indexPaths: NSSet<any>, highlightState: NSCollectionViewItemHighlightState): void;
  collectionView_shouldSelectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSSet<any>): NSSet<any>;
  collectionView_shouldDeselectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSSet<any>): NSSet<any>;
  collectionView_didSelectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSSet<any>): void;
  collectionView_didDeselectItemsAtIndexPaths(collectionView: NSCollectionView, indexPaths: NSSet<any>): void;
  collectionView_willDisplayItem_forRepresentedObjectAtIndexPath(collectionView: NSCollectionView, item: NSCollectionViewItem, indexPath: NSIndexPath): void;
  collectionView_willDisplaySupplementaryView_forElementKind_atIndexPath(collectionView: NSCollectionView, view: NSView, elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): void;
  collectionView_didEndDisplayingItem_forRepresentedObjectAtIndexPath(collectionView: NSCollectionView, item: NSCollectionViewItem, indexPath: NSIndexPath): void;
  collectionView_didEndDisplayingSupplementaryView_forElementOfKind_atIndexPath(collectionView: NSCollectionView, view: NSView, elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): void;
  collectionView_transitionLayoutForOldLayout_newLayout(collectionView: NSCollectionView, fromLayout: NSCollectionViewLayout, toLayout: NSCollectionViewLayout): NSCollectionViewTransitionLayout;
}

declare type NSCollectionViewSupplementaryElementKind = NSString

declare enum NSCollectionViewDropOperation {
  NSCollectionViewDropOn = 0,
  NSCollectionViewDropBefore = 1,
}

declare enum NSCollectionViewItemHighlightState {
  NSCollectionViewItemHighlightNone = 0,
  NSCollectionViewItemHighlightForSelection = 1,
  NSCollectionViewItemHighlightForDeselection = 2,
  NSCollectionViewItemHighlightAsDropTarget = 3,
}

declare enum NSCollectionViewScrollPosition {
  NSCollectionViewScrollPositionNone = 0,
  NSCollectionViewScrollPositionTop = 1 << 0,
  NSCollectionViewScrollPositionCenteredVertically = 1 << 1,
  NSCollectionViewScrollPositionBottom = 1 << 2,
  NSCollectionViewScrollPositionNearestHorizontalEdge = 1 << 9,
  NSCollectionViewScrollPositionLeft = 1 << 3,
  NSCollectionViewScrollPositionCenteredHorizontally = 1 << 4,
  NSCollectionViewScrollPositionRight = 1 << 5,
  NSCollectionViewScrollPositionLeadingEdge = 1 << 6,
  NSCollectionViewScrollPositionTrailingEdge = 1 << 7,
  NSCollectionViewScrollPositionNearestVerticalEdge = 1 << 8,
}

declare class NSCollectionViewFlowLayoutInvalidationContext extends NSCollectionViewLayoutInvalidationContext {
  invalidateFlowLayoutDelegateMetrics(): boolean;
  setInvalidateFlowLayoutDelegateMetrics(invalidateFlowLayoutDelegateMetrics: boolean): void;
  invalidateFlowLayoutAttributes(): boolean;
  setInvalidateFlowLayoutAttributes(invalidateFlowLayoutAttributes: boolean): void;
}

declare class NSCollectionViewFlowLayout extends NSCollectionViewLayout {
  sectionAtIndexIsCollapsed(sectionIndex: NSUInteger): boolean;
  collapseSectionAtIndex(sectionIndex: NSUInteger): void;
  expandSectionAtIndex(sectionIndex: NSUInteger): void;

  minimumLineSpacing(): CGFloat;
  setMinimumLineSpacing(minimumLineSpacing: CGFloat): void;
  minimumInteritemSpacing(): CGFloat;
  setMinimumInteritemSpacing(minimumInteritemSpacing: CGFloat): void;
  itemSize(): NSSize;
  setItemSize(itemSize: NSSize): void;
  estimatedItemSize(): NSSize;
  setEstimatedItemSize(estimatedItemSize: NSSize): void;
  scrollDirection(): NSCollectionViewScrollDirection;
  setScrollDirection(scrollDirection: NSCollectionViewScrollDirection): void;
  headerReferenceSize(): NSSize;
  setHeaderReferenceSize(headerReferenceSize: NSSize): void;
  footerReferenceSize(): NSSize;
  setFooterReferenceSize(footerReferenceSize: NSSize): void;
  sectionInset(): NSEdgeInsets;
  setSectionInset(sectionInset: NSEdgeInsets): void;
  sectionHeadersPinToVisibleBounds(): boolean;
  setSectionHeadersPinToVisibleBounds(sectionHeadersPinToVisibleBounds: boolean): void;
  sectionFootersPinToVisibleBounds(): boolean;
  setSectionFootersPinToVisibleBounds(sectionFootersPinToVisibleBounds: boolean): void;
}

declare interface INSCollectionViewDelegateFlowLayout {
  collectionView_layout_sizeForItemAtIndexPath(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, indexPath: NSIndexPath): NSSize;
  collectionView_layout_insetForSectionAtIndex(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger): NSEdgeInsets;
  collectionView_layout_minimumLineSpacingForSectionAtIndex(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger): CGFloat;
  collectionView_layout_minimumInteritemSpacingForSectionAtIndex(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger): CGFloat;
  collectionView_layout_referenceSizeForHeaderInSection(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger): NSSize;
  collectionView_layout_referenceSizeForFooterInSection(collectionView: NSCollectionView, collectionViewLayout: NSCollectionViewLayout, section: NSInteger): NSSize;
}

declare enum NSCollectionViewScrollDirection {
  NSCollectionViewScrollDirectionVertical,
  NSCollectionViewScrollDirectionHorizontal,
}

declare class NSCollectionViewGridLayout extends NSCollectionViewLayout {
  margins(): NSEdgeInsets;
  setMargins(margins: NSEdgeInsets): void;
  minimumInteritemSpacing(): CGFloat;
  setMinimumInteritemSpacing(minimumInteritemSpacing: CGFloat): void;
  minimumLineSpacing(): CGFloat;
  setMinimumLineSpacing(minimumLineSpacing: CGFloat): void;
  maximumNumberOfRows(): NSUInteger;
  setMaximumNumberOfRows(maximumNumberOfRows: NSUInteger): void;
  maximumNumberOfColumns(): NSUInteger;
  setMaximumNumberOfColumns(maximumNumberOfColumns: NSUInteger): void;
  minimumItemSize(): NSSize;
  setMinimumItemSize(minimumItemSize: NSSize): void;
  maximumItemSize(): NSSize;
  setMaximumItemSize(maximumItemSize: NSSize): void;
  backgroundColors(): NSArray<any>;
  setBackgroundColors(backgroundColors: NSArray<any> | any[]): void;
}

declare class NSCollectionViewLayoutAttributes extends NSObject implements INSCopying {
  static layoutAttributesForItemWithIndexPath(indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  static layoutAttributesForInterItemGapBeforeIndexPath(indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  static layoutAttributesForSupplementaryViewOfKind_withIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  static layoutAttributesForDecorationViewOfKind_withIndexPath(decorationViewKind: NSCollectionViewDecorationElementKind, indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  copyWithZone(zone: NSZone | null): any;

  frame(): NSRect;
  setFrame(frame: NSRect): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  alpha(): CGFloat;
  setAlpha(alpha: CGFloat): void;
  zIndex(): NSInteger;
  setZIndex(zIndex: NSInteger): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  indexPath(): NSIndexPath;
  setIndexPath(indexPath: NSIndexPath): void;
  representedElementCategory(): NSCollectionElementCategory;
  setRepresentedElementCategory(representedElementCategory: NSCollectionElementCategory): void;
  representedElementKind(): NSString;
  setRepresentedElementKind(representedElementKind: NSString | string): void;
}

declare class NSCollectionViewUpdateItem extends NSObject {
  indexPathBeforeUpdate(): NSIndexPath;
  setIndexPathBeforeUpdate(indexPathBeforeUpdate: NSIndexPath): void;
  indexPathAfterUpdate(): NSIndexPath;
  setIndexPathAfterUpdate(indexPathAfterUpdate: NSIndexPath): void;
  updateAction(): NSCollectionUpdateAction;
  setUpdateAction(updateAction: NSCollectionUpdateAction): void;
}

declare class NSCollectionViewLayoutInvalidationContext extends NSObject {
  invalidateItemsAtIndexPaths(indexPaths: NSSet<any>): void;
  invalidateSupplementaryElementsOfKind_atIndexPaths(elementKind: NSCollectionViewSupplementaryElementKind, indexPaths: NSSet<any>): void;
  invalidateDecorationElementsOfKind_atIndexPaths(elementKind: NSCollectionViewDecorationElementKind, indexPaths: NSSet<any>): void;

  invalidateEverything(): boolean;
  setInvalidateEverything(invalidateEverything: boolean): void;
  invalidateDataSourceCounts(): boolean;
  setInvalidateDataSourceCounts(invalidateDataSourceCounts: boolean): void;
  invalidatedItemIndexPaths(): NSSet<any>;
  setInvalidatedItemIndexPaths(invalidatedItemIndexPaths: NSSet<any>): void;
  invalidatedSupplementaryIndexPaths(): NSDictionary<any, any>;
  setInvalidatedSupplementaryIndexPaths(invalidatedSupplementaryIndexPaths: NSDictionary<any, any> | {[key: string]: any}): void;
  invalidatedDecorationIndexPaths(): NSDictionary<any, any>;
  setInvalidatedDecorationIndexPaths(invalidatedDecorationIndexPaths: NSDictionary<any, any> | {[key: string]: any}): void;
  contentOffsetAdjustment(): NSPoint;
  setContentOffsetAdjustment(contentOffsetAdjustment: NSPoint): void;
  contentSizeAdjustment(): NSSize;
  setContentSizeAdjustment(contentSizeAdjustment: NSSize): void;
}

declare class NSCollectionViewLayout extends NSObject implements INSCoding {
  invalidateLayout(): void;
  invalidateLayoutWithContext(context: NSCollectionViewLayoutInvalidationContext): void;
  registerClass_forDecorationViewOfKind(viewClass: any | null, elementKind: NSCollectionViewDecorationElementKind): void;
  registerNib_forDecorationViewOfKind(nib: NSNib | null, elementKind: NSCollectionViewDecorationElementKind): void;
  prepareLayout(): void;
  layoutAttributesForElementsInRect(rect: NSRect): NSArray<any>;
  layoutAttributesForItemAtIndexPath(indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForSupplementaryViewOfKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForDecorationViewOfKind_atIndexPath(elementKind: NSCollectionViewDecorationElementKind, indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  layoutAttributesForDropTargetAtPoint(pointInCollectionView: NSPoint): NSCollectionViewLayoutAttributes;
  layoutAttributesForInterItemGapBeforeIndexPath(indexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  shouldInvalidateLayoutForBoundsChange(newBounds: NSRect): boolean;
  invalidationContextForBoundsChange(newBounds: NSRect): NSCollectionViewLayoutInvalidationContext;
  shouldInvalidateLayoutForPreferredLayoutAttributes_withOriginalAttributes(preferredAttributes: NSCollectionViewLayoutAttributes, originalAttributes: NSCollectionViewLayoutAttributes): boolean;
  invalidationContextForPreferredLayoutAttributes_withOriginalAttributes(preferredAttributes: NSCollectionViewLayoutAttributes, originalAttributes: NSCollectionViewLayoutAttributes): NSCollectionViewLayoutInvalidationContext;
  targetContentOffsetForProposedContentOffset_withScrollingVelocity(proposedContentOffset: NSPoint, velocity: NSPoint): NSPoint;
  targetContentOffsetForProposedContentOffset(proposedContentOffset: NSPoint): NSPoint;
  prepareForCollectionViewUpdates(updateItems: NSArray<any> | any[]): void;
  finalizeCollectionViewUpdates(): void;
  prepareForAnimatedBoundsChange(oldBounds: NSRect): void;
  finalizeAnimatedBoundsChange(): void;
  prepareForTransitionToLayout(newLayout: NSCollectionViewLayout): void;
  prepareForTransitionFromLayout(oldLayout: NSCollectionViewLayout): void;
  finalizeLayoutTransition(): void;
  initialLayoutAttributesForAppearingItemAtIndexPath<T extends NSCollectionViewLayout>(itemIndexPath: NSIndexPath): T;
  finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  initialLayoutAttributesForAppearingSupplementaryElementOfKind_atIndexPath<T extends NSCollectionViewLayout>(elementKind: NSCollectionViewSupplementaryElementKind, elementIndexPath: NSIndexPath): T;
  finalLayoutAttributesForDisappearingSupplementaryElementOfKind_atIndexPath(elementKind: NSCollectionViewSupplementaryElementKind, elementIndexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  initialLayoutAttributesForAppearingDecorationElementOfKind_atIndexPath<T extends NSCollectionViewLayout>(elementKind: NSCollectionViewDecorationElementKind, decorationIndexPath: NSIndexPath): T;
  finalLayoutAttributesForDisappearingDecorationElementOfKind_atIndexPath(elementKind: NSCollectionViewDecorationElementKind, decorationIndexPath: NSIndexPath): NSCollectionViewLayoutAttributes;
  indexPathsToDeleteForSupplementaryViewOfKind(elementKind: NSCollectionViewSupplementaryElementKind): NSSet<any>;
  indexPathsToDeleteForDecorationViewOfKind(elementKind: NSCollectionViewDecorationElementKind): NSSet<any>;
  indexPathsToInsertForSupplementaryViewOfKind(elementKind: NSCollectionViewSupplementaryElementKind): NSSet<any>;
  indexPathsToInsertForDecorationViewOfKind(elementKind: NSCollectionViewDecorationElementKind): NSSet<any>;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSCollectionViewLayout>(aDecoder: NSCoder): T;

  collectionView(): NSCollectionView;
  setCollectionView(collectionView: NSCollectionView): void;
  static layoutAttributesClass(): any;
  static setLayoutAttributesClass(layoutAttributesClass: any): void;
  static invalidationContextClass(): any;
  static setInvalidationContextClass(invalidationContextClass: any): void;
  collectionViewContentSize(): NSSize;
  setCollectionViewContentSize(collectionViewContentSize: NSSize): void;
}

declare type NSCollectionViewDecorationElementKind = NSString

declare enum NSCollectionElementCategory {
  NSCollectionElementCategoryItem,
  NSCollectionElementCategorySupplementaryView,
  NSCollectionElementCategoryDecorationView,
  NSCollectionElementCategoryInterItemGap,
}

declare enum NSCollectionUpdateAction {
  NSCollectionUpdateActionInsert,
  NSCollectionUpdateActionDelete,
  NSCollectionUpdateActionReload,
  NSCollectionUpdateActionMove,
  NSCollectionUpdateActionNone,
}

declare class NSCollectionViewTransitionLayout extends NSCollectionViewLayout {
  initWithCurrentLayout_nextLayout<T extends NSCollectionViewTransitionLayout>(currentLayout: NSCollectionViewLayout, newLayout: NSCollectionViewLayout): T;
  updateValue_forAnimatedKey(value: CGFloat, key: NSCollectionViewTransitionLayoutAnimatedKey): void;
  valueForAnimatedKey(key: NSCollectionViewTransitionLayoutAnimatedKey): CGFloat;

  transitionProgress(): CGFloat;
  setTransitionProgress(transitionProgress: CGFloat): void;
  currentLayout(): NSCollectionViewLayout;
  setCurrentLayout(currentLayout: NSCollectionViewLayout): void;
  nextLayout(): NSCollectionViewLayout;
  setNextLayout(nextLayout: NSCollectionViewLayout): void;
}

declare type NSCollectionViewTransitionLayoutAnimatedKey = NSString

declare class NSColor extends NSObject implements INSCopying, INSSecureCoding, INSPasteboardReading, INSPasteboardWriting {
  init<T extends NSColor>(): T;
  initWithCoder<T extends NSColor>(coder: NSCoder): T;
  static colorWithColorSpace_components_count(space: NSColorSpace, components: CGFloat, numberOfComponents: NSInteger): NSColor;
  static colorWithSRGBRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): NSColor;
  static colorWithGenericGamma22White_alpha(white: CGFloat, alpha: CGFloat): NSColor;
  static colorWithDisplayP3Red_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): NSColor;
  static colorWithWhite_alpha(white: CGFloat, alpha: CGFloat): NSColor;
  static colorWithRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): NSColor;
  static colorWithHue_saturation_brightness_alpha(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, alpha: CGFloat): NSColor;
  static colorWithColorSpace_hue_saturation_brightness_alpha(space: NSColorSpace, hue: CGFloat, saturation: CGFloat, brightness: CGFloat, alpha: CGFloat): NSColor;
  static colorWithCatalogName_colorName(listName: NSColorListName, colorName: NSColorName): NSColor;
  static colorNamed_bundle(name: NSColorName, bundle: NSBundle | null): NSColor;
  static colorNamed(name: NSColorName): NSColor;
  static colorWithDeviceWhite_alpha(white: CGFloat, alpha: CGFloat): NSColor;
  static colorWithDeviceRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): NSColor;
  static colorWithDeviceHue_saturation_brightness_alpha(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, alpha: CGFloat): NSColor;
  static colorWithDeviceCyan_magenta_yellow_black_alpha(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat): NSColor;
  static colorWithCalibratedWhite_alpha(white: CGFloat, alpha: CGFloat): NSColor;
  static colorWithCalibratedRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): NSColor;
  static colorWithCalibratedHue_saturation_brightness_alpha(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, alpha: CGFloat): NSColor;
  static colorWithPatternImage(image: NSImage): NSColor;
  colorUsingType(type: NSColorType): NSColor;
  colorUsingColorSpace(space: NSColorSpace): NSColor;
  static colorForControlTint(controlTint: NSControlTint): NSColor;
  highlightWithLevel(val: CGFloat): NSColor;
  shadowWithLevel(val: CGFloat): NSColor;
  set(): void;
  setFill(): void;
  setStroke(): void;
  blendedColorWithFraction_ofColor(fraction: CGFloat, color: NSColor): NSColor;
  colorWithAlphaComponent(alpha: CGFloat): NSColor;
  getRed_green_blue_alpha(red: CGFloat | null, green: CGFloat | null, blue: CGFloat | null, alpha: CGFloat | null): void;
  getHue_saturation_brightness_alpha(hue: CGFloat | null, saturation: CGFloat | null, brightness: CGFloat | null, alpha: CGFloat | null): void;
  getWhite_alpha(white: CGFloat | null, alpha: CGFloat | null): void;
  getCyan_magenta_yellow_black_alpha(cyan: CGFloat | null, magenta: CGFloat | null, yellow: CGFloat | null, black: CGFloat | null, alpha: CGFloat | null): void;
  getComponents(components: CGFloat): void;
  static colorFromPasteboard(pasteBoard: NSPasteboard): NSColor;
  writeToPasteboard(pasteBoard: NSPasteboard): void;
  drawSwatchInRect(rect: NSRect): void;
  static colorWithCGColor(cgColor: CGColorRef): NSColor;
  colorUsingColorSpaceName_device(name: NSColorSpaceName | null, deviceDescription: NSDictionary<any, any> | {[key: string]: any} | null): NSColor;
  colorUsingColorSpaceName(name: NSColorSpaceName): NSColor;
  static colorWithCIColor(color: CIColor): NSColor;
  static colorWithGray(gray: CGFloat): NSColor;
  static colorWithGray_alpha(gray: CGFloat, alpha: CGFloat): NSColor;
  fuzzyIsEqual(object: any): boolean;
  newCGColor(): CGColorRef;
  isWhite(): boolean;
  safeColorUsingColorSpace_bc(colorSpace: NSColorSpace): NSColor;
  safeColorUsingColorSpaceName_bc(name: NSString | string): NSColor;
  stringValueWithAlpha(includeAlpha: boolean): NSString;
  hexValue(): NSString;
  static inspectorViewBackgroundColor(): NSColor;
  static inspectorSeparatorColor(): NSColor;
  static inspectorLabelTextColor(): NSColor;
  static inspectorInlineLabelColor(): NSColor;
  static inspectorLabelBackgroundColor(): NSColor;
  static inspectorLabelBorderColor(): NSColor;
  static inspectorBorderColor(): NSColor;
  static inspectorHighlightedBorderColor(): NSColor;
  static inspectorAccentColor(): NSColor;
  static inspectorHighlightedAccentColor(): NSColor;
  static inspectorButtonBackgroundColor(): NSColor;
  static inspectorButtonHighlightedBackgroundColor(): NSColor;
  static inspectorIconColor(): NSColor;
  static inspectorDisabledIconColor(): NSColor;
  static inspectorHighlightedIconColor(): NSColor;
  static inspectorAccentedIconColor(): NSColor;
  static inspectorSliderRightTrackColor(): NSColor;
  static inspectorSliderKnobColor(): NSColor;
  static inspectorHighlightedSliderKnobColor(): NSColor;
  static inspectorSliderKnobBorderColor(): NSColor;
  static inspectorSectionHeaderForegroundColor(): NSColor;
  static inspectorResizePreviewBackgroundColor(): NSColor;
  static inspectorResizePreviewEdgeIndicatorColor(): NSColor;
  static inspectorResizePreviewInnerLayerColor(): NSColor;
  static inspectorResizePreviewInnerLayerBorderColor(): NSColor;
  colorTranslatedToColorSpace(colorSpace: NSColorSpace): NSColor;
  copyWithZone(zone: NSZone | null): any;
  static readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  initWithPasteboardPropertyList_ofType<T extends NSColor>(propertyList: any, type: NSPasteboardType): T;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;

  type(): NSColorType;
  setType(type: NSColorType): void;
  static blackColor(): NSColor;
  static setBlackColor(blackColor: NSColor): void;
  static darkGrayColor(): NSColor;
  static setDarkGrayColor(darkGrayColor: NSColor): void;
  static lightGrayColor(): NSColor;
  static setLightGrayColor(lightGrayColor: NSColor): void;
  static whiteColor(): NSColor;
  static setWhiteColor(whiteColor: NSColor): void;
  static grayColor(): NSColor;
  static setGrayColor(grayColor: NSColor): void;
  static redColor(): NSColor;
  static setRedColor(redColor: NSColor): void;
  static greenColor(): NSColor;
  static setGreenColor(greenColor: NSColor): void;
  static blueColor(): NSColor;
  static setBlueColor(blueColor: NSColor): void;
  static cyanColor(): NSColor;
  static setCyanColor(cyanColor: NSColor): void;
  static yellowColor(): NSColor;
  static setYellowColor(yellowColor: NSColor): void;
  static magentaColor(): NSColor;
  static setMagentaColor(magentaColor: NSColor): void;
  static orangeColor(): NSColor;
  static setOrangeColor(orangeColor: NSColor): void;
  static purpleColor(): NSColor;
  static setPurpleColor(purpleColor: NSColor): void;
  static brownColor(): NSColor;
  static setBrownColor(brownColor: NSColor): void;
  static clearColor(): NSColor;
  static setClearColor(clearColor: NSColor): void;
  static controlShadowColor(): NSColor;
  static setControlShadowColor(controlShadowColor: NSColor): void;
  static controlDarkShadowColor(): NSColor;
  static setControlDarkShadowColor(controlDarkShadowColor: NSColor): void;
  static controlColor(): NSColor;
  static setControlColor(controlColor: NSColor): void;
  static controlHighlightColor(): NSColor;
  static setControlHighlightColor(controlHighlightColor: NSColor): void;
  static controlLightHighlightColor(): NSColor;
  static setControlLightHighlightColor(controlLightHighlightColor: NSColor): void;
  static controlTextColor(): NSColor;
  static setControlTextColor(controlTextColor: NSColor): void;
  static controlBackgroundColor(): NSColor;
  static setControlBackgroundColor(controlBackgroundColor: NSColor): void;
  static selectedControlColor(): NSColor;
  static setSelectedControlColor(selectedControlColor: NSColor): void;
  static secondarySelectedControlColor(): NSColor;
  static setSecondarySelectedControlColor(secondarySelectedControlColor: NSColor): void;
  static selectedControlTextColor(): NSColor;
  static setSelectedControlTextColor(selectedControlTextColor: NSColor): void;
  static disabledControlTextColor(): NSColor;
  static setDisabledControlTextColor(disabledControlTextColor: NSColor): void;
  static textColor(): NSColor;
  static setTextColor(textColor: NSColor): void;
  static textBackgroundColor(): NSColor;
  static setTextBackgroundColor(textBackgroundColor: NSColor): void;
  static selectedTextColor(): NSColor;
  static setSelectedTextColor(selectedTextColor: NSColor): void;
  static selectedTextBackgroundColor(): NSColor;
  static setSelectedTextBackgroundColor(selectedTextBackgroundColor: NSColor): void;
  static gridColor(): NSColor;
  static setGridColor(gridColor: NSColor): void;
  static keyboardFocusIndicatorColor(): NSColor;
  static setKeyboardFocusIndicatorColor(keyboardFocusIndicatorColor: NSColor): void;
  static windowBackgroundColor(): NSColor;
  static setWindowBackgroundColor(windowBackgroundColor: NSColor): void;
  static underPageBackgroundColor(): NSColor;
  static setUnderPageBackgroundColor(underPageBackgroundColor: NSColor): void;
  static labelColor(): NSColor;
  static setLabelColor(labelColor: NSColor): void;
  static secondaryLabelColor(): NSColor;
  static setSecondaryLabelColor(secondaryLabelColor: NSColor): void;
  static tertiaryLabelColor(): NSColor;
  static setTertiaryLabelColor(tertiaryLabelColor: NSColor): void;
  static quaternaryLabelColor(): NSColor;
  static setQuaternaryLabelColor(quaternaryLabelColor: NSColor): void;
  static scrollBarColor(): NSColor;
  static setScrollBarColor(scrollBarColor: NSColor): void;
  static knobColor(): NSColor;
  static setKnobColor(knobColor: NSColor): void;
  static selectedKnobColor(): NSColor;
  static setSelectedKnobColor(selectedKnobColor: NSColor): void;
  static windowFrameColor(): NSColor;
  static setWindowFrameColor(windowFrameColor: NSColor): void;
  static windowFrameTextColor(): NSColor;
  static setWindowFrameTextColor(windowFrameTextColor: NSColor): void;
  static selectedMenuItemColor(): NSColor;
  static setSelectedMenuItemColor(selectedMenuItemColor: NSColor): void;
  static selectedMenuItemTextColor(): NSColor;
  static setSelectedMenuItemTextColor(selectedMenuItemTextColor: NSColor): void;
  static highlightColor(): NSColor;
  static setHighlightColor(highlightColor: NSColor): void;
  static shadowColor(): NSColor;
  static setShadowColor(shadowColor: NSColor): void;
  static headerColor(): NSColor;
  static setHeaderColor(headerColor: NSColor): void;
  static headerTextColor(): NSColor;
  static setHeaderTextColor(headerTextColor: NSColor): void;
  static alternateSelectedControlColor(): NSColor;
  static setAlternateSelectedControlColor(alternateSelectedControlColor: NSColor): void;
  static alternateSelectedControlTextColor(): NSColor;
  static setAlternateSelectedControlTextColor(alternateSelectedControlTextColor: NSColor): void;
  static scrubberTexturedBackgroundColor(): NSColor;
  static setScrubberTexturedBackgroundColor(scrubberTexturedBackgroundColor: NSColor): void;
  static controlAlternatingRowBackgroundColors(): NSArray<any>;
  static setControlAlternatingRowBackgroundColors(controlAlternatingRowBackgroundColors: NSArray<any> | any[]): void;
  static systemRedColor(): NSColor;
  static setSystemRedColor(systemRedColor: NSColor): void;
  static systemGreenColor(): NSColor;
  static setSystemGreenColor(systemGreenColor: NSColor): void;
  static systemBlueColor(): NSColor;
  static setSystemBlueColor(systemBlueColor: NSColor): void;
  static systemOrangeColor(): NSColor;
  static setSystemOrangeColor(systemOrangeColor: NSColor): void;
  static systemYellowColor(): NSColor;
  static setSystemYellowColor(systemYellowColor: NSColor): void;
  static systemBrownColor(): NSColor;
  static setSystemBrownColor(systemBrownColor: NSColor): void;
  static systemPinkColor(): NSColor;
  static setSystemPinkColor(systemPinkColor: NSColor): void;
  static systemPurpleColor(): NSColor;
  static setSystemPurpleColor(systemPurpleColor: NSColor): void;
  static systemGrayColor(): NSColor;
  static setSystemGrayColor(systemGrayColor: NSColor): void;
  static currentControlTint(): NSControlTint;
  static setCurrentControlTint(currentControlTint: NSControlTint): void;
  catalogNameComponent(): NSColorListName;
  setCatalogNameComponent(catalogNameComponent: NSColorListName): void;
  colorNameComponent(): NSColorName;
  setColorNameComponent(colorNameComponent: NSColorName): void;
  localizedCatalogNameComponent(): NSString;
  setLocalizedCatalogNameComponent(localizedCatalogNameComponent: NSString | string): void;
  localizedColorNameComponent(): NSString;
  setLocalizedColorNameComponent(localizedColorNameComponent: NSString | string): void;
  redComponent(): CGFloat;
  setRedComponent(redComponent: CGFloat): void;
  greenComponent(): CGFloat;
  setGreenComponent(greenComponent: CGFloat): void;
  blueComponent(): CGFloat;
  setBlueComponent(blueComponent: CGFloat): void;
  hueComponent(): CGFloat;
  setHueComponent(hueComponent: CGFloat): void;
  saturationComponent(): CGFloat;
  setSaturationComponent(saturationComponent: CGFloat): void;
  brightnessComponent(): CGFloat;
  setBrightnessComponent(brightnessComponent: CGFloat): void;
  whiteComponent(): CGFloat;
  setWhiteComponent(whiteComponent: CGFloat): void;
  cyanComponent(): CGFloat;
  setCyanComponent(cyanComponent: CGFloat): void;
  magentaComponent(): CGFloat;
  setMagentaComponent(magentaComponent: CGFloat): void;
  yellowComponent(): CGFloat;
  setYellowComponent(yellowComponent: CGFloat): void;
  blackComponent(): CGFloat;
  setBlackComponent(blackComponent: CGFloat): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  numberOfComponents(): NSInteger;
  setNumberOfComponents(numberOfComponents: NSInteger): void;
  patternImage(): NSImage;
  setPatternImage(patternImage: NSImage): void;
  alphaComponent(): CGFloat;
  setAlphaComponent(alphaComponent: CGFloat): void;
  CGColor(): CGColorRef;
  setCGColor(CGColor: CGColorRef): void;
  static ignoresAlpha(): boolean;
  static setIgnoresAlpha(ignoresAlpha: boolean): void;
  colorSpaceName(): NSColorSpaceName;
  setColorSpaceName(colorSpaceName: NSColorSpaceName): void;
  manifestComponents(): NSArray<any>;
  setManifestComponents(manifestComponents: NSArray<any> | any[]): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class CIColor {
  initWithColor<T extends CIColor>(color: NSColor): T;
}

declare enum NSColorType {
  NSColorTypeComponentBased,
  NSColorTypePattern,
  NSColorTypeCatalog,
}

declare class NSColorList extends NSObject implements INSSecureCoding {
  static colorListNamed(name: NSColorListName): NSColorList;
  initWithName<T extends NSColorList>(name: NSColorListName): T;
  initWithName_fromFile<T extends NSColorList>(name: NSColorListName, path: NSString | string | null): T;
  setColor_forKey(color: NSColor, key: NSColorName): void;
  insertColor_key_atIndex(color: NSColor, key: NSColorName, loc: NSUInteger): void;
  removeColorWithKey(key: NSColorName): void;
  colorWithKey(key: NSColorName): NSColor;
  writeToURL_error(url: NSURL | null, errPtr: NSError): boolean;
  writeToFile(path: NSString | string | null): boolean;
  removeFile(): void;

  static availableColorLists(): NSArray<any>;
  static setAvailableColorLists(availableColorLists: NSArray<any> | any[]): void;
  name(): NSColorListName;
  setName(name: NSColorListName): void;
  allKeys(): NSArray<any>;
  setAllKeys(allKeys: NSArray<any> | any[]): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSColorListName = NSString

declare type NSColorName = NSString

declare class NSColorPanel extends NSPanel {
  static dragColor_withEvent_fromView(color: NSColor, event: NSEvent, sourceView: NSView): boolean;
  static setPickerMask(mask: NSColorPanelOptions): void;
  static setPickerMode(mode: NSColorPanelMode): void;
  setAction(selector: string | null): void;
  setTarget(target: any | null): void;
  attachColorList(colorList: NSColorList): void;
  detachColorList(colorList: NSColorList): void;
  shouldIgnoreChangeColorMessage(): boolean;
  shouldIgnoreNonInteractiveChangeColorMessage(): boolean;
  setColorWithoutNotifying(color: NSColor): void;

  static sharedColorPanel(): NSColorPanel;
  static setSharedColorPanel(sharedColorPanel: NSColorPanel): void;
  static sharedColorPanelExists(): boolean;
  static setSharedColorPanelExists(sharedColorPanelExists: boolean): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
  continuous(): boolean;
  setContinuous(continuous: boolean): void;
  showsAlpha(): boolean;
  setShowsAlpha(showsAlpha: boolean): void;
  mode(): NSColorPanelMode;
  setMode(mode: NSColorPanelMode): void;
  color(): NSColor;
  setColor(color: NSColor): void;
  alpha(): CGFloat;
  setAlpha(alpha: CGFloat): void;
}

declare enum NSColorPanelMode {
  NSColorPanelModeNone = -1,
  NSColorPanelModeGray = 0,
  NSColorPanelModeRGB = 1,
  NSColorPanelModeCMYK = 2,
  NSColorPanelModeHSB = 3,
  NSColorPanelModeCustomPalette = 4,
  NSColorPanelModeColorList = 5,
  NSColorPanelModeWheel = 6,
  NSColorPanelModeCrayon = 7,
}

declare enum NSColorPanelOptions {
  NSColorPanelGrayModeMask = 0x00000001,
  NSColorPanelRGBModeMask = 0x00000002,
  NSColorPanelCMYKModeMask = 0x00000004,
  NSColorPanelHSBModeMask = 0x00000008,
  NSColorPanelCustomPaletteModeMask = 0x00000010,
  NSColorPanelColorListModeMask = 0x00000020,
  NSColorPanelWheelModeMask = 0x00000040,
  NSColorPanelCrayonModeMask = 0x00000080,
  NSColorPanelAllModesMask = 0x0000ffff,
}

declare class NSColorPicker extends NSObject implements INSColorPickingDefault {
  initWithPickerMask_colorPanel<T extends NSColorPicker>(mask: NSUInteger, owningColorPanel: NSColorPanel): T;
  insertNewButtonImage_in(newButtonImage: NSImage, buttonCell: NSButtonCell): void;
  viewSizeChanged(sender: any | null): void;
  attachColorList(colorList: NSColorList): void;
  detachColorList(colorList: NSColorList): void;
  setMode(mode: NSColorPanelMode): void;
  initWithPickerMask_colorPanel<T extends NSColorPicker>(mask: NSUInteger, owningColorPanel: NSColorPanel): T;
  provideNewButtonImage(): NSImage;
  insertNewButtonImage_in(newButtonImage: NSImage, buttonCell: NSButtonCell): void;
  viewSizeChanged(sender: any | null): void;
  alphaControlAddedOrRemoved(sender: any | null): void;
  attachColorList(colorList: NSColorList): void;
  detachColorList(colorList: NSColorList): void;
  setMode(mode: NSColorPanelMode): void;
  buttonToolTip(): NSString;
  minContentSize(): NSSize;

  colorPanel(): NSColorPanel;
  setColorPanel(colorPanel: NSColorPanel): void;
  provideNewButtonImage(): NSImage;
  setProvideNewButtonImage(provideNewButtonImage: NSImage): void;
  buttonToolTip(): NSString;
  setButtonToolTip(buttonToolTip: NSString | string): void;
  minContentSize(): NSSize;
  setMinContentSize(minContentSize: NSSize): void;
}

declare class NSColorPickerTouchBarItem extends NSTouchBarItem {
  static colorPickerWithIdentifier(identifier: NSTouchBarItemIdentifier): NSColorPickerTouchBarItem;
  static textColorPickerWithIdentifier(identifier: NSTouchBarItemIdentifier): NSColorPickerTouchBarItem;
  static strokeColorPickerWithIdentifier(identifier: NSTouchBarItemIdentifier): NSColorPickerTouchBarItem;
  static colorPickerWithIdentifier_buttonImage(identifier: NSTouchBarItemIdentifier, image: NSImage): NSColorPickerTouchBarItem;

  color(): NSColor;
  setColor(color: NSColor): void;
  showsAlpha(): boolean;
  setShowsAlpha(showsAlpha: boolean): void;
  allowedColorSpaces(): NSArray<any>;
  setAllowedColorSpaces(allowedColorSpaces: NSArray<any> | any[]): void;
  colorList(): NSColorList;
  setColorList(colorList: NSColorList): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
}

declare interface INSColorPickingDefault {
  // initWithPickerMask_colorPanel<T extends INSColorPickingDefault>(mask: NSUInteger, owningColorPanel: NSColorPanel): T;
  provideNewButtonImage(): NSImage;
  insertNewButtonImage_in(newButtonImage: NSImage, buttonCell: NSButtonCell): void;
  viewSizeChanged(sender: any | null): void;
  alphaControlAddedOrRemoved(sender: any | null): void;
  attachColorList(colorList: NSColorList): void;
  detachColorList(colorList: NSColorList): void;
  setMode(mode: NSColorPanelMode): void;
  buttonToolTip(): NSString;
  minContentSize(): NSSize;
}

declare interface INSColorPickingCustom {
  supportsMode(mode: NSColorPanelMode): boolean;
  currentMode(): NSColorPanelMode;
  provideNewView(initialRequest: boolean): NSView;
  setColor(newColor: NSColor): void;
}

declare class NSColorSpace extends NSObject implements INSSecureCoding {
  initWithICCProfileData<T extends NSColorSpace>(iccData: NSData): T;
  initWithColorSyncProfile<T extends NSColorSpace>(prof: void): T;
  initWithCGColorSpace<T extends NSColorSpace>(cgColorSpace: CGColorSpaceRef): T;
  static availableColorSpacesWithModel(model: NSColorSpaceModel): NSArray<any>;
  static RGBColorSpaceNamed(colorSpaceName: NSString | string): NSColorSpace;
  static colorSpaceForSketchColorSpace(modelColorSpace: MSColorSpace): NSColorSpace;

  ICCProfileData(): NSData;
  setICCProfileData(ICCProfileData: NSData): void;
  colorSyncProfile(): void;
  setColorSyncProfile(colorSyncProfile: void): void;
  CGColorSpace(): CGColorSpaceRef;
  setCGColorSpace(CGColorSpace: CGColorSpaceRef): void;
  numberOfColorComponents(): NSInteger;
  setNumberOfColorComponents(numberOfColorComponents: NSInteger): void;
  colorSpaceModel(): NSColorSpaceModel;
  setColorSpaceModel(colorSpaceModel: NSColorSpaceModel): void;
  localizedName(): NSString;
  setLocalizedName(localizedName: NSString | string): void;
  static sRGBColorSpace(): NSColorSpace;
  static setSRGBColorSpace(sRGBColorSpace: NSColorSpace): void;
  static genericGamma22GrayColorSpace(): NSColorSpace;
  static setGenericGamma22GrayColorSpace(genericGamma22GrayColorSpace: NSColorSpace): void;
  static extendedSRGBColorSpace(): NSColorSpace;
  static setExtendedSRGBColorSpace(extendedSRGBColorSpace: NSColorSpace): void;
  static extendedGenericGamma22GrayColorSpace(): NSColorSpace;
  static setExtendedGenericGamma22GrayColorSpace(extendedGenericGamma22GrayColorSpace: NSColorSpace): void;
  static displayP3ColorSpace(): NSColorSpace;
  static setDisplayP3ColorSpace(displayP3ColorSpace: NSColorSpace): void;
  static adobeRGB1998ColorSpace(): NSColorSpace;
  static setAdobeRGB1998ColorSpace(adobeRGB1998ColorSpace: NSColorSpace): void;
  static genericRGBColorSpace(): NSColorSpace;
  static setGenericRGBColorSpace(genericRGBColorSpace: NSColorSpace): void;
  static genericGrayColorSpace(): NSColorSpace;
  static setGenericGrayColorSpace(genericGrayColorSpace: NSColorSpace): void;
  static genericCMYKColorSpace(): NSColorSpace;
  static setGenericCMYKColorSpace(genericCMYKColorSpace: NSColorSpace): void;
  static deviceRGBColorSpace(): NSColorSpace;
  static setDeviceRGBColorSpace(deviceRGBColorSpace: NSColorSpace): void;
  static deviceGrayColorSpace(): NSColorSpace;
  static setDeviceGrayColorSpace(deviceGrayColorSpace: NSColorSpace): void;
  static deviceCMYKColorSpace(): NSColorSpace;
  static setDeviceCMYKColorSpace(deviceCMYKColorSpace: NSColorSpace): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSColorSpaceModel {
  NSColorSpaceModelUnknown = -1,
  NSColorSpaceModelGray,
  NSColorSpaceModelRGB,
  NSColorSpaceModelCMYK,
  NSColorSpaceModelLAB,
  NSColorSpaceModelDeviceN,
  NSColorSpaceModelIndexed,
  NSColorSpaceModelPatterned,
}

declare class NSColorWell extends NSControl {
  deactivate(): void;
  activate(exclusive: boolean): void;
  drawWellInside(insideRect: NSRect): void;
  takeColorFrom(sender: any | null): void;

  active(): boolean;
  setActive(active: boolean): void;
  bordered(): boolean;
  setBordered(bordered: boolean): void;
  color(): NSColor;
  setColor(color: NSColor): void;
}

declare class NSComboBox extends NSTextField {
  reloadData(): void;
  noteNumberOfItemsChanged(): void;
  scrollItemAtIndexToTop(index: NSInteger): void;
  scrollItemAtIndexToVisible(index: NSInteger): void;
  selectItemAtIndex(index: NSInteger): void;
  deselectItemAtIndex(index: NSInteger): void;
  addItemWithObjectValue(object: any): void;
  addItemsWithObjectValues(objects: NSArray<any> | any[]): void;
  insertItemWithObjectValue_atIndex(object: any, index: NSInteger): void;
  removeItemWithObjectValue(object: any): void;
  removeItemAtIndex(index: NSInteger): void;
  removeAllItems(): void;
  selectItemWithObjectValue(object: any | null): void;
  itemObjectValueAtIndex(index: NSInteger): any;
  indexOfItemWithObjectValue(object: any): NSInteger;

  hasVerticalScroller(): boolean;
  setHasVerticalScroller(hasVerticalScroller: boolean): void;
  intercellSpacing(): NSSize;
  setIntercellSpacing(intercellSpacing: NSSize): void;
  itemHeight(): CGFloat;
  setItemHeight(itemHeight: CGFloat): void;
  numberOfVisibleItems(): NSInteger;
  setNumberOfVisibleItems(numberOfVisibleItems: NSInteger): void;
  buttonBordered(): boolean;
  setButtonBordered(buttonBordered: boolean): void;
  usesDataSource(): boolean;
  setUsesDataSource(usesDataSource: boolean): void;
  indexOfSelectedItem(): NSInteger;
  setIndexOfSelectedItem(indexOfSelectedItem: NSInteger): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  completes(): boolean;
  setCompletes(completes: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  dataSource(): any;
  setDataSource(dataSource: any): void;
  objectValueOfSelectedItem(): any;
  setObjectValueOfSelectedItem(objectValueOfSelectedItem: any): void;
  objectValues(): NSArray<any>;
  setObjectValues(objectValues: NSArray<any> | any[]): void;
}

declare interface INSComboBoxDataSource {
  numberOfItemsInComboBox(comboBox: NSComboBox): NSInteger;
  comboBox_objectValueForItemAtIndex(comboBox: NSComboBox, index: NSInteger): any;
  comboBox_indexOfItemWithStringValue(comboBox: NSComboBox, string: NSString | string): NSUInteger;
  comboBox_completedString(comboBox: NSComboBox, string: NSString | string): NSString;
}

declare interface INSComboBoxDelegate {
  comboBoxWillPopUp(notification: NSNotification): void;
  comboBoxWillDismiss(notification: NSNotification): void;
  comboBoxSelectionDidChange(notification: NSNotification): void;
  comboBoxSelectionIsChanging(notification: NSNotification): void;
}

declare class NSComboBoxCell extends NSTextFieldCell {
  reloadData(): void;
  noteNumberOfItemsChanged(): void;
  scrollItemAtIndexToTop(index: NSInteger): void;
  scrollItemAtIndexToVisible(index: NSInteger): void;
  selectItemAtIndex(index: NSInteger): void;
  deselectItemAtIndex(index: NSInteger): void;
  completedString(string: NSString | string): NSString;
  addItemWithObjectValue(object: any): void;
  addItemsWithObjectValues(objects: NSArray<any> | any[]): void;
  insertItemWithObjectValue_atIndex(object: any, index: NSInteger): void;
  removeItemWithObjectValue(object: any): void;
  removeItemAtIndex(index: NSInteger): void;
  removeAllItems(): void;
  selectItemWithObjectValue(object: any | null): void;
  itemObjectValueAtIndex(index: NSInteger): any;
  indexOfItemWithObjectValue(object: any): NSInteger;

  hasVerticalScroller(): boolean;
  setHasVerticalScroller(hasVerticalScroller: boolean): void;
  intercellSpacing(): NSSize;
  setIntercellSpacing(intercellSpacing: NSSize): void;
  itemHeight(): CGFloat;
  setItemHeight(itemHeight: CGFloat): void;
  numberOfVisibleItems(): NSInteger;
  setNumberOfVisibleItems(numberOfVisibleItems: NSInteger): void;
  buttonBordered(): boolean;
  setButtonBordered(buttonBordered: boolean): void;
  usesDataSource(): boolean;
  setUsesDataSource(usesDataSource: boolean): void;
  indexOfSelectedItem(): NSInteger;
  setIndexOfSelectedItem(indexOfSelectedItem: NSInteger): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  completes(): boolean;
  setCompletes(completes: boolean): void;
  dataSource(): any;
  setDataSource(dataSource: any): void;
  objectValueOfSelectedItem(): any;
  setObjectValueOfSelectedItem(objectValueOfSelectedItem: any): void;
  objectValues(): NSArray<any>;
  setObjectValues(objectValues: NSArray<any> | any[]): void;
}

declare interface INSComboBoxCellDataSource {
  numberOfItemsInComboBoxCell(comboBoxCell: NSComboBoxCell): NSInteger;
  comboBoxCell_objectValueForItemAtIndex(comboBoxCell: NSComboBoxCell, index: NSInteger): any;
  comboBoxCell_indexOfItemWithStringValue(comboBoxCell: NSComboBoxCell, string: NSString | string): NSUInteger;
  comboBoxCell_completedString(comboBoxCell: NSComboBoxCell, uncompletedString: NSString | string): NSString;
}

declare class NSControl extends NSView {
  sizeThatFits(size: NSSize): NSSize;
  // initWithFrame<T extends NSControl>(frameRect: NSRect): T;
  // initWithCoder<T extends NSControl>(coder: NSCoder): T;
  sizeToFit(): void;
  sendActionOn(mask: NSInteger): NSInteger;
  sendAction_to(action: string | null, target: any | null): boolean;
  takeIntValueFrom(sender: any | null): void;
  takeFloatValueFrom(sender: any | null): void;
  takeDoubleValueFrom(sender: any | null): void;
  takeStringValueFrom(sender: any | null): void;
  takeObjectValueFrom(sender: any | null): void;
  takeIntegerValueFrom(sender: any | null): void;
  mouseDown(event: NSEvent): void;
  performClick(sender: any | null): void;
  expansionFrameWithFrame(contentFrame: NSRect): NSRect;
  drawWithExpansionFrame_inView(contentFrame: NSRect, view: NSView): void;
  currentEditor(): NSText;
  abortEditing(): boolean;
  validateEditing(): void;
  editWithFrame_editor_delegate_event(rect: NSRect, textObj: NSText, delegate: any | null, event: NSEvent): void;
  selectWithFrame_editor_delegate_start_length(rect: NSRect, textObj: NSText, delegate: any | null, selStart: NSInteger, selLength: NSInteger): void;
  endEditing(textObj: NSText): void;
  setFloatingPointFormat_left_right(autoRange: boolean, leftDigits: NSUInteger, rightDigits: NSUInteger): void;
  selectedCell(): NSCell;
  selectedTag(): NSInteger;
  setNeedsDisplay(): void;
  calcSize(): void;
  updateCell(cell: NSCell): void;
  updateCellInside(cell: NSCell): void;
  drawCellInside(cell: NSCell): void;
  drawCell(cell: NSCell): void;
  selectCell(cell: NSCell): void;
  invalidateIntrinsicContentSizeForCell(cell: NSCell): void;
  static inpectorBorderPathForRect(rect: NSRect): NSBezierPath;
  static inpectorCheckmarkBorderPathForRect(rect: NSRect): NSBezierPath;
  static inpectorBorderPathForRectWithMaxRadius(rect: NSRect): NSBezierPath;
  static inpectorBorderPathForRect_borderRadius(rect: NSRect, borderRadius: CGFloat): NSBezierPath;
  static inpectorFocusRingPathForRect(rect: NSRect): NSBezierPath;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
  ignoresMultiClick(): boolean;
  setIgnoresMultiClick(ignoresMultiClick: boolean): void;
  continuous(): boolean;
  setContinuous(continuous: boolean): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  refusesFirstResponder(): boolean;
  setRefusesFirstResponder(refusesFirstResponder: boolean): void;
  highlighted(): boolean;
  setHighlighted(highlighted: boolean): void;
  controlSize(): NSControlSize;
  setControlSize(controlSize: NSControlSize): void;
  formatter(): NSFormatter;
  setFormatter(formatter: NSFormatter): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  attributedStringValue(): NSAttributedString;
  setAttributedStringValue(attributedStringValue: NSAttributedString): void;
  objectValue(): any;
  setObjectValue(objectValue: any): void;
  intValue(): number;
  setIntValue(intValue: number): void;
  integerValue(): NSInteger;
  setIntegerValue(integerValue: NSInteger): void;
  floatValue(): number;
  setFloatValue(floatValue: number): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  lineBreakMode(): NSLineBreakMode;
  setLineBreakMode(lineBreakMode: NSLineBreakMode): void;
  usesSingleLineMode(): boolean;
  setUsesSingleLineMode(usesSingleLineMode: boolean): void;
  baseWritingDirection(): NSWritingDirection;
  setBaseWritingDirection(baseWritingDirection: NSWritingDirection): void;
  allowsExpansionToolTips(): boolean;
  setAllowsExpansionToolTips(allowsExpansionToolTips: boolean): void;
  static cellClass(): any;
  static setCellClass(cellClass: any): void;
  cell(): NSCell;
  setCell(cell: NSCell): void;
}

declare interface INSControlTextEditingDelegate {
  control_textShouldBeginEditing(control: NSControl, fieldEditor: NSText): boolean;
  control_textShouldEndEditing(control: NSControl, fieldEditor: NSText): boolean;
  control_didFailToFormatString_errorDescription(control: NSControl, string: NSString | string, error: NSString | string | null): boolean;
  control_didFailToValidatePartialString_errorDescription(control: NSControl, string: NSString | string, error: NSString | string | null): void;
  control_isValidObject(control: NSControl, obj: any | null): boolean;
  control_textView_doCommandBySelector(control: NSControl, textView: NSTextView, commandSelector: string): boolean;
  control_textView_completions_forPartialWordRange_indexOfSelectedItem(control: NSControl, textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger): NSArray<any>;
}

declare class NSController extends NSObject implements INSCoding {
  init<T extends NSController>(): T;
  initWithCoder<T extends NSController>(coder: NSCoder): T;
  objectDidBeginEditing(editor: any): void;
  objectDidEndEditing(editor: any): void;
  discardEditing(): void;
  commitEditing(): boolean;
  commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: any | null, didCommitSelector: string | null, contextInfo: void | null): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSController>(aDecoder: NSCoder): T;

  editing(): boolean;
  setEditing(editing: boolean): void;
}

declare class NSCursor extends NSObject implements INSCoding {
  initWithImage_hotSpot<T extends NSCursor>(newImage: NSImage, point: NSPoint): T;
  initWithCoder<T extends NSCursor>(coder: NSCoder): T;
  initWithImage_foregroundColorHint_backgroundColorHint_hotSpot<T extends NSCursor>(newImage: NSImage, fg: NSColor | null, bg: NSColor | null, hotSpot: NSPoint): T;
  static hide(): void;
  static unhide(): void;
  static setHiddenUntilMouseMoves(flag: boolean): void;
  pop(): void;
  push(): void;
  set(): void;
  setOnMouseExited(flag: boolean): void;
  setOnMouseEntered(flag: boolean): void;
  mouseEntered(event: NSEvent): void;
  mouseExited(event: NSEvent): void;
  static cursorWithImageNamed(name: NSString | string): NSCursor;
  static cursorWithImageNamed_hotSpot(name: NSString | string, spot: NSPoint): NSCursor;
  static penCursor(): NSCursor;
  static penAddCursor(): NSCursor;
  static penCloseCursor(): NSCursor;
  static pencilCursor(): NSCursor;
  static resizeHorCursor(): NSCursor;
  static resizeHorCursorShort(): NSCursor;
  static resizeHorCursorLong(): NSCursor;
  static resizeVerCursor(): NSCursor;
  static resizeTopLeftToBottomRightCursor(): NSCursor;
  static resizeBottomLeftToTopRightCursor(): NSCursor;
  static rotateBottomRightCursor(): NSCursor;
  static rotateBottomLeftCursor(): NSCursor;
  static rotateTopLeftCursor(): NSCursor;
  static rotateTopRightCursor(): NSCursor;
  static rotateLeftCursor(): NSCursor;
  static rotateRightCursor(): NSCursor;
  static rotateTopCursor(): NSCursor;
  static rotateBottomCursor(): NSCursor;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSCursor>(aDecoder: NSCoder): T;

  static currentCursor(): NSCursor;
  static setCurrentCursor(currentCursor: NSCursor): void;
  static currentSystemCursor(): NSCursor;
  static setCurrentSystemCursor(currentSystemCursor: NSCursor): void;
  static arrowCursor(): NSCursor;
  static setArrowCursor(arrowCursor: NSCursor): void;
  static IBeamCursor(): NSCursor;
  static setIBeamCursor(IBeamCursor: NSCursor): void;
  static pointingHandCursor(): NSCursor;
  static setPointingHandCursor(pointingHandCursor: NSCursor): void;
  static closedHandCursor(): NSCursor;
  static setClosedHandCursor(closedHandCursor: NSCursor): void;
  static openHandCursor(): NSCursor;
  static setOpenHandCursor(openHandCursor: NSCursor): void;
  static resizeLeftCursor(): NSCursor;
  static setResizeLeftCursor(resizeLeftCursor: NSCursor): void;
  static resizeRightCursor(): NSCursor;
  static setResizeRightCursor(resizeRightCursor: NSCursor): void;
  static resizeLeftRightCursor(): NSCursor;
  static setResizeLeftRightCursor(resizeLeftRightCursor: NSCursor): void;
  static resizeUpCursor(): NSCursor;
  static setResizeUpCursor(resizeUpCursor: NSCursor): void;
  static resizeDownCursor(): NSCursor;
  static setResizeDownCursor(resizeDownCursor: NSCursor): void;
  static resizeUpDownCursor(): NSCursor;
  static setResizeUpDownCursor(resizeUpDownCursor: NSCursor): void;
  static crosshairCursor(): NSCursor;
  static setCrosshairCursor(crosshairCursor: NSCursor): void;
  static disappearingItemCursor(): NSCursor;
  static setDisappearingItemCursor(disappearingItemCursor: NSCursor): void;
  static operationNotAllowedCursor(): NSCursor;
  static setOperationNotAllowedCursor(operationNotAllowedCursor: NSCursor): void;
  static dragLinkCursor(): NSCursor;
  static setDragLinkCursor(dragLinkCursor: NSCursor): void;
  static dragCopyCursor(): NSCursor;
  static setDragCopyCursor(dragCopyCursor: NSCursor): void;
  static contextualMenuCursor(): NSCursor;
  static setContextualMenuCursor(contextualMenuCursor: NSCursor): void;
  static IBeamCursorForVerticalLayout(): NSCursor;
  static setIBeamCursorForVerticalLayout(IBeamCursorForVerticalLayout: NSCursor): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  hotSpot(): NSPoint;
  setHotSpot(hotSpot: NSPoint): void;
  setOnMouseExited(): boolean;
  setSetOnMouseExited(setOnMouseExited: boolean): void;
  setOnMouseEntered(): boolean;
  setSetOnMouseEntered(setOnMouseEntered: boolean): void;
}

declare class NSCustomImageRep extends NSImageRep {
  initWithSize_flipped_drawingHandler<T extends NSCustomImageRep>(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: boolean, drawingHandler: Block): T;
  initWithDrawSelector_delegate<T extends NSCustomImageRep>(selector: string, delegate: any): T;

  drawSelector(): string;
  setDrawSelector(drawSelector: string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare class NSCustomTouchBarItem extends NSTouchBarItem {
  view(): NSView;
  setView(view: NSView): void;
  viewController(): NSViewController;
  setViewController(viewController: NSViewController): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
}

declare class NSDataAsset extends NSObject implements INSCopying {
  initWithName<T extends NSDataAsset>(name: NSDataAssetName): T;
  initWithName_bundle<T extends NSDataAsset>(name: NSDataAssetName, bundle: NSBundle): T;
  copyWithZone(zone: NSZone | null): any;

  name(): NSDataAssetName;
  setName(name: NSDataAssetName): void;
  data(): NSData;
  setData(data: NSData): void;
  typeIdentifier(): NSString;
  setTypeIdentifier(typeIdentifier: NSString | string): void;
}

declare type NSDataAssetName = NSString

declare class NSDatePicker extends NSControl {
  datePickerStyle(): NSDatePickerStyle;
  setDatePickerStyle(datePickerStyle: NSDatePickerStyle): void;
  bezeled(): boolean;
  setBezeled(bezeled: boolean): void;
  bordered(): boolean;
  setBordered(bordered: boolean): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  textColor(): NSColor;
  setTextColor(textColor: NSColor): void;
  datePickerMode(): NSDatePickerMode;
  setDatePickerMode(datePickerMode: NSDatePickerMode): void;
  datePickerElements(): NSDatePickerElementFlags;
  setDatePickerElements(datePickerElements: NSDatePickerElementFlags): void;
  calendar(): NSCalendar;
  setCalendar(calendar: NSCalendar): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  dateValue(): NSDate;
  setDateValue(dateValue: NSDate): void;
  timeInterval(): NSTimeInterval;
  setTimeInterval(timeInterval: NSTimeInterval): void;
  minDate(): NSDate;
  setMinDate(minDate: NSDate): void;
  maxDate(): NSDate;
  setMaxDate(maxDate: NSDate): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare class NSDatePickerCell extends NSActionCell {
  // initTextCell<T extends NSDatePickerCell>(string: NSString | string): T;
  // initWithCoder<T extends NSDatePickerCell>(coder: NSCoder): T;

  datePickerStyle(): NSDatePickerStyle;
  setDatePickerStyle(datePickerStyle: NSDatePickerStyle): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  textColor(): NSColor;
  setTextColor(textColor: NSColor): void;
  datePickerMode(): NSDatePickerMode;
  setDatePickerMode(datePickerMode: NSDatePickerMode): void;
  datePickerElements(): NSDatePickerElementFlags;
  setDatePickerElements(datePickerElements: NSDatePickerElementFlags): void;
  calendar(): NSCalendar;
  setCalendar(calendar: NSCalendar): void;
  locale(): NSLocale;
  setLocale(locale: NSLocale): void;
  timeZone(): NSTimeZone;
  setTimeZone(timeZone: NSTimeZone): void;
  dateValue(): NSDate;
  setDateValue(dateValue: NSDate): void;
  timeInterval(): NSTimeInterval;
  setTimeInterval(timeInterval: NSTimeInterval): void;
  minDate(): NSDate;
  setMinDate(minDate: NSDate): void;
  maxDate(): NSDate;
  setMaxDate(maxDate: NSDate): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface INSDatePickerCellDelegate {
  datePickerCell_validateProposedDateValue_timeInterval(datePickerCell: NSDatePickerCell, proposedDateValue: NSDate, proposedTimeInterval: NSTimeInterval | null): void;
}

declare enum NSDatePickerStyle {
  NSTextFieldAndStepperDatePickerStyle = 0,
  NSClockAndCalendarDatePickerStyle = 1,
  NSTextFieldDatePickerStyle = 2,
}

declare enum NSDatePickerMode {
  NSSingleDateMode = 0,
  NSRangeDateMode = 1,
}

declare enum NSDatePickerElementFlags {
  NSHourMinuteDatePickerElementFlag = 0x000c,
  NSHourMinuteSecondDatePickerElementFlag = 0x000e,
  NSTimeZoneDatePickerElementFlag = 0x0010,
  NSYearMonthDatePickerElementFlag = 0x00c0,
  NSYearMonthDayDatePickerElementFlag = 0x00e0,
  NSEraDatePickerElementFlag = 0x0100,
}

declare class NSDictionaryControllerKeyValuePair extends NSObject {
  key(): NSString;
  setKey(key: NSString | string): void;
  value(): any;
  setValue(value: any): void;
  localizedKey(): NSString;
  setLocalizedKey(localizedKey: NSString | string): void;
  explicitlyIncluded(): boolean;
  setExplicitlyIncluded(explicitlyIncluded: boolean): void;
}

declare class NSDictionaryController extends NSArrayController {
  newObject(): NSDictionaryControllerKeyValuePair;

  initialKey(): NSString;
  setInitialKey(initialKey: NSString | string): void;
  initialValue(): any;
  setInitialValue(initialValue: any): void;
  includedKeys(): NSArray<any>;
  setIncludedKeys(includedKeys: NSArray<any> | any[]): void;
  excludedKeys(): NSArray<any>;
  setExcludedKeys(excludedKeys: NSArray<any> | any[]): void;
  localizedKeyDictionary(): NSDictionary<any, any>;
  setLocalizedKeyDictionary(localizedKeyDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  localizedKeyTable(): NSString;
  setLocalizedKeyTable(localizedKeyTable: NSString | string): void;
}

declare class NSDockTile extends NSObject {
  display(): void;

  size(): NSSize;
  setSize(size: NSSize): void;
  contentView(): NSView;
  setContentView(contentView: NSView): void;
  showsApplicationBadge(): boolean;
  setShowsApplicationBadge(showsApplicationBadge: boolean): void;
  badgeLabel(): NSString;
  setBadgeLabel(badgeLabel: NSString | string): void;
  owner(): any;
  setOwner(owner: any): void;
}

declare interface INSDockTilePlugIn {
  setDockTile(dockTile: NSDockTile | null): void;
  dockMenu(): NSMenu;
}

declare class NSDocument extends NSObject implements INSFilePresenter, INSUserInterfaceValidations {
  init<T extends NSDocument>(): T;
  initWithType_error<T extends NSDocument>(typeName: NSString | string, outError: NSError): T;
  static canConcurrentlyReadDocumentsOfType(typeName: NSString | string): boolean;
  initWithContentsOfURL_ofType_error<T extends NSDocument>(url: NSURL, typeName: NSString | string, outError: NSError): T;
  initForURL_withContentsOfURL_ofType_error<T extends NSDocument>(urlOrNil: NSURL | null, contentsURL: NSURL, typeName: NSString | string, outError: NSError): T;
  performActivityWithSynchronousWaiting_usingBlock(waitSynchronously: boolean, block: Block): void;
  continueActivityUsingBlock(block: Block): void;
  continueAsynchronousWorkOnMainThreadUsingBlock(block: Block): void;
  performSynchronousFileAccessUsingBlock(block: Block): void;
  performAsynchronousFileAccessUsingBlock(block: Block): void;
  revertDocumentToSaved(sender: any | null): IBAction;
  revertToContentsOfURL_ofType_error(url: NSURL, typeName: NSString | string, outError: NSError): boolean;
  readFromURL_ofType_error(url: NSURL, typeName: NSString | string, outError: NSError): boolean;
  readFromFileWrapper_ofType_error(fileWrapper: NSFileWrapper, typeName: NSString | string, outError: NSError): boolean;
  readFromData_ofType_error(data: NSData, typeName: NSString | string, outError: NSError): boolean;
  writeToURL_ofType_error(url: NSURL, typeName: NSString | string, outError: NSError): boolean;
  fileWrapperOfType_error(typeName: NSString | string, outError: NSError): NSFileWrapper;
  dataOfType_error(typeName: NSString | string, outError: NSError): NSData;
  unblockUserInteraction(): void;
  writeSafelyToURL_ofType_forSaveOperation_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, outError: NSError): boolean;
  writeToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL | null, outError: NSError): boolean;
  fileAttributesToWriteToURL_ofType_forSaveOperation_originalContentsURL_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL | null, outError: NSError): NSDictionary<any, any>;
  saveDocument(sender: any | null): IBAction;
  saveDocumentAs(sender: any | null): IBAction;
  saveDocumentTo(sender: any | null): IBAction;
  saveDocumentWithDelegate_didSaveSelector_contextInfo(delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  runModalSavePanelForSaveOperation_delegate_didSaveSelector_contextInfo(saveOperation: NSSaveOperationType, delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  prepareSavePanel(savePanel: NSSavePanel): boolean;
  saveToURL_ofType_forSaveOperation_delegate_didSaveSelector_contextInfo(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  saveToURL_ofType_forSaveOperation_completionHandler(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, completionHandler: Block): void;
  canAsynchronouslyWriteToURL_ofType_forSaveOperation(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType): boolean;
  checkAutosavingSafetyAndReturnError(outError: NSError): boolean;
  scheduleAutosaving(): void;
  autosaveDocumentWithDelegate_didAutosaveSelector_contextInfo(delegate: any | null, didAutosaveSelector: string | null, contextInfo: void | null): void;
  autosaveWithImplicitCancellability_completionHandler(autosavingIsImplicitlyCancellable: boolean, completionHandler: Block): void;
  browseDocumentVersions(sender: any | null): IBAction;
  stopBrowsingVersionsWithCompletionHandler(completionHandler: Block): void;
  canCloseDocumentWithDelegate_shouldCloseSelector_contextInfo(delegate: any, shouldCloseSelector: string | null, contextInfo: void | null): void;
  close(): void;
  duplicateDocument(sender: any | null): IBAction;
  duplicateDocumentWithDelegate_didDuplicateSelector_contextInfo(delegate: any | null, didDuplicateSelector: string | null, contextInfo: void | null): void;
  duplicateAndReturnError(outError: NSError): NSDocument;
  renameDocument(sender: any | null): IBAction;
  moveDocumentToUbiquityContainer(sender: any | null): IBAction;
  moveDocument(sender: any | null): IBAction;
  moveDocumentWithCompletionHandler(completionHandler: Block): void;
  moveToURL_completionHandler(url: NSURL, completionHandler: Block): void;
  lockDocument(sender: any | null): IBAction;
  unlockDocument(sender: any | null): IBAction;
  lockDocumentWithCompletionHandler(completionHandler: Block): void;
  lockWithCompletionHandler(completionHandler: Block): void;
  unlockDocumentWithCompletionHandler(completionHandler: Block): void;
  unlockWithCompletionHandler(completionHandler: Block): void;
  runPageLayout(sender: any | null): IBAction;
  runModalPageLayoutWithPrintInfo_delegate_didRunSelector_contextInfo(printInfo: NSPrintInfo, delegate: any | null, didRunSelector: string | null, contextInfo: void | null): void;
  preparePageLayout(pageLayout: NSPageLayout): boolean;
  shouldChangePrintInfo(newPrintInfo: NSPrintInfo): boolean;
  printDocument(sender: any | null): IBAction;
  printDocumentWithSettings_showPrintPanel_delegate_didPrintSelector_contextInfo(printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanel: boolean, delegate: any | null, didPrintSelector: string | null, contextInfo: void | null): void;
  printOperationWithSettings_error(printSettings: NSDictionary<any, any> | {[key: string]: any}, outError: NSError): NSPrintOperation;
  runModalPrintOperation_delegate_didRunSelector_contextInfo(printOperation: NSPrintOperation, delegate: any | null, didRunSelector: string | null, contextInfo: void | null): void;
  saveDocumentToPDF(sender: any | null): IBAction;
  shareDocumentWithSharingService_completionHandler(sharingService: NSSharingService, completionHandler: Block): void;
  prepareSharingServicePicker(sharingServicePicker: NSSharingServicePicker): void;
  updateChangeCount(change: NSDocumentChangeType): void;
  changeCountTokenForSaveOperation(saveOperation: NSSaveOperationType): any;
  updateChangeCountWithToken_forSaveOperation(changeCountToken: any, saveOperation: NSSaveOperationType): void;
  presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: any | null, didPresentSelector: string | null, contextInfo: void | null): void;
  presentError(error: NSError): boolean;
  willPresentError(error: NSError): NSError;
  willNotPresentError(error: NSError): void;
  makeWindowControllers(): void;
  windowControllerWillLoadNib(windowController: NSWindowController): void;
  windowControllerDidLoadNib(windowController: NSWindowController): void;
  setWindow(window: NSWindow | null): void;
  addWindowController(windowController: NSWindowController): void;
  removeWindowController(windowController: NSWindowController): void;
  showWindows(): void;
  shouldCloseWindowController_delegate_shouldCloseSelector_contextInfo(windowController: NSWindowController, delegate: any | null, shouldCloseSelector: string | null, contextInfo: void | null): void;
  setDisplayName(displayNameOrNil: NSString | string | null): void;
  defaultDraftName(): NSString;
  static isNativeType(type: NSString | string): boolean;
  writableTypesForSaveOperation(saveOperation: NSSaveOperationType): NSArray<any>;
  fileNameExtensionForType_saveOperation(typeName: NSString | string, saveOperation: NSSaveOperationType): NSString;
  validateUserInterfaceItem(item: any): boolean;
  saveToURL_ofType_forSaveOperation_error(url: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, outError: NSError): boolean;
  dataRepresentationOfType(type: NSString | string): NSData;
  fileAttributesToWriteToFile_ofType_saveOperation(fullDocumentPath: NSString | string, documentTypeName: NSString | string, saveOperationType: NSSaveOperationType): NSDictionary<any, any>;
  fileName(): NSString;
  fileWrapperRepresentationOfType(type: NSString | string): NSFileWrapper;
  initWithContentsOfFile_ofType<T extends NSDocument>(absolutePath: NSString | string, typeName: NSString | string): T;
  initWithContentsOfURL_ofType<T extends NSDocument>(url: NSURL, typeName: NSString | string): T;
  loadDataRepresentation_ofType(data: NSData, type: NSString | string): boolean;
  loadFileWrapperRepresentation_ofType(wrapper: NSFileWrapper, type: NSString | string): boolean;
  printShowingPrintPanel(flag: boolean): void;
  readFromFile_ofType(fileName: NSString | string, type: NSString | string): boolean;
  readFromURL_ofType(url: NSURL, type: NSString | string): boolean;
  revertToSavedFromFile_ofType(fileName: NSString | string, type: NSString | string): boolean;
  revertToSavedFromURL_ofType(url: NSURL, type: NSString | string): boolean;
  runModalPageLayoutWithPrintInfo(printInfo: NSPrintInfo): NSInteger;
  saveToFile_saveOperation_delegate_didSaveSelector_contextInfo(fileName: NSString | string, saveOperation: NSSaveOperationType, delegate: any | null, didSaveSelector: string | null, contextInfo: void | null): void;
  setFileName(fileName: NSString | string | null): void;
  writeToFile_ofType(fileName: NSString | string, type: NSString | string): boolean;
  writeToFile_ofType_originalFile_saveOperation(fullDocumentPath: NSString | string, documentTypeName: NSString | string, fullOriginalDocumentPath: NSString | string | null, saveOperationType: NSSaveOperationType): boolean;
  writeToURL_ofType(url: NSURL, type: NSString | string): boolean;
  writeWithBackupToFile_ofType_saveOperation(fullDocumentPath: NSString | string, documentTypeName: NSString | string, saveOperationType: NSSaveOperationType): boolean;
  handleSaveScriptCommand(command: NSScriptCommand): any;
  handleCloseScriptCommand(command: NSCloseCommand): any;
  handlePrintScriptCommand(command: NSScriptCommand): any;
  updateUserActivityState(activity: NSUserActivity): void;
  restoreUserActivityState(activity: NSUserActivity): void;
  restoreDocumentWindowWithIdentifier_state_completionHandler(identifier: NSUserInterfaceItemIdentifier, state: NSCoder, completionHandler: Block): void;
  encodeRestorableStateWithCoder(coder: NSCoder): void;
  encodeRestorableStateWithCoder_backgroundQueue(coder: NSCoder, queue: NSOperationQueue): void;
  restoreStateWithCoder(coder: NSCoder): void;
  invalidateRestorableState(): void;
  menuNeedsUpdate(menu: NSMenu): void;
  relinquishPresentedItemToReader(reader: Block): void;
  relinquishPresentedItemToWriter(writer: Block): void;
  savePresentedItemChangesWithCompletionHandler(completionHandler: Block): void;
  accommodatePresentedItemDeletionWithCompletionHandler(completionHandler: Block): void;
  presentedItemDidMoveToURL(newURL: NSURL): void;
  presentedItemDidChange(): void;
  presentedItemDidChangeUbiquityAttributes(attributes: NSSet<any>): void;
  presentedItemDidGainVersion(version: NSFileVersion): void;
  presentedItemDidLoseVersion(version: NSFileVersion): void;
  presentedItemDidResolveConflictVersion(version: NSFileVersion): void;
  accommodatePresentedSubitemDeletionAtURL_completionHandler(url: NSURL, completionHandler: Block): void;
  presentedSubitemDidAppearAtURL(url: NSURL): void;
  presentedSubitemAtURL_didMoveToURL(oldURL: NSURL, newURL: NSURL): void;
  presentedSubitemDidChangeAtURL(url: NSURL): void;
  presentedSubitemAtURL_didGainVersion(url: NSURL, version: NSFileVersion): void;
  presentedSubitemAtURL_didLoseVersion(url: NSURL, version: NSFileVersion): void;
  presentedSubitemAtURL_didResolveConflictVersion(url: NSURL, version: NSFileVersion): void;
  validateUserInterfaceItem(item: any): boolean;

  fileType(): NSString;
  setFileType(fileType: NSString | string): void;
  fileURL(): NSURL;
  setFileURL(fileURL: NSURL): void;
  fileModificationDate(): NSDate;
  setFileModificationDate(fileModificationDate: NSDate): void;
  draft(): boolean;
  setDraft(draft: boolean): void;
  entireFileLoaded(): boolean;
  setEntireFileLoaded(entireFileLoaded: boolean): void;
  autosavingIsImplicitlyCancellable(): boolean;
  setAutosavingIsImplicitlyCancellable(autosavingIsImplicitlyCancellable: boolean): void;
  keepBackupFile(): boolean;
  setKeepBackupFile(keepBackupFile: boolean): void;
  backupFileURL(): NSURL;
  setBackupFileURL(backupFileURL: NSURL): void;
  shouldRunSavePanelWithAccessoryView(): boolean;
  setShouldRunSavePanelWithAccessoryView(shouldRunSavePanelWithAccessoryView: boolean): void;
  fileNameExtensionWasHiddenInLastRunSavePanel(): boolean;
  setFileNameExtensionWasHiddenInLastRunSavePanel(fileNameExtensionWasHiddenInLastRunSavePanel: boolean): void;
  fileTypeFromLastRunSavePanel(): NSString;
  setFileTypeFromLastRunSavePanel(fileTypeFromLastRunSavePanel: NSString | string): void;
  hasUnautosavedChanges(): boolean;
  setHasUnautosavedChanges(hasUnautosavedChanges: boolean): void;
  static autosavesInPlace(): boolean;
  static setAutosavesInPlace(autosavesInPlace: boolean): void;
  static preservesVersions(): boolean;
  static setPreservesVersions(preservesVersions: boolean): void;
  browsingVersions(): boolean;
  setBrowsingVersions(browsingVersions: boolean): void;
  static autosavesDrafts(): boolean;
  static setAutosavesDrafts(autosavesDrafts: boolean): void;
  autosavingFileType(): NSString;
  setAutosavingFileType(autosavingFileType: NSString | string): void;
  autosavedContentsFileURL(): NSURL;
  setAutosavedContentsFileURL(autosavedContentsFileURL: NSURL): void;
  locked(): boolean;
  setLocked(locked: boolean): void;
  printInfo(): NSPrintInfo;
  setPrintInfo(printInfo: NSPrintInfo): void;
  PDFPrintOperation(): NSPrintOperation;
  setPDFPrintOperation(PDFPrintOperation: NSPrintOperation): void;
  allowsDocumentSharing(): boolean;
  setAllowsDocumentSharing(allowsDocumentSharing: boolean): void;
  documentEdited(): boolean;
  setDocumentEdited(documentEdited: boolean): void;
  inViewingMode(): boolean;
  setInViewingMode(inViewingMode: boolean): void;
  undoManager(): NSUndoManager;
  setUndoManager(undoManager: NSUndoManager): void;
  hasUndoManager(): boolean;
  setHasUndoManager(hasUndoManager: boolean): void;
  windowNibName(): NSNibName;
  setWindowNibName(windowNibName: NSNibName): void;
  windowControllers(): NSArray<any>;
  setWindowControllers(windowControllers: NSArray<any> | any[]): void;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
  windowForSheet(): NSWindow;
  setWindowForSheet(windowForSheet: NSWindow): void;
  static readableTypes(): NSArray<any>;
  static setReadableTypes(readableTypes: NSArray<any> | any[]): void;
  static writableTypes(): NSArray<any>;
  static setWritableTypes(writableTypes: NSArray<any> | any[]): void;
  static usesUbiquitousStorage(): boolean;
  static setUsesUbiquitousStorage(usesUbiquitousStorage: boolean): void;
  lastComponentOfFileName(): NSString;
  setLastComponentOfFileName(lastComponentOfFileName: NSString | string): void;
  objectSpecifier(): NSScriptObjectSpecifier;
  setObjectSpecifier(objectSpecifier: NSScriptObjectSpecifier): void;
  userActivity(): NSUserActivity;
  setUserActivity(userActivity: NSUserActivity): void;
  static restorableStateKeyPaths(): NSArray<any>;
  static setRestorableStateKeyPaths(restorableStateKeyPaths: NSArray<any> | any[]): void;
  presentedItemURL(): NSURL;
  setPresentedItemURL(presentedItemURL: NSURL): void;
  presentedItemOperationQueue(): NSOperationQueue;
  setPresentedItemOperationQueue(presentedItemOperationQueue: NSOperationQueue): void;
  primaryPresentedItemURL(): NSURL;
  setPrimaryPresentedItemURL(primaryPresentedItemURL: NSURL): void;
  observedPresentedItemUbiquityAttributes(): NSSet<any>;
  setObservedPresentedItemUbiquityAttributes(observedPresentedItemUbiquityAttributes: NSSet<any>): void;
}

declare enum NSDocumentChangeType {
  NSChangeDone = 0,
  NSChangeUndone = 1,
  NSChangeRedone = 5,
  NSChangeCleared = 2,
  NSChangeReadOtherContents = 3,
  NSChangeAutosaved = 4,
  NSChangeDiscardable = 256,
}

declare enum NSSaveOperationType {
  NSSaveOperation = 0,
  NSSaveAsOperation = 1,
  NSSaveToOperation = 2,
  NSAutosaveInPlaceOperation = 4,
  NSAutosaveElsewhereOperation = 3,
  NSAutosaveAsOperation = 5,
  NSAutosaveOperation = 3,
}

declare class NSDocumentController extends NSObject implements INSCoding, INSUserInterfaceValidations {
  init<T extends NSDocumentController>(): T;
  initWithCoder<T extends NSDocumentController>(coder: NSCoder): T;
  documentForURL(url: NSURL): NSDocument;
  documentForWindow(window: NSWindow): NSDocument;
  addDocument(document: NSDocument): void;
  removeDocument(document: NSDocument): void;
  newDocument(sender: any | null): IBAction;
  openUntitledDocumentAndDisplay_error(displayDocument: boolean, outError: NSError): NSDocument;
  makeUntitledDocumentOfType_error(typeName: NSString | string, outError: NSError): NSDocument;
  openDocument(sender: any | null): IBAction;
  URLsFromRunningOpenPanel(): NSArray<any>;
  runModalOpenPanel_forTypes(openPanel: NSOpenPanel, types: NSArray<any> | any[] | null): NSInteger;
  beginOpenPanelWithCompletionHandler(completionHandler: Block): void;
  beginOpenPanel_forTypes_completionHandler(openPanel: NSOpenPanel, inTypes: NSArray<any> | any[] | null, completionHandler: Block): void;
  openDocumentWithContentsOfURL_display_completionHandler(url: NSURL, displayDocument: boolean, completionHandler: Block): void;
  makeDocumentWithContentsOfURL_ofType_error(url: NSURL, typeName: NSString | string, outError: NSError): NSDocument;
  reopenDocumentForURL_withContentsOfURL_display_completionHandler(urlOrNil: NSURL | null, contentsURL: NSURL, displayDocument: boolean, completionHandler: Block): void;
  makeDocumentForURL_withContentsOfURL_ofType_error(urlOrNil: NSURL | null, contentsURL: NSURL, typeName: NSString | string, outError: NSError): NSDocument;
  saveAllDocuments(sender: any | null): IBAction;
  reviewUnsavedDocumentsWithAlertTitle_cancellable_delegate_didReviewAllSelector_contextInfo(title: NSString | string | null, cancellable: boolean, delegate: any | null, didReviewAllSelector: string | null, contextInfo: void | null): void;
  closeAllDocumentsWithDelegate_didCloseAllSelector_contextInfo(delegate: any | null, didCloseAllSelector: string | null, contextInfo: void | null): void;
  duplicateDocumentWithContentsOfURL_copying_displayName_error(url: NSURL, duplicateByCopying: boolean, displayNameOrNil: NSString | string | null, outError: NSError): NSDocument;
  standardShareMenuItem(): NSMenuItem;
  presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: any | null, didPresentSelector: string | null, contextInfo: void | null): void;
  presentError(error: NSError): boolean;
  willPresentError(error: NSError): NSError;
  clearRecentDocuments(sender: any | null): IBAction;
  noteNewRecentDocument(document: NSDocument): void;
  noteNewRecentDocumentURL(url: NSURL): void;
  typeForContentsOfURL_error(url: NSURL, outError: NSError): NSString;
  documentClassForType(typeName: NSString | string): any;
  displayNameForType(typeName: NSString | string): NSString;
  validateUserInterfaceItem(item: any): boolean;
  openDocumentWithContentsOfURL_display_error(url: NSURL, displayDocument: boolean, outError: NSError): any;
  reopenDocumentForURL_withContentsOfURL_error(url: NSURL | null, contentsURL: NSURL, outError: NSError): boolean;
  fileExtensionsFromType(typeName: NSString | string): NSArray<any>;
  typeFromFileExtension(fileNameExtensionOrHFSFileType: NSString | string): NSString;
  documentForFileName(fileName: NSString | string): any;
  fileNamesFromRunningOpenPanel(): NSArray<any>;
  makeDocumentWithContentsOfFile_ofType(fileName: NSString | string, type: NSString | string): any;
  makeDocumentWithContentsOfURL_ofType(url: NSURL, type: NSString | string): any;
  makeUntitledDocumentOfType(type: NSString | string): any;
  openDocumentWithContentsOfFile_display(fileName: NSString | string, display: boolean): any;
  openDocumentWithContentsOfURL_display(url: NSURL, display: boolean): any;
  openUntitledDocumentOfType_display(type: NSString | string, display: boolean): any;
  setShouldCreateUI(flag: boolean): void;
  shouldCreateUI(): boolean;
  static enumerateOpenDocuments(block: MSDocumentIteratorBlock): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSDocumentController>(aDecoder: NSCoder): T;
  validateUserInterfaceItem(item: any): boolean;

  static sharedDocumentController(): NSDocumentController;
  static setSharedDocumentController(sharedDocumentController: NSDocumentController): void;
  documents(): NSArray<any>;
  setDocuments(documents: NSArray<any> | any[]): void;
  currentDocument(): NSDocument;
  setCurrentDocument(currentDocument: NSDocument): void;
  currentDirectory(): NSString;
  setCurrentDirectory(currentDirectory: NSString | string): void;
  autosavingDelay(): NSTimeInterval;
  setAutosavingDelay(autosavingDelay: NSTimeInterval): void;
  hasEditedDocuments(): boolean;
  setHasEditedDocuments(hasEditedDocuments: boolean): void;
  allowsAutomaticShareMenu(): boolean;
  setAllowsAutomaticShareMenu(allowsAutomaticShareMenu: boolean): void;
  maximumRecentDocumentCount(): NSUInteger;
  setMaximumRecentDocumentCount(maximumRecentDocumentCount: NSUInteger): void;
  recentDocumentURLs(): NSArray<any>;
  setRecentDocumentURLs(recentDocumentURLs: NSArray<any> | any[]): void;
  defaultType(): NSString;
  setDefaultType(defaultType: NSString | string): void;
  documentClassNames(): NSArray<any>;
  setDocumentClassNames(documentClassNames: NSArray<any> | any[]): void;
}

declare interface INSDraggingDestination {
  draggingEntered(sender: any): NSDragOperation;
  draggingUpdated(sender: any): NSDragOperation;
  draggingExited(sender: any | null): void;
  prepareForDragOperation(sender: any): boolean;
  performDragOperation(sender: any): boolean;
  concludeDragOperation(sender: any | null): void;
  draggingEnded(sender: any): void;
  wantsPeriodicDraggingUpdates(): boolean;
  updateDraggingItemsForDrag(sender: any | null): void;
}

declare interface INSDraggingSource {
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
}

declare interface INSSpringLoadingDestination {
  springLoadingActivated_draggingInfo(activated: boolean, draggingInfo: any): void;
  springLoadingHighlightChanged(draggingInfo: any): void;
  springLoadingEntered(draggingInfo: any): NSSpringLoadingOptions;
  springLoadingUpdated(draggingInfo: any): NSSpringLoadingOptions;
  springLoadingExited(draggingInfo: any): void;
  draggingEnded(draggingInfo: any): void;
}

declare enum NSDragOperation {
  NSDragOperationNone = 0,
  NSDragOperationCopy = 1,
  NSDragOperationLink = 2,
  NSDragOperationGeneric = 4,
  NSDragOperationPrivate = 8,
  NSDragOperationMove = 16,
  NSDragOperationDelete = 32,
  NSDragOperationEvery,
  NSDragOperationAll_Obsolete = 15,
  NSDragOperationAll,
}

declare enum NSDraggingFormation {
  NSDraggingFormationDefault = 0,
  NSDraggingFormationNone,
  NSDraggingFormationPile,
  NSDraggingFormationList,
  NSDraggingFormationStack,
}

declare enum NSDraggingContext {
  NSDraggingContextOutsideApplication = 0,
  NSDraggingContextWithinApplication,
}

declare enum NSDraggingItemEnumerationOptions {
  NSDraggingItemEnumerationConcurrent,
  NSDraggingItemEnumerationClearNonenumeratedImages,
}

declare enum NSSpringLoadingHighlight {
  NSSpringLoadingHighlightNone = 0,
  NSSpringLoadingHighlightStandard,
  NSSpringLoadingHighlightEmphasized,
}

declare enum NSSpringLoadingOptions {
  NSSpringLoadingDisabled = 0,
  NSSpringLoadingEnabled = 1 << 0,
  NSSpringLoadingContinuousActivation = 1 << 1,
  NSSpringLoadingNoHover = 1 << 3,
}

declare class NSDraggingImageComponent extends NSObject {
  static draggingImageComponentWithKey(key: NSDraggingImageComponentKey): NSDraggingImageComponent;
  initWithKey<T extends NSDraggingImageComponent>(key: NSDraggingImageComponentKey): T;

  key(): NSDraggingImageComponentKey;
  setKey(key: NSDraggingImageComponentKey): void;
  contents(): any;
  setContents(contents: any): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
}

declare class NSDraggingItem extends NSObject {
  initWithPasteboardWriter<T extends NSDraggingItem>(pasteboardWriter: any): T;
  setDraggingFrame_contents(frame: NSRect, contents: any | null): void;

  item(): any;
  setItem(item: any): void;
  draggingFrame(): NSRect;
  setDraggingFrame(draggingFrame: NSRect): void;
  imageComponents(): NSArray<any>;
  setImageComponents(imageComponents: NSArray<any> | any[]): void;
}

declare type NSDraggingImageComponentKey = NSString

declare class NSDraggingSession extends NSObject {
  enumerateDraggingItemsWithOptions_forView_classes_searchOptions_usingBlock(enumOpts: NSDraggingItemEnumerationOptions, view: NSView | null, classArray: NSArray<any> | any[], searchOptions: NSDictionary<any, any> | {[key: string]: any}, block: Block): void;

  draggingFormation(): NSDraggingFormation;
  setDraggingFormation(draggingFormation: NSDraggingFormation): void;
  animatesToStartingPositionsOnCancelOrFail(): boolean;
  setAnimatesToStartingPositionsOnCancelOrFail(animatesToStartingPositionsOnCancelOrFail: boolean): void;
  draggingLeaderIndex(): NSInteger;
  setDraggingLeaderIndex(draggingLeaderIndex: NSInteger): void;
  draggingPasteboard(): NSPasteboard;
  setDraggingPasteboard(draggingPasteboard: NSPasteboard): void;
  draggingSequenceNumber(): NSInteger;
  setDraggingSequenceNumber(draggingSequenceNumber: NSInteger): void;
  draggingLocation(): NSPoint;
  setDraggingLocation(draggingLocation: NSPoint): void;
}

declare class NSDrawer extends NSResponder implements INSAccessibilityElement, INSAccessibility {
  initWithContentSize_preferredEdge<T extends NSDrawer>(contentSize: NSSize, edge: NSRectEdge): T;
  open(): void;
  openOnEdge(edge: NSRectEdge): void;
  close(): void;
  open(sender: any | null): void;
  close(sender: any | null): void;
  toggle(sender: any | null): void;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  parentWindow(): NSWindow;
  setParentWindow(parentWindow: NSWindow): void;
  contentView(): NSView;
  setContentView(contentView: NSView): void;
  preferredEdge(): NSRectEdge;
  setPreferredEdge(preferredEdge: NSRectEdge): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  state(): NSInteger;
  setState(state: NSInteger): void;
  edge(): NSRectEdge;
  setEdge(edge: NSRectEdge): void;
  contentSize(): NSSize;
  setContentSize(contentSize: NSSize): void;
  minContentSize(): NSSize;
  setMinContentSize(minContentSize: NSSize): void;
  maxContentSize(): NSSize;
  setMaxContentSize(maxContentSize: NSSize): void;
  leadingOffset(): CGFloat;
  setLeadingOffset(leadingOffset: CGFloat): void;
  trailingOffset(): CGFloat;
  setTrailingOffset(trailingOffset: CGFloat): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare class NSWindow extends NSResponder implements INSAnimatablePropertyContainer, INSUserInterfaceValidations, INSUserInterfaceItemIdentification, INSAppearanceCustomization, INSAccessibilityElement, INSAccessibility {
  updateConstraintsIfNeeded(): void;
  layoutIfNeeded(): void;
  anchorAttributeForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutAttribute;
  setAnchorAttribute_forOrientation(attr: NSLayoutAttribute, orientation: NSLayoutConstraintOrientation): void;
  visualizeConstraints(constraints: NSArray<any> | any[] | null): void;
  static frameRectForContentRect_styleMask(cRect: NSRect, style: NSWindowStyleMask): NSRect;
  static contentRectForFrameRect_styleMask(fRect: NSRect, style: NSWindowStyleMask): NSRect;
  static minFrameWidthWithTitle_styleMask(title: NSString | string, style: NSWindowStyleMask): CGFloat;
  frameRectForContentRect(contentRect: NSRect): NSRect;
  contentRectForFrameRect(frameRect: NSRect): NSRect;
  initWithContentRect_styleMask_backing_defer<T extends NSWindow>(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: boolean): T;
  initWithContentRect_styleMask_backing_defer_screen<T extends NSWindow>(contentRect: NSRect, style: NSWindowStyleMask, backingStoreType: NSBackingStoreType, flag: boolean, screen: NSScreen | null): T;
  addTitlebarAccessoryViewController(childViewController: NSTitlebarAccessoryViewController): void;
  insertTitlebarAccessoryViewController_atIndex(childViewController: NSTitlebarAccessoryViewController, index: NSInteger): void;
  removeTitlebarAccessoryViewControllerAtIndex(index: NSInteger): void;
  setTitleWithRepresentedFilename(filename: NSString | string): void;
  fieldEditor_forObject(createFlag: boolean, object: any | null): NSText;
  endEditingFor(object: any | null): void;
  constrainFrameRect_toScreen(frameRect: NSRect, screen: NSScreen | null): NSRect;
  setFrame_display(frameRect: NSRect, flag: boolean): void;
  setContentSize(size: NSSize): void;
  setFrameOrigin(point: NSPoint): void;
  setFrameTopLeftPoint(point: NSPoint): void;
  cascadeTopLeftFromPoint(topLeftPoint: NSPoint): NSPoint;
  animationResizeTime(newFrame: NSRect): NSTimeInterval;
  setFrame_display_animate(frameRect: NSRect, displayFlag: boolean, animateFlag: boolean): void;
  disableFlushWindow(): void;
  enableFlushWindow(): void;
  flushWindow(): void;
  flushWindowIfNeeded(): void;
  displayIfNeeded(): void;
  display(): void;
  update(): void;
  makeFirstResponder(responder: NSResponder | null): boolean;
  keyDown(event: NSEvent): void;
  close(): void;
  miniaturize(sender: any | null): void;
  deminiaturize(sender: any | null): void;
  zoom(sender: any | null): void;
  tryToPerform_with(action: string, object: any | null): boolean;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  setContentBorderThickness_forEdge(thickness: CGFloat, edge: NSRectEdge): void;
  contentBorderThicknessForEdge(edge: NSRectEdge): CGFloat;
  setAutorecalculatesContentBorderThickness_forEdge(flag: boolean, edge: NSRectEdge): void;
  autorecalculatesContentBorderThicknessForEdge(edge: NSRectEdge): boolean;
  center(): void;
  makeKeyAndOrderFront(sender: any | null): void;
  orderFront(sender: any | null): void;
  orderBack(sender: any | null): void;
  orderOut(sender: any | null): void;
  orderWindow_relativeTo(place: NSWindowOrderingMode, otherWin: NSInteger): void;
  orderFrontRegardless(): void;
  makeKeyWindow(): void;
  makeMainWindow(): void;
  becomeKeyWindow(): void;
  resignKeyWindow(): void;
  becomeMainWindow(): void;
  resignMainWindow(): void;
  convertRectToScreen(rect: NSRect): NSRect;
  convertRectFromScreen(rect: NSRect): NSRect;
  convertRectToBacking(rect: NSRect): NSRect;
  convertRectFromBacking(rect: NSRect): NSRect;
  backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions): NSRect;
  performClose(sender: any | null): void;
  performMiniaturize(sender: any | null): void;
  performZoom(sender: any | null): void;
  dataWithEPSInsideRect(rect: NSRect): NSData;
  dataWithPDFInsideRect(rect: NSRect): NSData;
  print(sender: any | null): void;
  setDynamicDepthLimit(flag: boolean): void;
  invalidateShadow(): void;
  disableScreenUpdatesUntilFlush(): void;
  toggleFullScreen(sender: any | null): void;
  setFrameFromString(string: NSString | string): void;
  saveFrameUsingName(name: NSWindowFrameAutosaveName): void;
  setFrameUsingName_force(name: NSWindowFrameAutosaveName, force: boolean): boolean;
  setFrameUsingName(name: NSWindowFrameAutosaveName): boolean;
  setFrameAutosaveName(name: NSWindowFrameAutosaveName): boolean;
  static removeFrameUsingName(name: NSWindowFrameAutosaveName): void;
  beginSheet_completionHandler(sheetWindow: NSWindow, handler: Block): void;
  beginCriticalSheet_completionHandler(sheetWindow: NSWindow, handler: Block): void;
  endSheet(sheetWindow: NSWindow): void;
  endSheet_returnCode(sheetWindow: NSWindow, returnCode: NSModalResponse): void;
  static standardWindowButton_forStyleMask(b: NSWindowButton, styleMask: NSWindowStyleMask): NSButton;
  standardWindowButton(b: NSWindowButton): NSButton;
  addChildWindow_ordered(childWin: NSWindow, place: NSWindowOrderingMode): void;
  removeChildWindow(childWin: NSWindow): void;
  canRepresentDisplayGamut(displayGamut: NSDisplayGamut): boolean;
  static windowNumbersWithOptions(options: NSWindowNumberListOptions): NSArray<any>;
  static windowNumberAtPoint_belowWindowWithWindowNumber(point: NSPoint, windowNumber: NSInteger): NSInteger;
  static windowWithContentViewController(contentViewController: NSViewController): NSWindow;
  performWindowDragWithEvent(event: NSEvent): void;
  selectNextKeyView(sender: any | null): void;
  selectPreviousKeyView(sender: any | null): void;
  selectKeyViewFollowingView(view: NSView): void;
  selectKeyViewPrecedingView(view: NSView): void;
  disableKeyEquivalentForDefaultButtonCell(): void;
  enableKeyEquivalentForDefaultButtonCell(): void;
  recalculateKeyViewLoop(): void;
  toggleToolbarShown(sender: any | null): void;
  runToolbarCustomizationPalette(sender: any | null): void;
  selectNextTab(sender: any | null): IBAction;
  selectPreviousTab(sender: any | null): IBAction;
  moveTabToNewWindow(sender: any | null): IBAction;
  mergeAllWindows(sender: any | null): IBAction;
  toggleTabBar(sender: any | null): IBAction;
  toggleTabOverview(sender: any | null): IBAction;
  addTabbedWindow_ordered(window: NSWindow, ordered: NSWindowOrderingMode): void;
  trackEventsMatchingMask_timeout_mode_handler(mask: NSEventMask, timeout: NSTimeInterval, mode: NSRunLoopMode, trackingHandler: Block): void;
  nextEventMatchingMask(mask: NSUInteger): NSEvent;
  nextEventMatchingMask_untilDate_inMode_dequeue(mask: NSUInteger, expiration: NSDate | null, mode: NSRunLoopMode, deqFlag: boolean): NSEvent;
  discardEventsMatchingMask_beforeEvent(mask: NSUInteger, lastEvent: NSEvent | null): void;
  postEvent_atStart(event: NSEvent, flag: boolean): void;
  sendEvent(event: NSEvent): void;
  disableCursorRects(): void;
  enableCursorRects(): void;
  discardCursorRects(): void;
  invalidateCursorRectsForView(view: NSView): void;
  resetCursorRects(): void;
  dragImage_at_offset_event_pasteboard_source_slideBack(image: NSImage, baseLocation: NSPoint, initialOffset: NSSize, event: NSEvent, pboard: NSPasteboard, sourceObj: any, slideFlag: boolean): void;
  registerForDraggedTypes(newTypes: NSArray<any> | any[]): void;
  unregisterDraggedTypes(): void;
  initWithWindowRef<T extends NSWindow>(windowRef: void): T;
  cacheImageInRect(rect: NSRect): void;
  restoreCachedImage(): void;
  discardCachedImage(): void;
  static menuChanged(menu: NSMenu): void;
  gState(): NSInteger;
  convertBaseToScreen(point: NSPoint): NSPoint;
  convertScreenToBase(point: NSPoint): NSPoint;
  userSpaceScaleFactor(): CGFloat;
  useOptimizedDrawing(flag: boolean): void;
  canStoreColor(): boolean;
  disableSnapshotRestoration(): void;
  enableSnapshotRestoration(): void;
  setIsMiniaturized(flag: boolean): void;
  setIsVisible(flag: boolean): void;
  setIsZoomed(flag: boolean): void;
  handleCloseScriptCommand(command: NSCloseCommand): any;
  handlePrintScriptCommand(command: NSScriptCommand): any;
  handleSaveScriptCommand(command: NSScriptCommand): any;
  convertPointFromScreen_ch(point: NSPoint): NSPoint;
  closePopovers(): boolean;
  commitEditedTextRetainingFirstResponder(): void;
  animator(): NSWindow;
  animationForKey(key: NSAnimatablePropertyKey): any;
  static defaultAnimationForKey(key: NSAnimatablePropertyKey): any;
  validateUserInterfaceItem(item: any): boolean;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  drawers(): NSArray<any>;
  setDrawers(drawers: NSArray<any> | any[]): void;
  static defaultDepthLimit(): NSWindowDepth;
  static setDefaultDepthLimit(defaultDepthLimit: NSWindowDepth): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  titleVisibility(): NSWindowTitleVisibility;
  setTitleVisibility(titleVisibility: NSWindowTitleVisibility): void;
  titlebarAppearsTransparent(): boolean;
  setTitlebarAppearsTransparent(titlebarAppearsTransparent: boolean): void;
  contentLayoutRect(): NSRect;
  setContentLayoutRect(contentLayoutRect: NSRect): void;
  contentLayoutGuide(): any;
  setContentLayoutGuide(contentLayoutGuide: any): void;
  titlebarAccessoryViewControllers(): NSArray<any>;
  setTitlebarAccessoryViewControllers(titlebarAccessoryViewControllers: NSArray<any> | any[]): void;
  representedURL(): NSURL;
  setRepresentedURL(representedURL: NSURL): void;
  representedFilename(): NSString;
  setRepresentedFilename(representedFilename: NSString | string): void;
  excludedFromWindowsMenu(): boolean;
  setExcludedFromWindowsMenu(excludedFromWindowsMenu: boolean): void;
  contentView(): NSView;
  setContentView(contentView: NSView): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  windowNumber(): NSInteger;
  setWindowNumber(windowNumber: NSInteger): void;
  styleMask(): NSWindowStyleMask;
  setStyleMask(styleMask: NSWindowStyleMask): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
  inLiveResize(): boolean;
  setInLiveResize(inLiveResize: boolean): void;
  showsResizeIndicator(): boolean;
  setShowsResizeIndicator(showsResizeIndicator: boolean): void;
  resizeIncrements(): NSSize;
  setResizeIncrements(resizeIncrements: NSSize): void;
  aspectRatio(): NSSize;
  setAspectRatio(aspectRatio: NSSize): void;
  contentResizeIncrements(): NSSize;
  setContentResizeIncrements(contentResizeIncrements: NSSize): void;
  contentAspectRatio(): NSSize;
  setContentAspectRatio(contentAspectRatio: NSSize): void;
  flushWindowDisabled(): boolean;
  setFlushWindowDisabled(flushWindowDisabled: boolean): void;
  viewsNeedDisplay(): boolean;
  setViewsNeedDisplay(viewsNeedDisplay: boolean): void;
  autodisplay(): boolean;
  setAutodisplay(autodisplay: boolean): void;
  preservesContentDuringLiveResize(): boolean;
  setPreservesContentDuringLiveResize(preservesContentDuringLiveResize: boolean): void;
  firstResponder(): NSResponder;
  setFirstResponder(firstResponder: NSResponder): void;
  resizeFlags(): NSEventModifierFlags;
  setResizeFlags(resizeFlags: NSEventModifierFlags): void;
  releasedWhenClosed(): boolean;
  setReleasedWhenClosed(releasedWhenClosed: boolean): void;
  zoomed(): boolean;
  setZoomed(zoomed: boolean): void;
  miniaturized(): boolean;
  setMiniaturized(miniaturized: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  movable(): boolean;
  setMovable(movable: boolean): void;
  movableByWindowBackground(): boolean;
  setMovableByWindowBackground(movableByWindowBackground: boolean): void;
  hidesOnDeactivate(): boolean;
  setHidesOnDeactivate(hidesOnDeactivate: boolean): void;
  canHide(): boolean;
  setCanHide(canHide: boolean): void;
  miniwindowImage(): NSImage;
  setMiniwindowImage(miniwindowImage: NSImage): void;
  miniwindowTitle(): NSString;
  setMiniwindowTitle(miniwindowTitle: NSString | string): void;
  dockTile(): NSDockTile;
  setDockTile(dockTile: NSDockTile): void;
  documentEdited(): boolean;
  setDocumentEdited(documentEdited: boolean): void;
  visible(): boolean;
  setVisible(visible: boolean): void;
  keyWindow(): boolean;
  setKeyWindow(keyWindow: boolean): void;
  mainWindow(): boolean;
  setMainWindow(mainWindow: boolean): void;
  canBecomeKeyWindow(): boolean;
  setCanBecomeKeyWindow(canBecomeKeyWindow: boolean): void;
  canBecomeMainWindow(): boolean;
  setCanBecomeMainWindow(canBecomeMainWindow: boolean): void;
  worksWhenModal(): boolean;
  setWorksWhenModal(worksWhenModal: boolean): void;
  preventsApplicationTerminationWhenModal(): boolean;
  setPreventsApplicationTerminationWhenModal(preventsApplicationTerminationWhenModal: boolean): void;
  backingScaleFactor(): CGFloat;
  setBackingScaleFactor(backingScaleFactor: CGFloat): void;
  oneShot(): boolean;
  setOneShot(oneShot: boolean): void;
  allowsToolTipsWhenApplicationIsInactive(): boolean;
  setAllowsToolTipsWhenApplicationIsInactive(allowsToolTipsWhenApplicationIsInactive: boolean): void;
  backingType(): NSBackingStoreType;
  setBackingType(backingType: NSBackingStoreType): void;
  level(): NSWindowLevel;
  setLevel(level: NSWindowLevel): void;
  depthLimit(): NSWindowDepth;
  setDepthLimit(depthLimit: NSWindowDepth): void;
  hasDynamicDepthLimit(): boolean;
  setHasDynamicDepthLimit(hasDynamicDepthLimit: boolean): void;
  screen(): NSScreen;
  setScreen(screen: NSScreen): void;
  deepestScreen(): NSScreen;
  setDeepestScreen(deepestScreen: NSScreen): void;
  hasShadow(): boolean;
  setHasShadow(hasShadow: boolean): void;
  alphaValue(): CGFloat;
  setAlphaValue(alphaValue: CGFloat): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  sharingType(): NSWindowSharingType;
  setSharingType(sharingType: NSWindowSharingType): void;
  preferredBackingLocation(): NSWindowBackingLocation;
  setPreferredBackingLocation(preferredBackingLocation: NSWindowBackingLocation): void;
  backingLocation(): NSWindowBackingLocation;
  setBackingLocation(backingLocation: NSWindowBackingLocation): void;
  allowsConcurrentViewDrawing(): boolean;
  setAllowsConcurrentViewDrawing(allowsConcurrentViewDrawing: boolean): void;
  displaysWhenScreenProfileChanges(): boolean;
  setDisplaysWhenScreenProfileChanges(displaysWhenScreenProfileChanges: boolean): void;
  canBecomeVisibleWithoutLogin(): boolean;
  setCanBecomeVisibleWithoutLogin(canBecomeVisibleWithoutLogin: boolean): void;
  collectionBehavior(): NSWindowCollectionBehavior;
  setCollectionBehavior(collectionBehavior: NSWindowCollectionBehavior): void;
  animationBehavior(): NSWindowAnimationBehavior;
  setAnimationBehavior(animationBehavior: NSWindowAnimationBehavior): void;
  onActiveSpace(): boolean;
  setOnActiveSpace(onActiveSpace: boolean): void;
  stringWithSavedFrame(): NSString;
  setStringWithSavedFrame(stringWithSavedFrame: NSString | string): void;
  frameAutosaveName(): NSWindowFrameAutosaveName;
  setFrameAutosaveName(frameAutosaveName: NSWindowFrameAutosaveName): void;
  minSize(): NSSize;
  setMinSize(minSize: NSSize): void;
  maxSize(): NSSize;
  setMaxSize(maxSize: NSSize): void;
  contentMinSize(): NSSize;
  setContentMinSize(contentMinSize: NSSize): void;
  contentMaxSize(): NSSize;
  setContentMaxSize(contentMaxSize: NSSize): void;
  minFullScreenContentSize(): NSSize;
  setMinFullScreenContentSize(minFullScreenContentSize: NSSize): void;
  maxFullScreenContentSize(): NSSize;
  setMaxFullScreenContentSize(maxFullScreenContentSize: NSSize): void;
  deviceDescription(): NSDictionary<any, any>;
  setDeviceDescription(deviceDescription: NSDictionary<any, any> | {[key: string]: any}): void;
  windowController(): NSWindowController;
  setWindowController(windowController: NSWindowController): void;
  sheets(): NSArray<any>;
  setSheets(sheets: NSArray<any> | any[]): void;
  attachedSheet(): NSWindow;
  setAttachedSheet(attachedSheet: NSWindow): void;
  sheet(): boolean;
  setSheet(sheet: boolean): void;
  sheetParent(): NSWindow;
  setSheetParent(sheetParent: NSWindow): void;
  childWindows(): NSArray<any>;
  setChildWindows(childWindows: NSArray<any> | any[]): void;
  parentWindow(): NSWindow;
  setParentWindow(parentWindow: NSWindow): void;
  graphicsContext(): NSGraphicsContext;
  setGraphicsContext(graphicsContext: NSGraphicsContext): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  occlusionState(): NSWindowOcclusionState;
  setOcclusionState(occlusionState: NSWindowOcclusionState): void;
  contentViewController(): NSViewController;
  setContentViewController(contentViewController: NSViewController): void;
  initialFirstResponder(): NSView;
  setInitialFirstResponder(initialFirstResponder: NSView): void;
  keyViewSelectionDirection(): NSSelectionDirection;
  setKeyViewSelectionDirection(keyViewSelectionDirection: NSSelectionDirection): void;
  defaultButtonCell(): NSButtonCell;
  setDefaultButtonCell(defaultButtonCell: NSButtonCell): void;
  autorecalculatesKeyViewLoop(): boolean;
  setAutorecalculatesKeyViewLoop(autorecalculatesKeyViewLoop: boolean): void;
  toolbar(): NSToolbar;
  setToolbar(toolbar: NSToolbar): void;
  showsToolbarButton(): boolean;
  setShowsToolbarButton(showsToolbarButton: boolean): void;
  static allowsAutomaticWindowTabbing(): boolean;
  static setAllowsAutomaticWindowTabbing(allowsAutomaticWindowTabbing: boolean): void;
  static userTabbingPreference(): NSWindowUserTabbingPreference;
  static setUserTabbingPreference(userTabbingPreference: NSWindowUserTabbingPreference): void;
  tabbingMode(): NSWindowTabbingMode;
  setTabbingMode(tabbingMode: NSWindowTabbingMode): void;
  tabbingIdentifier(): NSWindowTabbingIdentifier;
  setTabbingIdentifier(tabbingIdentifier: NSWindowTabbingIdentifier): void;
  tabbedWindows(): NSArray<any>;
  setTabbedWindows(tabbedWindows: NSArray<any> | any[]): void;
  tab(): NSWindowTab;
  setTab(tab: NSWindowTab): void;
  tabGroup(): NSWindowTabGroup;
  setTabGroup(tabGroup: NSWindowTabGroup): void;
  windowTitlebarLayoutDirection(): NSUserInterfaceLayoutDirection;
  setWindowTitlebarLayoutDirection(windowTitlebarLayoutDirection: NSUserInterfaceLayoutDirection): void;
  currentEvent(): NSEvent;
  setCurrentEvent(currentEvent: NSEvent): void;
  acceptsMouseMovedEvents(): boolean;
  setAcceptsMouseMovedEvents(acceptsMouseMovedEvents: boolean): void;
  ignoresMouseEvents(): boolean;
  setIgnoresMouseEvents(ignoresMouseEvents: boolean): void;
  mouseLocationOutsideOfEventStream(): NSPoint;
  setMouseLocationOutsideOfEventStream(mouseLocationOutsideOfEventStream: NSPoint): void;
  areCursorRectsEnabled(): boolean;
  setAreCursorRectsEnabled(areCursorRectsEnabled: boolean): void;
  windowRef(): void;
  setWindowRef(windowRef: void): void;
  restorable(): boolean;
  setRestorable(restorable: boolean): void;
  restorationClass(): any;
  setRestorationClass(restorationClass: any): void;
  hasCloseBox(): boolean;
  setHasCloseBox(hasCloseBox: boolean): void;
  hasTitleBar(): boolean;
  setHasTitleBar(hasTitleBar: boolean): void;
  floatingPanel(): boolean;
  setFloatingPanel(floatingPanel: boolean): void;
  miniaturizable(): boolean;
  setMiniaturizable(miniaturizable: boolean): void;
  modalPanel(): boolean;
  setModalPanel(modalPanel: boolean): void;
  resizable(): boolean;
  setResizable(resizable: boolean): void;
  zoomable(): boolean;
  setZoomable(zoomable: boolean): void;
  orderedIndex(): NSInteger;
  setOrderedIndex(orderedIndex: NSInteger): void;
  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  appearance(): NSAppearance;
  setAppearance(appearance: NSAppearance): void;
  effectiveAppearance(): NSAppearance;
  setEffectiveAppearance(effectiveAppearance: NSAppearance): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare interface INSDrawerDelegate {
  drawerShouldOpen(sender: NSDrawer): boolean;
  drawerShouldClose(sender: NSDrawer): boolean;
  drawerWillResizeContents_toSize(sender: NSDrawer, contentSize: NSSize): NSSize;
  drawerWillOpen(notification: NSNotification): void;
  drawerDidOpen(notification: NSNotification): void;
  drawerWillClose(notification: NSNotification): void;
  drawerDidClose(notification: NSNotification): void;
}

declare enum NSDrawerState {
  NSDrawerClosedState = 0,
  NSDrawerOpeningState = 1,
  NSDrawerOpenState = 2,
  NSDrawerClosingState = 3,
}

declare class NSEPSImageRep extends NSImageRep {
  static imageRepWithData(epsData: NSData): NSEPSImageRep;
  initWithData<T extends NSEPSImageRep>(epsData: NSData): T;
  prepareGState(): void;
  PDFRepresentation_ms(): NSData;

  EPSRepresentation(): NSData;
  setEPSRepresentation(EPSRepresentation: NSData): void;
  boundingBox(): NSRect;
  setBoundingBox(boundingBox: NSRect): void;
}

declare class NSEvent extends NSObject implements INSCopying, INSCoding {
  static eventWithEventRef(eventRef: void): NSEvent;
  static eventWithCGEvent(cgEvent: CGEventRef): NSEvent;
  touchesMatchingPhase_inView(phase: NSTouchPhase, view: NSView | null): NSSet<any>;
  allTouches(): NSSet<any>;
  touchesForView(view: NSView): NSSet<any>;
  coalescedTouchesForTouch(touch: NSTouch): NSArray<any>;
  trackSwipeEventWithOptions_dampenAmountThresholdMin_max_usingHandler(options: NSEventSwipeTrackingOptions, minDampenThreshold: CGFloat, maxDampenThreshold: CGFloat, trackingHandler: Block): void;
  static startPeriodicEventsAfterDelay_withPeriod(delay: NSTimeInterval, period: NSTimeInterval): void;
  static stopPeriodicEvents(): void;
  static mouseEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_clickCount_pressure(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext | null, eNum: NSInteger, cNum: NSInteger, pressure: number): NSEvent;
  static keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext | null, keys: NSString | string, ukeys: NSString | string, flag: boolean, code: number): NSEvent;
  static enterExitEventWithType_location_modifierFlags_timestamp_windowNumber_context_eventNumber_trackingNumber_userData(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext | null, eNum: NSInteger, tNum: NSInteger, data: void | null): NSEvent;
  static otherEventWithType_location_modifierFlags_timestamp_windowNumber_context_subtype_data1_data2(type: NSEventType, location: NSPoint, flags: NSEventModifierFlags, time: NSTimeInterval, wNum: NSInteger, unusedPassNil: NSGraphicsContext | null, subtype: number, d1: NSInteger, d2: NSInteger): NSEvent;
  static addGlobalMonitorForEventsMatchingMask_handler(mask: NSEventMask, block: Block): any;
  static addLocalMonitorForEventsMatchingMask_handler(mask: NSEventMask, block: Block): any;
  static removeMonitor(eventMonitor: any): void;
  shouldStartDrag(): boolean;
  isDoubleClick(): boolean;
  isRightClick(): boolean;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSEvent>(aDecoder: NSCoder): T;

  type(): NSEventType;
  setType(type: NSEventType): void;
  static modifierFlags(): NSEventModifierFlags;
  static setModifierFlags(modifierFlags: NSEventModifierFlags): void;
  timestamp(): NSTimeInterval;
  setTimestamp(timestamp: NSTimeInterval): void;
  window(): NSWindow;
  setWindow(window: NSWindow): void;
  windowNumber(): NSInteger;
  setWindowNumber(windowNumber: NSInteger): void;
  context(): NSGraphicsContext;
  setContext(context: NSGraphicsContext): void;
  clickCount(): NSInteger;
  setClickCount(clickCount: NSInteger): void;
  buttonNumber(): NSInteger;
  setButtonNumber(buttonNumber: NSInteger): void;
  eventNumber(): NSInteger;
  setEventNumber(eventNumber: NSInteger): void;
  pressure(): number;
  setPressure(pressure: number): void;
  locationInWindow(): NSPoint;
  setLocationInWindow(locationInWindow: NSPoint): void;
  deltaX(): CGFloat;
  setDeltaX(deltaX: CGFloat): void;
  deltaY(): CGFloat;
  setDeltaY(deltaY: CGFloat): void;
  deltaZ(): CGFloat;
  setDeltaZ(deltaZ: CGFloat): void;
  hasPreciseScrollingDeltas(): boolean;
  setHasPreciseScrollingDeltas(hasPreciseScrollingDeltas: boolean): void;
  scrollingDeltaX(): CGFloat;
  setScrollingDeltaX(scrollingDeltaX: CGFloat): void;
  scrollingDeltaY(): CGFloat;
  setScrollingDeltaY(scrollingDeltaY: CGFloat): void;
  momentumPhase(): NSEventPhase;
  setMomentumPhase(momentumPhase: NSEventPhase): void;
  directionInvertedFromDevice(): boolean;
  setDirectionInvertedFromDevice(directionInvertedFromDevice: boolean): void;
  characters(): NSString;
  setCharacters(characters: NSString | string): void;
  charactersIgnoringModifiers(): NSString;
  setCharactersIgnoringModifiers(charactersIgnoringModifiers: NSString | string): void;
  ARepeat(): boolean;
  setARepeat(ARepeat: boolean): void;
  keyCode(): number;
  setKeyCode(keyCode: number): void;
  trackingNumber(): NSInteger;
  setTrackingNumber(trackingNumber: NSInteger): void;
  userData(): void;
  setUserData(userData: void): void;
  trackingArea(): NSTrackingArea;
  setTrackingArea(trackingArea: NSTrackingArea): void;
  subtype(): NSEventSubtype;
  setSubtype(subtype: NSEventSubtype): void;
  data1(): NSInteger;
  setData1(data1: NSInteger): void;
  data2(): NSInteger;
  setData2(data2: NSInteger): void;
  eventRef(): void;
  setEventRef(eventRef: void): void;
  CGEvent(): CGEventRef;
  setCGEvent(CGEvent: CGEventRef): void;
  static mouseCoalescingEnabled(): boolean;
  static setMouseCoalescingEnabled(mouseCoalescingEnabled: boolean): void;
  magnification(): CGFloat;
  setMagnification(magnification: CGFloat): void;
  deviceID(): NSUInteger;
  setDeviceID(deviceID: NSUInteger): void;
  rotation(): number;
  setRotation(rotation: number): void;
  absoluteX(): NSInteger;
  setAbsoluteX(absoluteX: NSInteger): void;
  absoluteY(): NSInteger;
  setAbsoluteY(absoluteY: NSInteger): void;
  absoluteZ(): NSInteger;
  setAbsoluteZ(absoluteZ: NSInteger): void;
  buttonMask(): NSEventButtonMask;
  setButtonMask(buttonMask: NSEventButtonMask): void;
  tilt(): NSPoint;
  setTilt(tilt: NSPoint): void;
  tangentialPressure(): number;
  setTangentialPressure(tangentialPressure: number): void;
  vendorDefined(): any;
  setVendorDefined(vendorDefined: any): void;
  vendorID(): NSUInteger;
  setVendorID(vendorID: NSUInteger): void;
  tabletID(): NSUInteger;
  setTabletID(tabletID: NSUInteger): void;
  pointingDeviceID(): NSUInteger;
  setPointingDeviceID(pointingDeviceID: NSUInteger): void;
  systemTabletID(): NSUInteger;
  setSystemTabletID(systemTabletID: NSUInteger): void;
  vendorPointingDeviceType(): NSUInteger;
  setVendorPointingDeviceType(vendorPointingDeviceType: NSUInteger): void;
  pointingDeviceSerialNumber(): NSUInteger;
  setPointingDeviceSerialNumber(pointingDeviceSerialNumber: NSUInteger): void;
  uniqueID(): number;
  setUniqueID(uniqueID: number): void;
  capabilityMask(): NSUInteger;
  setCapabilityMask(capabilityMask: NSUInteger): void;
  pointingDeviceType(): NSPointingDeviceType;
  setPointingDeviceType(pointingDeviceType: NSPointingDeviceType): void;
  enteringProximity(): boolean;
  setEnteringProximity(enteringProximity: boolean): void;
  phase(): NSEventPhase;
  setPhase(phase: NSEventPhase): void;
  stage(): NSInteger;
  setStage(stage: NSInteger): void;
  stageTransition(): CGFloat;
  setStageTransition(stageTransition: CGFloat): void;
  associatedEventsMask(): NSEventMask;
  setAssociatedEventsMask(associatedEventsMask: NSEventMask): void;
  pressureBehavior(): NSPressureBehavior;
  setPressureBehavior(pressureBehavior: NSPressureBehavior): void;
  static swipeTrackingFromScrollEventsEnabled(): boolean;
  static setSwipeTrackingFromScrollEventsEnabled(swipeTrackingFromScrollEventsEnabled: boolean): void;
  static mouseLocation(): NSPoint;
  static setMouseLocation(mouseLocation: NSPoint): void;
  static pressedMouseButtons(): NSUInteger;
  static setPressedMouseButtons(pressedMouseButtons: NSUInteger): void;
  static doubleClickInterval(): NSTimeInterval;
  static setDoubleClickInterval(doubleClickInterval: NSTimeInterval): void;
  static keyRepeatDelay(): NSTimeInterval;
  static setKeyRepeatDelay(keyRepeatDelay: NSTimeInterval): void;
  static keyRepeatInterval(): NSTimeInterval;
  static setKeyRepeatInterval(keyRepeatInterval: NSTimeInterval): void;
}

declare enum NSEventType {
  NSEventTypeLeftMouseDown = 1,
  NSEventTypeLeftMouseUp = 2,
  NSEventTypeRightMouseDown = 3,
  NSEventTypeRightMouseUp = 4,
  NSEventTypeMouseMoved = 5,
  NSEventTypeLeftMouseDragged = 6,
  NSEventTypeRightMouseDragged = 7,
  NSEventTypeMouseEntered = 8,
  NSEventTypeMouseExited = 9,
  NSEventTypeKeyDown = 10,
  NSEventTypeKeyUp = 11,
  NSEventTypeFlagsChanged = 12,
  NSEventTypeAppKitDefined = 13,
  NSEventTypeSystemDefined = 14,
  NSEventTypeApplicationDefined = 15,
  NSEventTypePeriodic = 16,
  NSEventTypeCursorUpdate = 17,
  NSEventTypeScrollWheel = 22,
  NSEventTypeTabletPoint = 23,
  NSEventTypeTabletProximity = 24,
  NSEventTypeOtherMouseDown = 25,
  NSEventTypeOtherMouseUp = 26,
  NSEventTypeOtherMouseDragged = 27,
  NSEventTypeGesture = 29,
  NSEventTypeMagnify = 30,
  NSEventTypeSwipe = 31,
  NSEventTypeRotate = 18,
  NSEventTypeBeginGesture = 19,
  NSEventTypeEndGesture = 20,
  NSEventTypeSmartMagnify = 32,
  NSEventTypeQuickLook = 33,
  NSEventTypePressure = 34,
  NSEventTypeDirectTouch = 37,
}

declare enum NSEventMask {
  NSEventMaskLeftMouseDown = 1 << NSEventType.NSEventTypeLeftMouseDown,
  NSEventMaskLeftMouseUp = 1 << NSEventType.NSEventTypeLeftMouseUp,
  NSEventMaskRightMouseDown = 1 << NSEventType.NSEventTypeRightMouseDown,
  NSEventMaskRightMouseUp = 1 << NSEventType.NSEventTypeRightMouseUp,
  NSEventMaskMouseMoved = 1 << NSEventType.NSEventTypeMouseMoved,
  NSEventMaskLeftMouseDragged = 1 << NSEventType.NSEventTypeLeftMouseDragged,
  NSEventMaskRightMouseDragged = 1 << NSEventType.NSEventTypeRightMouseDragged,
  NSEventMaskMouseEntered = 1 << NSEventType.NSEventTypeMouseEntered,
  NSEventMaskMouseExited = 1 << NSEventType.NSEventTypeMouseExited,
  NSEventMaskKeyDown = 1 << NSEventType.NSEventTypeKeyDown,
  NSEventMaskKeyUp = 1 << NSEventType.NSEventTypeKeyUp,
  NSEventMaskFlagsChanged = 1 << NSEventType.NSEventTypeFlagsChanged,
  NSEventMaskAppKitDefined = 1 << NSEventType.NSEventTypeAppKitDefined,
  NSEventMaskSystemDefined = 1 << NSEventType.NSEventTypeSystemDefined,
  NSEventMaskApplicationDefined = 1 << NSEventType.NSEventTypeApplicationDefined,
  NSEventMaskPeriodic = 1 << NSEventType.NSEventTypePeriodic,
  NSEventMaskCursorUpdate = 1 << NSEventType.NSEventTypeCursorUpdate,
  NSEventMaskScrollWheel = 1 << NSEventType.NSEventTypeScrollWheel,
  NSEventMaskTabletPoint = 1 << NSEventType.NSEventTypeTabletPoint,
  NSEventMaskTabletProximity = 1 << NSEventType.NSEventTypeTabletProximity,
  NSEventMaskOtherMouseDown = 1 << NSEventType.NSEventTypeOtherMouseDown,
  NSEventMaskOtherMouseUp = 1 << NSEventType.NSEventTypeOtherMouseUp,
  NSEventMaskOtherMouseDragged = 1 << NSEventType.NSEventTypeOtherMouseDragged,
  NSEventMaskGesture = 1 << NSEventType.NSEventTypeGesture,
  NSEventMaskMagnify = 1 << NSEventType.NSEventTypeMagnify,
  NSEventMaskSwipe = 1 << NSEventType.NSEventTypeSwipe,
  NSEventMaskRotate = 1 << NSEventType.NSEventTypeRotate,
  NSEventMaskBeginGesture = 1 << NSEventType.NSEventTypeBeginGesture,
  NSEventMaskEndGesture = 1 << NSEventType.NSEventTypeEndGesture,
  NSEventMaskSmartMagnify = 1 << NSEventType.NSEventTypeSmartMagnify,
  NSEventMaskPressure = 1 << NSEventType.NSEventTypePressure,
  NSEventMaskDirectTouch = 1 << NSEventType.NSEventTypeDirectTouch,
  NSEventMaskAny,
}

declare enum NSEventModifierFlags {
  NSEventModifierFlagCapsLock = 1 << 16,
  NSEventModifierFlagShift = 1 << 17,
  NSEventModifierFlagControl = 1 << 18,
  NSEventModifierFlagOption = 1 << 19,
  NSEventModifierFlagCommand = 1 << 20,
  NSEventModifierFlagNumericPad = 1 << 21,
  NSEventModifierFlagHelp = 1 << 22,
  NSEventModifierFlagFunction = 1 << 23,
  NSEventModifierFlagDeviceIndependentFlagsMask = 0xffff0000,
}

declare enum NSPointingDeviceType {
  NSPointingDeviceTypeUnknown,
  NSPointingDeviceTypePen,
  NSPointingDeviceTypeCursor,
  NSPointingDeviceTypeEraser,
}

declare enum NSEventButtonMask {
  NSEventButtonMaskPenTip,
  NSEventButtonMaskPenLowerSide,
  NSEventButtonMaskPenUpperSide,
}

declare enum NSEventPhase {
  NSEventPhaseNone = 0,
  NSEventPhaseBegan = 0x1 << 0,
  NSEventPhaseStationary = 0x1 << 1,
  NSEventPhaseChanged = 0x1 << 2,
  NSEventPhaseEnded = 0x1 << 3,
  NSEventPhaseCancelled = 0x1 << 4,
  NSEventPhaseMayBegin = 0x1 << 5,
}

declare enum NSEventGestureAxis {
  NSEventGestureAxisNone = 0,
  NSEventGestureAxisHorizontal,
  NSEventGestureAxisVertical,
}

declare enum NSEventSwipeTrackingOptions {
  NSEventSwipeTrackingLockDirection = 0x1 << 0,
  NSEventSwipeTrackingClampGestureAmount = 0x1 << 1,
}

declare enum NSEventSubtype {
  NSEventSubtypeWindowExposed = 0,
  NSEventSubtypeApplicationActivated = 1,
  NSEventSubtypeApplicationDeactivated = 2,
  NSEventSubtypeWindowMoved = 4,
  NSEventSubtypeScreenChanged = 8,
  NSEventSubtypePowerOff = 1,
  NSEventSubtypeMouseEvent,
  NSEventSubtypeTabletPoint,
  NSEventSubtypeTabletProximity,
  NSEventSubtypeTouch,
}

declare enum NSPressureBehavior {
  NSPressureBehaviorUnknown = -1,
  NSPressureBehaviorPrimaryDefault = 0,
  NSPressureBehaviorPrimaryClick = 1,
  NSPressureBehaviorPrimaryGeneric = 2,
  NSPressureBehaviorPrimaryAccelerator = 3,
  NSPressureBehaviorPrimaryDeepClick = 5,
  NSPressureBehaviorPrimaryDeepDrag = 6,
}

declare class NSFilePromiseProvider extends NSObject implements INSPasteboardWriting {
  initWithFileType_delegate<T extends NSFilePromiseProvider>(fileType: NSString | string, delegate: any): T;
  init<T extends NSFilePromiseProvider>(): T;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;

  fileType(): NSString;
  setFileType(fileType: NSString | string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  userInfo(): any;
  setUserInfo(userInfo: any): void;
}

declare interface INSFilePromiseProviderDelegate {
  filePromiseProvider_fileNameForType(filePromiseProvider: NSFilePromiseProvider, fileType: NSString | string): NSString;
  filePromiseProvider_writePromiseToURL_completionHandler(filePromiseProvider: NSFilePromiseProvider, url: NSURL, completionHandler: Block): void;
  operationQueueForFilePromiseProvider(filePromiseProvider: NSFilePromiseProvider): NSOperationQueue;
}

declare class NSFilePromiseReceiver extends NSObject implements INSPasteboardReading {
  receivePromisedFilesAtDestination_options_operationQueue_reader(destinationDir: NSURL, options: NSDictionary<any, any> | {[key: string]: any}, operationQueue: NSOperationQueue, reader: Block): void;
  static readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  initWithPasteboardPropertyList_ofType<T extends NSFilePromiseReceiver>(propertyList: any, type: NSPasteboardType): T;

  static readableDraggedTypes(): NSArray<any>;
  static setReadableDraggedTypes(readableDraggedTypes: NSArray<any> | any[]): void;
  fileTypes(): NSArray<any>;
  setFileTypes(fileTypes: NSArray<any> | any[]): void;
  fileNames(): NSArray<any>;
  setFileNames(fileNames: NSArray<any> | any[]): void;
}

declare class NSFont extends NSObject implements INSCopying, INSSecureCoding {
  static fontWithName_size(fontName: NSString | string, fontSize: CGFloat): NSFont;
  static fontWithName_matrix(fontName: NSString | string, fontMatrix: CGFloat): NSFont;
  static fontWithDescriptor_size(fontDescriptor: NSFontDescriptor, fontSize: CGFloat): NSFont;
  static fontWithDescriptor_textTransform(fontDescriptor: NSFontDescriptor, textTransform: NSAffineTransform | null): NSFont;
  static userFontOfSize(fontSize: CGFloat): NSFont;
  static userFixedPitchFontOfSize(fontSize: CGFloat): NSFont;
  static setUserFont(font: NSFont | null): void;
  static setUserFixedPitchFont(font: NSFont | null): void;
  static systemFontOfSize(fontSize: CGFloat): NSFont;
  static boldSystemFontOfSize(fontSize: CGFloat): NSFont;
  static labelFontOfSize(fontSize: CGFloat): NSFont;
  static titleBarFontOfSize(fontSize: CGFloat): NSFont;
  static menuFontOfSize(fontSize: CGFloat): NSFont;
  static menuBarFontOfSize(fontSize: CGFloat): NSFont;
  static messageFontOfSize(fontSize: CGFloat): NSFont;
  static paletteFontOfSize(fontSize: CGFloat): NSFont;
  static toolTipsFontOfSize(fontSize: CGFloat): NSFont;
  static controlContentFontOfSize(fontSize: CGFloat): NSFont;
  static systemFontOfSize_weight(fontSize: CGFloat, weight: NSFontWeight): NSFont;
  static monospacedDigitSystemFontOfSize_weight(fontSize: CGFloat, weight: NSFontWeight): NSFont;
  static systemFontSizeForControlSize(controlSize: NSControlSize): CGFloat;
  boundingRectForCGGlyph(glyph: CGGlyph): NSRect;
  advancementForCGGlyph(glyph: CGGlyph): NSSize;
  getBoundingRects_forCGGlyphs_count(bounds: NSRectArray, glyphs: CGGlyph, glyphCount: NSUInteger): void;
  getAdvancements_forCGGlyphs_count(advancements: NSSizeArray, glyphs: CGGlyph, glyphCount: NSUInteger): void;
  set(): void;
  setInContext(graphicsContext: NSGraphicsContext): void;
  glyphWithName(name: NSString | string): NSGlyph;
  boundingRectForGlyph(glyph: NSGlyph): NSRect;
  advancementForGlyph(glyph: NSGlyph): NSSize;
  getBoundingRects_forGlyphs_count(bounds: NSRectArray, glyphs: NSGlyph, glyphCount: NSUInteger): void;
  getAdvancements_forGlyphs_count(advancements: NSSizeArray, glyphs: NSGlyph, glyphCount: NSUInteger): void;
  getAdvancements_forPackedGlyphs_length(advancements: NSSizeArray, packedGlyphs: void, length: NSUInteger): void;
  screenFontWithRenderingMode(renderingMode: NSFontRenderingMode): NSFont;
  static useFont(fontName: NSString | string): void;
  widthOfString(string: NSString | string): CGFloat;
  isBaseFont(): boolean;
  afmDictionary(): NSDictionary<any, any>;
  glyphIsEncoded(glyph: NSGlyph): boolean;
  defaultLineHeightForFont(): CGFloat;
  static preferredFontNames(): NSArray<any>;
  static setPreferredFontNames(fontNameArray: NSArray<any> | any[]): void;
  encodingScheme(): NSString;
  glyphPacking(): NSMultibyteGlyphPacking;
  positionOfGlyph_precededByGlyph_isNominal(glyph: NSGlyph, prevGlyph: NSGlyph, nominal: boolean): NSPoint;
  positionsForCompositeSequence_numberOfGlyphs_pointArray(someGlyphs: NSGlyph, numGlyphs: NSInteger, points: NSPointArray): NSInteger;
  positionOfGlyph_struckOverGlyph_metricsExist(glyph: NSGlyph, prevGlyph: NSGlyph, exist: boolean): NSPoint;
  positionOfGlyph_struckOverRect_metricsExist(glyph: NSGlyph, rect: NSRect, exist: boolean): NSPoint;
  positionOfGlyph_forCharacter_struckOverRect(glyph: NSGlyph, character: unichar, rect: NSRect): NSPoint;
  positionOfGlyph_withRelation_toBaseGlyph_totalAdvancement_metricsExist(thisGlyph: NSGlyph, rel: NSGlyphRelation, baseGlyph: NSGlyph, adv: NSSizePointer, exist: boolean): NSPoint;
  static preventsAutoActivation_bc(): boolean;
  static setPreventsAutoActivation_bc(flag: boolean): void;
  static fontWithName_size_bc(fontName: NSString | string, fontSize: CGFloat): NSFont;
  static fontPreventingAutoActivationWithName_size_bc(fontName: NSString | string, fontSize: CGFloat): NSFont;
  addSVGAttributes(attributes: NSMutableArray<any> | any[]): void;
  copyWithZone(zone: NSZone | null): any;

  static systemFontSize(): CGFloat;
  static setSystemFontSize(systemFontSize: CGFloat): void;
  static smallSystemFontSize(): CGFloat;
  static setSmallSystemFontSize(smallSystemFontSize: CGFloat): void;
  static labelFontSize(): CGFloat;
  static setLabelFontSize(labelFontSize: CGFloat): void;
  fontName(): NSString;
  setFontName(fontName: NSString | string): void;
  pointSize(): CGFloat;
  setPointSize(pointSize: CGFloat): void;
  matrix(): CGFloat;
  setMatrix(matrix: CGFloat): void;
  familyName(): NSString;
  setFamilyName(familyName: NSString | string): void;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
  fontDescriptor(): NSFontDescriptor;
  setFontDescriptor(fontDescriptor: NSFontDescriptor): void;
  textTransform(): NSAffineTransform;
  setTextTransform(textTransform: NSAffineTransform): void;
  numberOfGlyphs(): NSUInteger;
  setNumberOfGlyphs(numberOfGlyphs: NSUInteger): void;
  mostCompatibleStringEncoding(): NSStringEncoding;
  setMostCompatibleStringEncoding(mostCompatibleStringEncoding: NSStringEncoding): void;
  coveredCharacterSet(): NSCharacterSet;
  setCoveredCharacterSet(coveredCharacterSet: NSCharacterSet): void;
  boundingRectForFont(): NSRect;
  setBoundingRectForFont(boundingRectForFont: NSRect): void;
  maximumAdvancement(): NSSize;
  setMaximumAdvancement(maximumAdvancement: NSSize): void;
  ascender(): CGFloat;
  setAscender(ascender: CGFloat): void;
  descender(): CGFloat;
  setDescender(descender: CGFloat): void;
  leading(): CGFloat;
  setLeading(leading: CGFloat): void;
  underlinePosition(): CGFloat;
  setUnderlinePosition(underlinePosition: CGFloat): void;
  underlineThickness(): CGFloat;
  setUnderlineThickness(underlineThickness: CGFloat): void;
  italicAngle(): CGFloat;
  setItalicAngle(italicAngle: CGFloat): void;
  capHeight(): CGFloat;
  setCapHeight(capHeight: CGFloat): void;
  xHeight(): CGFloat;
  setXHeight(xHeight: CGFloat): void;
  fixedPitch(): boolean;
  setFixedPitch(fixedPitch: boolean): void;
  verticalFont(): NSFont;
  setVerticalFont(verticalFont: NSFont): void;
  vertical(): boolean;
  setVertical(vertical: boolean): void;
  printerFont(): NSFont;
  setPrinterFont(printerFont: NSFont): void;
  screenFont(): NSFont;
  setScreenFont(screenFont: NSFont): void;
  renderingMode(): NSFontRenderingMode;
  setRenderingMode(renderingMode: NSFontRenderingMode): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSGlyph = number

declare type NSGlyphRelation = NSUInteger

declare enum NSFontRenderingMode {
  NSFontDefaultRenderingMode = 0,
  NSFontAntialiasedRenderingMode = 1,
  NSFontIntegerAdvancementsRenderingMode = 2,
  NSFontAntialiasedIntegerAdvancementsRenderingMode = 3,
}

declare enum NSMultibyteGlyphPacking {
  NSNativeShortGlyphPacking = 5,
}

declare class NSFontAssetRequest extends NSObject implements INSProgressReporting {
  initWithFontDescriptors_options<T extends NSFontAssetRequest>(fontDescriptors: NSArray<any> | any[], options: NSFontAssetRequestOptions): T;
  downloadFontAssetsWithCompletionHandler(completionHandler: Block): void;

  downloadedFontDescriptors(): NSArray<any>;
  setDownloadedFontDescriptors(downloadedFontDescriptors: NSArray<any> | any[]): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
}

declare enum NSFontAssetRequestOptions {
  NSFontAssetRequestOptionUsesStandardUI = 1 << 0,
}

declare class NSFontCollection extends NSObject implements INSCopying, INSMutableCopying, INSCoding {
  static fontCollectionWithDescriptors(queryDescriptors: NSArray<any> | any[]): NSFontCollection;
  static fontCollectionWithLocale(locale: NSLocale): NSFontCollection;
  static showFontCollection_withName_visibility_error(collection: NSFontCollection, name: NSFontCollectionName, visibility: NSFontCollectionVisibility, error: NSError): boolean;
  static hideFontCollectionWithName_visibility_error(name: NSFontCollectionName, visibility: NSFontCollectionVisibility, error: NSError): boolean;
  static renameFontCollectionWithName_visibility_toName_error(name: NSFontCollectionName, visibility: NSFontCollectionVisibility, name2: NSFontCollectionName, error: NSError): boolean;
  static fontCollectionWithName(name: NSFontCollectionName): NSFontCollection;
  static fontCollectionWithName_visibility(name: NSFontCollectionName, visibility: NSFontCollectionVisibility): NSFontCollection;
  matchingDescriptorsWithOptions(options: NSDictionary<any, any> | {[key: string]: any} | null): NSArray<any>;
  matchingDescriptorsForFamily(family: NSString | string): NSArray<any>;
  matchingDescriptorsForFamily_options(family: NSString | string, options: NSDictionary<any, any> | {[key: string]: any} | null): NSArray<any>;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSFontCollection>(aDecoder: NSCoder): T;

  static fontCollectionWithAllAvailableDescriptors(): NSFontCollection;
  static setFontCollectionWithAllAvailableDescriptors(fontCollectionWithAllAvailableDescriptors: NSFontCollection): void;
  static allFontCollectionNames(): NSArray<any>;
  static setAllFontCollectionNames(allFontCollectionNames: NSArray<any> | any[]): void;
  queryDescriptors(): NSArray<any>;
  setQueryDescriptors(queryDescriptors: NSArray<any> | any[]): void;
  exclusionDescriptors(): NSArray<any>;
  setExclusionDescriptors(exclusionDescriptors: NSArray<any> | any[]): void;
  matchingDescriptors(): NSArray<any>;
  setMatchingDescriptors(matchingDescriptors: NSArray<any> | any[]): void;
}

declare class NSMutableFontCollection extends NSFontCollection {
  static fontCollectionWithDescriptors(queryDescriptors: NSArray<any> | any[]): NSMutableFontCollection;
  static fontCollectionWithLocale(locale: NSLocale): NSMutableFontCollection;
  static fontCollectionWithName(name: NSFontCollectionName): NSMutableFontCollection;
  static fontCollectionWithName_visibility(name: NSFontCollectionName, visibility: NSFontCollectionVisibility): NSMutableFontCollection;
  addQueryForDescriptors(descriptors: NSArray<any> | any[]): void;
  removeQueryForDescriptors(descriptors: NSArray<any> | any[]): void;

  static fontCollectionWithAllAvailableDescriptors(): NSMutableFontCollection;
  static setFontCollectionWithAllAvailableDescriptors(fontCollectionWithAllAvailableDescriptors: NSMutableFontCollection): void;
  queryDescriptors(): NSArray<any>;
  setQueryDescriptors(queryDescriptors: NSArray<any> | any[]): void;
  exclusionDescriptors(): NSArray<any>;
  setExclusionDescriptors(exclusionDescriptors: NSArray<any> | any[]): void;
}

declare type NSFontCollectionMatchingOptionKey = NSString

declare type NSFontCollectionName = NSString

declare type NSFontCollectionUserInfoKey = NSString

declare type NSFontCollectionActionTypeKey = NSString

declare enum NSFontCollectionVisibility {
  NSFontCollectionVisibilityProcess,
  NSFontCollectionVisibilityUser,
  NSFontCollectionVisibilityComputer,
}

declare class NSFontDescriptor extends NSObject implements INSCopying, INSSecureCoding {
  objectForKey(attribute: NSFontDescriptorAttributeName): any;
  static fontDescriptorWithFontAttributes(attributes: NSDictionary<any, any> | {[key: string]: any} | null): NSFontDescriptor;
  static fontDescriptorWithName_size(fontName: NSString | string, size: CGFloat): NSFontDescriptor;
  static fontDescriptorWithName_matrix(fontName: NSString | string, matrix: NSAffineTransform): NSFontDescriptor;
  initWithFontAttributes<T extends NSFontDescriptor>(attributes: NSDictionary<any, any> | {[key: string]: any} | null): T;
  matchingFontDescriptorsWithMandatoryKeys(mandatoryKeys: NSSet<any> | null): NSArray<any>;
  matchingFontDescriptorWithMandatoryKeys(mandatoryKeys: NSSet<any> | null): NSFontDescriptor;
  fontDescriptorByAddingAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): NSFontDescriptor;
  fontDescriptorWithSymbolicTraits(symbolicTraits: NSFontDescriptorSymbolicTraits): NSFontDescriptor;
  fontDescriptorWithSize(newPointSize: CGFloat): NSFontDescriptor;
  fontDescriptorWithMatrix(matrix: NSAffineTransform): NSFontDescriptor;
  fontDescriptorWithFace(newFace: NSString | string): NSFontDescriptor;
  fontDescriptorWithFamily(newFamily: NSString | string): NSFontDescriptor;
  copyWithZone(zone: NSZone | null): any;

  postscriptName(): NSString;
  setPostscriptName(postscriptName: NSString | string): void;
  pointSize(): CGFloat;
  setPointSize(pointSize: CGFloat): void;
  matrix(): NSAffineTransform;
  setMatrix(matrix: NSAffineTransform): void;
  symbolicTraits(): NSFontDescriptorSymbolicTraits;
  setSymbolicTraits(symbolicTraits: NSFontDescriptorSymbolicTraits): void;
  requiresFontAssetRequest(): boolean;
  setRequiresFontAssetRequest(requiresFontAssetRequest: boolean): void;
  fontAttributes(): NSDictionary<any, any>;
  setFontAttributes(fontAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type NSFontSymbolicTraits = number

declare type NSFontDescriptorAttributeName = NSString

declare type NSFontDescriptorTraitKey = NSString

declare type NSFontDescriptorVariationKey = NSString

declare type NSFontDescriptorFeatureKey = NSString

declare type NSFontWeight = CGFloat

declare type NSFontFamilyClass = number

declare enum NSFontDescriptorSymbolicTraits {
  NSFontDescriptorTraitItalic = 1 << 0,
  NSFontDescriptorTraitBold = 1 << 1,
  NSFontDescriptorTraitExpanded = 1 << 5,
  NSFontDescriptorTraitCondensed = 1 << 6,
  NSFontDescriptorTraitMonoSpace = 1 << 10,
  NSFontDescriptorTraitVertical = 1 << 11,
  NSFontDescriptorTraitUIOptimized = 1 << 12,
  NSFontDescriptorTraitTightLeading = 1 << 15,
  NSFontDescriptorTraitLooseLeading = 1 << 16,
  NSFontDescriptorClassMask = 0xF0000000,
  NSFontDescriptorClassUnknown = 0 << 28,
  NSFontDescriptorClassOldStyleSerifs = 1 << 28,
  NSFontDescriptorClassTransitionalSerifs = 2 << 28,
  NSFontDescriptorClassModernSerifs = 3 << 28,
  NSFontDescriptorClassClarendonSerifs = 4 << 28,
  NSFontDescriptorClassSlabSerifs = 5 << 28,
  NSFontDescriptorClassFreeformSerifs = 7 << 28,
  NSFontDescriptorClassSansSerif = 8 << 28,
  NSFontDescriptorClassOrnamentals = 9 << 28,
  NSFontDescriptorClassScripts = 10 << 28,
  NSFontDescriptorClassSymbolic = 12 << 28,
}

declare class NSFontManager extends NSObject {
  static setFontPanelFactory(factoryId: any | null): void;
  static setFontManagerFactory(factoryId: any | null): void;
  setSelectedFont_isMultiple(fontObj: NSFont, flag: boolean): void;
  setFontMenu(newMenu: NSMenu): void;
  fontMenu(create: boolean): NSMenu;
  fontPanel(create: boolean): NSFontPanel;
  fontWithFamily_traits_weight_size(family: NSString | string, traits: NSFontTraitMask, weight: NSInteger, size: CGFloat): NSFont;
  traitsOfFont(fontObj: NSFont): NSFontTraitMask;
  weightOfFont(fontObj: NSFont): NSInteger;
  availableMembersOfFontFamily(fam: NSString | string): NSArray<any>;
  convertFont(fontObj: NSFont): NSFont;
  convertFont_toSize(fontObj: NSFont, size: CGFloat): NSFont;
  convertFont_toFace(fontObj: NSFont, typeface: NSString | string): NSFont;
  convertFont_toFamily(fontObj: NSFont, family: NSString | string): NSFont;
  convertFont_toHaveTrait(fontObj: NSFont, trait: NSFontTraitMask): NSFont;
  convertFont_toNotHaveTrait(fontObj: NSFont, trait: NSFontTraitMask): NSFont;
  convertWeight_ofFont(upFlag: boolean, fontObj: NSFont): NSFont;
  sendAction(): boolean;
  localizedNameForFamily_face(family: NSString | string, faceKey: NSString | string | null): NSString;
  setSelectedAttributes_isMultiple(attributes: NSDictionary<any, any> | {[key: string]: any}, flag: boolean): void;
  convertAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  availableFontNamesMatchingFontDescriptor(descriptor: NSFontDescriptor): NSArray<any>;
  fontDescriptorsInCollection(collectionNames: NSString | string): NSArray<any>;
  addCollection_options(collectionName: NSString | string, collectionOptions: NSFontCollectionOptions): boolean;
  removeCollection(collectionName: NSString | string): boolean;
  addFontDescriptors_toCollection(descriptors: NSArray<any> | any[], collectionName: NSString | string): void;
  removeFontDescriptor_fromCollection(descriptor: NSFontDescriptor, collection: NSString | string): void;
  convertFontTraits(traits: NSFontTraitMask): NSFontTraitMask;
  fontNamed_hasTraits(fName: NSString | string, someTraits: NSFontTraitMask): boolean;
  availableFontNamesWithTraits(someTraits: NSFontTraitMask): NSArray<any>;
  addFontTrait(sender: any | null): void;
  removeFontTrait(sender: any | null): void;
  modifyFontViaPanel(sender: any | null): void;
  modifyFont(sender: any | null): void;
  orderFrontFontPanel(sender: any | null): void;
  orderFrontStylesPanel(sender: any | null): void;

  static sharedFontManager(): NSFontManager;
  static setSharedFontManager(sharedFontManager: NSFontManager): void;
  multiple(): boolean;
  setMultiple(multiple: boolean): void;
  selectedFont(): NSFont;
  setSelectedFont(selectedFont: NSFont): void;
  availableFonts(): NSArray<any>;
  setAvailableFonts(availableFonts: NSArray<any> | any[]): void;
  availableFontFamilies(): NSArray<any>;
  setAvailableFontFamilies(availableFontFamilies: NSArray<any> | any[]): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  action(): string;
  setAction(action: string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  collectionNames(): NSArray<any>;
  setCollectionNames(collectionNames: NSArray<any> | any[]): void;
  currentFontAction(): NSFontAction;
  setCurrentFontAction(currentFontAction: NSFontAction): void;
  target(): any;
  setTarget(target: any): void;
}

declare enum NSFontTraitMask {
  NSItalicFontMask = 0x00000001,
  NSBoldFontMask = 0x00000002,
  NSUnboldFontMask = 0x00000004,
  NSNonStandardCharacterSetFontMask = 0x00000008,
  NSNarrowFontMask = 0x00000010,
  NSExpandedFontMask = 0x00000020,
  NSCondensedFontMask = 0x00000040,
  NSSmallCapsFontMask = 0x00000080,
  NSPosterFontMask = 0x00000100,
  NSCompressedFontMask = 0x00000200,
  NSFixedPitchFontMask = 0x00000400,
  NSUnitalicFontMask = 0x01000000,
}

declare enum NSFontCollectionOptions {
  NSFontCollectionApplicationOnlyMask = 1 << 0,
}

declare enum NSFontAction {
  NSNoFontChangeAction = 0,
  NSViaPanelFontAction = 1,
  NSAddTraitFontAction = 2,
  NSSizeUpFontAction = 3,
  NSSizeDownFontAction = 4,
  NSHeavierFontAction = 5,
  NSLighterFontAction = 6,
  NSRemoveTraitFontAction = 7,
}

declare class NSFontPanel extends NSPanel {
  setPanelFont_isMultiple(fontObj: NSFont, flag: boolean): void;
  panelConvertFont(fontObj: NSFont): NSFont;
  reloadDefaultFontFamilies(): void;

  static sharedFontPanel(): NSFontPanel;
  static setSharedFontPanel(sharedFontPanel: NSFontPanel): void;
  static sharedFontPanelExists(): boolean;
  static setSharedFontPanelExists(sharedFontPanelExists: boolean): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
  worksWhenModal(): boolean;
  setWorksWhenModal(worksWhenModal: boolean): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
}

declare enum NSFontPanelModeMask {
  NSFontPanelModeMaskFace = 1 << 0,
  NSFontPanelModeMaskSize = 1 << 1,
  NSFontPanelModeMaskCollection = 1 << 2,
  NSFontPanelModeMaskUnderlineEffect = 1<<8,
  NSFontPanelModeMaskStrikethroughEffect = 1<<9,
  NSFontPanelModeMaskTextColorEffect = 1<< 10,
  NSFontPanelModeMaskDocumentColorEffect = 1<<11,
  NSFontPanelModeMaskShadowEffect = 1<<12,
  NSFontPanelModeMaskAllEffects = 0XFFF00,
  NSFontPanelModesMaskStandardModes = 0xFFFF,
  NSFontPanelModesMaskAllModes = 0xFFFFFFFF,
}

declare class NSFormCell extends NSActionCell {
  // initTextCell<T extends NSFormCell>(string: NSString | string | null): T;
  // initWithCoder<T extends NSFormCell>(coder: NSCoder): T;
  titleWidth(size: NSSize): CGFloat;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;

  titleWidth(): CGFloat;
  setTitleWidth(titleWidth: CGFloat): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  titleFont(): NSFont;
  setTitleFont(titleFont: NSFont): void;
  titleAlignment(): NSTextAlignment;
  setTitleAlignment(titleAlignment: NSTextAlignment): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  placeholderString(): NSString;
  setPlaceholderString(placeholderString: NSString | string): void;
  placeholderAttributedString(): NSAttributedString;
  setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): void;
  titleBaseWritingDirection(): NSWritingDirection;
  setTitleBaseWritingDirection(titleBaseWritingDirection: NSWritingDirection): void;
  preferredTextFieldWidth(): CGFloat;
  setPreferredTextFieldWidth(preferredTextFieldWidth: CGFloat): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
}

declare class NSGestureRecognizer extends NSObject implements INSCoding {
  initWithTarget_action<T extends NSGestureRecognizer>(target: any | null, action: string | null): T;
  initWithCoder<T extends NSGestureRecognizer>(coder: NSCoder): T;
  locationInView(view: NSView | null): NSPoint;
  reset(): void;
  canPreventGestureRecognizer(preventedGestureRecognizer: NSGestureRecognizer): boolean;
  canBePreventedByGestureRecognizer(preventingGestureRecognizer: NSGestureRecognizer): boolean;
  shouldRequireFailureOfGestureRecognizer(otherGestureRecognizer: NSGestureRecognizer): boolean;
  shouldBeRequiredToFailByGestureRecognizer(otherGestureRecognizer: NSGestureRecognizer): boolean;
  mouseDown(event: NSEvent): void;
  rightMouseDown(event: NSEvent): void;
  otherMouseDown(event: NSEvent): void;
  mouseUp(event: NSEvent): void;
  rightMouseUp(event: NSEvent): void;
  otherMouseUp(event: NSEvent): void;
  mouseDragged(event: NSEvent): void;
  rightMouseDragged(event: NSEvent): void;
  otherMouseDragged(event: NSEvent): void;
  keyDown(event: NSEvent): void;
  keyUp(event: NSEvent): void;
  flagsChanged(event: NSEvent): void;
  tabletPoint(event: NSEvent): void;
  magnifyWithEvent(event: NSEvent): void;
  rotateWithEvent(event: NSEvent): void;
  pressureChangeWithEvent(event: NSEvent): void;
  touchesBeganWithEvent(event: NSEvent): void;
  touchesMovedWithEvent(event: NSEvent): void;
  touchesEndedWithEvent(event: NSEvent): void;
  touchesCancelledWithEvent(event: NSEvent): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSGestureRecognizer>(aDecoder: NSCoder): T;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  state(): NSGestureRecognizerState;
  setState(state: NSGestureRecognizerState): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  view(): NSView;
  setView(view: NSView): void;
  pressureConfiguration(): NSPressureConfiguration;
  setPressureConfiguration(pressureConfiguration: NSPressureConfiguration): void;
  delaysPrimaryMouseButtonEvents(): boolean;
  setDelaysPrimaryMouseButtonEvents(delaysPrimaryMouseButtonEvents: boolean): void;
  delaysSecondaryMouseButtonEvents(): boolean;
  setDelaysSecondaryMouseButtonEvents(delaysSecondaryMouseButtonEvents: boolean): void;
  delaysOtherMouseButtonEvents(): boolean;
  setDelaysOtherMouseButtonEvents(delaysOtherMouseButtonEvents: boolean): void;
  delaysKeyEvents(): boolean;
  setDelaysKeyEvents(delaysKeyEvents: boolean): void;
  delaysMagnificationEvents(): boolean;
  setDelaysMagnificationEvents(delaysMagnificationEvents: boolean): void;
  delaysRotationEvents(): boolean;
  setDelaysRotationEvents(delaysRotationEvents: boolean): void;
  allowedTouchTypes(): NSTouchTypeMask;
  setAllowedTouchTypes(allowedTouchTypes: NSTouchTypeMask): void;
}

declare interface INSGestureRecognizerDelegate {
  gestureRecognizer_shouldAttemptToRecognizeWithEvent(gestureRecognizer: NSGestureRecognizer, event: NSEvent): boolean;
  gestureRecognizerShouldBegin(gestureRecognizer: NSGestureRecognizer): boolean;
  gestureRecognizer_shouldRecognizeSimultaneouslyWithGestureRecognizer(gestureRecognizer: NSGestureRecognizer, otherGestureRecognizer: NSGestureRecognizer): boolean;
  gestureRecognizer_shouldRequireFailureOfGestureRecognizer(gestureRecognizer: NSGestureRecognizer, otherGestureRecognizer: NSGestureRecognizer): boolean;
  gestureRecognizer_shouldBeRequiredToFailByGestureRecognizer(gestureRecognizer: NSGestureRecognizer, otherGestureRecognizer: NSGestureRecognizer): boolean;
  gestureRecognizer_shouldReceiveTouch(gestureRecognizer: NSGestureRecognizer, touch: NSTouch): boolean;
}

declare enum NSGestureRecognizerState {
  NSGestureRecognizerStatePossible,
  NSGestureRecognizerStateBegan,
  NSGestureRecognizerStateChanged,
  NSGestureRecognizerStateEnded,
  NSGestureRecognizerStateCancelled,
  NSGestureRecognizerStateFailed,
  NSGestureRecognizerStateRecognized,
}

declare class NSGlyphGenerator extends NSObject {
  generateGlyphsForGlyphStorage_desiredNumberOfCharacters_glyphIndex_characterIndex(glyphStorage: any, nChars: NSUInteger, glyphIndex: NSUInteger | null, charIndex: NSUInteger | null): void;

  static sharedGlyphGenerator(): NSGlyphGenerator;
  static setSharedGlyphGenerator(sharedGlyphGenerator: NSGlyphGenerator): void;
}

declare interface INSGlyphStorage {
  insertGlyphs_length_forStartingGlyphAtIndex_characterIndex(glyphs: NSGlyph, length: NSUInteger, glyphIndex: NSUInteger, charIndex: NSUInteger): void;
  setIntAttribute_value_forGlyphAtIndex(attributeTag: NSInteger, val: NSInteger, glyphIndex: NSUInteger): void;
  attributedString(): NSAttributedString;
  layoutOptions(): NSUInteger;
}

declare class NSGlyphInfo extends NSObject implements INSCopying, INSSecureCoding {
  static glyphInfoWithCGGlyph_forFont_baseString(glyph: CGGlyph, font: NSFont, string: NSString | string): NSGlyphInfo;
  static glyphInfoWithGlyphName_forFont_baseString(glyphName: NSString | string, font: NSFont, string: NSString | string): NSGlyphInfo;
  static glyphInfoWithGlyph_forFont_baseString(glyph: NSGlyph, font: NSFont, string: NSString | string): NSGlyphInfo;
  static glyphInfoWithCharacterIdentifier_collection_baseString(cid: NSUInteger, characterCollection: NSCharacterCollection, string: NSString | string): NSGlyphInfo;
  copyWithZone(zone: NSZone | null): any;

  glyphID(): CGGlyph;
  setGlyphID(glyphID: CGGlyph): void;
  baseString(): NSString;
  setBaseString(baseString: NSString | string): void;
  glyphName(): NSString;
  setGlyphName(glyphName: NSString | string): void;
  characterIdentifier(): NSUInteger;
  setCharacterIdentifier(characterIdentifier: NSUInteger): void;
  characterCollection(): NSCharacterCollection;
  setCharacterCollection(characterCollection: NSCharacterCollection): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum NSCharacterCollection {
  NSIdentityMappingCharacterCollection = 0,
  NSAdobeCNS1CharacterCollection = 1,
  NSAdobeGB1CharacterCollection = 2,
  NSAdobeJapan1CharacterCollection = 3,
  NSAdobeJapan2CharacterCollection = 4,
  NSAdobeKorea1CharacterCollection = 5,
}

declare class NSGradient extends NSObject implements INSCopying, INSCoding {
  initWithStartingColor_endingColor<T extends NSGradient>(startingColor: NSColor, endingColor: NSColor): T;
  initWithColors<T extends NSGradient>(colorArray: NSArray<any> | any[]): T;
  initWithColorsAndLocations<T extends NSGradient>(firstColor: NSColor, ...args: any[]): T;
  initWithColors_atLocations_colorSpace<T extends NSGradient>(colorArray: NSArray<any> | any[], locations: CGFloat | null, colorSpace: NSColorSpace): T;
  initWithCoder<T extends NSGradient>(decoder: NSCoder): T;
  drawFromPoint_toPoint_options(startingPoint: NSPoint, endingPoint: NSPoint, options: NSGradientDrawingOptions): void;
  drawInRect_angle(rect: NSRect, angle: CGFloat): void;
  drawInBezierPath_angle(path: NSBezierPath, angle: CGFloat): void;
  drawFromCenter_radius_toCenter_radius_options(startCenter: NSPoint, startRadius: CGFloat, endCenter: NSPoint, endRadius: CGFloat, options: NSGradientDrawingOptions): void;
  drawInRect_relativeCenterPosition(rect: NSRect, relativeCenterPosition: NSPoint): void;
  drawInBezierPath_relativeCenterPosition(path: NSBezierPath, relativeCenterPosition: NSPoint): void;
  getColor_location_atIndex(color: NSColor, location: CGFloat | null, index: NSInteger): void;
  interpolatedColorAtLocation(location: CGFloat): NSColor;
  interpolatedGradientWithExtraStops_function(extraStops: NSUInteger, functionName: GradientInterpolationFunction): NSGradient;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSGradient>(aDecoder: NSCoder): T;

  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  numberOfColorStops(): NSInteger;
  setNumberOfColorStops(numberOfColorStops: NSInteger): void;
}

declare enum NSGradientDrawingOptions {
  NSGradientDrawsBeforeStartingLocation,
  NSGradientDrawsAfterEndingLocation,
}

declare type NSColorSpaceName = NSString

declare type NSDeviceDescriptionKey = NSString

declare enum NSCompositingOperation {
  NSCompositingOperationClear,
  NSCompositingOperationCopy,
  NSCompositingOperationSourceOver,
  NSCompositingOperationSourceIn,
  NSCompositingOperationSourceOut,
  NSCompositingOperationSourceAtop,
  NSCompositingOperationDestinationOver,
  NSCompositingOperationDestinationIn,
  NSCompositingOperationDestinationOut,
  NSCompositingOperationDestinationAtop,
  NSCompositingOperationXOR,
  NSCompositingOperationPlusDarker,
  NSCompositingOperationHighlight,
  NSCompositingOperationPlusLighter,
  NSCompositingOperationMultiply,
  NSCompositingOperationScreen,
  NSCompositingOperationOverlay,
  NSCompositingOperationDarken,
  NSCompositingOperationLighten,
  NSCompositingOperationColorDodge,
  NSCompositingOperationColorBurn,
  NSCompositingOperationSoftLight,
  NSCompositingOperationHardLight,
  NSCompositingOperationDifference,
  NSCompositingOperationExclusion,
  NSCompositingOperationHue,
  NSCompositingOperationSaturation,
  NSCompositingOperationColor,
  NSCompositingOperationLuminosity,
}

declare enum NSBackingStoreType {
  NSBackingStoreRetained = 0,
  NSBackingStoreNonretained = 1,
  NSBackingStoreBuffered = 2,
}

declare enum NSWindowOrderingMode {
  NSWindowAbove = 1,
  NSWindowBelow = -1,
  NSWindowOut = 0,
}

declare enum NSFocusRingPlacement {
  NSFocusRingOnly = 0,
  NSFocusRingBelow = 1,
  NSFocusRingAbove = 2,
}

declare enum NSFocusRingType {
  NSFocusRingTypeDefault = 0,
  NSFocusRingTypeNone = 1,
  NSFocusRingTypeExterior = 2,
}

declare enum NSColorRenderingIntent {
  NSColorRenderingIntentDefault,
  NSColorRenderingIntentAbsoluteColorimetric,
  NSColorRenderingIntentRelativeColorimetric,
  NSColorRenderingIntentPerceptual,
  NSColorRenderingIntentSaturation,
}

declare enum NSWindowDepth {
  NSWindowDepthTwentyfourBitRGB = 0x208,
  NSWindowDepthSixtyfourBitRGB = 0x210,
  NSWindowDepthOnehundredtwentyeightBitRGB = 0x220,
}

declare enum NSDisplayGamut {
  NSDisplayGamutSRGB = 1,
  NSDisplayGamutP3,
}

declare enum NSAnimationEffect {
  NSAnimationEffectDisappearingItemDefault = 0,
  NSAnimationEffectPoof = 10,
}

declare class NSGraphicsContext extends NSObject {
  static graphicsContextWithAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): NSGraphicsContext;
  static graphicsContextWithWindow(window: NSWindow): NSGraphicsContext;
  static graphicsContextWithBitmapImageRep(bitmapRep: NSBitmapImageRep): NSGraphicsContext;
  static graphicsContextWithCGContext_flipped(graphicsPort: CGContextRef, initialFlippedState: boolean): NSGraphicsContext;
  static currentContextDrawingToScreen(): boolean;
  saveGraphicsState(): void;
  restoreGraphicsState(): void;
  flushGraphics(): void;
  static setGraphicsState(gState: NSInteger): void;
  focusStack(): any;
  setFocusStack(stack: any): void;
  static graphicsContextWithGraphicsPort_flipped(graphicsPort: void, initialFlippedState: boolean): NSGraphicsContext;

  static currentContext(): NSGraphicsContext;
  static setCurrentContext(currentContext: NSGraphicsContext): void;
  attributes(): NSDictionary<any, any>;
  setAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): void;
  drawingToScreen(): boolean;
  setDrawingToScreen(drawingToScreen: boolean): void;
  CGContext(): CGContextRef;
  setCGContext(CGContext: CGContextRef): void;
  flipped(): boolean;
  setFlipped(flipped: boolean): void;
  shouldAntialias(): boolean;
  setShouldAntialias(shouldAntialias: boolean): void;
  imageInterpolation(): NSImageInterpolation;
  setImageInterpolation(imageInterpolation: NSImageInterpolation): void;
  patternPhase(): NSPoint;
  setPatternPhase(patternPhase: NSPoint): void;
  compositingOperation(): NSCompositingOperation;
  setCompositingOperation(compositingOperation: NSCompositingOperation): void;
  colorRenderingIntent(): NSColorRenderingIntent;
  setColorRenderingIntent(colorRenderingIntent: NSColorRenderingIntent): void;
  CIContext(): CIContext;
  setCIContext(CIContext: CIContext): void;
  graphicsPort(): void;
  setGraphicsPort(graphicsPort: void): void;
}

declare type NSGraphicsContextAttributeKey = NSString

declare type NSGraphicsContextRepresentationFormatName = NSString

declare enum NSImageInterpolation {
  NSImageInterpolationDefault = 0,
  NSImageInterpolationNone = 1,
  NSImageInterpolationLow = 2,
  NSImageInterpolationMedium = 4,
  NSImageInterpolationHigh = 3,
}

declare class NSGridView extends NSView {
  // initWithFrame<T extends NSGridView>(frameRect: NSRect): T;
  // initWithCoder<T extends NSGridView>(coder: NSCoder): T;
  static gridViewWithNumberOfColumns_rows(columnCount: NSInteger, rowCount: NSInteger): NSGridView;
  static gridViewWithViews(rows: NSArray<any> | any[]): NSGridView;
  rowAtIndex(index: NSInteger): NSGridRow;
  indexOfRow(row: NSGridRow): NSInteger;
  columnAtIndex(index: NSInteger): NSGridColumn;
  indexOfColumn(column: NSGridColumn): NSInteger;
  cellAtColumnIndex_rowIndex(columnIndex: NSInteger, rowIndex: NSInteger): NSGridCell;
  cellForView(view: NSView): NSGridCell;
  addRowWithViews(views: NSArray<any> | any[]): NSGridRow;
  insertRowAtIndex_withViews(index: NSInteger, views: NSArray<any> | any[]): NSGridRow;
  moveRowAtIndex_toIndex(fromIndex: NSInteger, toIndex: NSInteger): void;
  removeRowAtIndex(index: NSInteger): void;
  addColumnWithViews(views: NSArray<any> | any[]): NSGridColumn;
  insertColumnAtIndex_withViews(index: NSInteger, views: NSArray<any> | any[]): NSGridColumn;
  moveColumnAtIndex_toIndex(fromIndex: NSInteger, toIndex: NSInteger): void;
  removeColumnAtIndex(index: NSInteger): void;
  mergeCellsInHorizontalRange_verticalRange(hRange: NSRange, vRange: NSRange): void;

  numberOfRows(): NSInteger;
  setNumberOfRows(numberOfRows: NSInteger): void;
  numberOfColumns(): NSInteger;
  setNumberOfColumns(numberOfColumns: NSInteger): void;
  xPlacement(): NSGridCellPlacement;
  setXPlacement(xPlacement: NSGridCellPlacement): void;
  yPlacement(): NSGridCellPlacement;
  setYPlacement(yPlacement: NSGridCellPlacement): void;
  rowAlignment(): NSGridRowAlignment;
  setRowAlignment(rowAlignment: NSGridRowAlignment): void;
  rowSpacing(): CGFloat;
  setRowSpacing(rowSpacing: CGFloat): void;
  columnSpacing(): CGFloat;
  setColumnSpacing(columnSpacing: CGFloat): void;
}

declare class NSGridRow extends NSObject implements INSCoding {
  cellAtIndex(index: NSInteger): NSGridCell;
  mergeCellsInRange(range: NSRange): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSGridRow>(aDecoder: NSCoder): T;

  gridView(): NSGridView;
  setGridView(gridView: NSGridView): void;
  numberOfCells(): NSInteger;
  setNumberOfCells(numberOfCells: NSInteger): void;
  yPlacement(): NSGridCellPlacement;
  setYPlacement(yPlacement: NSGridCellPlacement): void;
  rowAlignment(): NSGridRowAlignment;
  setRowAlignment(rowAlignment: NSGridRowAlignment): void;
  height(): CGFloat;
  setHeight(height: CGFloat): void;
  topPadding(): CGFloat;
  setTopPadding(topPadding: CGFloat): void;
  bottomPadding(): CGFloat;
  setBottomPadding(bottomPadding: CGFloat): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
}

declare class NSGridColumn extends NSObject implements INSCoding {
  cellAtIndex(index: NSInteger): NSGridCell;
  mergeCellsInRange(range: NSRange): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSGridColumn>(aDecoder: NSCoder): T;

  gridView(): NSGridView;
  setGridView(gridView: NSGridView): void;
  numberOfCells(): NSInteger;
  setNumberOfCells(numberOfCells: NSInteger): void;
  xPlacement(): NSGridCellPlacement;
  setXPlacement(xPlacement: NSGridCellPlacement): void;
  width(): CGFloat;
  setWidth(width: CGFloat): void;
  leadingPadding(): CGFloat;
  setLeadingPadding(leadingPadding: CGFloat): void;
  trailingPadding(): CGFloat;
  setTrailingPadding(trailingPadding: CGFloat): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
}

declare class NSGridCell extends NSObject implements INSCoding {
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSGridCell>(aDecoder: NSCoder): T;

  contentView(): NSView;
  setContentView(contentView: NSView): void;
  static emptyContentView(): NSView;
  static setEmptyContentView(emptyContentView: NSView): void;
  row(): NSGridRow;
  setRow(row: NSGridRow): void;
  column(): NSGridColumn;
  setColumn(column: NSGridColumn): void;
  xPlacement(): NSGridCellPlacement;
  setXPlacement(xPlacement: NSGridCellPlacement): void;
  yPlacement(): NSGridCellPlacement;
  setYPlacement(yPlacement: NSGridCellPlacement): void;
  rowAlignment(): NSGridRowAlignment;
  setRowAlignment(rowAlignment: NSGridRowAlignment): void;
  customPlacementConstraints(): NSArray<any>;
  setCustomPlacementConstraints(customPlacementConstraints: NSArray<any> | any[]): void;
}

declare enum NSGridCellPlacement {
  NSGridCellPlacementInherited = 0,
  NSGridCellPlacementNone,
  NSGridCellPlacementLeading,
  NSGridCellPlacementTop,
  NSGridCellPlacementTrailing,
  NSGridCellPlacementBottom,
  NSGridCellPlacementCenter,
  NSGridCellPlacementFill,
}

declare enum NSGridRowAlignment {
  NSGridRowAlignmentInherited = 0,
  NSGridRowAlignmentNone,
  NSGridRowAlignmentFirstBaseline,
  NSGridRowAlignmentLastBaseline,
}

declare class NSGroupTouchBarItem extends NSTouchBarItem {
  static groupItemWithIdentifier_items(identifier: NSTouchBarItemIdentifier, items: NSArray<any> | any[]): NSGroupTouchBarItem;
  static groupItemWithIdentifier_items_allowedCompressionOptions(identifier: NSTouchBarItemIdentifier, items: NSArray<any> | any[], allowedCompressionOptions: NSUserInterfaceCompressionOptions): NSGroupTouchBarItem;
  static alertStyleGroupItemWithIdentifier(identifier: NSTouchBarItemIdentifier): NSGroupTouchBarItem;

  groupTouchBar(): NSTouchBar;
  setGroupTouchBar(groupTouchBar: NSTouchBar): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
  groupUserInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setGroupUserInterfaceLayoutDirection(groupUserInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  prefersEqualWidths(): boolean;
  setPrefersEqualWidths(prefersEqualWidths: boolean): void;
  preferredItemWidth(): CGFloat;
  setPreferredItemWidth(preferredItemWidth: CGFloat): void;
  effectiveCompressionOptions(): NSUserInterfaceCompressionOptions;
  setEffectiveCompressionOptions(effectiveCompressionOptions: NSUserInterfaceCompressionOptions): void;
  prioritizedCompressionOptions(): NSArray<any>;
  setPrioritizedCompressionOptions(prioritizedCompressionOptions: NSArray<any> | any[]): void;
}

declare class NSHapticFeedbackManager extends NSObject {
  static defaultPerformer(): any;
  static setDefaultPerformer(defaultPerformer: any): void;
}

declare interface INSHapticFeedbackPerformer {
  performFeedbackPattern_performanceTime(pattern: NSHapticFeedbackPattern, performanceTime: NSHapticFeedbackPerformanceTime): void;
}

declare enum NSHapticFeedbackPattern {
  NSHapticFeedbackPatternGeneric = 0,
  NSHapticFeedbackPatternAlignment,
  NSHapticFeedbackPatternLevelChange,
}

declare enum NSHapticFeedbackPerformanceTime {
  NSHapticFeedbackPerformanceTimeDefault = 0,
  NSHapticFeedbackPerformanceTimeNow,
  NSHapticFeedbackPerformanceTimeDrawCompleted,
}

declare class NSHelpManager extends NSObject {
  setContextHelp_forObject(attrString: NSAttributedString, object: any): void;
  removeContextHelpForObject(object: any): void;
  contextHelpForObject(object: any): NSAttributedString;
  showContextHelpForObject_locationHint(object: any, pt: NSPoint): boolean;
  openHelpAnchor_inBook(anchor: NSHelpAnchorName, book: NSHelpBookName | null): void;
  findString_inBook(query: NSString | string, book: NSHelpBookName | null): void;
  registerBooksInBundle(bundle: NSBundle): boolean;

  static sharedHelpManager(): NSHelpManager;
  static setSharedHelpManager(sharedHelpManager: NSHelpManager): void;
  static contextHelpModeActive(): boolean;
  static setContextHelpModeActive(contextHelpModeActive: boolean): void;
}

declare type NSHelpBookName = NSString

declare type NSHelpAnchorName = NSString

declare type NSHelpManagerContextHelpKey = NSString

declare class NSImage extends NSObject implements INSCopying, INSCoding, INSSecureCoding, INSPasteboardReading, INSPasteboardWriting {
  static imageNamed(name: NSImageName): NSImage;
  initWithSize<T extends NSImage>(size: NSSize): T;
  initWithCoder<T extends NSImage>(coder: NSCoder): T;
  initWithData<T extends NSImage>(data: NSData): T;
  initWithContentsOfFile<T extends NSImage>(fileName: NSString | string): T;
  initWithContentsOfURL<T extends NSImage>(url: NSURL): T;
  initByReferencingFile<T extends NSImage>(fileName: NSString | string): T;
  initByReferencingURL<T extends NSImage>(url: NSURL): T;
  initWithIconRef<T extends NSImage>(iconRef: IconRef): T;
  initWithPasteboard<T extends NSImage>(pasteboard: NSPasteboard): T;
  initWithDataIgnoringOrientation<T extends NSImage>(data: NSData): T;
  static imageWithSize_flipped_drawingHandler(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: boolean, drawingHandler: Block): NSImage;
  setName(string: NSImageName | null): boolean;
  name(): NSImageName;
  drawAtPoint_fromRect_operation_fraction(point: NSPoint, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  drawInRect_fromRect_operation_fraction(rect: NSRect, fromRect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: NSRect, srcSpacePortionRect: NSRect, op: NSCompositingOperation, requestedAlpha: CGFloat, respectContextIsFlipped: boolean, hints: NSDictionary<any, any> | {[key: string]: any} | null): void;
  drawRepresentation_inRect(imageRep: NSImageRep, rect: NSRect): boolean;
  drawInRect(rect: NSRect): void;
  recache(): void;
  TIFFRepresentationUsingCompression_factor(comp: NSTIFFCompression, factor: number): NSData;
  addRepresentations(imageReps: NSArray<any> | any[]): void;
  addRepresentation(imageRep: NSImageRep): void;
  removeRepresentation(imageRep: NSImageRep): void;
  lockFocus(): void;
  lockFocusFlipped(flipped: boolean): void;
  unlockFocus(): void;
  bestRepresentationForDevice(deviceDescription: NSDictionary<any, any> | {[key: string]: any}): NSImageRep;
  static imageUnfilteredFileTypes(): NSArray<any>;
  static imageUnfilteredPasteboardTypes(): NSArray<any>;
  static imageFileTypes(): NSArray<any>;
  static imagePasteboardTypes(): NSArray<any>;
  static canInitWithPasteboard(pasteboard: NSPasteboard): boolean;
  cancelIncrementalLoad(): void;
  isTemplate(): boolean;
  setTemplate(isTemplate: boolean): void;
  initWithCGImage_size<T extends NSImage>(cgImage: CGImageRef, size: NSSize): T;
  CGImageForProposedRect_context_hints_CF_RETURNS_NOT_RETAINED(proposedDestRect: NSRect | null, referenceContext: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null): CGImageRef;
  bestRepresentationForRect_context_hints(rect: NSRect, referenceContext: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null): NSImageRep;
  hitTestRect_withImageDestinationRect_context_hints_flipped(testRectDestSpace: NSRect, imageRectDestSpace: NSRect, context: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null, flipped: boolean): boolean;
  recommendedLayerContentsScale(preferredContentsScale: CGFloat): CGFloat;
  layerContentsForContentsScale(layerContentsScale: CGFloat): any;
  setFlipped(flag: boolean): void;
  isFlipped(): boolean;
  dissolveToPoint_fraction(point: NSPoint, fraction: CGFloat): void;
  dissolveToPoint_fromRect_fraction(point: NSPoint, rect: NSRect, fraction: CGFloat): void;
  compositeToPoint_operation(point: NSPoint, op: NSCompositingOperation): void;
  compositeToPoint_fromRect_operation(point: NSPoint, rect: NSRect, op: NSCompositingOperation): void;
  compositeToPoint_operation_fraction(point: NSPoint, op: NSCompositingOperation, delta: CGFloat): void;
  compositeToPoint_fromRect_operation_fraction(point: NSPoint, rect: NSRect, op: NSCompositingOperation, delta: CGFloat): void;
  lockFocusOnRepresentation(imageRepresentation: NSImageRep): void;
  setScalesWhenResized(flag: boolean): void;
  scalesWhenResized(): boolean;
  setDataRetained(flag: boolean): void;
  isDataRetained(): boolean;
  setCachedSeparately(flag: boolean): void;
  isCachedSeparately(): boolean;
  setCacheDepthMatchesImageDepth(flag: boolean): void;
  cacheDepthMatchesImageDepth(): boolean;
  static bundledImageNamed(imageName: NSString | string): NSImage;
  tintedAsPrimaryImageForOwner(owner: any): NSImage;
  tintedAsSecondaryImageForOwner(owner: any): NSImage;
  tintedAsUnselectedImageForOwner_isSharedObject(owner: any, isShared: boolean): NSImage;
  tintedAsSelectedImageForOwner(owner: any): NSImage;
  badgedAs_forOwner(badgeType: MSLayerPreviewBadgeType, owner: any): NSImage;
  badgedWithImage_maskImage_offset_forOwner(badgeImage: NSImage, maskImage: NSImage, offset: NSPoint, owner: any): NSImage;
  badgedWithImageNamed_maskImageNamed_offset_forOwner(badgeName: NSString | string, badgeMaskName: NSString | string, offset: NSPoint, owner: any): NSImage;
  drawAtPoint(point: NSPoint): void;
  drawAtPoint_fraction(point: NSPoint, delta: CGFloat): void;
  scaledImageToSize(aSize: NSSize): any;
  drawProportionallyInRect_operation_fraction(rect: NSRect, op: NSCompositingOperation, frac: CGFloat): void;
  drawInRect_fraction(rect: NSRect, delta: CGFloat): void;
  selectedImage(): NSImage;
  hoverImage(): NSImage;
  pressedImage(): NSImage;
  altImage(): NSImage;
  highlightImage(): NSImage;
  drawFlippedAtPoint(point: NSPoint): void;
  drawFlippedAtPoint_fraction(point: NSPoint, fraction: CGFloat): void;
  firstBitmapImageRepOrCreateIfNecessary(): NSBitmapImageRep;
  firstBitmapImageRepOrCreateIfNecessaryPreservingPixelSize(preservePixelSize: boolean): NSBitmapImageRep;
  firstBitmapImageRep(): NSBitmapImageRep;
  firstBitmapImageRepOfScale(scale: CGFloat): NSBitmapImageRep;
  bitSafeBitmapImageRep(): NSBitmapImageRep;
  drawInRect_fromRect_fraction_respectFlipped_colorSpace(inRect: NSRect, fromRect: NSRect, fraction: CGFloat, isFlipped: boolean, space: NSColorSpace): void;
  isVectorImage(): boolean;
  static PDFImageWithSize_flipped_drawingHandler(size: NSSize, drawingHandlerShouldBeCalledWithFlippedContext: boolean, drawingHandler: Block): NSImage;
  imageWithPadding(padding: NSUInteger): NSImage;
  isImageSizeLargerThan(targetSize: NSSize): boolean;
  pixelSize(): NSSize;
  imageWithShadow_padding(shadow: NSShadow, padding: NSUInteger): NSImage;
  thumbWithSize_cornerRadius(size: NSSize, cornerRadius: CGFloat): NSImage;
  static pngDataByFixingInvalidGamma(data: NSData): NSData;
  tintedWithColor(color: NSColor): NSImage;
  tintedWithColor_compositingOperation(color: NSColor, op: NSCompositingOperation): NSImage;
  tintedWithColorNamed_forOwner(colorName: NSString | string, imageOwner: any | null): NSImage;
  horizontallyFlipped(): NSImage;
  verticallyFlipped(): NSImage;
  static drawImageWithSize_withBlock(aSize: NSSize, aBlock: BCVoidBlock): NSImage;
  static drawImageFlippedWithSize_withBlock(aSize: NSSize, aBlock: BCVoidBlock): NSImage;
  static drawImageFlipped_withSize_withBlock(shouldFlip: boolean, aSize: NSSize, aBlock: BCVoidBlock): NSImage;
  imageHasAlpha(): boolean;
  static imageFromDataArchive(data: NSData): NSImage;
  dataForArchiving(): NSData;
  hasPDFData(): boolean;
  PDFImageRep(): NSPDFImageRep;
  hasEPSData(): boolean;
  EPSImageRep(): NSEPSImageRep;
  bitmapData(): NSData;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSImage>(aDecoder: NSCoder): T;
  static readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  initWithPasteboardPropertyList_ofType<T extends NSImage>(propertyList: any, type: NSPasteboardType): T;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;

  size(): NSSize;
  setSize(size: NSSize): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  usesEPSOnResolutionMismatch(): boolean;
  setUsesEPSOnResolutionMismatch(usesEPSOnResolutionMismatch: boolean): void;
  prefersColorMatch(): boolean;
  setPrefersColorMatch(prefersColorMatch: boolean): void;
  matchesOnMultipleResolution(): boolean;
  setMatchesOnMultipleResolution(matchesOnMultipleResolution: boolean): void;
  matchesOnlyOnBestFittingAxis(): boolean;
  setMatchesOnlyOnBestFittingAxis(matchesOnlyOnBestFittingAxis: boolean): void;
  TIFFRepresentation(): NSData;
  setTIFFRepresentation(TIFFRepresentation: NSData): void;
  representations(): NSArray<any>;
  setRepresentations(representations: NSArray<any> | any[]): void;
  valid(): boolean;
  setValid(valid: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  static imageTypes(): NSArray<any>;
  static setImageTypes(imageTypes: NSArray<any> | any[]): void;
  static imageUnfilteredTypes(): NSArray<any>;
  static setImageUnfilteredTypes(imageUnfilteredTypes: NSArray<any> | any[]): void;
  cacheMode(): NSImageCacheMode;
  setCacheMode(cacheMode: NSImageCacheMode): void;
  alignmentRect(): NSRect;
  setAlignmentRect(alignmentRect: NSRect): void;
  template(): boolean;
  setTemplate(template: boolean): void;
  accessibilityDescription(): NSString;
  setAccessibilityDescription(accessibilityDescription: NSString | string): void;
  capInsets(): NSEdgeInsets;
  setCapInsets(capInsets: NSEdgeInsets): void;
  resizingMode(): NSImageResizingMode;
  setResizingMode(resizingMode: NSImageResizingMode): void;
  embeddedXlinkValue(): NSString;
  setEmbeddedXlinkValue(embeddedXlinkValue: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare interface INSImageDelegate {
  imageDidNotDraw_inRect(sender: NSImage, rect: NSRect): NSImage;
  image_willLoadRepresentation(image: NSImage, rep: NSImageRep): void;
  image_didLoadRepresentationHeader(image: NSImage, rep: NSImageRep): void;
  image_didLoadPartOfRepresentation_withValidRows(image: NSImage, rep: NSImageRep, rows: NSInteger): void;
  image_didLoadRepresentation_withStatus(image: NSImage, rep: NSImageRep, status: NSImageLoadStatus): void;
}

declare type NSImageName = NSString

declare enum NSImageLoadStatus {
  NSImageLoadStatusCompleted,
  NSImageLoadStatusCancelled,
  NSImageLoadStatusInvalidData,
  NSImageLoadStatusUnexpectedEOF,
  NSImageLoadStatusReadError,
}

declare enum NSImageCacheMode {
  NSImageCacheDefault,
  NSImageCacheAlways,
  NSImageCacheBySize,
  NSImageCacheNever,
}

declare enum NSImageResizingMode {
  NSImageResizingModeStretch,
  NSImageResizingModeTile,
}

declare class NSImageCell extends NSCell implements INSCopying, INSCoding {
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends NSImageCell>(aDecoder: NSCoder): T;

  imageAlignment(): NSImageAlignment;
  setImageAlignment(imageAlignment: NSImageAlignment): void;
  imageScaling(): NSImageScaling;
  setImageScaling(imageScaling: NSImageScaling): void;
  imageFrameStyle(): NSImageFrameStyle;
  setImageFrameStyle(imageFrameStyle: NSImageFrameStyle): void;
}

declare enum NSImageAlignment {
  NSImageAlignCenter = 0,
  NSImageAlignTop,
  NSImageAlignTopLeft,
  NSImageAlignTopRight,
  NSImageAlignLeft,
  NSImageAlignBottom,
  NSImageAlignBottomLeft,
  NSImageAlignBottomRight,
  NSImageAlignRight,
}

declare enum NSImageFrameStyle {
  NSImageFrameNone = 0,
  NSImageFramePhoto,
  NSImageFrameGrayBezel,
  NSImageFrameGroove,
  NSImageFrameButton,
}

declare class NSImageRep extends NSObject implements INSCopying, INSCoding {
  init<T extends NSImageRep>(): T;
  initWithCoder<T extends NSImageRep>(coder: NSCoder): T;
  draw(): boolean;
  drawAtPoint(point: NSPoint): boolean;
  drawInRect(rect: NSRect): boolean;
  drawInRect_fromRect_operation_fraction_respectFlipped_hints(dstSpacePortionRect: NSRect, srcSpacePortionRect: NSRect, op: NSCompositingOperation, requestedAlpha: CGFloat, respectContextIsFlipped: boolean, hints: NSDictionary<any, any> | {[key: string]: any} | null): boolean;
  static registerImageRepClass(imageRepClass: any): void;
  static unregisterImageRepClass(imageRepClass: any): void;
  static imageRepClassForFileType(type: NSString | string): any;
  static imageRepClassForPasteboardType(type: NSPasteboardType): any;
  static imageRepClassForType(type: NSString | string): any;
  static imageRepClassForData(data: NSData): any;
  static canInitWithData(data: NSData): boolean;
  static imageUnfilteredFileTypes(): NSArray<any>;
  static imageUnfilteredPasteboardTypes(): NSArray<any>;
  static imageFileTypes(): NSArray<any>;
  static imagePasteboardTypes(): NSArray<any>;
  static canInitWithPasteboard(pasteboard: NSPasteboard): boolean;
  static imageRepsWithContentsOfFile(filename: NSString | string): NSArray<any>;
  static imageRepWithContentsOfFile(filename: NSString | string): NSImageRep;
  static imageRepsWithContentsOfURL(url: NSURL): NSArray<any>;
  static imageRepWithContentsOfURL(url: NSURL): NSImageRep;
  static imageRepsWithPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static imageRepWithPasteboard(pasteboard: NSPasteboard): NSImageRep;
  CGImageForProposedRect_context_hints_CF_RETURNS_NOT_RETAINED(proposedDestRect: NSRect | null, context: NSGraphicsContext | null, hints: NSDictionary<any, any> | {[key: string]: any} | null): CGImageRef;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSImageRep>(aDecoder: NSCoder): T;

  size(): NSSize;
  setSize(size: NSSize): void;
  alpha(): boolean;
  setAlpha(alpha: boolean): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
  colorSpaceName(): NSColorSpaceName;
  setColorSpaceName(colorSpaceName: NSColorSpaceName): void;
  bitsPerSample(): NSInteger;
  setBitsPerSample(bitsPerSample: NSInteger): void;
  pixelsWide(): NSInteger;
  setPixelsWide(pixelsWide: NSInteger): void;
  pixelsHigh(): NSInteger;
  setPixelsHigh(pixelsHigh: NSInteger): void;
  layoutDirection(): NSImageLayoutDirection;
  setLayoutDirection(layoutDirection: NSImageLayoutDirection): void;
  static registeredImageRepClasses(): NSArray<any>;
  static setRegisteredImageRepClasses(registeredImageRepClasses: NSArray<any> | any[]): void;
  static imageUnfilteredTypes(): NSArray<any>;
  static setImageUnfilteredTypes(imageUnfilteredTypes: NSArray<any> | any[]): void;
  static imageTypes(): NSArray<any>;
  static setImageTypes(imageTypes: NSArray<any> | any[]): void;
}

declare type NSImageHintKey = NSString

declare enum NSImageLayoutDirection {
  NSImageLayoutDirectionUnspecified = -1,
  NSImageLayoutDirectionLeftToRight = 2,
  NSImageLayoutDirectionRightToLeft = 3,
}

declare class NSImageView extends NSControl implements INSAccessibilityImage {
  static imageViewWithImage(image: NSImage): NSImageView;
  accessibilityLabel(): NSString;

  image(): NSImage;
  setImage(image: NSImage): void;
  imageAlignment(): NSImageAlignment;
  setImageAlignment(imageAlignment: NSImageAlignment): void;
  imageScaling(): NSImageScaling;
  setImageScaling(imageScaling: NSImageScaling): void;
  imageFrameStyle(): NSImageFrameStyle;
  setImageFrameStyle(imageFrameStyle: NSImageFrameStyle): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  animates(): boolean;
  setAnimates(animates: boolean): void;
  allowsCutCopyPaste(): boolean;
  setAllowsCutCopyPaste(allowsCutCopyPaste: boolean): void;
}

declare class NSInputManager extends NSObject implements INSTextInput {
  static currentInputManager(): NSInputManager;
  static cycleToNextInputLanguage(sender: any | null): void;
  static cycleToNextInputServerInLanguage(sender: any | null): void;
  initWithName_host<T extends NSInputManager>(inputServerName: NSString | string, hostName: NSString | string): T;
  localizedInputManagerName(): NSString;
  markedTextAbandoned(cli: any): void;
  markedTextSelectionChanged_client(newSel: NSRange, cli: any): void;
  wantsToInterpretAllKeystrokes(): boolean;
  language(): NSString;
  image(): NSImage;
  server(): NSInputServer;
  wantsToHandleMouseEvents(): boolean;
  handleMouseEvent(mouseEvent: NSEvent): boolean;
  wantsToDelayTextChangeNotifications(): boolean;
  insertText(string: any): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange(string: any, selRange: NSRange): void;
  unmarkText(): void;
  hasMarkedText(): boolean;
  conversationIdentifier(): NSInteger;
  attributedSubstringFromRange(range: NSRange): NSAttributedString;
  markedRange(): NSRange;
  selectedRange(): NSRange;
  firstRectForCharacterRange(range: NSRange): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  validAttributesForMarkedText(): NSArray<any>;
}

declare interface INSTextInput {
  insertText(string: any): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange(string: any, selRange: NSRange): void;
  unmarkText(): void;
  hasMarkedText(): boolean;
  conversationIdentifier(): NSInteger;
  attributedSubstringFromRange(range: NSRange): NSAttributedString;
  markedRange(): NSRange;
  selectedRange(): NSRange;
  firstRectForCharacterRange(range: NSRange): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  validAttributesForMarkedText(): NSArray<any>;
}

declare class NSInputServer extends NSObject implements INSInputServiceProvider, INSInputServerMouseTracker {
  initWithDelegate_name<T extends NSInputServer>(delegate: any, name: NSString | string): T;
  insertText_client(string: any, sender: any): void;
  doCommandBySelector_client(selector: string, sender: any): void;
  markedTextAbandoned(sender: any | null): void;
  markedTextSelectionChanged_client(newSel: NSRange, sender: any): void;
  terminate(sender: any | null): void;
  canBeDisabled(): boolean;
  wantsToInterpretAllKeystrokes(): boolean;
  wantsToHandleMouseEvents(): boolean;
  wantsToDelayTextChangeNotifications(): boolean;
  inputClientBecomeActive(sender: any | null): void;
  inputClientResignActive(sender: any | null): void;
  inputClientEnabled(sender: any | null): void;
  inputClientDisabled(sender: any | null): void;
  activeConversationWillChange_fromOldConversation(sender: any, oldConversation: NSInteger): void;
  activeConversationChanged_toNewConversation(sender: any, newConversation: NSInteger): void;
  mouseDownOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: any): boolean;
  mouseDraggedOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: any): boolean;
  mouseUpOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: any): void;
}

declare interface INSInputServiceProvider {
  insertText_client(string: any, sender: any): void;
  doCommandBySelector_client(selector: string, sender: any): void;
  markedTextAbandoned(sender: any | null): void;
  markedTextSelectionChanged_client(newSel: NSRange, sender: any): void;
  terminate(sender: any | null): void;
  canBeDisabled(): boolean;
  wantsToInterpretAllKeystrokes(): boolean;
  wantsToHandleMouseEvents(): boolean;
  wantsToDelayTextChangeNotifications(): boolean;
  inputClientBecomeActive(sender: any | null): void;
  inputClientResignActive(sender: any | null): void;
  inputClientEnabled(sender: any | null): void;
  inputClientDisabled(sender: any | null): void;
  activeConversationWillChange_fromOldConversation(sender: any, oldConversation: NSInteger): void;
  activeConversationChanged_toNewConversation(sender: any, newConversation: NSInteger): void;
}

declare interface INSInputServerMouseTracker {
  mouseDownOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: any): boolean;
  mouseDraggedOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: any): boolean;
  mouseUpOnCharacterIndex_atCoordinate_withModifier_client(index: NSUInteger, point: NSPoint, flags: NSUInteger, sender: any): void;
}

declare class NSResponder extends NSObject implements INSCoding {
  interfaceStyle(): NSInterfaceStyle;
  setInterfaceStyle(interfaceStyle: NSInterfaceStyle): void;
  init<T extends NSResponder>(): T;
  initWithCoder<T extends NSResponder>(coder: NSCoder): T;
  tryToPerform_with(action: string, object: any | null): boolean;
  performKeyEquivalent(event: NSEvent): boolean;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  mouseDown(event: NSEvent): void;
  rightMouseDown(event: NSEvent): void;
  otherMouseDown(event: NSEvent): void;
  mouseUp(event: NSEvent): void;
  rightMouseUp(event: NSEvent): void;
  otherMouseUp(event: NSEvent): void;
  mouseMoved(event: NSEvent): void;
  mouseDragged(event: NSEvent): void;
  scrollWheel(event: NSEvent): void;
  rightMouseDragged(event: NSEvent): void;
  otherMouseDragged(event: NSEvent): void;
  mouseEntered(event: NSEvent): void;
  mouseExited(event: NSEvent): void;
  keyDown(event: NSEvent): void;
  keyUp(event: NSEvent): void;
  flagsChanged(event: NSEvent): void;
  tabletPoint(event: NSEvent): void;
  tabletProximity(event: NSEvent): void;
  cursorUpdate(event: NSEvent): void;
  magnifyWithEvent(event: NSEvent): void;
  rotateWithEvent(event: NSEvent): void;
  swipeWithEvent(event: NSEvent): void;
  beginGestureWithEvent(event: NSEvent): void;
  endGestureWithEvent(event: NSEvent): void;
  smartMagnifyWithEvent(event: NSEvent): void;
  touchesBeganWithEvent(event: NSEvent): void;
  touchesMovedWithEvent(event: NSEvent): void;
  touchesEndedWithEvent(event: NSEvent): void;
  touchesCancelledWithEvent(event: NSEvent): void;
  quickLookWithEvent(event: NSEvent): void;
  pressureChangeWithEvent(event: NSEvent): void;
  noResponderFor(eventSelector: string): void;
  becomeFirstResponder(): boolean;
  resignFirstResponder(): boolean;
  interpretKeyEvents(eventArray: NSArray<any> | any[]): void;
  flushBufferedKeyEvents(): void;
  showContextHelp(sender: any | null): void;
  helpRequested(eventPtr: NSEvent): void;
  shouldBeTreatedAsInkEvent(event: NSEvent): boolean;
  wantsScrollEventsForSwipeTrackingOnAxis(axis: NSEventGestureAxis): boolean;
  wantsForwardedScrollEventsForAxis(axis: NSEventGestureAxis): boolean;
  supplementalTargetForAction_sender(action: string, sender: any | null): any;
  insertText(insertString: any): void;
  doCommandBySelector(selector: string): void;
  moveForward(sender: any | null): void;
  moveRight(sender: any | null): void;
  moveBackward(sender: any | null): void;
  moveLeft(sender: any | null): void;
  moveUp(sender: any | null): void;
  moveDown(sender: any | null): void;
  moveWordForward(sender: any | null): void;
  moveWordBackward(sender: any | null): void;
  moveToBeginningOfLine(sender: any | null): void;
  moveToEndOfLine(sender: any | null): void;
  moveToBeginningOfParagraph(sender: any | null): void;
  moveToEndOfParagraph(sender: any | null): void;
  moveToEndOfDocument(sender: any | null): void;
  moveToBeginningOfDocument(sender: any | null): void;
  pageDown(sender: any | null): void;
  pageUp(sender: any | null): void;
  centerSelectionInVisibleArea(sender: any | null): void;
  moveBackwardAndModifySelection(sender: any | null): void;
  moveForwardAndModifySelection(sender: any | null): void;
  moveWordForwardAndModifySelection(sender: any | null): void;
  moveWordBackwardAndModifySelection(sender: any | null): void;
  moveUpAndModifySelection(sender: any | null): void;
  moveDownAndModifySelection(sender: any | null): void;
  moveToBeginningOfLineAndModifySelection(sender: any | null): void;
  moveToEndOfLineAndModifySelection(sender: any | null): void;
  moveToBeginningOfParagraphAndModifySelection(sender: any | null): void;
  moveToEndOfParagraphAndModifySelection(sender: any | null): void;
  moveToEndOfDocumentAndModifySelection(sender: any | null): void;
  moveToBeginningOfDocumentAndModifySelection(sender: any | null): void;
  pageDownAndModifySelection(sender: any | null): void;
  pageUpAndModifySelection(sender: any | null): void;
  moveParagraphForwardAndModifySelection(sender: any | null): void;
  moveParagraphBackwardAndModifySelection(sender: any | null): void;
  moveWordRight(sender: any | null): void;
  moveWordLeft(sender: any | null): void;
  moveRightAndModifySelection(sender: any | null): void;
  moveLeftAndModifySelection(sender: any | null): void;
  moveWordRightAndModifySelection(sender: any | null): void;
  moveWordLeftAndModifySelection(sender: any | null): void;
  moveToLeftEndOfLine(sender: any | null): void;
  moveToRightEndOfLine(sender: any | null): void;
  moveToLeftEndOfLineAndModifySelection(sender: any | null): void;
  moveToRightEndOfLineAndModifySelection(sender: any | null): void;
  scrollPageUp(sender: any | null): void;
  scrollPageDown(sender: any | null): void;
  scrollLineUp(sender: any | null): void;
  scrollLineDown(sender: any | null): void;
  scrollToBeginningOfDocument(sender: any | null): void;
  scrollToEndOfDocument(sender: any | null): void;
  transpose(sender: any | null): void;
  transposeWords(sender: any | null): void;
  selectAll(sender: any | null): void;
  selectParagraph(sender: any | null): void;
  selectLine(sender: any | null): void;
  selectWord(sender: any | null): void;
  indent(sender: any | null): void;
  insertTab(sender: any | null): void;
  insertBacktab(sender: any | null): void;
  insertNewline(sender: any | null): void;
  insertParagraphSeparator(sender: any | null): void;
  insertNewlineIgnoringFieldEditor(sender: any | null): void;
  insertTabIgnoringFieldEditor(sender: any | null): void;
  insertLineBreak(sender: any | null): void;
  insertContainerBreak(sender: any | null): void;
  insertSingleQuoteIgnoringSubstitution(sender: any | null): void;
  insertDoubleQuoteIgnoringSubstitution(sender: any | null): void;
  changeCaseOfLetter(sender: any | null): void;
  uppercaseWord(sender: any | null): void;
  lowercaseWord(sender: any | null): void;
  capitalizeWord(sender: any | null): void;
  deleteForward(sender: any | null): void;
  deleteBackward(sender: any | null): void;
  deleteBackwardByDecomposingPreviousCharacter(sender: any | null): void;
  deleteWordForward(sender: any | null): void;
  deleteWordBackward(sender: any | null): void;
  deleteToBeginningOfLine(sender: any | null): void;
  deleteToEndOfLine(sender: any | null): void;
  deleteToBeginningOfParagraph(sender: any | null): void;
  deleteToEndOfParagraph(sender: any | null): void;
  yank(sender: any | null): void;
  complete(sender: any | null): void;
  setMark(sender: any | null): void;
  deleteToMark(sender: any | null): void;
  selectToMark(sender: any | null): void;
  swapWithMark(sender: any | null): void;
  cancelOperation(sender: any | null): void;
  makeBaseWritingDirectionNatural(sender: any | null): void;
  makeBaseWritingDirectionLeftToRight(sender: any | null): void;
  makeBaseWritingDirectionRightToLeft(sender: any | null): void;
  makeTextWritingDirectionNatural(sender: any | null): void;
  makeTextWritingDirectionLeftToRight(sender: any | null): void;
  makeTextWritingDirectionRightToLeft(sender: any | null): void;
  quickLookPreviewItems(sender: any | null): void;
  validateProposedFirstResponder_forEvent(responder: NSResponder, event: NSEvent | null): boolean;
  presentError_modalForWindow_delegate_didPresentSelector_contextInfo(error: NSError, window: NSWindow, delegate: any | null, didPresentSelector: string | null, contextInfo: void | null): void;
  presentError(error: NSError): boolean;
  willPresentError(error: NSError): NSError;
  performTextFinderAction(sender: any | null): void;
  newWindowForTab(sender: any | null): IBAction;
  performMnemonic(string: NSString | string): boolean;
  makeTouchBar(): NSTouchBar;
  updateUserActivityState(userActivity: NSUserActivity): void;
  restoreUserActivityState(userActivity: NSUserActivity): void;
  encodeRestorableStateWithCoder(coder: NSCoder): void;
  encodeRestorableStateWithCoder_backgroundQueue(coder: NSCoder, queue: NSOperationQueue): void;
  restoreStateWithCoder(coder: NSCoder): void;
  invalidateRestorableState(): void;
  followsResponder(aResponder: NSResponder): boolean;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSResponder>(aDecoder: NSCoder): T;

  nextResponder(): NSResponder;
  setNextResponder(nextResponder: NSResponder): void;
  acceptsFirstResponder(): boolean;
  setAcceptsFirstResponder(acceptsFirstResponder: boolean): void;
  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  undoManager(): NSUndoManager;
  setUndoManager(undoManager: NSUndoManager): void;
  touchBar(): NSTouchBar;
  setTouchBar(touchBar: NSTouchBar): void;
  userActivity(): NSUserActivity;
  setUserActivity(userActivity: NSUserActivity): void;
  static restorableStateKeyPaths(): NSArray<any>;
  static setRestorableStateKeyPaths(restorableStateKeyPaths: NSArray<any> | any[]): void;
  supportsTouchBar(): boolean;
  setSupportsTouchBar(supportsTouchBar: boolean): void;
}

declare type NSInterfaceStyle = NSUInteger

declare type NSBindingName = NSString

declare type NSBindingOption = NSString

declare type NSBindingInfoKey = NSString

declare class NSLayoutAnchor extends NSObject implements INSCopying, INSCoding {
  constraintEqualToAnchor(anchor: NSLayoutAnchor): NSLayoutConstraint;
  constraintGreaterThanOrEqualToAnchor(anchor: NSLayoutAnchor): NSLayoutConstraint;
  constraintLessThanOrEqualToAnchor(anchor: NSLayoutAnchor): NSLayoutConstraint;
  constraintEqualToAnchor_constant(anchor: NSLayoutAnchor, c: CGFloat): NSLayoutConstraint;
  constraintGreaterThanOrEqualToAnchor_constant(anchor: NSLayoutAnchor, c: CGFloat): NSLayoutConstraint;
  constraintLessThanOrEqualToAnchor_constant(anchor: NSLayoutAnchor, c: CGFloat): NSLayoutConstraint;
  copyWithZone(zone: NSZone): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder(aDecoder: NSCoder): NSLayoutAnchor;

  name(): NSString;
  setName(name: NSString): void;
  item(): any;
  setItem(item: any): void;
  hasAmbiguousLayout(): boolean;
  setHasAmbiguousLayout(hasAmbiguousLayout: boolean): void;
  constraintsAffectingLayout(): NSArray<any>;
  setConstraintsAffectingLayout(constraintsAffectingLayout: NSArray<any>): void;
}

declare class NSLayoutXAxisAnchor extends NSLayoutAnchor {
    anchorWithOffsetToAnchor(otherAnchor: NSLayoutXAxisAnchor): NSLayoutDimension;
  }

declare class NSLayoutYAxisAnchor extends NSLayoutAnchor {
    anchorWithOffsetToAnchor(otherAnchor: NSLayoutYAxisAnchor): NSLayoutDimension;
  }

declare class NSLayoutDimension extends NSLayoutAnchor {
    constraintEqualToConstant(c: CGFloat): NSLayoutConstraint;
    constraintGreaterThanOrEqualToConstant(c: CGFloat): NSLayoutConstraint;
    constraintLessThanOrEqualToConstant(c: CGFloat): NSLayoutConstraint;
    constraintEqualToAnchor_multiplier(anchor: NSLayoutDimension, m: CGFloat): NSLayoutConstraint;
    constraintGreaterThanOrEqualToAnchor_multiplier(anchor: NSLayoutDimension, m: CGFloat): NSLayoutConstraint;
    constraintLessThanOrEqualToAnchor_multiplier(anchor: NSLayoutDimension, m: CGFloat): NSLayoutConstraint;
    constraintEqualToAnchor_multiplier_constant(anchor: NSLayoutDimension, m: CGFloat, c: CGFloat): NSLayoutConstraint;
    constraintGreaterThanOrEqualToAnchor_multiplier_constant(anchor: NSLayoutDimension, m: CGFloat, c: CGFloat): NSLayoutConstraint;
    constraintLessThanOrEqualToAnchor_multiplier_constant(anchor: NSLayoutDimension, m: CGFloat, c: CGFloat): NSLayoutConstraint;
  }

declare class NSLayoutConstraint extends NSObject implements INSAnimatablePropertyContainer {
  static constraintsWithVisualFormat_options_metrics_views(format: NSString | string, opts: NSLayoutFormatOptions, metrics: NSDictionary<any, any> | {[key: string]: any} | null, views: NSDictionary<any, any> | {[key: string]: any}): NSArray<any>;
  static constraintWithItem_attribute_relatedBy_toItem_attribute_multiplier_constant(view1: any, attr1: NSLayoutAttribute, relation: NSLayoutRelation, view2: any | null, attr2: NSLayoutAttribute, multiplier: CGFloat, c: CGFloat): NSLayoutConstraint;
  static activateConstraints(constraints: NSArray<any> | any[]): void;
  static deactivateConstraints(constraints: NSArray<any> | any[]): void;
  animator(): NSLayoutConstraint;
  animationForKey(key: NSAnimatablePropertyKey): any;
  static defaultAnimationForKey(key: NSAnimatablePropertyKey): any;

  priority(): NSLayoutPriority;
  setPriority(priority: NSLayoutPriority): void;
  shouldBeArchived(): boolean;
  setShouldBeArchived(shouldBeArchived: boolean): void;
  firstItem(): any;
  setFirstItem(firstItem: any): void;
  firstAttribute(): NSLayoutAttribute;
  setFirstAttribute(firstAttribute: NSLayoutAttribute): void;
  secondItem(): any;
  setSecondItem(secondItem: any): void;
  secondAttribute(): NSLayoutAttribute;
  setSecondAttribute(secondAttribute: NSLayoutAttribute): void;
  firstAnchor(): NSLayoutAnchor;
  setFirstAnchor(firstAnchor: NSLayoutAnchor): void;
  secondAnchor(): NSLayoutAnchor;
  setSecondAnchor(secondAnchor: NSLayoutAnchor): void;
  relation(): NSLayoutRelation;
  setRelation(relation: NSLayoutRelation): void;
  multiplier(): CGFloat;
  setMultiplier(multiplier: CGFloat): void;
  constant(): CGFloat;
  setConstant(constant: CGFloat): void;
  active(): boolean;
  setActive(active: boolean): void;
  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare type NSLayoutPriority = number

declare enum NSLayoutRelation {
  NSLayoutRelationLessThanOrEqual = -1,
  NSLayoutRelationEqual = 0,
  NSLayoutRelationGreaterThanOrEqual = 1,
}

declare enum NSLayoutAttribute {
  NSLayoutAttributeLeft = 1,
  NSLayoutAttributeRight,
  NSLayoutAttributeTop,
  NSLayoutAttributeBottom,
  NSLayoutAttributeLeading,
  NSLayoutAttributeTrailing,
  NSLayoutAttributeWidth,
  NSLayoutAttributeHeight,
  NSLayoutAttributeCenterX,
  NSLayoutAttributeCenterY,
  NSLayoutAttributeLastBaseline,
  NSLayoutAttributeBaseline,
  NSLayoutAttributeFirstBaseline,
  NSLayoutAttributeNotAnAttribute = 0,
}

declare enum NSLayoutFormatOptions {
  NSLayoutFormatAlignAllLeft,
  NSLayoutFormatAlignAllRight,
  NSLayoutFormatAlignAllTop,
  NSLayoutFormatAlignAllBottom,
  NSLayoutFormatAlignAllLeading,
  NSLayoutFormatAlignAllTrailing,
  NSLayoutFormatAlignAllCenterX,
  NSLayoutFormatAlignAllCenterY,
  NSLayoutFormatAlignAllBaseline,
  NSLayoutFormatAlignAllLastBaseline,
  NSLayoutFormatAlignAllFirstBaseline,
  NSLayoutFormatAlignmentMask = 0xFFFF,
  NSLayoutFormatDirectionLeadingToTrailing = 0 << 16,
  NSLayoutFormatDirectionLeftToRight = 1 << 16,
  NSLayoutFormatDirectionRightToLeft = 2 << 16,
  NSLayoutFormatDirectionMask = 0x3 << 16,
}

declare enum NSLayoutConstraintOrientation {
  NSLayoutConstraintOrientationHorizontal = 0,
  NSLayoutConstraintOrientationVertical = 1,
}

declare class NSLayoutGuide extends NSObject implements INSCoding, INSUserInterfaceItemIdentification {
  constraintsAffectingLayoutForOrientation(orientation: NSLayoutConstraintOrientation): NSArray<any>;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSLayoutGuide>(aDecoder: NSCoder): T;

  frame(): NSRect;
  setFrame(frame: NSRect): void;
  owningView(): NSView;
  setOwningView(owningView: NSView): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  leadingAnchor(): NSLayoutXAxisAnchor;
  setLeadingAnchor(leadingAnchor: NSLayoutXAxisAnchor): void;
  trailingAnchor(): NSLayoutXAxisAnchor;
  setTrailingAnchor(trailingAnchor: NSLayoutXAxisAnchor): void;
  leftAnchor(): NSLayoutXAxisAnchor;
  setLeftAnchor(leftAnchor: NSLayoutXAxisAnchor): void;
  rightAnchor(): NSLayoutXAxisAnchor;
  setRightAnchor(rightAnchor: NSLayoutXAxisAnchor): void;
  topAnchor(): NSLayoutYAxisAnchor;
  setTopAnchor(topAnchor: NSLayoutYAxisAnchor): void;
  bottomAnchor(): NSLayoutYAxisAnchor;
  setBottomAnchor(bottomAnchor: NSLayoutYAxisAnchor): void;
  widthAnchor(): NSLayoutDimension;
  setWidthAnchor(widthAnchor: NSLayoutDimension): void;
  heightAnchor(): NSLayoutDimension;
  setHeightAnchor(heightAnchor: NSLayoutDimension): void;
  centerXAnchor(): NSLayoutXAxisAnchor;
  setCenterXAnchor(centerXAnchor: NSLayoutXAxisAnchor): void;
  centerYAnchor(): NSLayoutYAxisAnchor;
  setCenterYAnchor(centerYAnchor: NSLayoutYAxisAnchor): void;
  hasAmbiguousLayout(): boolean;
  setHasAmbiguousLayout(hasAmbiguousLayout: boolean): void;
}

declare class NSLayoutManager extends NSObject implements INSCoding {
  init<T extends NSLayoutManager>(): T;
  initWithCoder<T extends NSLayoutManager>(coder: NSCoder): T;
  replaceTextStorage(newTextStorage: NSTextStorage): void;
  addTextContainer(container: NSTextContainer): void;
  insertTextContainer_atIndex(container: NSTextContainer, index: NSUInteger): void;
  removeTextContainerAtIndex(index: NSUInteger): void;
  textContainerChangedGeometry(container: NSTextContainer): void;
  textContainerChangedTextView(container: NSTextContainer): void;
  invalidateGlyphsForCharacterRange_changeInLength_actualCharacterRange(charRange: NSRange, delta: NSInteger, actualCharRange: NSRangePointer | null): void;
  invalidateLayoutForCharacterRange_actualCharacterRange(charRange: NSRange, actualCharRange: NSRangePointer | null): void;
  invalidateDisplayForCharacterRange(charRange: NSRange): void;
  invalidateDisplayForGlyphRange(glyphRange: NSRange): void;
  processEditingForTextStorage_edited_range_changeInLength_invalidatedRange(textStorage: NSTextStorage, editMask: NSTextStorageEditActions, newCharRange: NSRange, delta: NSInteger, invalidatedCharRange: NSRange): void;
  ensureGlyphsForCharacterRange(charRange: NSRange): void;
  ensureGlyphsForGlyphRange(glyphRange: NSRange): void;
  ensureLayoutForCharacterRange(charRange: NSRange): void;
  ensureLayoutForGlyphRange(glyphRange: NSRange): void;
  ensureLayoutForTextContainer(container: NSTextContainer): void;
  ensureLayoutForBoundingRect_inTextContainer(bounds: NSRect, container: NSTextContainer): void;
  setGlyphs_properties_characterIndexes_font_forGlyphRange(glyphs: CGGlyph, props: NSGlyphProperty, charIndexes: NSUInteger, aFont: NSFont, glyphRange: NSRange): void;
  CGGlyphAtIndex_isValidIndex(glyphIndex: NSUInteger, isValidIndex: boolean | null): CGGlyph;
  CGGlyphAtIndex(glyphIndex: NSUInteger): CGGlyph;
  isValidGlyphIndex(glyphIndex: NSUInteger): boolean;
  propertyForGlyphAtIndex(glyphIndex: NSUInteger): NSGlyphProperty;
  characterIndexForGlyphAtIndex(glyphIndex: NSUInteger): NSUInteger;
  glyphIndexForCharacterAtIndex(charIndex: NSUInteger): NSUInteger;
  getGlyphsInRange_glyphs_properties_characterIndexes_bidiLevels(glyphRange: NSRange, glyphBuffer: CGGlyph | null, props: NSGlyphProperty | null, charIndexBuffer: NSUInteger | null, bidiLevelBuffer: string | null): NSUInteger;
  setTextContainer_forGlyphRange(container: NSTextContainer, glyphRange: NSRange): void;
  setLineFragmentRect_forGlyphRange_usedRect(fragmentRect: NSRect, glyphRange: NSRange, usedRect: NSRect): void;
  setExtraLineFragmentRect_usedRect_textContainer(fragmentRect: NSRect, usedRect: NSRect, container: NSTextContainer): void;
  setLocation_forStartOfGlyphRange(location: NSPoint, glyphRange: NSRange): void;
  setNotShownAttribute_forGlyphAtIndex(flag: boolean, glyphIndex: NSUInteger): void;
  setDrawsOutsideLineFragment_forGlyphAtIndex(flag: boolean, glyphIndex: NSUInteger): void;
  setAttachmentSize_forGlyphRange(attachmentSize: NSSize, glyphRange: NSRange): void;
  getFirstUnlaidCharacterIndex_glyphIndex(charIndex: NSUInteger | null, glyphIndex: NSUInteger | null): void;
  firstUnlaidCharacterIndex(): NSUInteger;
  firstUnlaidGlyphIndex(): NSUInteger;
  textContainerForGlyphAtIndex_effectiveRange(glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null): NSTextContainer;
  textContainerForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null, flag: boolean): NSTextContainer;
  usedRectForTextContainer(container: NSTextContainer): NSRect;
  lineFragmentRectForGlyphAtIndex_effectiveRange(glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null): NSRect;
  lineFragmentRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null, flag: boolean): NSRect;
  lineFragmentUsedRectForGlyphAtIndex_effectiveRange(glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null): NSRect;
  lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout(glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null, flag: boolean): NSRect;
  locationForGlyphAtIndex(glyphIndex: NSUInteger): NSPoint;
  notShownAttributeForGlyphAtIndex(glyphIndex: NSUInteger): boolean;
  drawsOutsideLineFragmentForGlyphAtIndex(glyphIndex: NSUInteger): boolean;
  attachmentSizeForGlyphAtIndex(glyphIndex: NSUInteger): NSSize;
  truncatedGlyphRangeInLineFragmentForGlyphAtIndex(glyphIndex: NSUInteger): NSRange;
  glyphRangeForCharacterRange_actualCharacterRange(charRange: NSRange, actualCharRange: NSRangePointer | null): NSRange;
  characterRangeForGlyphRange_actualGlyphRange(glyphRange: NSRange, actualGlyphRange: NSRangePointer | null): NSRange;
  glyphRangeForTextContainer(container: NSTextContainer): NSRange;
  rangeOfNominallySpacedGlyphsContainingIndex(glyphIndex: NSUInteger): NSRange;
  boundingRectForGlyphRange_inTextContainer(glyphRange: NSRange, container: NSTextContainer): NSRect;
  glyphRangeForBoundingRect_inTextContainer(bounds: NSRect, container: NSTextContainer): NSRange;
  glyphRangeForBoundingRectWithoutAdditionalLayout_inTextContainer(bounds: NSRect, container: NSTextContainer): NSRange;
  glyphIndexForPoint_inTextContainer_fractionOfDistanceThroughGlyph(point: NSPoint, container: NSTextContainer, partialFraction: CGFloat | null): NSUInteger;
  glyphIndexForPoint_inTextContainer(point: NSPoint, container: NSTextContainer): NSUInteger;
  fractionOfDistanceThroughGlyphForPoint_inTextContainer(point: NSPoint, container: NSTextContainer): CGFloat;
  characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints(point: NSPoint, container: NSTextContainer, partialFraction: CGFloat | null): NSUInteger;
  getLineFragmentInsertionPointsForCharacterAtIndex_alternatePositions_inDisplayOrder_positions_characterIndexes(charIndex: NSUInteger, aFlag: boolean, dFlag: boolean, positions: CGFloat | null, charIndexes: NSUInteger | null): NSUInteger;
  enumerateLineFragmentsForGlyphRange_usingBlock(glyphRange: NSRange, block: Block): void;
  enumerateEnclosingRectsForGlyphRange_withinSelectedGlyphRange_inTextContainer_usingBlock(glyphRange: NSRange, selectedRange: NSRange, textContainer: NSTextContainer, block: Block): void;
  drawBackgroundForGlyphRange_atPoint(glyphsToShow: NSRange, origin: NSPoint): void;
  drawGlyphsForGlyphRange_atPoint(glyphsToShow: NSRange, origin: NSPoint): void;
  showCGGlyphs_positions_count_font_matrix_attributes_inContext(glyphs: CGGlyph, positions: NSPoint, glyphCount: NSUInteger, font: NSFont, textMatrix: NSAffineTransform, attributes: NSDictionary<any, any> | {[key: string]: any}, graphicsContext: NSGraphicsContext): void;
  fillBackgroundRectArray_count_forCharacterRange_color(rectArray: NSRect, rectCount: NSUInteger, charRange: NSRange, color: NSColor): void;
  drawUnderlineForGlyphRange_underlineType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: NSRange, underlineVal: NSUnderlineStyle, baselineOffset: CGFloat, lineRect: NSRect, lineGlyphRange: NSRange, containerOrigin: NSPoint): void;
  underlineGlyphRange_underlineType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: NSRange, underlineVal: NSUnderlineStyle, lineRect: NSRect, lineGlyphRange: NSRange, containerOrigin: NSPoint): void;
  drawStrikethroughForGlyphRange_strikethroughType_baselineOffset_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: NSRange, strikethroughVal: NSUnderlineStyle, baselineOffset: CGFloat, lineRect: NSRect, lineGlyphRange: NSRange, containerOrigin: NSPoint): void;
  strikethroughGlyphRange_strikethroughType_lineFragmentRect_lineFragmentGlyphRange_containerOrigin(glyphRange: NSRange, strikethroughVal: NSUnderlineStyle, lineRect: NSRect, lineGlyphRange: NSRange, containerOrigin: NSPoint): void;
  showAttachmentCell_inRect_characterIndex(cell: NSCell, rect: NSRect, attachmentIndex: NSUInteger): void;
  setLayoutRect_forTextBlock_glyphRange(rect: NSRect, block: NSTextBlock, glyphRange: NSRange): void;
  setBoundsRect_forTextBlock_glyphRange(rect: NSRect, block: NSTextBlock, glyphRange: NSRange): void;
  layoutRectForTextBlock_glyphRange(block: NSTextBlock, glyphRange: NSRange): NSRect;
  boundsRectForTextBlock_glyphRange(block: NSTextBlock, glyphRange: NSRange): NSRect;
  layoutRectForTextBlock_atIndex_effectiveRange(block: NSTextBlock, glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null): NSRect;
  boundsRectForTextBlock_atIndex_effectiveRange(block: NSTextBlock, glyphIndex: NSUInteger, effectiveGlyphRange: NSRangePointer | null): NSRect;
  temporaryAttributesAtCharacterIndex_effectiveRange(charIndex: NSUInteger, effectiveCharRange: NSRangePointer | null): NSDictionary<any, any>;
  setTemporaryAttributes_forCharacterRange(attrs: NSDictionary<any, any> | {[key: string]: any}, charRange: NSRange): void;
  addTemporaryAttributes_forCharacterRange(attrs: NSDictionary<any, any> | {[key: string]: any}, charRange: NSRange): void;
  removeTemporaryAttribute_forCharacterRange(attrName: NSAttributedStringKey, charRange: NSRange): void;
  temporaryAttribute_atCharacterIndex_effectiveRange(attrName: NSAttributedStringKey, location: NSUInteger, range: NSRangePointer | null): any;
  temporaryAttribute_atCharacterIndex_longestEffectiveRange_inRange(attrName: NSAttributedStringKey, location: NSUInteger, range: NSRangePointer | null, rangeLimit: NSRange): any;
  temporaryAttributesAtCharacterIndex_longestEffectiveRange_inRange(location: NSUInteger, range: NSRangePointer | null, rangeLimit: NSRange): NSDictionary<any, any>;
  addTemporaryAttribute_value_forCharacterRange(attrName: NSAttributedStringKey, value: any, charRange: NSRange): void;
  defaultLineHeightForFont(theFont: NSFont): CGFloat;
  defaultBaselineOffsetForFont(theFont: NSFont): CGFloat;
  rulerMarkersForTextView_paragraphStyle_ruler(view: NSTextView, style: NSParagraphStyle, ruler: NSRulerView): NSArray<any>;
  rulerAccessoryViewForTextView_paragraphStyle_ruler_enabled(view: NSTextView, style: NSParagraphStyle, ruler: NSRulerView, isEnabled: boolean): NSView;
  layoutManagerOwnsFirstResponderInWindow(window: NSWindow): boolean;
  glyphAtIndex_isValidIndex(glyphIndex: NSUInteger, isValidIndex: boolean | null): NSGlyph;
  glyphAtIndex(glyphIndex: NSUInteger): NSGlyph;
  rectArrayForCharacterRange_withinSelectedCharacterRange_inTextContainer_rectCount(charRange: NSRange, selCharRange: NSRange, container: NSTextContainer, rectCount: NSUInteger): NSRectArray;
  rectArrayForGlyphRange_withinSelectedGlyphRange_inTextContainer_rectCount(glyphRange: NSRange, selGlyphRange: NSRange, container: NSTextContainer, rectCount: NSUInteger): NSRectArray;
  substituteFontForFont(originalFont: NSFont): NSFont;
  insertGlyphs_length_forStartingGlyphAtIndex_characterIndex(glyphs: NSGlyph, length: NSUInteger, glyphIndex: NSUInteger, charIndex: NSUInteger): void;
  insertGlyph_atGlyphIndex_characterIndex(glyph: NSGlyph, glyphIndex: NSUInteger, charIndex: NSUInteger): void;
  replaceGlyphAtIndex_withGlyph(glyphIndex: NSUInteger, newGlyph: NSGlyph): void;
  deleteGlyphsInRange(glyphRange: NSRange): void;
  setCharacterIndex_forGlyphAtIndex(charIndex: NSUInteger, glyphIndex: NSUInteger): void;
  setIntAttribute_value_forGlyphAtIndex(attributeTag: NSInteger, val: NSInteger, glyphIndex: NSUInteger): void;
  invalidateGlyphsOnLayoutInvalidationForGlyphRange(glyphRange: NSRange): void;
  intAttribute_forGlyphAtIndex(attributeTag: NSInteger, glyphIndex: NSUInteger): NSInteger;
  getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits(glyphRange: NSRange, glyphBuffer: NSGlyph | null, charIndexBuffer: NSUInteger | null, inscribeBuffer: NSGlyphInscription | null, elasticBuffer: boolean | null): NSUInteger;
  getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels(glyphRange: NSRange, glyphBuffer: NSGlyph | null, charIndexBuffer: NSUInteger | null, inscribeBuffer: NSGlyphInscription | null, elasticBuffer: boolean | null, bidiLevelBuffer: string | null): NSUInteger;
  getGlyphs_range(glyphArray: NSGlyph | null, glyphRange: NSRange): NSUInteger;
  invalidateLayoutForCharacterRange_isSoft_actualCharacterRange(charRange: NSRange, flag: boolean, actualCharRange: NSRangePointer | null): void;
  textStorage_edited_range_changeInLength_invalidatedRange(str: NSTextStorage, editedMask: NSTextStorageEditedOptions, newCharRange: NSRange, delta: NSInteger, invalidatedCharRange: NSRange): void;
  setLocations_startingGlyphIndexes_count_forGlyphRange(locations: NSPointArray, glyphIndexes: NSUInteger, count: NSUInteger, glyphRange: NSRange): void;
  showPackedGlyphs_length_glyphRange_atPoint_font_color_printingAdjustment(glyphs: string, glyphLen: NSUInteger, glyphRange: NSRange, point: NSPoint, font: NSFont, color: NSColor, printingAdjustment: NSSize): void;
  temporaryAttributesForKey(key: NSString | string): NSDictionary<any, any>;
  setTemporaryAttributes_forKey(attrs: NSDictionary<any, any> | {[key: string]: any}, key: NSString | string): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSLayoutManager>(aDecoder: NSCoder): T;

  textStorage(): NSTextStorage;
  setTextStorage(textStorage: NSTextStorage): void;
  textContainers(): NSArray<any>;
  setTextContainers(textContainers: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  showsInvisibleCharacters(): boolean;
  setShowsInvisibleCharacters(showsInvisibleCharacters: boolean): void;
  showsControlCharacters(): boolean;
  setShowsControlCharacters(showsControlCharacters: boolean): void;
  hyphenationFactor(): number;
  setHyphenationFactor(hyphenationFactor: number): void;
  usesFontLeading(): boolean;
  setUsesFontLeading(usesFontLeading: boolean): void;
  allowsNonContiguousLayout(): boolean;
  setAllowsNonContiguousLayout(allowsNonContiguousLayout: boolean): void;
  hasNonContiguousLayout(): boolean;
  setHasNonContiguousLayout(hasNonContiguousLayout: boolean): void;
  backgroundLayoutEnabled(): boolean;
  setBackgroundLayoutEnabled(backgroundLayoutEnabled: boolean): void;
  defaultAttachmentScaling(): NSImageScaling;
  setDefaultAttachmentScaling(defaultAttachmentScaling: NSImageScaling): void;
  typesetter(): NSTypesetter;
  setTypesetter(typesetter: NSTypesetter): void;
  typesetterBehavior(): NSTypesetterBehavior;
  setTypesetterBehavior(typesetterBehavior: NSTypesetterBehavior): void;
  numberOfGlyphs(): NSUInteger;
  setNumberOfGlyphs(numberOfGlyphs: NSUInteger): void;
  extraLineFragmentRect(): NSRect;
  setExtraLineFragmentRect(extraLineFragmentRect: NSRect): void;
  extraLineFragmentUsedRect(): NSRect;
  setExtraLineFragmentUsedRect(extraLineFragmentUsedRect: NSRect): void;
  extraLineFragmentTextContainer(): NSTextContainer;
  setExtraLineFragmentTextContainer(extraLineFragmentTextContainer: NSTextContainer): void;
  firstTextView(): NSTextView;
  setFirstTextView(firstTextView: NSTextView): void;
  textViewForBeginningOfSelection(): NSTextView;
  setTextViewForBeginningOfSelection(textViewForBeginningOfSelection: NSTextView): void;
  usesScreenFonts(): boolean;
  setUsesScreenFonts(usesScreenFonts: boolean): void;
  glyphGenerator(): NSGlyphGenerator;
  setGlyphGenerator(glyphGenerator: NSGlyphGenerator): void;
}

declare interface INSLayoutManagerDelegate {
  layoutManager_shouldGenerateGlyphs_properties_characterIndexes_font_forGlyphRange(layoutManager: NSLayoutManager, glyphs: CGGlyph, props: NSGlyphProperty, charIndexes: NSUInteger, aFont: NSFont, glyphRange: NSRange): NSUInteger;
  layoutManager_lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(layoutManager: NSLayoutManager, glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  layoutManager_paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(layoutManager: NSLayoutManager, glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  layoutManager_paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(layoutManager: NSLayoutManager, glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  layoutManager_shouldUseAction_forControlCharacterAtIndex(layoutManager: NSLayoutManager, action: NSControlCharacterAction, charIndex: NSUInteger): NSControlCharacterAction;
  layoutManager_shouldBreakLineByWordBeforeCharacterAtIndex(layoutManager: NSLayoutManager, charIndex: NSUInteger): boolean;
  layoutManager_shouldBreakLineByHyphenatingBeforeCharacterAtIndex(layoutManager: NSLayoutManager, charIndex: NSUInteger): boolean;
  layoutManager_boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(layoutManager: NSLayoutManager, glyphIndex: NSUInteger, textContainer: NSTextContainer, proposedRect: NSRect, glyphPosition: NSPoint, charIndex: NSUInteger): NSRect;
  layoutManager_shouldSetLineFragmentRect_lineFragmentUsedRect_baselineOffset_inTextContainer_forGlyphRange(layoutManager: NSLayoutManager, lineFragmentRect: NSRect, lineFragmentUsedRect: NSRect, baselineOffset: CGFloat, textContainer: NSTextContainer, glyphRange: NSRange): boolean;
  layoutManagerDidInvalidateLayout(sender: NSLayoutManager): void;
  layoutManager_didCompleteLayoutForTextContainer_atEnd(layoutManager: NSLayoutManager, textContainer: NSTextContainer | null, layoutFinishedFlag: boolean): void;
  layoutManager_textContainer_didChangeGeometryFromSize(layoutManager: NSLayoutManager, textContainer: NSTextContainer, oldSize: NSSize): void;
  layoutManager_shouldUseTemporaryAttributes_forDrawingToScreen_atCharacterIndex_effectiveRange(layoutManager: NSLayoutManager, attrs: NSDictionary<any, any> | {[key: string]: any}, toScreen: boolean, charIndex: NSUInteger, effectiveCharRange: NSRangePointer | null): NSDictionary<any, any>;
}

declare enum NSTextLayoutOrientation {
  NSTextLayoutOrientationHorizontal = 0,
  NSTextLayoutOrientationVertical = 1,
}

declare enum NSGlyphProperty {
  NSGlyphPropertyNull,
  NSGlyphPropertyControlCharacter,
  NSGlyphPropertyElastic,
  NSGlyphPropertyNonBaseCharacter,
}

declare enum NSControlCharacterAction {
  NSControlCharacterActionZeroAdvancement,
  NSControlCharacterActionWhitespace,
  NSControlCharacterActionHorizontalTab,
  NSControlCharacterActionLineBreak,
  NSControlCharacterActionParagraphBreak,
  NSControlCharacterActionContainerBreak,
}

declare enum NSTypesetterBehavior {
  NSTypesetterLatestBehavior = -1,
  NSTypesetterOriginalBehavior = 0,
  NSTypesetterBehavior_10_2_WithCompatibility = 1,
  NSTypesetterBehavior_10_2 = 2,
  NSTypesetterBehavior_10_3 = 3,
  NSTypesetterBehavior_10_4 = 4,
}

declare enum NSGlyphInscription {
  NSGlyphInscribeBase = 0,
  NSGlyphInscribeBelow = 1,
  NSGlyphInscribeAbove = 2,
  NSGlyphInscribeOverstrike = 3,
  NSGlyphInscribeOverBelow = 4,
}

declare class NSLevelIndicator extends NSControl {
  tickMarkValueAtIndex(index: NSInteger): number;
  rectOfTickMarkAtIndex(index: NSInteger): NSRect;

  levelIndicatorStyle(): NSLevelIndicatorStyle;
  setLevelIndicatorStyle(levelIndicatorStyle: NSLevelIndicatorStyle): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  warningValue(): number;
  setWarningValue(warningValue: number): void;
  criticalValue(): number;
  setCriticalValue(criticalValue: number): void;
  tickMarkPosition(): NSTickMarkPosition;
  setTickMarkPosition(tickMarkPosition: NSTickMarkPosition): void;
  numberOfTickMarks(): NSInteger;
  setNumberOfTickMarks(numberOfTickMarks: NSInteger): void;
  numberOfMajorTickMarks(): NSInteger;
  setNumberOfMajorTickMarks(numberOfMajorTickMarks: NSInteger): void;
  fillColor(): NSColor;
  setFillColor(fillColor: NSColor): void;
  warningFillColor(): NSColor;
  setWarningFillColor(warningFillColor: NSColor): void;
  criticalFillColor(): NSColor;
  setCriticalFillColor(criticalFillColor: NSColor): void;
  drawsTieredCapacityLevels(): boolean;
  setDrawsTieredCapacityLevels(drawsTieredCapacityLevels: boolean): void;
  placeholderVisibility(): NSLevelIndicatorPlaceholderVisibility;
  setPlaceholderVisibility(placeholderVisibility: NSLevelIndicatorPlaceholderVisibility): void;
  ratingImage(): NSImage;
  setRatingImage(ratingImage: NSImage): void;
  ratingPlaceholderImage(): NSImage;
  setRatingPlaceholderImage(ratingPlaceholderImage: NSImage): void;
}

declare enum NSLevelIndicatorPlaceholderVisibility {
  NSLevelIndicatorPlaceholderVisibilityAutomatic = 0,
  NSLevelIndicatorPlaceholderVisibilityAlways = 1,
  NSLevelIndicatorPlaceholderVisibilityWhileEditing = 2,
}

declare class NSLevelIndicatorCell extends NSActionCell {
  initWithLevelIndicatorStyle<T extends NSLevelIndicatorCell>(levelIndicatorStyle: NSLevelIndicatorStyle): T;
  rectOfTickMarkAtIndex(index: NSInteger): NSRect;
  tickMarkValueAtIndex(index: NSInteger): number;

  levelIndicatorStyle(): NSLevelIndicatorStyle;
  setLevelIndicatorStyle(levelIndicatorStyle: NSLevelIndicatorStyle): void;
  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  warningValue(): number;
  setWarningValue(warningValue: number): void;
  criticalValue(): number;
  setCriticalValue(criticalValue: number): void;
  tickMarkPosition(): NSTickMarkPosition;
  setTickMarkPosition(tickMarkPosition: NSTickMarkPosition): void;
  numberOfTickMarks(): NSInteger;
  setNumberOfTickMarks(numberOfTickMarks: NSInteger): void;
  numberOfMajorTickMarks(): NSInteger;
  setNumberOfMajorTickMarks(numberOfMajorTickMarks: NSInteger): void;
}

declare enum NSLevelIndicatorStyle {
  NSLevelIndicatorStyleRelevancy,
  NSLevelIndicatorStyleContinuousCapacity,
  NSLevelIndicatorStyleDiscreteCapacity,
  NSLevelIndicatorStyleRating,
}

declare class NSMagnificationGestureRecognizer extends NSGestureRecognizer {
  magnification(): CGFloat;
  setMagnification(magnification: CGFloat): void;
}

declare class NSMatrix extends NSControl implements INSUserInterfaceValidations {
  // initWithFrame<T extends NSMatrix>(frameRect: NSRect): T;
  initWithFrame_mode_prototype_numberOfRows_numberOfColumns<T extends NSMatrix>(frameRect: NSRect, mode: NSMatrixMode, cell: NSCell, rowsHigh: NSInteger, colsWide: NSInteger): T;
  initWithFrame_mode_cellClass_numberOfRows_numberOfColumns<T extends NSMatrix>(frameRect: NSRect, mode: NSMatrixMode, factoryId: any | null, rowsHigh: NSInteger, colsWide: NSInteger): T;
  makeCellAtRow_column(row: NSInteger, col: NSInteger): NSCell;
  sendAction_to_forAllCells(selector: string, object: any, flag: boolean): void;
  sortUsingSelector(comparator: string): void;
  setSelectionFrom_to_anchor_highlight(startPos: NSInteger, endPos: NSInteger, anchorPos: NSInteger, lit: boolean): void;
  deselectSelectedCell(): void;
  deselectAllCells(): void;
  selectCellAtRow_column(row: NSInteger, col: NSInteger): void;
  selectAll(sender: any | null): void;
  selectCellWithTag(tag: NSInteger): boolean;
  setScrollable(flag: boolean): void;
  setState_atRow_column(value: NSInteger, row: NSInteger, col: NSInteger): void;
  getNumberOfRows_columns(rowCount: NSInteger | null, colCount: NSInteger | null): void;
  cellAtRow_column(row: NSInteger, col: NSInteger): NSCell;
  cellFrameAtRow_column(row: NSInteger, col: NSInteger): NSRect;
  getRow_column_ofCell(row: NSInteger, col: NSInteger, cell: NSCell): boolean;
  getRow_column_forPoint(row: NSInteger, col: NSInteger, point: NSPoint): boolean;
  renewRows_columns(newRows: NSInteger, newCols: NSInteger): void;
  putCell_atRow_column(newCell: NSCell, row: NSInteger, col: NSInteger): void;
  addRow(): void;
  addRowWithCells(newCells: NSArray<any> | any[]): void;
  insertRow(row: NSInteger): void;
  insertRow_withCells(row: NSInteger, newCells: NSArray<any> | any[] | null): void;
  removeRow(row: NSInteger): void;
  addColumn(): void;
  addColumnWithCells(newCells: NSArray<any> | any[]): void;
  insertColumn(column: NSInteger): void;
  insertColumn_withCells(column: NSInteger, newCells: NSArray<any> | any[] | null): void;
  removeColumn(col: NSInteger): void;
  cellWithTag(tag: NSInteger): NSCell;
  sizeToCells(): void;
  setValidateSize(flag: boolean): void;
  drawCellAtRow_column(row: NSInteger, col: NSInteger): void;
  highlightCell_atRow_column(flag: boolean, row: NSInteger, col: NSInteger): void;
  scrollCellToVisibleAtRow_column(row: NSInteger, col: NSInteger): void;
  mouseDown(event: NSEvent): void;
  performKeyEquivalent(event: NSEvent): boolean;
  sendAction(): boolean;
  sendDoubleAction(): void;
  textShouldBeginEditing(textObject: NSText): boolean;
  textShouldEndEditing(textObject: NSText): boolean;
  textDidBeginEditing(notification: NSNotification): void;
  textDidEndEditing(notification: NSNotification): void;
  textDidChange(notification: NSNotification): void;
  selectText(sender: any | null): void;
  selectTextAtRow_column(row: NSInteger, col: NSInteger): NSCell;
  acceptsFirstMouse(event: NSEvent | null): boolean;
  resetCursorRects(): void;
  setToolTip_forCell(toolTipString: NSString | string | null, cell: NSCell): void;
  toolTipForCell(cell: NSCell): NSString;
  validateUserInterfaceItem(item: any): boolean;

  cellClass(): any;
  setCellClass(cellClass: any): void;
  prototype(): NSCell;
  setPrototype(prototype: NSCell): void;
  mode(): NSMatrixMode;
  setMode(mode: NSMatrixMode): void;
  allowsEmptySelection(): boolean;
  setAllowsEmptySelection(allowsEmptySelection: boolean): void;
  cells(): NSArray<any>;
  setCells(cells: NSArray<any> | any[]): void;
  selectedCell(): NSCell;
  setSelectedCell(selectedCell: NSCell): void;
  selectedCells(): NSArray<any>;
  setSelectedCells(selectedCells: NSArray<any> | any[]): void;
  selectedRow(): NSInteger;
  setSelectedRow(selectedRow: NSInteger): void;
  selectedColumn(): NSInteger;
  setSelectedColumn(selectedColumn: NSInteger): void;
  selectionByRect(): boolean;
  setSelectionByRect(selectionByRect: boolean): void;
  cellSize(): NSSize;
  setCellSize(cellSize: NSSize): void;
  intercellSpacing(): NSSize;
  setIntercellSpacing(intercellSpacing: NSSize): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  cellBackgroundColor(): NSColor;
  setCellBackgroundColor(cellBackgroundColor: NSColor): void;
  drawsCellBackground(): boolean;
  setDrawsCellBackground(drawsCellBackground: boolean): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  numberOfRows(): NSInteger;
  setNumberOfRows(numberOfRows: NSInteger): void;
  numberOfColumns(): NSInteger;
  setNumberOfColumns(numberOfColumns: NSInteger): void;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  autosizesCells(): boolean;
  setAutosizesCells(autosizesCells: boolean): void;
  autoscroll(): boolean;
  setAutoscroll(autoscroll: boolean): void;
  mouseDownFlags(): NSInteger;
  setMouseDownFlags(mouseDownFlags: NSInteger): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  autorecalculatesCellSize(): boolean;
  setAutorecalculatesCellSize(autorecalculatesCellSize: boolean): void;
  tabKeyTraversesCells(): boolean;
  setTabKeyTraversesCells(tabKeyTraversesCells: boolean): void;
  keyCell(): NSCell;
  setKeyCell(keyCell: NSCell): void;
}

declare interface INSMatrixDelegate {}

declare enum NSMatrixMode {
  NSRadioModeMatrix = 0,
  NSHighlightModeMatrix = 1,
  NSListModeMatrix = 2,
  NSTrackModeMatrix = 3,
}

declare class NSMediaLibraryBrowserController extends NSObject {
  togglePanel(sender: any | null): IBAction;

  visible(): boolean;
  setVisible(visible: boolean): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
  mediaLibraries(): NSMediaLibrary;
  setMediaLibraries(mediaLibraries: NSMediaLibrary): void;
  static sharedMediaLibraryBrowserController(): NSMediaLibraryBrowserController;
  static setSharedMediaLibraryBrowserController(sharedMediaLibraryBrowserController: NSMediaLibraryBrowserController): void;
}

declare enum NSMediaLibrary {
  NSMediaLibraryAudio = 1 << 0,
  NSMediaLibraryImage = 1 << 1,
  NSMediaLibraryMovie = 1 << 2,
}

declare class NSMenu extends NSObject implements INSCopying, INSCoding, INSUserInterfaceItemIdentification, INSAccessibilityElement, INSAccessibility {
  initWithTitle<T extends NSMenu>(title: NSString | string): T;
  initWithCoder<T extends NSMenu>(decoder: NSCoder): T;
  static popUpContextMenu_withEvent_forView(menu: NSMenu, event: NSEvent, view: NSView): void;
  static popUpContextMenu_withEvent_forView_withFont(menu: NSMenu, event: NSEvent, view: NSView, font: NSFont | null): void;
  popUpMenuPositioningItem_atLocation_inView(item: NSMenuItem | null, location: NSPoint, view: NSView | null): boolean;
  static setMenuBarVisible(visible: boolean): void;
  static menuBarVisible(): boolean;
  insertItem_atIndex(newItem: NSMenuItem, index: NSInteger): void;
  addItem(newItem: NSMenuItem): void;
  insertItemWithTitle_action_keyEquivalent_atIndex(string: NSString | string, selector: string | null, charCode: NSString | string, index: NSInteger): NSMenuItem;
  addItemWithTitle_action_keyEquivalent(string: NSString | string, selector: string | null, charCode: NSString | string): NSMenuItem;
  removeItemAtIndex(index: NSInteger): void;
  removeItem(item: NSMenuItem): void;
  setSubmenu_forItem(menu: NSMenu | null, item: NSMenuItem): void;
  removeAllItems(): void;
  itemAtIndex(index: NSInteger): NSMenuItem;
  indexOfItem(item: NSMenuItem): NSInteger;
  indexOfItemWithTitle(title: NSString | string): NSInteger;
  indexOfItemWithTag(tag: NSInteger): NSInteger;
  indexOfItemWithRepresentedObject(object: any | null): NSInteger;
  indexOfItemWithSubmenu(submenu: NSMenu | null): NSInteger;
  indexOfItemWithTarget_andAction(target: any | null, actionSelector: string | null): NSInteger;
  itemWithTitle(title: NSString | string): NSMenuItem;
  itemWithTag(tag: NSInteger): NSMenuItem;
  update(): void;
  performKeyEquivalent(event: NSEvent): boolean;
  itemChanged(item: NSMenuItem): void;
  performActionForItemAtIndex(index: NSInteger): void;
  cancelTracking(): void;
  cancelTrackingWithoutAnimation(): void;
  submenuAction(sender: any | null): void;
  setMenuRepresentation(menuRep: any): void;
  menuRepresentation(): any;
  setContextMenuRepresentation(menuRep: any): void;
  contextMenuRepresentation(): any;
  setTearOffMenuRepresentation(menuRep: any): void;
  tearOffMenuRepresentation(): any;
  static menuZone(): NSZone;
  static setMenuZone(zone: NSZone): void;
  attachedMenu(): NSMenu;
  isAttached(): boolean;
  sizeToFit(): void;
  locationForSubmenu(submenu: NSMenu): NSPoint;
  helpRequested(eventPtr: NSEvent): void;
  addItemWithTitle_action(title: NSString | string, aSelector: string): NSMenuItem;
  addItemWithTitle_small_target_action(title: NSString | string, smallFont: boolean, action: any, aSelector: string): NSMenuItem;
  addItemWithTitle_target_action(title: NSString | string, aTarget: any, action: string): NSMenuItem;
  addItemWithTitle_target_action_representedObject(title: NSString | string, aTarget: any, action: string, anObject: any): NSMenuItem;
  addItemWithTitle_target_action_submenu(title: NSString | string, aTarget: any, action: string, submenu: NSMenu): NSMenuItem;
  addItemWithTitle_target_action_image(title: NSString | string, target: any, action: string, image: NSImage): NSMenuItem;
  addItemWithTitle_target_action_imageNamed(title: NSString | string, aTarget: any, action: string, image: NSString | string): NSMenuItem;
  addSmallItalicItemWithTitle_target_action(aString: NSString | string, aTarget: any, aSelector: string): NSMenuItem;
  addSmallItemWithTitle_target_action(aString: NSString | string, aTarget: any, aSelector: string): NSMenuItem;
  addItemWithTitle_font_target_action(title: NSString | string, font: NSFont, aTarget: any, aSelector: string): NSMenuItem;
  addItemsFromArray(array: NSArray<any> | any[]): void;
  replaceItemWithAction_withMenuItem_ms(action: string, newItem: NSMenuItem): NSMenuItem;
  replaceMenuItem_withMenuItem_ms(oldItem: NSMenuItem, newItem: NSMenuItem): void;
  showPopUpMenuForEvent_relativeToRect_ofView(event: NSEvent, rect: NSRect, view: NSView): void;
  showPopUpMenuForEvent_relativeToRect_ofView_deferred(event: NSEvent, rect: NSRect, view: NSView, defer: boolean): void;
  static menuWithItems(menuItems: NSArray<any> | any[]): NSMenu;
  parentMenuItem_bc(): NSMenuItem;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSMenu>(aDecoder: NSCoder): T;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  title(): NSString;
  setTitle(title: NSString | string): void;
  supermenu(): NSMenu;
  setSupermenu(supermenu: NSMenu): void;
  itemArray(): NSArray<any>;
  setItemArray(itemArray: NSArray<any> | any[]): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  autoenablesItems(): boolean;
  setAutoenablesItems(autoenablesItems: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  menuBarHeight(): CGFloat;
  setMenuBarHeight(menuBarHeight: CGFloat): void;
  highlightedItem(): NSMenuItem;
  setHighlightedItem(highlightedItem: NSMenuItem): void;
  minimumWidth(): CGFloat;
  setMinimumWidth(minimumWidth: CGFloat): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  allowsContextMenuPlugIns(): boolean;
  setAllowsContextMenuPlugIns(allowsContextMenuPlugIns: boolean): void;
  showsStateColumn(): boolean;
  setShowsStateColumn(showsStateColumn: boolean): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  propertiesToUpdate(): NSMenuProperties;
  setPropertiesToUpdate(propertiesToUpdate: NSMenuProperties): void;
  menuChangedMessagesEnabled(): boolean;
  setMenuChangedMessagesEnabled(menuChangedMessagesEnabled: boolean): void;
  tornOff(): boolean;
  setTornOff(tornOff: boolean): void;
  isInMainMenu(): boolean;
  setIsInMainMenu(isInMainMenu: boolean): void;
  isDarkMode_ms(): boolean;
  setIsDarkMode_ms(isDarkMode_ms: boolean): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare interface INSMenuDelegate {
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare enum NSMenuProperties {
  NSMenuPropertyItemTitle = 1 << 0,
  NSMenuPropertyItemAttributedTitle = 1 << 1,
  NSMenuPropertyItemKeyEquivalent = 1 << 2,
  NSMenuPropertyItemImage = 1 << 3,
  NSMenuPropertyItemEnabled = 1 << 4,
  NSMenuPropertyItemAccessibilityDescription = 1 << 5,
}

declare class NSMenuItem extends NSObject implements INSCopying, INSCoding, INSValidatedUserInterfaceItem, INSUserInterfaceItemIdentification, INSAccessibilityElement, INSAccessibility {
  static separatorItem(): NSMenuItem;
  initWithTitle_action_keyEquivalent<T extends NSMenuItem>(string: NSString | string, selector: string | null, charCode: NSString | string): T;
  initWithCoder<T extends NSMenuItem>(decoder: NSCoder): T;
  setMnemonicLocation(location: NSUInteger): void;
  mnemonicLocation(): NSUInteger;
  mnemonic(): NSString;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  static itemWithTitle_action(title: NSString | string, action: string): NSMenuItem;
  static itemWithTitle_target_action(title: NSString | string, aTarget: any, action: string): NSMenuItem;
  static itemWithTitle_small_target_action(title: NSString | string, smallFont: boolean, aTarget: any, action: string): NSMenuItem;
  isInMainMenu(): boolean;
  setSmallFont(): void;
  static menuItemWithTruncatedTitle_target_action(aString: NSString | string, aTarget: any, anAction: string): NSMenuItem;
  generatePreviewWithColorSpace_backingScale_completionHandler(colorSpace: NSColorSpace, backingScale: CGFloat, block: MSPreviewGeneratorBlock): boolean;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSMenuItem>(aDecoder: NSCoder): T;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  static usesUserKeyEquivalents(): boolean;
  static setUsesUserKeyEquivalents(usesUserKeyEquivalents: boolean): void;
  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  hasSubmenu(): boolean;
  setHasSubmenu(hasSubmenu: boolean): void;
  submenu(): NSMenu;
  setSubmenu(submenu: NSMenu): void;
  parentItem(): NSMenuItem;
  setParentItem(parentItem: NSMenuItem): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  separatorItem(): boolean;
  setSeparatorItem(separatorItem: boolean): void;
  keyEquivalent(): NSString;
  setKeyEquivalent(keyEquivalent: NSString | string): void;
  keyEquivalentModifierMask(): NSEventModifierFlags;
  setKeyEquivalentModifierMask(keyEquivalentModifierMask: NSEventModifierFlags): void;
  userKeyEquivalent(): NSString;
  setUserKeyEquivalent(userKeyEquivalent: NSString | string): void;
  allowsKeyEquivalentWhenHidden(): boolean;
  setAllowsKeyEquivalentWhenHidden(allowsKeyEquivalentWhenHidden: boolean): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  state(): NSControlStateValue;
  setState(state: NSControlStateValue): void;
  onStateImage(): NSImage;
  setOnStateImage(onStateImage: NSImage): void;
  offStateImage(): NSImage;
  setOffStateImage(offStateImage: NSImage): void;
  mixedStateImage(): NSImage;
  setMixedStateImage(mixedStateImage: NSImage): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  alternate(): boolean;
  setAlternate(alternate: boolean): void;
  indentationLevel(): NSInteger;
  setIndentationLevel(indentationLevel: NSInteger): void;
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  view(): NSView;
  setView(view: NSView): void;
  highlighted(): boolean;
  setHighlighted(highlighted: boolean): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  hiddenOrHasHiddenAncestor(): boolean;
  setHiddenOrHasHiddenAncestor(hiddenOrHasHiddenAncestor: boolean): void;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
  shareableObjectReferences(): NSArray<any>;
  setShareableObjectReferences(shareableObjectReferences: NSArray<any> | any[]): void;
  symbolMasterReferences(): NSArray<any>;
  setSymbolMasterReferences(symbolMasterReferences: NSArray<any> | any[]): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare class NSMenuItemCell extends NSButtonCell {
  // initTextCell<T extends NSMenuItemCell>(string: NSString | string): T;
  // initWithCoder<T extends NSMenuItemCell>(coder: NSCoder): T;
  setMenuView(menuView: NSMenuView): void;
  menuView(): NSMenuView;
  calcSize(): void;
  stateImageRectForBounds(cellFrame: NSRect): NSRect;
  titleRectForBounds(cellFrame: NSRect): NSRect;
  keyEquivalentRectForBounds(cellFrame: NSRect): NSRect;
  drawSeparatorItemWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawStateImageWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawImageWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawTitleWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawKeyEquivalentWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  drawBorderAndBackgroundWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;

  menuItem(): NSMenuItem;
  setMenuItem(menuItem: NSMenuItem): void;
  needsSizing(): boolean;
  setNeedsSizing(needsSizing: boolean): void;
  needsDisplay(): boolean;
  setNeedsDisplay(needsDisplay: boolean): void;
  stateImageWidth(): CGFloat;
  setStateImageWidth(stateImageWidth: CGFloat): void;
  imageWidth(): CGFloat;
  setImageWidth(imageWidth: CGFloat): void;
  titleWidth(): CGFloat;
  setTitleWidth(titleWidth: CGFloat): void;
  keyEquivalentWidth(): CGFloat;
  setKeyEquivalentWidth(keyEquivalentWidth: CGFloat): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
}

declare class NSMenuView extends NSView {
  static menuBarHeight(): CGFloat;
  // initWithFrame<T extends NSMenuView>(frame: NSRect): T;
  initAsTearOff<T extends NSMenuView>(): T;
  setMenu(menu: NSMenu): void;
  menu(): NSMenu;
  itemChanged(notification: NSNotification): void;
  itemAdded(notification: NSNotification): void;
  itemRemoved(notification: NSNotification): void;
  update(): void;
  setHorizontal(flag: boolean): void;
  isHorizontal(): boolean;
  setFont(font: NSFont): void;
  font(): NSFont;
  innerRect(): NSRect;
  rectOfItemAtIndex(index: NSInteger): NSRect;
  indexOfItemAtPoint(point: NSPoint): NSInteger;
  setNeedsDisplayForItemAtIndex(index: NSInteger): void;
  setHighlightedItemIndex(index: NSInteger): void;
  highlightedItemIndex(): NSInteger;
  stateImageOffset(): CGFloat;
  stateImageWidth(): CGFloat;
  imageAndTitleOffset(): CGFloat;
  imageAndTitleWidth(): CGFloat;
  keyEquivalentOffset(): CGFloat;
  keyEquivalentWidth(): CGFloat;
  setMenuItemCell_forItemAtIndex(cell: NSMenuItemCell, index: NSInteger): void;
  menuItemCellForItemAtIndex(index: NSInteger): NSMenuItemCell;
  attachedMenuView(): NSMenuView;
  setNeedsSizing(flag: boolean): void;
  needsSizing(): boolean;
  sizeToFit(): void;
  attachedMenu(): NSMenu;
  isAttached(): boolean;
  isTornOff(): boolean;
  locationForSubmenu(submenu: NSMenu): NSPoint;
  setWindowFrameForAttachingToRect_onScreen_preferredEdge_popUpSelectedItem(screenRect: NSRect, screen: NSScreen, edge: NSRectEdge, selectedItemIndex: NSInteger): void;
  detachSubmenu(): void;
  attachSubmenuForItemAtIndex(index: NSInteger): void;
  performActionWithHighlightingForItemAtIndex(index: NSInteger): void;
  trackWithEvent(event: NSEvent): boolean;
  horizontalEdgePadding(): CGFloat;
  setHorizontalEdgePadding(pad: CGFloat): void;
}

declare class NSMovie extends NSObject implements INSCopying, INSCoding {
  initWithMovie<T extends NSMovie>(movie: QTMovie): T;
  initWithURL_byReference<T extends NSMovie>(url: NSURL, byRef: boolean): T;
  initWithPasteboard<T extends NSMovie>(pasteboard: NSPasteboard): T;
  QTMovie(): QTMovie;
  URL(): NSURL;
  static movieUnfilteredFileTypes(): NSArray<any>;
  static movieUnfilteredPasteboardTypes(): NSArray<any>;
  static canInitWithPasteboard(pasteboard: NSPasteboard): boolean;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSMovie>(aDecoder: NSCoder): T;
}

declare class NSMovieView extends NSView implements INSUserInterfaceValidations {
  setMovie(movie: NSMovie): void;
  movie(): NSMovie;
  movieController(): void;
  movieRect(): NSRect;
  start(sender: any): void;
  stop(sender: any): void;
  isPlaying(): boolean;
  gotoPosterFrame(sender: any): void;
  gotoBeginning(sender: any): void;
  gotoEnd(sender: any): void;
  stepForward(sender: any): void;
  stepBack(sender: any): void;
  setRate(rate: number): void;
  rate(): number;
  setVolume(volume: number): void;
  volume(): number;
  setMuted(mute: boolean): void;
  isMuted(): boolean;
  setLoopMode(mode: NSQTMovieLoopMode): void;
  loopMode(): NSQTMovieLoopMode;
  setPlaysSelectionOnly(flag: boolean): void;
  playsSelectionOnly(): boolean;
  setPlaysEveryFrame(flag: boolean): void;
  playsEveryFrame(): boolean;
  showController_adjustingSize(show: boolean, adjustSize: boolean): void;
  isControllerVisible(): boolean;
  resizeWithMagnification(magnification: CGFloat): void;
  sizeForMagnification(magnification: CGFloat): NSSize;
  setEditable(editable: boolean): void;
  isEditable(): boolean;
  cut(sender: any): void;
  copy(sender: any): void;
  paste(sender: any): void;
  delete(sender: any): void;
  selectAll(sender: any): void;
  clear(sender: any): void;
  validateUserInterfaceItem(item: any): boolean;
}

declare type NSQTMovieLoopMode = NSUInteger

declare class NSNib extends NSObject implements INSCoding {
  initWithNibNamed_bundle<T extends NSNib>(nibName: NSNibName, bundle: NSBundle | null): T;
  initWithNibData_bundle<T extends NSNib>(nibData: NSData, bundle: NSBundle | null): T;
  instantiateWithOwner_topLevelObjects(owner: any | null, topLevelObjects: NSArray<any> | any[]): boolean;
  initWithContentsOfURL<T extends NSNib>(nibFileURL: NSURL): T;
  instantiateNibWithExternalNameTable(externalNameTable: NSDictionary<any, any> | {[key: string]: any}): boolean;
  instantiateNibWithOwner_topLevelObjects(owner: any, topLevelObjects: NSArray<any> | any[]): boolean;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSNib>(aDecoder: NSCoder): T;
}

declare type NSNibName = NSString

declare class NSNibConnector extends NSObject implements INSCoding {
  replaceObject_withObject(oldObject: any, newObject: any): void;
  establishConnection(): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSNibConnector>(aDecoder: NSCoder): T;

  source(): any;
  setSource(source: any): void;
  destination(): any;
  setDestination(destination: any): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
}

declare class NSNibControlConnector extends NSNibConnector {
  establishConnection(): void;
}

declare class NSNibOutletConnector extends NSNibConnector {
  establishConnection(): void;
}

declare class NSObjectController extends NSController {
  initWithContent<T extends NSObjectController>(content: any | null): T;
  // initWithCoder<T extends NSObjectController>(coder: NSCoder): T;
  prepareContent(): void;
  newObject(): any;
  addObject(object: any): void;
  removeObject(object: any): void;
  add(sender: any | null): IBAction;
  remove(sender: any | null): IBAction;
  validateUserInterfaceItem(item: any): boolean;
  fetchWithRequest_merge_error(fetchRequest: NSFetchRequest | null, merge: boolean, error: NSError): boolean;
  fetch(sender: any | null): IBAction;
  defaultFetchRequest(): NSFetchRequest;

  content(): any;
  setContent(content: any): void;
  selection(): any;
  setSelection(selection: any): void;
  selectedObjects(): NSArray<any>;
  setSelectedObjects(selectedObjects: NSArray<any> | any[]): void;
  automaticallyPreparesContent(): boolean;
  setAutomaticallyPreparesContent(automaticallyPreparesContent: boolean): void;
  objectClass(): any;
  setObjectClass(objectClass: any): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  canAdd(): boolean;
  setCanAdd(canAdd: boolean): void;
  canRemove(): boolean;
  setCanRemove(canRemove: boolean): void;
  managedObjectContext(): NSManagedObjectContext;
  setManagedObjectContext(managedObjectContext: NSManagedObjectContext): void;
  entityName(): NSString;
  setEntityName(entityName: NSString | string): void;
  fetchPredicate(): NSPredicate;
  setFetchPredicate(fetchPredicate: NSPredicate): void;
  usesLazyFetching(): boolean;
  setUsesLazyFetching(usesLazyFetching: boolean): void;
}

declare class NSOpenGLPixelFormat extends NSObject implements INSCoding {
  initWithCGLPixelFormatObj<T extends NSOpenGLPixelFormat>(format: _CGLPixelFormatObject): T;
  initWithAttributes<T extends NSOpenGLPixelFormat>(attribs: NSOpenGLPixelFormatAttribute): T;
  initWithData<T extends NSOpenGLPixelFormat>(attribs: NSData): T;
  attributes(): NSData;
  setAttributes(attribs: NSData): void;
  getValues_forAttribute_forVirtualScreen(vals: GLint, attrib: NSOpenGLPixelFormatAttribute, screen: GLint): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSOpenGLPixelFormat>(aDecoder: NSCoder): T;

  numberOfVirtualScreens(): GLint;
  setNumberOfVirtualScreens(numberOfVirtualScreens: GLint): void;
  CGLPixelFormatObj(): _CGLPixelFormatObject;
  setCGLPixelFormatObj(CGLPixelFormatObj: _CGLPixelFormatObject): void;
}

declare class NSOpenGLPixelBuffer extends NSObject {
  initWithTextureTarget_textureInternalFormat_textureMaxMipMapLevel_pixelsWide_pixelsHigh<T extends NSOpenGLPixelBuffer>(target: GLenum, format: GLenum, maxLevel: GLint, pixelsWide: GLsizei, pixelsHigh: GLsizei): T;
  initWithCGLPBufferObj<T extends NSOpenGLPixelBuffer>(pbuffer: _CGLPBufferObject): T;
  CGLPBufferObj(): _CGLPBufferObject;
  pixelsWide(): GLsizei;
  pixelsHigh(): GLsizei;
  textureTarget(): GLenum;
  textureInternalFormat(): GLenum;
  textureMaxMipMapLevel(): GLint;
}

declare class NSOpenGLContext extends NSObject implements INSLocking {
  initWithFormat_shareContext<T extends NSOpenGLContext>(format: NSOpenGLPixelFormat, share: NSOpenGLContext | null): T;
  initWithCGLContextObj<T extends NSOpenGLContext>(context: _CGLContextObject): T;
  setFullScreen(): void;
  setOffScreen_width_height_rowbytes(baseaddr: void, width: GLsizei, height: GLsizei, rowbytes: GLint): void;
  clearDrawable(): void;
  update(): void;
  flushBuffer(): void;
  makeCurrentContext(): void;
  static clearCurrentContext(): void;
  copyAttributesFromContext_withMask(context: NSOpenGLContext, mask: GLbitfield): void;
  setValues_forParameter(vals: GLint, param: NSOpenGLContextParameter): void;
  getValues_forParameter(vals: GLint, param: NSOpenGLContextParameter): void;
  createTexture_fromView_internalFormat(target: GLenum, view: NSView, format: GLenum): void;
  setPixelBuffer_cubeMapFace_mipMapLevel_currentVirtualScreen(pixelBuffer: NSOpenGLPixelBuffer, face: GLenum, level: GLint, screen: GLint): void;
  pixelBuffer(): NSOpenGLPixelBuffer;
  pixelBufferCubeMapFace(): GLenum;
  pixelBufferMipMapLevel(): GLint;
  setTextureImageToPixelBuffer_colorBuffer(pixelBuffer: NSOpenGLPixelBuffer, source: GLenum): void;
  lock(): void;
  unlock(): void;

  pixelFormat(): NSOpenGLPixelFormat;
  setPixelFormat(pixelFormat: NSOpenGLPixelFormat): void;
  view(): NSView;
  setView(view: NSView): void;
  static currentContext(): NSOpenGLContext;
  static setCurrentContext(currentContext: NSOpenGLContext): void;
  currentVirtualScreen(): GLint;
  setCurrentVirtualScreen(currentVirtualScreen: GLint): void;
  CGLContextObj(): _CGLContextObject;
  setCGLContextObj(CGLContextObj: _CGLContextObject): void;
}

declare type NSOpenGLPixelFormatAttribute = number

declare type NSOpenGLContextAuxiliary = _CGLContextObject

declare enum NSOpenGLGlobalOption {
  NSOpenGLGOFormatCacheSize = 501,
  NSOpenGLGOClearFormatCache = 502,
  NSOpenGLGORetainRenderers = 503,
  NSOpenGLGOUseBuildCache = 506,
  NSOpenGLGOResetLibrary = 504,
}

declare enum NSOpenGLContextParameter {
  NSOpenGLContextParameterSwapInterval = 222,
  NSOpenGLContextParameterSurfaceOrder = 235,
  NSOpenGLContextParameterSurfaceOpacity = 236,
  NSOpenGLContextParameterSurfaceBackingSize = 304,
  NSOpenGLContextParameterReclaimResources = 308,
  NSOpenGLContextParameterCurrentRendererID = 309,
  NSOpenGLContextParameterGPUVertexProcessing = 310,
  NSOpenGLContextParameterGPUFragmentProcessing = 311,
  NSOpenGLContextParameterHasDrawable = 314,
  NSOpenGLContextParameterMPSwapsInFlight = 315,
  NSOpenGLContextParameterSwapRectangle = 200,
  NSOpenGLContextParameterSwapRectangleEnable = 201,
  NSOpenGLContextParameterRasterizationEnable = 221,
  NSOpenGLContextParameterStateValidation = 301,
  NSOpenGLContextParameterSurfaceSurfaceVolatile = 306,
}

declare class NSOpenGLView extends NSView {
  static defaultPixelFormat(): NSOpenGLPixelFormat;
  initWithFrame_pixelFormat<T extends NSOpenGLView>(frameRect: NSRect, format: NSOpenGLPixelFormat | null): T;
  clearGLContext(): void;
  update(): void;
  reshape(): void;
  prepareOpenGL(): void;

  openGLContext(): NSOpenGLContext;
  setOpenGLContext(openGLContext: NSOpenGLContext): void;
  pixelFormat(): NSOpenGLPixelFormat;
  setPixelFormat(pixelFormat: NSOpenGLPixelFormat): void;
}

declare class NSOpenPanel extends NSSavePanel {
  static openPanel(): NSOpenPanel;
  filenames(): NSArray<any>;
  beginSheetForDirectory_file_types_modalForWindow_modalDelegate_didEndSelector_contextInfo(path: NSString | string | null, name: NSString | string | null, fileTypes: NSArray<any> | any[] | null, docWindow: NSWindow | null, delegate: any | null, didEndSelector: string | null, contextInfo: void | null): void;
  beginForDirectory_file_types_modelessDelegate_didEndSelector_contextInfo(path: NSString | string | null, name: NSString | string | null, fileTypes: NSArray<any> | any[] | null, delegate: any | null, didEndSelector: string | null, contextInfo: void | null): void;
  runModalForDirectory_file_types(path: NSString | string | null, name: NSString | string | null, fileTypes: NSArray<any> | any[] | null): NSInteger;
  runModalForTypes(fileTypes: NSArray<any> | any[] | null): NSInteger;

  URLs(): NSArray<any>;
  setURLs(URLs: NSArray<any> | any[]): void;
  resolvesAliases(): boolean;
  setResolvesAliases(resolvesAliases: boolean): void;
  canChooseDirectories(): boolean;
  setCanChooseDirectories(canChooseDirectories: boolean): void;
  allowsMultipleSelection(): boolean;
  setAllowsMultipleSelection(allowsMultipleSelection: boolean): void;
  canChooseFiles(): boolean;
  setCanChooseFiles(canChooseFiles: boolean): void;
  canResolveUbiquitousConflicts(): boolean;
  setCanResolveUbiquitousConflicts(canResolveUbiquitousConflicts: boolean): void;
  canDownloadUbiquitousContents(): boolean;
  setCanDownloadUbiquitousContents(canDownloadUbiquitousContents: boolean): void;
  accessoryViewDisclosed(): boolean;
  setAccessoryViewDisclosed(accessoryViewDisclosed: boolean): void;
}

declare class NSOutlineView extends NSTableView implements INSAccessibilityOutline {
  isExpandable(item: any | null): boolean;
  numberOfChildrenOfItem(item: any | null): NSInteger;
  child_ofItem(index: NSInteger, item: any | null): any;
  expandItem_expandChildren(item: any | null, expandChildren: boolean): void;
  expandItem(item: any | null): void;
  collapseItem_collapseChildren(item: any | null, collapseChildren: boolean): void;
  collapseItem(item: any | null): void;
  reloadItem_reloadChildren(item: any | null, reloadChildren: boolean): void;
  reloadItem(item: any | null): void;
  parentForItem(item: any | null): any;
  childIndexForItem(item: any): NSInteger;
  itemAtRow(row: NSInteger): any;
  rowForItem(item: any | null): NSInteger;
  levelForItem(item: any | null): NSInteger;
  levelForRow(row: NSInteger): NSInteger;
  isItemExpanded(item: any | null): boolean;
  frameOfOutlineCellAtRow(row: NSInteger): NSRect;
  setDropItem_dropChildIndex(item: any | null, index: NSInteger): void;
  shouldCollapseAutoExpandedItemsForDeposited(deposited: boolean): boolean;
  insertItemsAtIndexes_inParent_withAnimation(indexes: NSIndexSet, parent: any | null, animationOptions: NSTableViewAnimationOptions): void;
  removeItemsAtIndexes_inParent_withAnimation(indexes: NSIndexSet, parent: any | null, animationOptions: NSTableViewAnimationOptions): void;
  moveItemAtIndex_inParent_toIndex_inParent(fromIndex: NSInteger, oldParent: any | null, toIndex: NSInteger, newParent: any | null): void;
  insertRowsAtIndexes_withAnimation_UNAVAILABLE_ATTRIBUTE(indexes: NSIndexSet, animationOptions: NSTableViewAnimationOptions): void;
  removeRowsAtIndexes_withAnimation_UNAVAILABLE_ATTRIBUTE(indexes: NSIndexSet, animationOptions: NSTableViewAnimationOptions): void;
  moveRowAtIndex_toIndex_UNAVAILABLE_ATTRIBUTE(oldIndex: NSInteger, newIndex: NSInteger): void;
  selectItems_byExtendingSelection(items: NSArray<any> | any[], extend: boolean): void;
  selectItem_byExtendingSelection(item: any, extend: boolean): void;
  selectItem(item: any): void;
  simpleExpandedState(): any;
  setSimpleExpandedState(state: any): void;
  saveSimpleExpandedState(): void;
  restoreSimpleExpandedState(): void;
  expandAllItems(): void;
  collapseAllItems(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  dataSource(): any;
  setDataSource(dataSource: any): void;
  outlineTableColumn(): NSTableColumn;
  setOutlineTableColumn(outlineTableColumn: NSTableColumn): void;
  indentationPerLevel(): CGFloat;
  setIndentationPerLevel(indentationPerLevel: CGFloat): void;
  indentationMarkerFollowsCell(): boolean;
  setIndentationMarkerFollowsCell(indentationMarkerFollowsCell: boolean): void;
  autoresizesOutlineColumn(): boolean;
  setAutoresizesOutlineColumn(autoresizesOutlineColumn: boolean): void;
  autosaveExpandedItems(): boolean;
  setAutosaveExpandedItems(autosaveExpandedItems: boolean): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  stronglyReferencesItems(): boolean;
  setStronglyReferencesItems(stronglyReferencesItems: boolean): void;
}

declare interface INSOutlineViewDataSource {
  outlineView_numberOfChildrenOfItem(outlineView: NSOutlineView, item: any | null): NSInteger;
  outlineView_child_ofItem(outlineView: NSOutlineView, index: NSInteger, item: any | null): any;
  outlineView_isItemExpandable(outlineView: NSOutlineView, item: any): boolean;
  outlineView_objectValueForTableColumn_byItem(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any | null): any;
  outlineView_setObjectValue_forTableColumn_byItem(outlineView: NSOutlineView, object: any | null, tableColumn: NSTableColumn | null, item: any | null): void;
  outlineView_itemForPersistentObject(outlineView: NSOutlineView, object: any): any;
  outlineView_persistentObjectForItem(outlineView: NSOutlineView, item: any | null): any;
  outlineView_sortDescriptorsDidChange(outlineView: NSOutlineView, oldDescriptors: NSArray<any> | any[]): void;
  outlineView_pasteboardWriterForItem(outlineView: NSOutlineView, item: any): any;
  outlineView_draggingSession_willBeginAtPoint_forItems(outlineView: NSOutlineView, session: NSDraggingSession, screenPoint: NSPoint, draggedItems: NSArray<any> | any[]): void;
  outlineView_draggingSession_endedAtPoint_operation(outlineView: NSOutlineView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  outlineView_writeItems_toPasteboard(outlineView: NSOutlineView, items: NSArray<any> | any[], pasteboard: NSPasteboard): boolean;
  outlineView_updateDraggingItemsForDrag(outlineView: NSOutlineView, draggingInfo: any): void;
  outlineView_validateDrop_proposedItem_proposedChildIndex(outlineView: NSOutlineView, info: any, item: any | null, index: NSInteger): NSDragOperation;
  outlineView_acceptDrop_item_childIndex(outlineView: NSOutlineView, info: any, item: any | null, index: NSInteger): boolean;
  outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems(outlineView: NSOutlineView, dropDestination: NSURL, items: NSArray<any> | any[]): NSArray<any>;
}

declare interface INSOutlineViewDelegate {
  outlineView_viewForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): NSView;
  outlineView_rowViewForItem(outlineView: NSOutlineView, item: any): NSTableRowView;
  outlineView_didAddRowView_forRow(outlineView: NSOutlineView, rowView: NSTableRowView, row: NSInteger): void;
  outlineView_didRemoveRowView_forRow(outlineView: NSOutlineView, rowView: NSTableRowView, row: NSInteger): void;
  outlineView_willDisplayCell_forTableColumn_item(outlineView: NSOutlineView, cell: any, tableColumn: NSTableColumn | null, item: any): void;
  outlineView_shouldEditTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): boolean;
  selectionShouldChangeInOutlineView(outlineView: NSOutlineView): boolean;
  outlineView_shouldSelectItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_selectionIndexesForProposedSelection(outlineView: NSOutlineView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  outlineView_shouldSelectTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn | null): boolean;
  outlineView_mouseDownInHeaderOfTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn): void;
  outlineView_didClickTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn): void;
  outlineView_didDragTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn): void;
  outlineView_toolTipForCell_rect_tableColumn_item_mouseLocation(outlineView: NSOutlineView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, item: any, mouseLocation: NSPoint): NSString;
  outlineView_heightOfRowByItem(outlineView: NSOutlineView, item: any): CGFloat;
  outlineView_typeSelectStringForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): NSString;
  outlineView_nextTypeSelectMatchFromItem_toItem_forString(outlineView: NSOutlineView, startItem: any, endItem: any, searchString: NSString | string): any;
  outlineView_shouldTypeSelectForEvent_withCurrentSearchString(outlineView: NSOutlineView, event: NSEvent, searchString: NSString | string | null): boolean;
  outlineView_shouldShowCellExpansionForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): boolean;
  outlineView_shouldTrackCell_forTableColumn_item(outlineView: NSOutlineView, cell: NSCell, tableColumn: NSTableColumn | null, item: any): boolean;
  outlineView_dataCellForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): NSCell;
  outlineView_isGroupItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_shouldExpandItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_shouldCollapseItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_willDisplayOutlineCell_forTableColumn_item(outlineView: NSOutlineView, cell: any, tableColumn: NSTableColumn | null, item: any): void;
  outlineView_sizeToFitWidthOfColumn(outlineView: NSOutlineView, column: NSInteger): CGFloat;
  outlineView_shouldReorderColumn_toColumn(outlineView: NSOutlineView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  outlineView_shouldShowOutlineCellForItem(outlineView: NSOutlineView, item: any): boolean;
  outlineViewSelectionDidChange(notification: NSNotification): void;
  outlineViewColumnDidMove(notification: NSNotification): void;
  outlineViewColumnDidResize(notification: NSNotification): void;
  outlineViewSelectionIsChanging(notification: NSNotification): void;
  outlineViewItemWillExpand(notification: NSNotification): void;
  outlineViewItemDidExpand(notification: NSNotification): void;
  outlineViewItemWillCollapse(notification: NSNotification): void;
  outlineViewItemDidCollapse(notification: NSNotification): void;
}

declare class NSPDFImageRep extends NSImageRep {
  static imageRepWithData(pdfData: NSData): NSPDFImageRep;
  initWithData<T extends NSPDFImageRep>(pdfData: NSData): T;

  PDFRepresentation(): NSData;
  setPDFRepresentation(PDFRepresentation: NSData): void;
  bounds(): NSRect;
  setBounds(bounds: NSRect): void;
  currentPage(): NSInteger;
  setCurrentPage(currentPage: NSInteger): void;
  pageCount(): NSInteger;
  setPageCount(pageCount: NSInteger): void;
}

declare class NSPDFInfo extends NSObject implements INSCopying, INSCoding {
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSPDFInfo>(aDecoder: NSCoder): T;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  fileExtensionHidden(): boolean;
  setFileExtensionHidden(fileExtensionHidden: boolean): void;
  tagNames(): NSArray<any>;
  setTagNames(tagNames: NSArray<any> | any[]): void;
  orientation(): NSPaperOrientation;
  setOrientation(orientation: NSPaperOrientation): void;
  paperSize(): NSSize;
  setPaperSize(paperSize: NSSize): void;
  attributes(): NSMutableDictionary<any, any>;
  setAttributes(attributes: NSMutableDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSPDFPanel extends NSObject {
  static panel(): NSPDFPanel;
  beginSheetWithPDFInfo_modalForWindow_completionHandler(pdfInfo: NSPDFInfo, docWindow: NSWindow | null, completionHandler: Block): void;

  accessoryController(): NSViewController;
  setAccessoryController(accessoryController: NSViewController): void;
  options(): NSPDFPanelOptions;
  setOptions(options: NSPDFPanelOptions): void;
  defaultFileName(): NSString;
  setDefaultFileName(defaultFileName: NSString | string): void;
}

declare enum NSPDFPanelOptions {
  NSPDFPanelShowsPaperSize = 1 << 2,
  NSPDFPanelShowsOrientation = 1 << 3,
  NSPDFPanelRequestsParentDirectory = 1 << 24,
}

declare class NSPICTImageRep extends NSImageRep {
  static imageRepWithData(pictData: NSData): NSPICTImageRep;
  initWithData<T extends NSPICTImageRep>(pictData: NSData): T;

  PICTRepresentation(): NSData;
  setPICTRepresentation(PICTRepresentation: NSData): void;
  boundingBox(): NSRect;
  setBoundingBox(boundingBox: NSRect): void;
}

declare class NSPageController extends NSViewController implements INSAnimatablePropertyContainer, INSCoding {
  navigateForwardToObject(object: any): void;
  completeTransition(): void;
  navigateBack(sender: any | null): IBAction;
  navigateForward(sender: any | null): IBAction;
  takeSelectedIndexFrom(sender: any | null): IBAction;
  animator(): NSPageController;
  animationForKey(key: NSAnimatablePropertyKey): any;
  static defaultAnimationForKey(key: NSAnimatablePropertyKey): any;
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends NSPageController>(aDecoder: NSCoder): T;

  delegate(): any;
  setDelegate(delegate: any): void;
  selectedViewController(): NSViewController;
  setSelectedViewController(selectedViewController: NSViewController): void;
  transitionStyle(): NSPageControllerTransitionStyle;
  setTransitionStyle(transitionStyle: NSPageControllerTransitionStyle): void;
  arrangedObjects(): NSArray<any>;
  setArrangedObjects(arrangedObjects: NSArray<any> | any[]): void;
  selectedIndex(): NSInteger;
  setSelectedIndex(selectedIndex: NSInteger): void;
  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare interface INSPageControllerDelegate {
  pageController_identifierForObject(pageController: NSPageController, object: any): NSPageControllerObjectIdentifier;
  pageController_viewControllerForIdentifier(pageController: NSPageController, identifier: NSPageControllerObjectIdentifier): NSViewController;
  pageController_frameForObject(pageController: NSPageController, object: any | null): NSRect;
  pageController_prepareViewController_withObject(pageController: NSPageController, viewController: NSViewController, object: any | null): void;
  pageController_didTransitionToObject(pageController: NSPageController, object: any): void;
  pageControllerWillStartLiveTransition(pageController: NSPageController): void;
  pageControllerDidEndLiveTransition(pageController: NSPageController): void;
}

declare type NSPageControllerObjectIdentifier = NSString

declare enum NSPageControllerTransitionStyle {
  NSPageControllerTransitionStyleStackHistory,
  NSPageControllerTransitionStyleStackBook,
  NSPageControllerTransitionStyleHorizontalStrip,
}

declare class NSPageLayout extends NSObject {
  static pageLayout(): NSPageLayout;
  addAccessoryController(accessoryController: NSViewController): void;
  removeAccessoryController(accessoryController: NSViewController): void;
  beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(printInfo: NSPrintInfo, docWindow: NSWindow, delegate: any | null, didEndSelector: string | null, contextInfo: void | null): void;
  runModalWithPrintInfo(printInfo: NSPrintInfo): NSInteger;
  runModal(): NSInteger;
  setAccessoryView(accessoryView: NSView): void;
  accessoryView(): NSView;
  readPrintInfo(): void;
  writePrintInfo(): void;

  accessoryControllers(): NSArray<any>;
  setAccessoryControllers(accessoryControllers: NSArray<any> | any[]): void;
  printInfo(): NSPrintInfo;
  setPrintInfo(printInfo: NSPrintInfo): void;
}

declare class NSPanGestureRecognizer extends NSGestureRecognizer implements INSCoding {
  translationInView(view: NSView | null): NSPoint;
  setTranslation_inView(translation: NSPoint, view: NSView | null): void;
  velocityInView(view: NSView | null): NSPoint;
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends NSPanGestureRecognizer>(aDecoder: NSCoder): T;

  buttonMask(): NSUInteger;
  setButtonMask(buttonMask: NSUInteger): void;
  numberOfTouchesRequired(): NSInteger;
  setNumberOfTouchesRequired(numberOfTouchesRequired: NSInteger): void;
}

declare class NSPanel extends NSWindow {
  floatingPanel(): boolean;
  setFloatingPanel(floatingPanel: boolean): void;
  becomesKeyOnlyIfNeeded(): boolean;
  setBecomesKeyOnlyIfNeeded(becomesKeyOnlyIfNeeded: boolean): void;
  worksWhenModal(): boolean;
  setWorksWhenModal(worksWhenModal: boolean): void;
}

declare class NSTextTab extends NSObject implements INSCopying, INSCoding, INSSecureCoding {
  static columnTerminatorsForLocale(aLocale: NSLocale | null): NSCharacterSet;
  initWithTextAlignment_location_options<T extends NSTextTab>(alignment: NSTextAlignment, loc: CGFloat, options: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithType_location<T extends NSTextTab>(type: NSTextTabType, loc: CGFloat): T;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTextTab>(aDecoder: NSCoder): T;

  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  location(): CGFloat;
  setLocation(location: CGFloat): void;
  options(): NSDictionary<any, any>;
  setOptions(options: NSDictionary<any, any> | {[key: string]: any}): void;
  tabStopType(): NSTextTabType;
  setTabStopType(tabStopType: NSTextTabType): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSParagraphStyle extends NSObject implements INSCopying, INSMutableCopying, INSSecureCoding {
  static defaultWritingDirectionForLanguage(languageName: NSString | string | null): NSWritingDirection;
  addSVGAttributes(attributes: NSMutableArray<any> | any[]): void;
  copyWithZone(zone: NSZone | null): any;
  mutableCopyWithZone(zone: NSZone | null): any;

  static defaultParagraphStyle(): NSParagraphStyle;
  static setDefaultParagraphStyle(defaultParagraphStyle: NSParagraphStyle): void;
  lineSpacing(): CGFloat;
  setLineSpacing(lineSpacing: CGFloat): void;
  paragraphSpacing(): CGFloat;
  setParagraphSpacing(paragraphSpacing: CGFloat): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  headIndent(): CGFloat;
  setHeadIndent(headIndent: CGFloat): void;
  tailIndent(): CGFloat;
  setTailIndent(tailIndent: CGFloat): void;
  firstLineHeadIndent(): CGFloat;
  setFirstLineHeadIndent(firstLineHeadIndent: CGFloat): void;
  minimumLineHeight(): CGFloat;
  setMinimumLineHeight(minimumLineHeight: CGFloat): void;
  maximumLineHeight(): CGFloat;
  setMaximumLineHeight(maximumLineHeight: CGFloat): void;
  lineBreakMode(): NSLineBreakMode;
  setLineBreakMode(lineBreakMode: NSLineBreakMode): void;
  baseWritingDirection(): NSWritingDirection;
  setBaseWritingDirection(baseWritingDirection: NSWritingDirection): void;
  lineHeightMultiple(): CGFloat;
  setLineHeightMultiple(lineHeightMultiple: CGFloat): void;
  paragraphSpacingBefore(): CGFloat;
  setParagraphSpacingBefore(paragraphSpacingBefore: CGFloat): void;
  hyphenationFactor(): number;
  setHyphenationFactor(hyphenationFactor: number): void;
  tabStops(): NSArray<any>;
  setTabStops(tabStops: NSArray<any> | any[]): void;
  defaultTabInterval(): CGFloat;
  setDefaultTabInterval(defaultTabInterval: CGFloat): void;
  allowsDefaultTighteningForTruncation(): boolean;
  setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: boolean): void;
  tighteningFactorForTruncation(): number;
  setTighteningFactorForTruncation(tighteningFactorForTruncation: number): void;
  textBlocks(): NSArray<any>;
  setTextBlocks(textBlocks: NSArray<any> | any[]): void;
  textLists(): NSArray<any>;
  setTextLists(textLists: NSArray<any> | any[]): void;
  headerLevel(): NSInteger;
  setHeaderLevel(headerLevel: NSInteger): void;
  fixedLineHeight_ms(): CGFloat;
  setFixedLineHeight_ms(fixedLineHeight_ms: CGFloat): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class NSMutableParagraphStyle extends NSParagraphStyle {
  addTabStop(anObject: NSTextTab): void;
  removeTabStop(anObject: NSTextTab): void;
  setParagraphStyle(obj: NSParagraphStyle): void;
  removeUnsupportedAttributes(): void;

  lineSpacing(): CGFloat;
  setLineSpacing(lineSpacing: CGFloat): void;
  paragraphSpacing(): CGFloat;
  setParagraphSpacing(paragraphSpacing: CGFloat): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  firstLineHeadIndent(): CGFloat;
  setFirstLineHeadIndent(firstLineHeadIndent: CGFloat): void;
  headIndent(): CGFloat;
  setHeadIndent(headIndent: CGFloat): void;
  tailIndent(): CGFloat;
  setTailIndent(tailIndent: CGFloat): void;
  lineBreakMode(): NSLineBreakMode;
  setLineBreakMode(lineBreakMode: NSLineBreakMode): void;
  minimumLineHeight(): CGFloat;
  setMinimumLineHeight(minimumLineHeight: CGFloat): void;
  maximumLineHeight(): CGFloat;
  setMaximumLineHeight(maximumLineHeight: CGFloat): void;
  baseWritingDirection(): NSWritingDirection;
  setBaseWritingDirection(baseWritingDirection: NSWritingDirection): void;
  lineHeightMultiple(): CGFloat;
  setLineHeightMultiple(lineHeightMultiple: CGFloat): void;
  paragraphSpacingBefore(): CGFloat;
  setParagraphSpacingBefore(paragraphSpacingBefore: CGFloat): void;
  hyphenationFactor(): number;
  setHyphenationFactor(hyphenationFactor: number): void;
  tabStops(): NSArray<any>;
  setTabStops(tabStops: NSArray<any> | any[]): void;
  defaultTabInterval(): CGFloat;
  setDefaultTabInterval(defaultTabInterval: CGFloat): void;
  allowsDefaultTighteningForTruncation(): boolean;
  setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: boolean): void;
  tighteningFactorForTruncation(): number;
  setTighteningFactorForTruncation(tighteningFactorForTruncation: number): void;
  textBlocks(): NSArray<any>;
  setTextBlocks(textBlocks: NSArray<any> | any[]): void;
  textLists(): NSArray<any>;
  setTextLists(textLists: NSArray<any> | any[]): void;
  headerLevel(): NSInteger;
  setHeaderLevel(headerLevel: NSInteger): void;
  fixedLineHeight_ms(): CGFloat;
  setFixedLineHeight_ms(fixedLineHeight_ms: CGFloat): void;
}

declare type NSTextTabOptionKey = NSString

declare enum NSLineBreakMode {
  NSLineBreakByWordWrapping = 0,
  NSLineBreakByCharWrapping,
  NSLineBreakByClipping,
  NSLineBreakByTruncatingHead,
  NSLineBreakByTruncatingTail,
  NSLineBreakByTruncatingMiddle,
}

declare enum NSTextTabType {
  NSLeftTabStopType = 0,
  NSRightTabStopType,
  NSCenterTabStopType,
  NSDecimalTabStopType,
}

declare class NSPasteboard extends NSObject {
  static pasteboardWithName(name: NSPasteboardName): NSPasteboard;
  static pasteboardWithUniqueName(): NSPasteboard;
  releaseGlobally(): void;
  prepareForNewContentsWithOptions(options: NSPasteboardContentsOptions): NSInteger;
  clearContents(): NSInteger;
  writeObjects(objects: NSArray<any> | any[]): boolean;
  readObjectsForClasses_options(classArray: NSArray<any> | any[], options: NSDictionary<any, any> | {[key: string]: any} | null): NSArray<any>;
  indexOfPasteboardItem(pasteboardItem: NSPasteboardItem): NSUInteger;
  canReadItemWithDataConformingToTypes(types: NSArray<any> | any[]): boolean;
  canReadObjectForClasses_options(classArray: NSArray<any> | any[], options: NSDictionary<any, any> | {[key: string]: any} | null): boolean;
  declareTypes_owner(newTypes: NSArray<any> | any[], newOwner: any | null): NSInteger;
  addTypes_owner(newTypes: NSArray<any> | any[], newOwner: any | null): NSInteger;
  availableTypeFromArray(types: NSArray<any> | any[]): NSPasteboardType;
  setData_forType(data: NSData | null, dataType: NSPasteboardType): boolean;
  setPropertyList_forType(plist: any, dataType: NSPasteboardType): boolean;
  setString_forType(string: NSString | string, dataType: NSPasteboardType): boolean;
  dataForType(dataType: NSPasteboardType): NSData;
  propertyListForType(dataType: NSPasteboardType): any;
  stringForType(dataType: NSPasteboardType): NSString;
  static typesFilterableTo(type: NSPasteboardType): NSArray<any>;
  static pasteboardByFilteringFile(filename: NSString | string): NSPasteboard;
  static pasteboardByFilteringData_ofType(data: NSData, type: NSPasteboardType): NSPasteboard;
  static pasteboardByFilteringTypesInPasteboard(pboard: NSPasteboard): NSPasteboard;
  writeFileContents(filename: NSString | string): boolean;
  readFileContentsType_toFile(type: NSPasteboardType | null, filename: NSString | string): NSString;
  writeFileWrapper(wrapper: NSFileWrapper): boolean;
  readFileWrapper(): NSFileWrapper;

  static generalPasteboard(): NSPasteboard;
  static setGeneralPasteboard(generalPasteboard: NSPasteboard): void;
  name(): NSPasteboardName;
  setName(name: NSPasteboardName): void;
  changeCount(): NSInteger;
  setChangeCount(changeCount: NSInteger): void;
  pasteboardItems(): NSArray<any>;
  setPasteboardItems(pasteboardItems: NSArray<any> | any[]): void;
  types(): NSArray<any>;
  setTypes(types: NSArray<any> | any[]): void;
}

declare interface INSPasteboardWriting {
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;
}

declare interface INSPasteboardReading {
  // initWithPasteboardPropertyList_ofType<T extends INSPasteboardReading>(propertyList: any, type: NSPasteboardType): T;
}

declare type NSPasteboardType = NSString

declare type NSPasteboardName = NSString

declare type NSPasteboardReadingOptionKey = NSString

declare enum NSPasteboardContentsOptions {
  NSPasteboardContentsCurrentHostOnly = 1 << 0,
}

declare enum NSPasteboardWritingOptions {
  NSPasteboardWritingPromised = 1 << 9,
}

declare enum NSPasteboardReadingOptions {
  NSPasteboardReadingAsData = 0,
  NSPasteboardReadingAsString = 1 << 0,
  NSPasteboardReadingAsPropertyList = 1 << 1,
  NSPasteboardReadingAsKeyedArchive = 1 << 2,
}

declare class NSPasteboardItem extends NSObject implements INSPasteboardWriting, INSPasteboardReading {
  availableTypeFromArray(types: NSArray<any> | any[]): NSPasteboardType;
  setDataProvider_forTypes(dataProvider: any, types: NSArray<any> | any[]): boolean;
  setData_forType(data: NSData, type: NSPasteboardType): boolean;
  setString_forType(string: NSString | string, type: NSPasteboardType): boolean;
  setPropertyList_forType(propertyList: any, type: NSPasteboardType): boolean;
  dataForType(type: NSPasteboardType): NSData;
  stringForType(type: NSPasteboardType): NSString;
  propertyListForType(type: NSPasteboardType): any;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;
  static readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  initWithPasteboardPropertyList_ofType<T extends NSPasteboardItem>(propertyList: any, type: NSPasteboardType): T;

  types(): NSArray<any>;
  setTypes(types: NSArray<any> | any[]): void;
}

declare interface INSPasteboardItemDataProvider {
  pasteboard_item_provideDataForType(pasteboard: NSPasteboard | null, item: NSPasteboardItem, type: NSPasteboardType): void;
  pasteboardFinishedWithDataProvider(pasteboard: NSPasteboard): void;
}

declare class NSPathCell extends NSActionCell implements INSOpenSavePanelDelegate {
  setObjectValue(obj: any | null): void;
  rectOfPathComponentCell_withFrame_inView(cell: NSPathComponentCell, frame: NSRect, view: NSView): NSRect;
  pathComponentCellAtPoint_withFrame_inView(point: NSPoint, frame: NSRect, view: NSView): NSPathComponentCell;
  mouseEntered_withFrame_inView(event: NSEvent, frame: NSRect, view: NSView): void;
  mouseExited_withFrame_inView(event: NSEvent, frame: NSRect, view: NSView): void;
  panel_shouldEnableURL(sender: any, url: NSURL): boolean;
  panel_validateURL_error(sender: any, url: NSURL, outError: NSError): boolean;
  panel_didChangeToDirectoryURL(sender: any, url: NSURL | null): void;
  panel_userEnteredFilename_confirmed(sender: any, filename: NSString | string, okFlag: boolean): NSString;
  panel_willExpand(sender: any, expanding: boolean): void;
  panelSelectionDidChange(sender: any | null): void;

  pathStyle(): NSPathStyle;
  setPathStyle(pathStyle: NSPathStyle): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
  allowedTypes(): NSArray<any>;
  setAllowedTypes(allowedTypes: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  static pathComponentCellClass(): any;
  static setPathComponentCellClass(pathComponentCellClass: any): void;
  pathComponentCells(): NSArray<any>;
  setPathComponentCells(pathComponentCells: NSArray<any> | any[]): void;
  clickedPathComponentCell(): NSPathComponentCell;
  setClickedPathComponentCell(clickedPathComponentCell: NSPathComponentCell): void;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  placeholderString(): NSString;
  setPlaceholderString(placeholderString: NSString | string): void;
  placeholderAttributedString(): NSAttributedString;
  setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): void;
}

declare interface INSPathCellDelegate {
  pathCell_willDisplayOpenPanel(pathCell: NSPathCell, openPanel: NSOpenPanel): void;
  pathCell_willPopUpMenu(pathCell: NSPathCell, menu: NSMenu): void;
}

declare enum NSPathStyle {
  NSPathStyleStandard,
  NSPathStylePopUp = 2,
  NSPathStyleNavigationBar = 1,
}

declare class NSPathComponentCell extends NSTextFieldCell {
  image(): NSImage;
  setImage(image: NSImage): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
}

declare class NSPathControl extends NSControl {
  setDraggingSourceOperationMask_forLocal(mask: NSDragOperation, isLocal: boolean): void;
  clickedPathComponentCell(): NSPathComponentCell;
  pathComponentCells(): NSArray<any>;
  setPathComponentCells(cells: NSArray<any> | any[]): void;

  editable(): boolean;
  setEditable(editable: boolean): void;
  allowedTypes(): NSArray<any>;
  setAllowedTypes(allowedTypes: NSArray<any> | any[]): void;
  placeholderString(): NSString;
  setPlaceholderString(placeholderString: NSString | string): void;
  placeholderAttributedString(): NSAttributedString;
  setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  pathStyle(): NSPathStyle;
  setPathStyle(pathStyle: NSPathStyle): void;
  clickedPathItem(): NSPathControlItem;
  setClickedPathItem(clickedPathItem: NSPathControlItem): void;
  pathItems(): NSArray<any>;
  setPathItems(pathItems: NSArray<any> | any[]): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
}

declare interface INSPathControlDelegate {
  pathControl_shouldDragItem_withPasteboard(pathControl: NSPathControl, pathItem: NSPathControlItem, pasteboard: NSPasteboard): boolean;
  pathControl_shouldDragPathComponentCell_withPasteboard(pathControl: NSPathControl, pathComponentCell: NSPathComponentCell, pasteboard: NSPasteboard): boolean;
  pathControl_validateDrop(pathControl: NSPathControl, info: any): NSDragOperation;
  pathControl_acceptDrop(pathControl: NSPathControl, info: any): boolean;
  pathControl_willDisplayOpenPanel(pathControl: NSPathControl, openPanel: NSOpenPanel): void;
  pathControl_willPopUpMenu(pathControl: NSPathControl, menu: NSMenu): void;
}

declare class NSPathControlItem extends NSObject {
  title(): NSString;
  setTitle(title: NSString | string): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
}

declare class NSPersistentDocument extends NSDocument {
  configurePersistentStoreCoordinatorForURL_ofType_modelConfiguration_storeOptions_error(url: NSURL, fileType: NSString | string, configuration: NSString | string | null, storeOptions: NSDictionary<any, any> | {[key: string]: any} | null, error: NSError): boolean;
  persistentStoreTypeForFileType(fileType: NSString | string): NSString;
  writeToURL_ofType_forSaveOperation_originalContentsURL_error(absoluteURL: NSURL, typeName: NSString | string, saveOperation: NSSaveOperationType, absoluteOriginalContentsURL: NSURL | null, error: NSError): boolean;
  readFromURL_ofType_error(absoluteURL: NSURL, typeName: NSString | string, error: NSError): boolean;
  revertToContentsOfURL_ofType_error(inAbsoluteURL: NSURL, inTypeName: NSString | string, outError: NSError): boolean;
  configurePersistentStoreCoordinatorForURL_ofType_error(url: NSURL, fileType: NSString | string, error: NSError): boolean;

  managedObjectContext(): NSManagedObjectContext;
  setManagedObjectContext(managedObjectContext: NSManagedObjectContext): void;
  managedObjectModel(): NSManagedObjectModel;
  setManagedObjectModel(managedObjectModel: NSManagedObjectModel): void;
}

declare class NSPopUpButton extends NSButton {
  initWithFrame_pullsDown<T extends NSPopUpButton>(buttonFrame: NSRect, flag: boolean): T;
  addItemWithTitle(title: NSString | string): void;
  addItemsWithTitles(itemTitles: NSArray<any> | any[]): void;
  insertItemWithTitle_atIndex(title: NSString | string, index: NSInteger): void;
  removeItemWithTitle(title: NSString | string): void;
  removeItemAtIndex(index: NSInteger): void;
  removeAllItems(): void;
  indexOfItem(item: NSMenuItem): NSInteger;
  indexOfItemWithTitle(title: NSString | string): NSInteger;
  indexOfItemWithTag(tag: NSInteger): NSInteger;
  indexOfItemWithRepresentedObject(obj: any | null): NSInteger;
  indexOfItemWithTarget_andAction(target: any | null, actionSelector: string | null): NSInteger;
  itemAtIndex(index: NSInteger): NSMenuItem;
  itemWithTitle(title: NSString | string): NSMenuItem;
  selectItem(item: NSMenuItem | null): void;
  selectItemAtIndex(index: NSInteger): void;
  selectItemWithTitle(title: NSString | string): void;
  selectItemWithTag(tag: NSInteger): boolean;
  setTitle(string: NSString | string): void;
  synchronizeTitleAndSelectedItem(): void;
  itemTitleAtIndex(index: NSInteger): NSString;

  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  pullsDown(): boolean;
  setPullsDown(pullsDown: boolean): void;
  autoenablesItems(): boolean;
  setAutoenablesItems(autoenablesItems: boolean): void;
  preferredEdge(): NSRectEdge;
  setPreferredEdge(preferredEdge: NSRectEdge): void;
  itemArray(): NSArray<any>;
  setItemArray(itemArray: NSArray<any> | any[]): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  lastItem(): NSMenuItem;
  setLastItem(lastItem: NSMenuItem): void;
  selectedItem(): NSMenuItem;
  setSelectedItem(selectedItem: NSMenuItem): void;
  indexOfSelectedItem(): NSInteger;
  setIndexOfSelectedItem(indexOfSelectedItem: NSInteger): void;
  selectedTag(): NSInteger;
  setSelectedTag(selectedTag: NSInteger): void;
  itemTitles(): NSArray<any>;
  setItemTitles(itemTitles: NSArray<any> | any[]): void;
  titleOfSelectedItem(): NSString;
  setTitleOfSelectedItem(titleOfSelectedItem: NSString | string): void;
}

declare class NSPopUpButtonCell extends NSMenuItemCell {
  initTextCell_pullsDown<T extends NSPopUpButtonCell>(stringValue: NSString | string, pullDown: boolean): T;
  // initWithCoder<T extends NSPopUpButtonCell>(coder: NSCoder): T;
  addItemWithTitle(title: NSString | string): void;
  addItemsWithTitles(itemTitles: NSArray<any> | any[]): void;
  insertItemWithTitle_atIndex(title: NSString | string, index: NSInteger): void;
  removeItemWithTitle(title: NSString | string): void;
  removeItemAtIndex(index: NSInteger): void;
  removeAllItems(): void;
  indexOfItem(item: NSMenuItem): NSInteger;
  indexOfItemWithTitle(title: NSString | string): NSInteger;
  indexOfItemWithTag(tag: NSInteger): NSInteger;
  indexOfItemWithRepresentedObject(obj: any | null): NSInteger;
  indexOfItemWithTarget_andAction(target: any | null, actionSelector: string | null): NSInteger;
  itemAtIndex(index: NSInteger): NSMenuItem;
  itemWithTitle(title: NSString | string): NSMenuItem;
  selectItem(item: NSMenuItem | null): void;
  selectItemAtIndex(index: NSInteger): void;
  selectItemWithTitle(title: NSString | string): void;
  selectItemWithTag(tag: NSInteger): boolean;
  setTitle(string: NSString | string | null): void;
  synchronizeTitleAndSelectedItem(): void;
  itemTitleAtIndex(index: NSInteger): NSString;
  attachPopUpWithFrame_inView(cellFrame: NSRect, controlView: NSView): void;
  dismissPopUp(): void;
  performClickWithFrame_inView(frame: NSRect, controlView: NSView): void;

  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  pullsDown(): boolean;
  setPullsDown(pullsDown: boolean): void;
  autoenablesItems(): boolean;
  setAutoenablesItems(autoenablesItems: boolean): void;
  preferredEdge(): NSRectEdge;
  setPreferredEdge(preferredEdge: NSRectEdge): void;
  usesItemFromMenu(): boolean;
  setUsesItemFromMenu(usesItemFromMenu: boolean): void;
  altersStateOfSelectedItem(): boolean;
  setAltersStateOfSelectedItem(altersStateOfSelectedItem: boolean): void;
  itemArray(): NSArray<any>;
  setItemArray(itemArray: NSArray<any> | any[]): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  lastItem(): NSMenuItem;
  setLastItem(lastItem: NSMenuItem): void;
  selectedItem(): NSMenuItem;
  setSelectedItem(selectedItem: NSMenuItem): void;
  indexOfSelectedItem(): NSInteger;
  setIndexOfSelectedItem(indexOfSelectedItem: NSInteger): void;
  itemTitles(): NSArray<any>;
  setItemTitles(itemTitles: NSArray<any> | any[]): void;
  titleOfSelectedItem(): NSString;
  setTitleOfSelectedItem(titleOfSelectedItem: NSString | string): void;
  arrowPosition(): NSPopUpArrowPosition;
  setArrowPosition(arrowPosition: NSPopUpArrowPosition): void;
}

declare enum NSPopUpArrowPosition {
  NSPopUpNoArrow = 0,
  NSPopUpArrowAtCenter = 1,
  NSPopUpArrowAtBottom = 2,
}

declare class NSPopover extends NSResponder implements INSAppearanceCustomization, INSAccessibilityElement, INSAccessibility {
  // init<T extends NSPopover>(): T;
  // initWithCoder<T extends NSPopover>(coder: NSCoder): T;
  showRelativeToRect_ofView_preferredEdge(positioningRect: NSRect, positioningView: NSView, preferredEdge: NSRectEdge): void;
  performClose(sender: any | null): IBAction;
  close(): void;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;

  delegate(): any;
  setDelegate(delegate: any): void;
  appearance(): NSPopoverAppearance;
  setAppearance(appearance: NSPopoverAppearance): void;
  effectiveAppearance(): NSAppearance;
  setEffectiveAppearance(effectiveAppearance: NSAppearance): void;
  behavior(): NSPopoverBehavior;
  setBehavior(behavior: NSPopoverBehavior): void;
  animates(): boolean;
  setAnimates(animates: boolean): void;
  contentViewController(): NSViewController;
  setContentViewController(contentViewController: NSViewController): void;
  contentSize(): NSSize;
  setContentSize(contentSize: NSSize): void;
  shown(): boolean;
  setShown(shown: boolean): void;
  detached(): boolean;
  setDetached(detached: boolean): void;
  positioningRect(): NSRect;
  setPositioningRect(positioningRect: NSRect): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare interface INSPopoverDelegate {
  popoverShouldClose(popover: NSPopover): boolean;
  popoverShouldDetach(popover: NSPopover): boolean;
  popoverDidDetach(popover: NSPopover): void;
  detachableWindowForPopover(popover: NSPopover): NSWindow;
  popoverWillShow(notification: NSNotification): void;
  popoverDidShow(notification: NSNotification): void;
  popoverWillClose(notification: NSNotification): void;
  popoverDidClose(notification: NSNotification): void;
}

declare type NSPopoverCloseReasonValue = NSString

declare class NSPopoverAppearance extends NSAppearance {}

declare enum NSPopoverBehavior {
  NSPopoverBehaviorApplicationDefined = 0,
  NSPopoverBehaviorTransient = 1,
  NSPopoverBehaviorSemitransient = 2,
}

declare class NSPopoverTouchBarItem extends NSTouchBarItem {
  showPopover(sender: any | null): void;
  dismissPopover(sender: any | null): void;
  makeStandardActivatePopoverGestureRecognizer(): NSGestureRecognizer;

  popoverTouchBar(): NSTouchBar;
  setPopoverTouchBar(popoverTouchBar: NSTouchBar): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
  collapsedRepresentation(): NSView;
  setCollapsedRepresentation(collapsedRepresentation: NSView): void;
  collapsedRepresentationImage(): NSImage;
  setCollapsedRepresentationImage(collapsedRepresentationImage: NSImage): void;
  collapsedRepresentationLabel(): NSString;
  setCollapsedRepresentationLabel(collapsedRepresentationLabel: NSString | string): void;
  pressAndHoldTouchBar(): NSTouchBar;
  setPressAndHoldTouchBar(pressAndHoldTouchBar: NSTouchBar): void;
  showsCloseButton(): boolean;
  setShowsCloseButton(showsCloseButton: boolean): void;
}

declare class NSPredicateEditor extends NSRuleEditor {
  rowTemplates(): NSArray<any>;
  setRowTemplates(rowTemplates: NSArray<any> | any[]): void;
}

declare class NSPredicateEditorRowTemplate extends NSObject implements INSCoding, INSCopying {
  matchForPredicate(predicate: NSPredicate): number;
  setPredicate(predicate: NSPredicate): void;
  predicateWithSubpredicates(subpredicates: NSArray<any> | any[] | null): NSPredicate;
  displayableSubpredicatesOfPredicate(predicate: NSPredicate): NSArray<any>;
  initWithLeftExpressions_rightExpressions_modifier_operators_options<T extends NSPredicateEditorRowTemplate>(leftExpressions: NSArray<any> | any[], rightExpressions: NSArray<any> | any[], modifier: NSComparisonPredicateModifier, operators: NSArray<any> | any[], options: NSUInteger): T;
  initWithLeftExpressions_rightExpressionAttributeType_modifier_operators_options<T extends NSPredicateEditorRowTemplate>(leftExpressions: NSArray<any> | any[], attributeType: NSAttributeType, modifier: NSComparisonPredicateModifier, operators: NSArray<any> | any[], options: NSUInteger): T;
  initWithCompoundTypes<T extends NSPredicateEditorRowTemplate>(compoundTypes: NSArray<any> | any[]): T;
  static templatesWithAttributeKeyPaths_inEntityDescription(keyPaths: NSArray<any> | any[], entityDescription: NSEntityDescription): NSArray<any>;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSPredicateEditorRowTemplate>(aDecoder: NSCoder): T;
  copyWithZone(zone: NSZone | null): any;

  templateViews(): NSArray<any>;
  setTemplateViews(templateViews: NSArray<any> | any[]): void;
  leftExpressions(): NSArray<any>;
  setLeftExpressions(leftExpressions: NSArray<any> | any[]): void;
  rightExpressions(): NSArray<any>;
  setRightExpressions(rightExpressions: NSArray<any> | any[]): void;
  rightExpressionAttributeType(): NSAttributeType;
  setRightExpressionAttributeType(rightExpressionAttributeType: NSAttributeType): void;
  modifier(): NSComparisonPredicateModifier;
  setModifier(modifier: NSComparisonPredicateModifier): void;
  operators(): NSArray<any>;
  setOperators(operators: NSArray<any> | any[]): void;
  options(): NSUInteger;
  setOptions(options: NSUInteger): void;
  compoundTypes(): NSArray<any>;
  setCompoundTypes(compoundTypes: NSArray<any> | any[]): void;
}

declare class NSPressGestureRecognizer extends NSGestureRecognizer implements INSCoding {
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends NSPressGestureRecognizer>(aDecoder: NSCoder): T;

  buttonMask(): NSUInteger;
  setButtonMask(buttonMask: NSUInteger): void;
  minimumPressDuration(): NSTimeInterval;
  setMinimumPressDuration(minimumPressDuration: NSTimeInterval): void;
  allowableMovement(): CGFloat;
  setAllowableMovement(allowableMovement: CGFloat): void;
  numberOfTouchesRequired(): NSInteger;
  setNumberOfTouchesRequired(numberOfTouchesRequired: NSInteger): void;
}

declare class NSPressureConfiguration extends NSObject {
  initWithPressureBehavior<T extends NSPressureConfiguration>(pressureBehavior: NSPressureBehavior): T;
  set(): void;

  pressureBehavior(): NSPressureBehavior;
  setPressureBehavior(pressureBehavior: NSPressureBehavior): void;
}

declare class NSPrintInfo extends NSObject implements INSCopying, INSCoding {
  initWithDictionary<T extends NSPrintInfo>(attributes: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithCoder<T extends NSPrintInfo>(inDecoder: NSCoder): T;
  init<T extends NSPrintInfo>(): T;
  dictionary(): NSMutableDictionary<any, any>;
  setUpPrintOperationDefaultValues(): void;
  PMPrintSession(): void;
  PMPageFormat(): void;
  PMPrintSettings(): void;
  updateFromPMPageFormat(): void;
  updateFromPMPrintSettings(): void;
  takeSettingsFromPDFInfo(inPDFInfo: NSPDFInfo): void;
  static setDefaultPrinter(printer: NSPrinter | null): void;
  static sizeForPaperName(name: NSPrinterPaperName | null): NSSize;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSPrintInfo>(aDecoder: NSCoder): T;

  static sharedPrintInfo(): NSPrintInfo;
  static setSharedPrintInfo(sharedPrintInfo: NSPrintInfo): void;
  paperName(): NSPrinterPaperName;
  setPaperName(paperName: NSPrinterPaperName): void;
  paperSize(): NSSize;
  setPaperSize(paperSize: NSSize): void;
  orientation(): NSPaperOrientation;
  setOrientation(orientation: NSPaperOrientation): void;
  scalingFactor(): CGFloat;
  setScalingFactor(scalingFactor: CGFloat): void;
  leftMargin(): CGFloat;
  setLeftMargin(leftMargin: CGFloat): void;
  rightMargin(): CGFloat;
  setRightMargin(rightMargin: CGFloat): void;
  topMargin(): CGFloat;
  setTopMargin(topMargin: CGFloat): void;
  bottomMargin(): CGFloat;
  setBottomMargin(bottomMargin: CGFloat): void;
  horizontallyCentered(): boolean;
  setHorizontallyCentered(horizontallyCentered: boolean): void;
  verticallyCentered(): boolean;
  setVerticallyCentered(verticallyCentered: boolean): void;
  horizontalPagination(): NSPrintingPaginationMode;
  setHorizontalPagination(horizontalPagination: NSPrintingPaginationMode): void;
  verticalPagination(): NSPrintingPaginationMode;
  setVerticalPagination(verticalPagination: NSPrintingPaginationMode): void;
  jobDisposition(): NSPrintJobDispositionValue;
  setJobDisposition(jobDisposition: NSPrintJobDispositionValue): void;
  printer(): NSPrinter;
  setPrinter(printer: NSPrinter): void;
  imageablePageBounds(): NSRect;
  setImageablePageBounds(imageablePageBounds: NSRect): void;
  localizedPaperName(): NSString;
  setLocalizedPaperName(localizedPaperName: NSString | string): void;
  static defaultPrinter(): NSPrinter;
  static setDefaultPrinter(defaultPrinter: NSPrinter): void;
  printSettings(): NSMutableDictionary<any, any>;
  setPrintSettings(printSettings: NSMutableDictionary<any, any> | {[key: string]: any}): void;
  selectionOnly(): boolean;
  setSelectionOnly(selectionOnly: boolean): void;
}

declare type NSPrintInfoAttributeKey = NSString

declare type NSPrintJobDispositionValue = NSString

declare type NSPrintInfoSettingKey = NSString

declare enum NSPaperOrientation {
  NSPaperOrientationPortrait = 0,
  NSPaperOrientationLandscape = 1,
}

declare enum NSPrintingPaginationMode {
  NSAutoPagination = 0,
  NSFitPagination = 1,
  NSClipPagination = 2,
}

declare enum NSPrintingOrientation {
  NSPortraitOrientation = 0,
  NSLandscapeOrientation = 1,
}

declare class NSPrintOperation extends NSObject {
  static printOperationWithView_printInfo(view: NSView, printInfo: NSPrintInfo): NSPrintOperation;
  static PDFOperationWithView_insideRect_toData_printInfo(view: NSView, rect: NSRect, data: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
  static PDFOperationWithView_insideRect_toPath_printInfo(view: NSView, rect: NSRect, path: NSString | string, printInfo: NSPrintInfo): NSPrintOperation;
  static EPSOperationWithView_insideRect_toData_printInfo(view: NSView, rect: NSRect, data: NSMutableData, printInfo: NSPrintInfo): NSPrintOperation;
  static EPSOperationWithView_insideRect_toPath_printInfo(view: NSView, rect: NSRect, path: NSString | string, printInfo: NSPrintInfo): NSPrintOperation;
  static printOperationWithView(view: NSView): NSPrintOperation;
  static PDFOperationWithView_insideRect_toData(view: NSView, rect: NSRect, data: NSMutableData): NSPrintOperation;
  static EPSOperationWithView_insideRect_toData(view: NSView, rect: NSRect, data: NSMutableData | null): NSPrintOperation;
  runOperationModalForWindow_delegate_didRunSelector_contextInfo(docWindow: NSWindow, delegate: any | null, didRunSelector: string | null, contextInfo: void | null): void;
  runOperation(): boolean;
  createContext(): NSGraphicsContext;
  destroyContext(): void;
  deliverResult(): boolean;
  cleanUpOperation(): void;
  setAccessoryView(view: NSView | null): void;
  accessoryView(): NSView;
  setJobStyleHint(hint: NSString | string | null): void;
  jobStyleHint(): NSString;
  setShowPanels(flag: boolean): void;
  showPanels(): boolean;

  static currentOperation(): NSPrintOperation;
  static setCurrentOperation(currentOperation: NSPrintOperation): void;
  copyingOperation(): boolean;
  setCopyingOperation(copyingOperation: boolean): void;
  preferredRenderingQuality(): NSPrintRenderingQuality;
  setPreferredRenderingQuality(preferredRenderingQuality: NSPrintRenderingQuality): void;
  jobTitle(): NSString;
  setJobTitle(jobTitle: NSString | string): void;
  showsPrintPanel(): boolean;
  setShowsPrintPanel(showsPrintPanel: boolean): void;
  showsProgressPanel(): boolean;
  setShowsProgressPanel(showsProgressPanel: boolean): void;
  printPanel(): NSPrintPanel;
  setPrintPanel(printPanel: NSPrintPanel): void;
  PDFPanel(): NSPDFPanel;
  setPDFPanel(PDFPanel: NSPDFPanel): void;
  canSpawnSeparateThread(): boolean;
  setCanSpawnSeparateThread(canSpawnSeparateThread: boolean): void;
  pageOrder(): NSPrintingPageOrder;
  setPageOrder(pageOrder: NSPrintingPageOrder): void;
  view(): NSView;
  setView(view: NSView): void;
  printInfo(): NSPrintInfo;
  setPrintInfo(printInfo: NSPrintInfo): void;
  context(): NSGraphicsContext;
  setContext(context: NSGraphicsContext): void;
  pageRange(): NSRange;
  setPageRange(pageRange: NSRange): void;
  currentPage(): NSInteger;
  setCurrentPage(currentPage: NSInteger): void;
}

declare enum NSPrintingPageOrder {
  NSDescendingPageOrder = -1,
  NSSpecialPageOrder = 0,
  NSAscendingPageOrder = 1,
  NSUnknownPageOrder = 2,
}

declare enum NSPrintRenderingQuality {
  NSPrintRenderingQualityBest,
  NSPrintRenderingQualityResponsive,
}

declare class NSPrintPanel extends NSObject {
  static printPanel(): NSPrintPanel;
  addAccessoryController(accessoryController: NSViewController): void;
  removeAccessoryController(accessoryController: NSViewController): void;
  setDefaultButtonTitle(defaultButtonTitle: NSString | string | null): void;
  defaultButtonTitle(): NSString;
  beginSheetWithPrintInfo_modalForWindow_delegate_didEndSelector_contextInfo(printInfo: NSPrintInfo, docWindow: NSWindow, delegate: any | null, didEndSelector: string | null, contextInfo: void | null): void;
  runModalWithPrintInfo(printInfo: NSPrintInfo): NSInteger;
  runModal(): NSInteger;
  setAccessoryView(accessoryView: NSView | null): void;
  accessoryView(): NSView;
  updateFromPrintInfo(): void;
  finalWritePrintInfo(): void;

  accessoryControllers(): NSArray<any>;
  setAccessoryControllers(accessoryControllers: NSArray<any> | any[]): void;
  options(): NSPrintPanelOptions;
  setOptions(options: NSPrintPanelOptions): void;
  helpAnchor(): NSHelpAnchorName;
  setHelpAnchor(helpAnchor: NSHelpAnchorName): void;
  jobStyleHint(): NSPrintPanelJobStyleHint;
  setJobStyleHint(jobStyleHint: NSPrintPanelJobStyleHint): void;
  printInfo(): NSPrintInfo;
  setPrintInfo(printInfo: NSPrintInfo): void;
}

declare interface INSPrintPanelAccessorizing {
  localizedSummaryItems(): NSArray<any>;
  keyPathsForValuesAffectingPreview(): NSSet<any>;
}

declare type NSPrintPanelJobStyleHint = NSString

declare type NSPrintPanelAccessorySummaryKey = NSString

declare enum NSPrintPanelOptions {
  NSPrintPanelShowsCopies = 1 << 0,
  NSPrintPanelShowsPageRange = 1 << 1,
  NSPrintPanelShowsPaperSize = 1 << 2,
  NSPrintPanelShowsOrientation = 1 << 3,
  NSPrintPanelShowsScaling = 1 << 4,
  NSPrintPanelShowsPrintSelection = 1 << 5,
  NSPrintPanelShowsPageSetupAccessory = 1 << 8,
  NSPrintPanelShowsPreview = 1 << 17,
}

declare class NSPrinter extends NSObject implements INSCopying, INSCoding {
  static printerWithName(name: NSString | string): NSPrinter;
  static printerWithType(type: NSPrinterTypeName): NSPrinter;
  pageSizeForPaper(paperName: NSPrinterPaperName): NSSize;
  statusForTable(tableName: NSString | string): NSPrinterTableStatus;
  isKey_inTable(key: NSString | string | null, table: NSString | string): boolean;
  booleanForKey_inTable(key: NSString | string | null, table: NSString | string): boolean;
  floatForKey_inTable(key: NSString | string | null, table: NSString | string): number;
  intForKey_inTable(key: NSString | string | null, table: NSString | string): number;
  rectForKey_inTable(key: NSString | string | null, table: NSString | string): NSRect;
  sizeForKey_inTable(key: NSString | string | null, table: NSString | string): NSSize;
  stringForKey_inTable(key: NSString | string | null, table: NSString | string): NSString;
  stringListForKey_inTable(key: NSString | string | null, table: NSString | string): NSArray<any>;
  imageRectForPaper(paperName: NSString | string | null): NSRect;
  acceptsBinary(): boolean;
  isColor(): boolean;
  isFontAvailable(faceName: NSString | string | null): boolean;
  isOutputStackInReverseOrder(): boolean;
  static printerWithName_domain_includeUnavailable(name: NSString | string, domain: NSString | string | null, flag: boolean): NSPrinter;
  domain(): NSString;
  host(): NSString;
  note(): NSString;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSPrinter>(aDecoder: NSCoder): T;

  static printerNames(): NSArray<any>;
  static setPrinterNames(printerNames: NSArray<any> | any[]): void;
  static printerTypes(): NSArray<any>;
  static setPrinterTypes(printerTypes: NSArray<any> | any[]): void;
  name(): NSString;
  setName(name: NSString | string): void;
  type(): NSPrinterTypeName;
  setType(type: NSPrinterTypeName): void;
  languageLevel(): NSInteger;
  setLanguageLevel(languageLevel: NSInteger): void;
  deviceDescription(): NSDictionary<any, any>;
  setDeviceDescription(deviceDescription: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare type NSPrinterTypeName = NSString

declare type NSPrinterPaperName = NSString

declare enum NSPrinterTableStatus {
  NSPrinterTableOK = 0,
  NSPrinterTableNotFound = 1,
  NSPrinterTableError = 2,
}

declare class NSProgressIndicator extends NSView implements INSAccessibilityProgressIndicator {
  incrementBy(delta: number): void;
  startAnimation(sender: any | null): void;
  stopAnimation(sender: any | null): void;
  sizeToFit(): void;
  animationDelay(): NSTimeInterval;
  setAnimationDelay(delay: NSTimeInterval): void;
  animate(sender: any | null): void;
  accessibilityValue(): NSNumber;

  indeterminate(): boolean;
  setIndeterminate(indeterminate: boolean): void;
  bezeled(): boolean;
  setBezeled(bezeled: boolean): void;
  controlTint(): NSControlTint;
  setControlTint(controlTint: NSControlTint): void;
  controlSize(): NSControlSize;
  setControlSize(controlSize: NSControlSize): void;
  doubleValue(): number;
  setDoubleValue(doubleValue: number): void;
  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  usesThreadedAnimation(): boolean;
  setUsesThreadedAnimation(usesThreadedAnimation: boolean): void;
  style(): NSProgressIndicatorStyle;
  setStyle(style: NSProgressIndicatorStyle): void;
  displayedWhenStopped(): boolean;
  setDisplayedWhenStopped(displayedWhenStopped: boolean): void;
}

declare enum NSProgressIndicatorStyle {
  NSProgressIndicatorStyleBar = 0,
  NSProgressIndicatorStyleSpinning = 1,
}

declare enum NSProgressIndicatorThickness {
  NSProgressIndicatorPreferredThickness = 14,
  NSProgressIndicatorPreferredSmallThickness = 10,
  NSProgressIndicatorPreferredLargeThickness = 18,
  NSProgressIndicatorPreferredAquaThickness = 12,
}

declare class NSQuickDrawView extends NSView {
  qdPort(): void;
}

declare class NSRotationGestureRecognizer extends NSGestureRecognizer {
  rotation(): CGFloat;
  setRotation(rotation: CGFloat): void;
  rotationInDegrees(): CGFloat;
  setRotationInDegrees(rotationInDegrees: CGFloat): void;
}

declare class NSRuleEditor extends NSControl {
  reloadCriteria(): void;
  reloadPredicate(): void;
  predicateForRow(row: NSInteger): NSPredicate;
  subrowIndexesForRow(rowIndex: NSInteger): NSIndexSet;
  criteriaForRow(row: NSInteger): NSArray<any>;
  displayValuesForRow(row: NSInteger): NSArray<any>;
  rowForDisplayValue(displayValue: any): NSInteger;
  rowTypeForRow(rowIndex: NSInteger): NSRuleEditorRowType;
  parentRowForRow(rowIndex: NSInteger): NSInteger;
  addRow(sender: any | null): void;
  insertRowAtIndex_withType_asSubrowOfRow_animate(rowIndex: NSInteger, rowType: NSRuleEditorRowType, parentRow: NSInteger, shouldAnimate: boolean): void;
  setCriteria_andDisplayValues_forRowAtIndex(criteria: NSArray<any> | any[], values: NSArray<any> | any[], rowIndex: NSInteger): void;
  removeRowAtIndex(rowIndex: NSInteger): void;
  removeRowsAtIndexes_includeSubrows(rowIndexes: NSIndexSet, includeSubrows: boolean): void;
  selectRowIndexes_byExtendingSelection(indexes: NSIndexSet, extend: boolean): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  formattingStringsFilename(): NSString;
  setFormattingStringsFilename(formattingStringsFilename: NSString | string): void;
  formattingDictionary(): NSDictionary<any, any>;
  setFormattingDictionary(formattingDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  nestingMode(): NSRuleEditorNestingMode;
  setNestingMode(nestingMode: NSRuleEditorNestingMode): void;
  rowHeight(): CGFloat;
  setRowHeight(rowHeight: CGFloat): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  canRemoveAllRows(): boolean;
  setCanRemoveAllRows(canRemoveAllRows: boolean): void;
  predicate(): NSPredicate;
  setPredicate(predicate: NSPredicate): void;
  numberOfRows(): NSInteger;
  setNumberOfRows(numberOfRows: NSInteger): void;
  selectedRowIndexes(): NSIndexSet;
  setSelectedRowIndexes(selectedRowIndexes: NSIndexSet): void;
  rowClass(): any;
  setRowClass(rowClass: any): void;
  rowTypeKeyPath(): NSString;
  setRowTypeKeyPath(rowTypeKeyPath: NSString | string): void;
  subrowsKeyPath(): NSString;
  setSubrowsKeyPath(subrowsKeyPath: NSString | string): void;
  criteriaKeyPath(): NSString;
  setCriteriaKeyPath(criteriaKeyPath: NSString | string): void;
  displayValuesKeyPath(): NSString;
  setDisplayValuesKeyPath(displayValuesKeyPath: NSString | string): void;
}

declare interface INSRuleEditorDelegate {
  ruleEditor_numberOfChildrenForCriterion_withRowType(editor: NSRuleEditor, criterion: any | null, rowType: NSRuleEditorRowType): NSInteger;
  ruleEditor_child_forCriterion_withRowType(editor: NSRuleEditor, index: NSInteger, criterion: any | null, rowType: NSRuleEditorRowType): any;
  ruleEditor_displayValueForCriterion_inRow(editor: NSRuleEditor, criterion: any, row: NSInteger): any;
  ruleEditor_predicatePartsForCriterion_withDisplayValue_inRow(editor: NSRuleEditor, criterion: any, value: any, row: NSInteger): NSDictionary<any, any>;
  ruleEditorRowsDidChange(notification: NSNotification): void;
}

declare type NSRuleEditorPredicatePartKey = NSString

declare enum NSRuleEditorNestingMode {
  NSRuleEditorNestingModeSingle,
  NSRuleEditorNestingModeList,
  NSRuleEditorNestingModeCompound,
  NSRuleEditorNestingModeSimple,
}

declare enum NSRuleEditorRowType {
  NSRuleEditorRowTypeSimple,
  NSRuleEditorRowTypeCompound,
}

declare class NSRulerMarker extends NSObject implements INSCopying, INSCoding {
  initWithRulerView_markerLocation_image_imageOrigin<T extends NSRulerMarker>(ruler: NSRulerView, location: CGFloat, image: NSImage, imageOrigin: NSPoint): T;
  initWithCoder<T extends NSRulerMarker>(coder: NSCoder): T;
  drawRect(rect: NSRect): void;
  trackMouse_adding(mouseDownEvent: NSEvent, isAdding: boolean): boolean;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSRulerMarker>(aDecoder: NSCoder): T;

  ruler(): NSRulerView;
  setRuler(ruler: NSRulerView): void;
  markerLocation(): CGFloat;
  setMarkerLocation(markerLocation: CGFloat): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  imageOrigin(): NSPoint;
  setImageOrigin(imageOrigin: NSPoint): void;
  movable(): boolean;
  setMovable(movable: boolean): void;
  removable(): boolean;
  setRemovable(removable: boolean): void;
  dragging(): boolean;
  setDragging(dragging: boolean): void;
  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  imageRectInRuler(): NSRect;
  setImageRectInRuler(imageRectInRuler: NSRect): void;
  thicknessRequiredInRuler(): CGFloat;
  setThicknessRequiredInRuler(thicknessRequiredInRuler: CGFloat): void;
}

declare class NSRulerView extends NSView {
  static registerUnitWithName_abbreviation_unitToPointsConversionFactor_stepUpCycle_stepDownCycle(unitName: NSRulerViewUnitName, abbreviation: NSString | string, conversionFactor: CGFloat, stepUpCycle: NSArray<any> | any[], stepDownCycle: NSArray<any> | any[]): void;
  // initWithCoder<T extends NSRulerView>(coder: NSCoder): T;
  initWithScrollView_orientation<T extends NSRulerView>(scrollView: NSScrollView | null, orientation: NSRulerOrientation): T;
  addMarker(marker: NSRulerMarker): void;
  removeMarker(marker: NSRulerMarker): void;
  trackMarker_withMouseEvent(marker: NSRulerMarker, event: NSEvent): boolean;
  moveRulerlineFromLocation_toLocation(oldLocation: CGFloat, newLocation: CGFloat): void;
  invalidateHashMarks(): void;
  drawHashMarksAndLabelsInRect(rect: NSRect): void;
  drawMarkersInRect(rect: NSRect): void;

  scrollView(): NSScrollView;
  setScrollView(scrollView: NSScrollView): void;
  orientation(): NSRulerOrientation;
  setOrientation(orientation: NSRulerOrientation): void;
  baselineLocation(): CGFloat;
  setBaselineLocation(baselineLocation: CGFloat): void;
  requiredThickness(): CGFloat;
  setRequiredThickness(requiredThickness: CGFloat): void;
  ruleThickness(): CGFloat;
  setRuleThickness(ruleThickness: CGFloat): void;
  reservedThicknessForMarkers(): CGFloat;
  setReservedThicknessForMarkers(reservedThicknessForMarkers: CGFloat): void;
  reservedThicknessForAccessoryView(): CGFloat;
  setReservedThicknessForAccessoryView(reservedThicknessForAccessoryView: CGFloat): void;
  measurementUnits(): NSRulerViewUnitName;
  setMeasurementUnits(measurementUnits: NSRulerViewUnitName): void;
  originOffset(): CGFloat;
  setOriginOffset(originOffset: CGFloat): void;
  clientView(): NSView;
  setClientView(clientView: NSView): void;
  markers(): NSArray<any>;
  setMarkers(markers: NSArray<any> | any[]): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
  flipped(): boolean;
  setFlipped(flipped: boolean): void;
}

declare type NSRulerViewUnitName = NSString

declare enum NSRulerOrientation {
  NSHorizontalRuler,
  NSVerticalRuler,
}

declare class NSRunningApplication extends NSObject {
  hide(): boolean;
  unhide(): boolean;
  activateWithOptions(options: NSApplicationActivationOptions): boolean;
  terminate(): boolean;
  forceTerminate(): boolean;
  static runningApplicationsWithBundleIdentifier(bundleIdentifier: NSString | string): NSArray<any>;
  static runningApplicationWithProcessIdentifier(pid: pid_t): NSRunningApplication;
  static terminateAutomaticallyTerminableApplications(): void;

  terminated(): boolean;
  setTerminated(terminated: boolean): void;
  finishedLaunching(): boolean;
  setFinishedLaunching(finishedLaunching: boolean): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  active(): boolean;
  setActive(active: boolean): void;
  ownsMenuBar(): boolean;
  setOwnsMenuBar(ownsMenuBar: boolean): void;
  activationPolicy(): NSApplicationActivationPolicy;
  setActivationPolicy(activationPolicy: NSApplicationActivationPolicy): void;
  localizedName(): NSString;
  setLocalizedName(localizedName: NSString | string): void;
  bundleIdentifier(): NSString;
  setBundleIdentifier(bundleIdentifier: NSString | string): void;
  bundleURL(): NSURL;
  setBundleURL(bundleURL: NSURL): void;
  executableURL(): NSURL;
  setExecutableURL(executableURL: NSURL): void;
  processIdentifier(): pid_t;
  setProcessIdentifier(processIdentifier: pid_t): void;
  launchDate(): NSDate;
  setLaunchDate(launchDate: NSDate): void;
  icon(): NSImage;
  setIcon(icon: NSImage): void;
  executableArchitecture(): NSInteger;
  setExecutableArchitecture(executableArchitecture: NSInteger): void;
  static currentApplication(): NSRunningApplication;
  static setCurrentApplication(currentApplication: NSRunningApplication): void;
}

declare enum NSApplicationActivationOptions {
  NSApplicationActivateAllWindows = 1 << 0,
  NSApplicationActivateIgnoringOtherApps = 1 << 1,
}

declare enum NSApplicationActivationPolicy {
  NSApplicationActivationPolicyRegular,
  NSApplicationActivationPolicyAccessory,
  NSApplicationActivationPolicyProhibited,
}

declare class NSSavePanel extends NSPanel {
  static savePanel(): NSSavePanel;
  validateVisibleColumns(): void;
  ok(sender: any | null): IBAction;
  cancel(sender: any | null): IBAction;
  beginSheetModalForWindow_completionHandler(window: NSWindow, handler: Block): void;
  beginWithCompletionHandler(handler: Block): void;
  runModal(): NSModalResponse;
  filename(): NSString;
  directory(): NSString;
  setDirectory(path: NSString | string | null): void;
  requiredFileType(): NSString;
  setRequiredFileType(type: NSString | string | null): void;
  beginSheetForDirectory_file_modalForWindow_modalDelegate_didEndSelector_contextInfo(path: NSString | string, name: NSString | string | null, docWindow: NSWindow | null, delegate: any | null, didEndSelector: string | null, contextInfo: void | null): void;
  runModalForDirectory_file(path: NSString | string | null, name: NSString | string | null): NSInteger;
  selectText(sender: any | null): IBAction;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  directoryURL(): NSURL;
  setDirectoryURL(directoryURL: NSURL): void;
  allowedFileTypes(): NSArray<any>;
  setAllowedFileTypes(allowedFileTypes: NSArray<any> | any[]): void;
  allowsOtherFileTypes(): boolean;
  setAllowsOtherFileTypes(allowsOtherFileTypes: boolean): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  expanded(): boolean;
  setExpanded(expanded: boolean): void;
  canCreateDirectories(): boolean;
  setCanCreateDirectories(canCreateDirectories: boolean): void;
  canSelectHiddenExtension(): boolean;
  setCanSelectHiddenExtension(canSelectHiddenExtension: boolean): void;
  extensionHidden(): boolean;
  setExtensionHidden(extensionHidden: boolean): void;
  treatsFilePackagesAsDirectories(): boolean;
  setTreatsFilePackagesAsDirectories(treatsFilePackagesAsDirectories: boolean): void;
  prompt(): NSString;
  setPrompt(prompt: NSString | string): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  nameFieldLabel(): NSString;
  setNameFieldLabel(nameFieldLabel: NSString | string): void;
  nameFieldStringValue(): NSString;
  setNameFieldStringValue(nameFieldStringValue: NSString | string): void;
  message(): NSString;
  setMessage(message: NSString | string): void;
  showsHiddenFiles(): boolean;
  setShowsHiddenFiles(showsHiddenFiles: boolean): void;
  showsTagField(): boolean;
  setShowsTagField(showsTagField: boolean): void;
  tagNames(): NSArray<any>;
  setTagNames(tagNames: NSArray<any> | any[]): void;
}

declare interface INSOpenSavePanelDelegate {
  panel_shouldEnableURL(sender: any, url: NSURL): boolean;
  panel_validateURL_error(sender: any, url: NSURL, outError: NSError): boolean;
  panel_didChangeToDirectoryURL(sender: any, url: NSURL | null): void;
  panel_userEnteredFilename_confirmed(sender: any, filename: NSString | string, okFlag: boolean): NSString;
  panel_willExpand(sender: any, expanding: boolean): void;
  panelSelectionDidChange(sender: any | null): void;
}

declare class NSScreen extends NSObject {
  canRepresentDisplayGamut(displayGamut: NSDisplayGamut): boolean;
  convertRectToBacking(rect: NSRect): NSRect;
  convertRectFromBacking(rect: NSRect): NSRect;
  backingAlignedRect_options(rect: NSRect, options: NSAlignmentOptions): NSRect;
  userSpaceScaleFactor(): CGFloat;
  isOnRetinaScreen(): boolean;

  static screens(): NSArray<any>;
  static setScreens(screens: NSArray<any> | any[]): void;
  static mainScreen(): NSScreen;
  static setMainScreen(mainScreen: NSScreen): void;
  static deepestScreen(): NSScreen;
  static setDeepestScreen(deepestScreen: NSScreen): void;
  static screensHaveSeparateSpaces(): boolean;
  static setScreensHaveSeparateSpaces(screensHaveSeparateSpaces: boolean): void;
  depth(): NSWindowDepth;
  setDepth(depth: NSWindowDepth): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
  visibleFrame(): NSRect;
  setVisibleFrame(visibleFrame: NSRect): void;
  deviceDescription(): NSDictionary<any, any>;
  setDeviceDescription(deviceDescription: NSDictionary<any, any> | {[key: string]: any}): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  supportedWindowDepths(): NSWindowDepth;
  setSupportedWindowDepths(supportedWindowDepths: NSWindowDepth): void;
  backingScaleFactor(): CGFloat;
  setBackingScaleFactor(backingScaleFactor: CGFloat): void;
  maximumExtendedDynamicRangeColorComponentValue(): CGFloat;
  setMaximumExtendedDynamicRangeColorComponentValue(maximumExtendedDynamicRangeColorComponentValue: CGFloat): void;
  static highestBackingScale_bc(): CGFloat;
  static setHighestBackingScale_bc(highestBackingScale_bc: CGFloat): void;
}

declare class NSScrollView extends NSView implements INSTextFinderBarContainer {
  // initWithFrame<T extends NSScrollView>(frameRect: NSRect): T;
  // initWithCoder<T extends NSScrollView>(coder: NSCoder): T;
  static frameSizeForContentSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(cSize: NSSize, horizontalScrollerClass: any | null, verticalScrollerClass: any | null, type: NSBorderType, controlSize: NSControlSize, scrollerStyle: NSScrollerStyle): NSSize;
  static contentSizeForFrameSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle(fSize: NSSize, horizontalScrollerClass: any | null, verticalScrollerClass: any | null, type: NSBorderType, controlSize: NSControlSize, scrollerStyle: NSScrollerStyle): NSSize;
  static frameSizeForContentSize_hasHorizontalScroller_hasVerticalScroller_borderType(cSize: NSSize, hFlag: boolean, vFlag: boolean, type: NSBorderType): NSSize;
  static contentSizeForFrameSize_hasHorizontalScroller_hasVerticalScroller_borderType(fSize: NSSize, hFlag: boolean, vFlag: boolean, type: NSBorderType): NSSize;
  tile(): void;
  reflectScrolledClipView(cView: NSClipView): void;
  scrollWheel(event: NSEvent): void;
  flashScrollers(): void;
  magnifyToFitRect(rect: NSRect): void;
  setMagnification_centeredAtPoint(magnification: CGFloat, point: NSPoint): void;
  addFloatingSubview_forAxis(view: NSView, axis: NSEventGestureAxis): void;
  findBarViewDidChangeHeight(): void;
  contentView(): NSView;

  documentVisibleRect(): NSRect;
  setDocumentVisibleRect(documentVisibleRect: NSRect): void;
  contentSize(): NSSize;
  setContentSize(contentSize: NSSize): void;
  documentView(): NSView;
  setDocumentView(documentView: NSView): void;
  contentView(): NSClipView;
  setContentView(contentView: NSClipView): void;
  documentCursor(): NSCursor;
  setDocumentCursor(documentCursor: NSCursor): void;
  borderType(): NSBorderType;
  setBorderType(borderType: NSBorderType): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  hasVerticalScroller(): boolean;
  setHasVerticalScroller(hasVerticalScroller: boolean): void;
  hasHorizontalScroller(): boolean;
  setHasHorizontalScroller(hasHorizontalScroller: boolean): void;
  verticalScroller(): NSScroller;
  setVerticalScroller(verticalScroller: NSScroller): void;
  horizontalScroller(): NSScroller;
  setHorizontalScroller(horizontalScroller: NSScroller): void;
  autohidesScrollers(): boolean;
  setAutohidesScrollers(autohidesScrollers: boolean): void;
  horizontalLineScroll(): CGFloat;
  setHorizontalLineScroll(horizontalLineScroll: CGFloat): void;
  verticalLineScroll(): CGFloat;
  setVerticalLineScroll(verticalLineScroll: CGFloat): void;
  lineScroll(): CGFloat;
  setLineScroll(lineScroll: CGFloat): void;
  horizontalPageScroll(): CGFloat;
  setHorizontalPageScroll(horizontalPageScroll: CGFloat): void;
  verticalPageScroll(): CGFloat;
  setVerticalPageScroll(verticalPageScroll: CGFloat): void;
  pageScroll(): CGFloat;
  setPageScroll(pageScroll: CGFloat): void;
  scrollsDynamically(): boolean;
  setScrollsDynamically(scrollsDynamically: boolean): void;
  scrollerStyle(): NSScrollerStyle;
  setScrollerStyle(scrollerStyle: NSScrollerStyle): void;
  scrollerKnobStyle(): NSScrollerKnobStyle;
  setScrollerKnobStyle(scrollerKnobStyle: NSScrollerKnobStyle): void;
  horizontalScrollElasticity(): NSScrollElasticity;
  setHorizontalScrollElasticity(horizontalScrollElasticity: NSScrollElasticity): void;
  verticalScrollElasticity(): NSScrollElasticity;
  setVerticalScrollElasticity(verticalScrollElasticity: NSScrollElasticity): void;
  usesPredominantAxisScrolling(): boolean;
  setUsesPredominantAxisScrolling(usesPredominantAxisScrolling: boolean): void;
  allowsMagnification(): boolean;
  setAllowsMagnification(allowsMagnification: boolean): void;
  magnification(): CGFloat;
  setMagnification(magnification: CGFloat): void;
  maxMagnification(): CGFloat;
  setMaxMagnification(maxMagnification: CGFloat): void;
  minMagnification(): CGFloat;
  setMinMagnification(minMagnification: CGFloat): void;
  automaticallyAdjustsContentInsets(): boolean;
  setAutomaticallyAdjustsContentInsets(automaticallyAdjustsContentInsets: boolean): void;
  contentInsets(): NSEdgeInsets;
  setContentInsets(contentInsets: NSEdgeInsets): void;
  scrollerInsets(): NSEdgeInsets;
  setScrollerInsets(scrollerInsets: NSEdgeInsets): void;
  static rulerViewClass(): any;
  static setRulerViewClass(rulerViewClass: any): void;
  rulersVisible(): boolean;
  setRulersVisible(rulersVisible: boolean): void;
  hasHorizontalRuler(): boolean;
  setHasHorizontalRuler(hasHorizontalRuler: boolean): void;
  hasVerticalRuler(): boolean;
  setHasVerticalRuler(hasVerticalRuler: boolean): void;
  horizontalRulerView(): NSRulerView;
  setHorizontalRulerView(horizontalRulerView: NSRulerView): void;
  verticalRulerView(): NSRulerView;
  setVerticalRulerView(verticalRulerView: NSRulerView): void;
  findBarPosition(): NSScrollViewFindBarPosition;
  setFindBarPosition(findBarPosition: NSScrollViewFindBarPosition): void;
  findBarView(): NSView;
  setFindBarView(findBarView: NSView): void;
  findBarVisible(): boolean;
  setFindBarVisible(findBarVisible: boolean): void;
}

declare enum NSScrollElasticity {
  NSScrollElasticityAutomatic = 0,
  NSScrollElasticityNone = 1,
  NSScrollElasticityAllowed = 2,
}

declare enum NSScrollViewFindBarPosition {
  NSScrollViewFindBarPositionAboveHorizontalRuler = 0,
  NSScrollViewFindBarPositionAboveContent = 1,
  NSScrollViewFindBarPositionBelowContent = 2,
}

declare class NSScroller extends NSControl {
  static scrollerWidthForControlSize_scrollerStyle(controlSize: NSControlSize, scrollerStyle: NSScrollerStyle): CGFloat;
  static scrollerWidthForControlSize(controlSize: NSControlSize): CGFloat;
  static scrollerWidth(): CGFloat;
  drawParts(): void;
  rectForPart(partCode: NSScrollerPart): NSRect;
  checkSpaceForParts(): void;
  drawArrow_highlight(whichArrow: NSScrollerArrow, flag: boolean): void;
  drawKnob(): void;
  drawKnobSlotInRect_highlight(slotRect: NSRect, flag: boolean): void;
  highlight(flag: boolean): void;
  testPart(point: NSPoint): NSScrollerPart;
  trackKnob(event: NSEvent): void;
  trackScrollButtons(event: NSEvent): void;
  setKnobProportion(proportion: CGFloat): void;
  setFloatValue_knobProportion(value: number, proportion: CGFloat): void;

  static compatibleWithOverlayScrollers(): boolean;
  static setCompatibleWithOverlayScrollers(compatibleWithOverlayScrollers: boolean): void;
  static preferredScrollerStyle(): NSScrollerStyle;
  static setPreferredScrollerStyle(preferredScrollerStyle: NSScrollerStyle): void;
  scrollerStyle(): NSScrollerStyle;
  setScrollerStyle(scrollerStyle: NSScrollerStyle): void;
  knobStyle(): NSScrollerKnobStyle;
  setKnobStyle(knobStyle: NSScrollerKnobStyle): void;
  usableParts(): NSUsableScrollerParts;
  setUsableParts(usableParts: NSUsableScrollerParts): void;
  arrowsPosition(): NSScrollArrowPosition;
  setArrowsPosition(arrowsPosition: NSScrollArrowPosition): void;
  controlTint(): NSControlTint;
  setControlTint(controlTint: NSControlTint): void;
  controlSize(): NSControlSize;
  setControlSize(controlSize: NSControlSize): void;
  hitPart(): NSScrollerPart;
  setHitPart(hitPart: NSScrollerPart): void;
  knobProportion(): CGFloat;
  setKnobProportion(knobProportion: CGFloat): void;
}

declare enum NSScrollArrowPosition {
  NSScrollerArrowsMaxEnd = 0,
  NSScrollerArrowsMinEnd = 1,
  NSScrollerArrowsDefaultSetting = 0,
  NSScrollerArrowsNone = 2,
}

declare enum NSUsableScrollerParts {
  NSNoScrollerParts = 0,
  NSOnlyScrollerArrows = 1,
  NSAllScrollerParts = 2,
}

declare enum NSScrollerPart {
  NSScrollerNoPart = 0,
  NSScrollerDecrementPage = 1,
  NSScrollerKnob = 2,
  NSScrollerIncrementPage = 3,
  NSScrollerDecrementLine = 4,
  NSScrollerIncrementLine = 5,
  NSScrollerKnobSlot = 6,
}

declare enum NSScrollerArrow {
  NSScrollerIncrementArrow = 0,
  NSScrollerDecrementArrow = 1,
}

declare enum NSScrollerStyle {
  NSScrollerStyleLegacy = 0,
  NSScrollerStyleOverlay = 1,
}

declare enum NSScrollerKnobStyle {
  NSScrollerKnobStyleDefault = 0,
  NSScrollerKnobStyleDark = 1,
  NSScrollerKnobStyleLight = 2,
}

declare class NSScrubberSelectionStyle extends NSObject implements INSCoding {
  init<T extends NSScrubberSelectionStyle>(): T;
  initWithCoder<T extends NSScrubberSelectionStyle>(coder: NSCoder): T;
  makeSelectionView(): NSScrubberSelectionView;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSScrubberSelectionStyle>(aDecoder: NSCoder): T;

  static outlineOverlayStyle(): NSScrubberSelectionStyle;
  static setOutlineOverlayStyle(outlineOverlayStyle: NSScrubberSelectionStyle): void;
  static roundedBackgroundStyle(): NSScrubberSelectionStyle;
  static setRoundedBackgroundStyle(roundedBackgroundStyle: NSScrubberSelectionStyle): void;
}

declare class NSScrubber extends NSView {
  // initWithFrame<T extends NSScrubber>(frameRect: NSRect): T;
  // initWithCoder<T extends NSScrubber>(coder: NSCoder): T;
  reloadData(): void;
  performSequentialBatchUpdates(updateBlock: Block): void;
  insertItemsAtIndexes(indexes: NSIndexSet): void;
  removeItemsAtIndexes(indexes: NSIndexSet): void;
  reloadItemsAtIndexes(indexes: NSIndexSet): void;
  moveItemAtIndex_toIndex(oldIndex: NSInteger, newIndex: NSInteger): void;
  scrollItemAtIndex_toAlignment(index: NSInteger, alignment: NSScrubberAlignment): void;
  itemViewForItemAtIndex(index: NSInteger): NSScrubberItemView;
  registerClass_forItemIdentifier(itemViewClass: any | null, itemIdentifier: NSUserInterfaceItemIdentifier): void;
  registerNib_forItemIdentifier(nib: NSNib | null, itemIdentifier: NSUserInterfaceItemIdentifier): void;
  makeItemWithIdentifier_owner(itemIdentifier: NSUserInterfaceItemIdentifier, owner: any | null): NSScrubberItemView;

  dataSource(): any;
  setDataSource(dataSource: any): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  scrubberLayout(): NSScrubberLayout;
  setScrubberLayout(scrubberLayout: NSScrubberLayout): void;
  numberOfItems(): NSInteger;
  setNumberOfItems(numberOfItems: NSInteger): void;
  highlightedIndex(): NSInteger;
  setHighlightedIndex(highlightedIndex: NSInteger): void;
  selectedIndex(): NSInteger;
  setSelectedIndex(selectedIndex: NSInteger): void;
  mode(): NSScrubberMode;
  setMode(mode: NSScrubberMode): void;
  itemAlignment(): NSScrubberAlignment;
  setItemAlignment(itemAlignment: NSScrubberAlignment): void;
  continuous(): boolean;
  setContinuous(continuous: boolean): void;
  floatsSelectionViews(): boolean;
  setFloatsSelectionViews(floatsSelectionViews: boolean): void;
  selectionBackgroundStyle(): NSScrubberSelectionStyle;
  setSelectionBackgroundStyle(selectionBackgroundStyle: NSScrubberSelectionStyle): void;
  selectionOverlayStyle(): NSScrubberSelectionStyle;
  setSelectionOverlayStyle(selectionOverlayStyle: NSScrubberSelectionStyle): void;
  showsArrowButtons(): boolean;
  setShowsArrowButtons(showsArrowButtons: boolean): void;
  showsAdditionalContentIndicators(): boolean;
  setShowsAdditionalContentIndicators(showsAdditionalContentIndicators: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  backgroundView(): NSView;
  setBackgroundView(backgroundView: NSView): void;
}

declare interface INSScrubberDataSource {
  numberOfItemsForScrubber(scrubber: NSScrubber): NSInteger;
  scrubber_viewForItemAtIndex(scrubber: NSScrubber, index: NSInteger): NSScrubberItemView;
}

declare interface INSScrubberDelegate {
  scrubber_didSelectItemAtIndex(scrubber: NSScrubber, selectedIndex: NSInteger): void;
  scrubber_didHighlightItemAtIndex(scrubber: NSScrubber, highlightedIndex: NSInteger): void;
  scrubber_didChangeVisibleRange(scrubber: NSScrubber, visibleRange: NSRange): void;
  didBeginInteractingWithScrubber(scrubber: NSScrubber): void;
  didFinishInteractingWithScrubber(scrubber: NSScrubber): void;
  didCancelInteractingWithScrubber(scrubber: NSScrubber): void;
}

declare enum NSScrubberMode {
  NSScrubberModeFixed = 0,
  NSScrubberModeFree,
}

declare enum NSScrubberAlignment {
  NSScrubberAlignmentNone = 0,
  NSScrubberAlignmentLeading,
  NSScrubberAlignmentTrailing,
  NSScrubberAlignmentCenter,
}

declare class NSScrubberArrangedView extends NSView {
  selected(): boolean;
  setSelected(selected: boolean): void;
  highlighted(): boolean;
  setHighlighted(highlighted: boolean): void;
}

declare class NSScrubberSelectionView extends NSScrubberArrangedView {}

declare class NSScrubberItemView extends NSScrubberArrangedView {}

declare class NSScrubberTextItemView extends NSScrubberItemView {
  textField(): NSTextField;
  setTextField(textField: NSTextField): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
}

declare class NSScrubberImageItemView extends NSScrubberItemView {
  imageView(): NSImageView;
  setImageView(imageView: NSImageView): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  imageAlignment(): NSImageAlignment;
  setImageAlignment(imageAlignment: NSImageAlignment): void;
}

declare class NSScrubberLayoutAttributes extends NSObject implements INSCopying {
  static layoutAttributesForItemAtIndex(index: NSInteger): NSScrubberLayoutAttributes;
  copyWithZone(zone: NSZone | null): any;

  itemIndex(): NSInteger;
  setItemIndex(itemIndex: NSInteger): void;
  frame(): NSRect;
  setFrame(frame: NSRect): void;
  alpha(): CGFloat;
  setAlpha(alpha: CGFloat): void;
}

declare class NSScrubberLayout extends NSObject implements INSCoding {
  init<T extends NSScrubberLayout>(): T;
  initWithCoder<T extends NSScrubberLayout>(coder: NSCoder): T;
  prepareLayout(): void;
  layoutAttributesForItemAtIndex(index: NSInteger): NSScrubberLayoutAttributes;
  layoutAttributesForItemsInRect(rect: NSRect): NSSet<any>;
  shouldInvalidateLayoutForChangeFromVisibleRect_toVisibleRect(fromVisibleRect: NSRect, toVisibleRect: NSRect): boolean;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSScrubberLayout>(aDecoder: NSCoder): T;

  static layoutAttributesClass(): any;
  static setLayoutAttributesClass(layoutAttributesClass: any): void;
  scrubber(): NSScrubber;
  setScrubber(scrubber: NSScrubber): void;
  visibleRect(): NSRect;
  setVisibleRect(visibleRect: NSRect): void;
  scrubberContentSize(): NSSize;
  setScrubberContentSize(scrubberContentSize: NSSize): void;
  shouldInvalidateLayoutForSelectionChange(): boolean;
  setShouldInvalidateLayoutForSelectionChange(shouldInvalidateLayoutForSelectionChange: boolean): void;
  shouldInvalidateLayoutForHighlightChange(): boolean;
  setShouldInvalidateLayoutForHighlightChange(shouldInvalidateLayoutForHighlightChange: boolean): void;
  automaticallyMirrorsInRightToLeftLayout(): boolean;
  setAutomaticallyMirrorsInRightToLeftLayout(automaticallyMirrorsInRightToLeftLayout: boolean): void;
}

declare class NSScrubberFlowLayout extends NSScrubberLayout {
  invalidateLayoutForItemsAtIndexes(invalidItemIndexes: NSIndexSet): void;

  itemSpacing(): CGFloat;
  setItemSpacing(itemSpacing: CGFloat): void;
  itemSize(): NSSize;
  setItemSize(itemSize: NSSize): void;
}

declare class NSScrubberProportionalLayout extends NSScrubberLayout {
  initWithNumberOfVisibleItems<T extends NSScrubberProportionalLayout>(numberOfVisibleItems: NSInteger): T;
  // initWithCoder<T extends NSScrubberProportionalLayout>(aDecoder: NSCoder): T;

  numberOfVisibleItems(): NSInteger;
  setNumberOfVisibleItems(numberOfVisibleItems: NSInteger): void;
}

declare interface INSScrubberFlowLayoutDelegate {
  scrubber_layout_sizeForItemAtIndex(scrubber: NSScrubber, layout: NSScrubberFlowLayout, itemIndex: NSInteger): NSSize;
}

declare class NSSearchField extends NSTextField {
  rectForSearchTextWhenCentered(isCentered: boolean): NSRect;
  rectForSearchButtonWhenCentered(isCentered: boolean): NSRect;
  rectForCancelButtonWhenCentered(isCentered: boolean): NSRect;

  recentSearches(): NSArray<any>;
  setRecentSearches(recentSearches: NSArray<any> | any[]): void;
  recentsAutosaveName(): NSSearchFieldRecentsAutosaveName;
  setRecentsAutosaveName(recentsAutosaveName: NSSearchFieldRecentsAutosaveName): void;
  searchMenuTemplate(): NSMenu;
  setSearchMenuTemplate(searchMenuTemplate: NSMenu): void;
  sendsWholeSearchString(): boolean;
  setSendsWholeSearchString(sendsWholeSearchString: boolean): void;
  maximumRecents(): NSInteger;
  setMaximumRecents(maximumRecents: NSInteger): void;
  sendsSearchStringImmediately(): boolean;
  setSendsSearchStringImmediately(sendsSearchStringImmediately: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  centersPlaceholder(): boolean;
  setCentersPlaceholder(centersPlaceholder: boolean): void;
}

declare interface INSSearchFieldDelegate {
  searchFieldDidStartSearching(sender: NSSearchField): void;
  searchFieldDidEndSearching(sender: NSSearchField): void;
}

declare type NSSearchFieldRecentsAutosaveName = NSString

declare class NSSearchFieldCell extends NSTextFieldCell {
  // initTextCell<T extends NSSearchFieldCell>(string: NSString | string): T;
  // initWithCoder<T extends NSSearchFieldCell>(coder: NSCoder): T;
  resetSearchButtonCell(): void;
  resetCancelButtonCell(): void;
  searchTextRectForBounds(rect: NSRect): NSRect;
  searchButtonRectForBounds(rect: NSRect): NSRect;
  cancelButtonRectForBounds(rect: NSRect): NSRect;

  searchButtonCell(): NSButtonCell;
  setSearchButtonCell(searchButtonCell: NSButtonCell): void;
  cancelButtonCell(): NSButtonCell;
  setCancelButtonCell(cancelButtonCell: NSButtonCell): void;
  searchMenuTemplate(): NSMenu;
  setSearchMenuTemplate(searchMenuTemplate: NSMenu): void;
  sendsWholeSearchString(): boolean;
  setSendsWholeSearchString(sendsWholeSearchString: boolean): void;
  maximumRecents(): NSInteger;
  setMaximumRecents(maximumRecents: NSInteger): void;
  recentSearches(): NSArray<any>;
  setRecentSearches(recentSearches: NSArray<any> | any[]): void;
  recentsAutosaveName(): NSSearchFieldRecentsAutosaveName;
  setRecentsAutosaveName(recentsAutosaveName: NSSearchFieldRecentsAutosaveName): void;
  sendsSearchStringImmediately(): boolean;
  setSendsSearchStringImmediately(sendsSearchStringImmediately: boolean): void;
}

declare class NSSecureTextField extends NSTextField {}

declare class NSSecureTextFieldCell extends NSTextFieldCell {
  echosBullets(): boolean;
  setEchosBullets(echosBullets: boolean): void;
}

declare class NSSegmentedCell extends NSActionCell {
  selectSegmentWithTag(tag: NSInteger): boolean;
  makeNextSegmentKey(): void;
  makePreviousSegmentKey(): void;
  setWidth_forSegment(width: CGFloat, segment: NSInteger): void;
  widthForSegment(segment: NSInteger): CGFloat;
  setImage_forSegment(image: NSImage | null, segment: NSInteger): void;
  imageForSegment(segment: NSInteger): NSImage;
  setImageScaling_forSegment(scaling: NSImageScaling, segment: NSInteger): void;
  imageScalingForSegment(segment: NSInteger): NSImageScaling;
  setLabel_forSegment(label: NSString | string, segment: NSInteger): void;
  labelForSegment(segment: NSInteger): NSString;
  setSelected_forSegment(selected: boolean, segment: NSInteger): void;
  isSelectedForSegment(segment: NSInteger): boolean;
  setEnabled_forSegment(enabled: boolean, segment: NSInteger): void;
  isEnabledForSegment(segment: NSInteger): boolean;
  setMenu_forSegment(menu: NSMenu | null, segment: NSInteger): void;
  menuForSegment(segment: NSInteger): NSMenu;
  setToolTip_forSegment(toolTip: NSString | string | null, segment: NSInteger): void;
  toolTipForSegment(segment: NSInteger): NSString;
  setTag_forSegment(tag: NSInteger, segment: NSInteger): void;
  tagForSegment(segment: NSInteger): NSInteger;
  drawSegment_inFrame_withView(segment: NSInteger, frame: NSRect, controlView: NSView): void;
  interiorBackgroundStyleForSegment(segment: NSInteger): NSBackgroundStyle;

  segmentCount(): NSInteger;
  setSegmentCount(segmentCount: NSInteger): void;
  selectedSegment(): NSInteger;
  setSelectedSegment(selectedSegment: NSInteger): void;
  trackingMode(): NSSegmentSwitchTracking;
  setTrackingMode(trackingMode: NSSegmentSwitchTracking): void;
  segmentStyle(): NSSegmentStyle;
  setSegmentStyle(segmentStyle: NSSegmentStyle): void;
}

declare class NSSegmentedControl extends NSControl implements INSUserInterfaceCompression {
  selectSegmentWithTag(tag: NSInteger): boolean;
  setWidth_forSegment(width: CGFloat, segment: NSInteger): void;
  widthForSegment(segment: NSInteger): CGFloat;
  setImage_forSegment(image: NSImage | null, segment: NSInteger): void;
  imageForSegment(segment: NSInteger): NSImage;
  setImageScaling_forSegment(scaling: NSImageScaling, segment: NSInteger): void;
  imageScalingForSegment(segment: NSInteger): NSImageScaling;
  setLabel_forSegment(label: NSString | string, segment: NSInteger): void;
  labelForSegment(segment: NSInteger): NSString;
  setMenu_forSegment(menu: NSMenu | null, segment: NSInteger): void;
  menuForSegment(segment: NSInteger): NSMenu;
  setSelected_forSegment(selected: boolean, segment: NSInteger): void;
  isSelectedForSegment(segment: NSInteger): boolean;
  setEnabled_forSegment(enabled: boolean, segment: NSInteger): void;
  isEnabledForSegment(segment: NSInteger): boolean;
  setToolTip_forSegment(toolTip: NSString | string | null, segment: NSInteger): void;
  toolTipForSegment(segment: NSInteger): NSString;
  setTag_forSegment(tag: NSInteger, segment: NSInteger): void;
  tagForSegment(segment: NSInteger): NSInteger;
  setShowsMenuIndicator_forSegment(showsMenuIndicator: boolean, segment: NSInteger): void;
  showsMenuIndicatorForSegment(segment: NSInteger): boolean;
  setAlignment_forSegment(alignment: NSTextAlignment, segment: NSInteger): void;
  alignmentForSegment(segment: NSInteger): NSTextAlignment;
  compressWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): void;
  minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): NSSize;
  static segmentedControlWithLabels_trackingMode_target_action(labels: NSArray<any> | any[], trackingMode: NSSegmentSwitchTracking, target: any | null, action: string | null): NSSegmentedControl;
  static segmentedControlWithImages_trackingMode_target_action(images: NSArray<any> | any[], trackingMode: NSSegmentSwitchTracking, target: any | null, action: string | null): NSSegmentedControl;
  compressWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): void;
  minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): NSSize;

  segmentCount(): NSInteger;
  setSegmentCount(segmentCount: NSInteger): void;
  selectedSegment(): NSInteger;
  setSelectedSegment(selectedSegment: NSInteger): void;
  segmentStyle(): NSSegmentStyle;
  setSegmentStyle(segmentStyle: NSSegmentStyle): void;
  springLoaded(): boolean;
  setSpringLoaded(springLoaded: boolean): void;
  trackingMode(): NSSegmentSwitchTracking;
  setTrackingMode(trackingMode: NSSegmentSwitchTracking): void;
  doubleValueForSelectedSegment(): number;
  setDoubleValueForSelectedSegment(doubleValueForSelectedSegment: number): void;
  selectedSegmentBezelColor(): NSColor;
  setSelectedSegmentBezelColor(selectedSegmentBezelColor: NSColor): void;
  indexOfSelectedItem(): NSInteger;
  setIndexOfSelectedItem(indexOfSelectedItem: NSInteger): void;
  segmentDistribution(): NSSegmentDistribution;
  setSegmentDistribution(segmentDistribution: NSSegmentDistribution): void;
  activeCompressionOptions(): NSUserInterfaceCompressionOptions;
  setActiveCompressionOptions(activeCompressionOptions: NSUserInterfaceCompressionOptions): void;
}

declare enum NSSegmentSwitchTracking {
  NSSegmentSwitchTrackingSelectOne = 0,
  NSSegmentSwitchTrackingSelectAny = 1,
  NSSegmentSwitchTrackingMomentary = 2,
  NSSegmentSwitchTrackingMomentaryAccelerator = 3,
}

declare enum NSSegmentStyle {
  NSSegmentStyleAutomatic = 0,
  NSSegmentStyleRounded = 1,
  NSSegmentStyleRoundRect = 3,
  NSSegmentStyleTexturedSquare = 4,
  NSSegmentStyleSmallSquare = 6,
  NSSegmentStyleSeparated = 8,
  NSSegmentStyleTexturedRounded = 2,
  NSSegmentStyleCapsule = 5,
}

declare enum NSSegmentDistribution {
  NSSegmentDistributionFit = 0,
  NSSegmentDistributionFill,
  NSSegmentDistributionFillEqually,
  NSSegmentDistributionFillProportionally,
}

declare class NSShadow extends NSObject implements INSCopying, INSCoding {
  init<T extends NSShadow>(): T;
  set(): void;
  static shadowWithColor_offset_blur(color: NSColor, offset: NSSize, blur: CGFloat): NSShadow;
  static clearShadow(): void;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSShadow>(aDecoder: NSCoder): T;

  shadowOffset(): NSSize;
  setShadowOffset(shadowOffset: NSSize): void;
  shadowBlurRadius(): CGFloat;
  setShadowBlurRadius(shadowBlurRadius: CGFloat): void;
  shadowColor(): NSColor;
  setShadowColor(shadowColor: NSColor): void;
}

declare class NSSharingService extends NSObject {
  static sharingServicesForItems(items: NSArray<any> | any[]): NSArray<any>;
  static sharingServiceNamed(serviceName: NSSharingServiceName): NSSharingService;
  initWithTitle_image_alternateImage_handler<T extends NSSharingService>(title: NSString | string, image: NSImage, alternateImage: NSImage | null, block: Block): T;
  canPerformWithItems(items: NSArray<any> | any[] | null): boolean;
  performWithItems(items: NSArray<any> | any[]): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  alternateImage(): NSImage;
  setAlternateImage(alternateImage: NSImage): void;
  menuItemTitle(): NSString;
  setMenuItemTitle(menuItemTitle: NSString | string): void;
  recipients(): NSArray<any>;
  setRecipients(recipients: NSArray<any> | any[]): void;
  subject(): NSString;
  setSubject(subject: NSString | string): void;
  messageBody(): NSString;
  setMessageBody(messageBody: NSString | string): void;
  permanentLink(): NSURL;
  setPermanentLink(permanentLink: NSURL): void;
  accountName(): NSString;
  setAccountName(accountName: NSString | string): void;
  attachmentFileURLs(): NSArray<any>;
  setAttachmentFileURLs(attachmentFileURLs: NSArray<any> | any[]): void;
}

declare class NSSharingServicePicker extends NSObject {
  initWithItems<T extends NSSharingServicePicker>(items: NSArray<any> | any[]): T;
  showRelativeToRect_ofView_preferredEdge(rect: NSRect, view: NSView, preferredEdge: NSRectEdge): void;

  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface INSSharingServiceDelegate {
  sharingService_willShareItems(sharingService: NSSharingService, items: NSArray<any> | any[]): void;
  sharingService_didFailToShareItems_error(sharingService: NSSharingService, items: NSArray<any> | any[], error: NSError): void;
  sharingService_didShareItems(sharingService: NSSharingService, items: NSArray<any> | any[]): void;
  sharingService_sourceFrameOnScreenForShareItem(sharingService: NSSharingService, item: any): NSRect;
  sharingService_transitionImageForShareItem_contentRect(sharingService: NSSharingService, item: any, contentRect: NSRect): NSImage;
  sharingService_sourceWindowForShareItems_sharingContentScope(sharingService: NSSharingService, items: NSArray<any> | any[], sharingContentScope: NSSharingContentScope): NSWindow;
  anchoringViewForSharingService_showRelativeToRect_preferredEdge(sharingService: NSSharingService, positioningRect: NSRect, preferredEdge: NSRectEdge): NSView;
}

declare interface INSCloudSharingServiceDelegate {
  sharingService_didCompleteForItems_error(sharingService: NSSharingService, items: NSArray<any> | any[], error: NSError | null): void;
  optionsForSharingService_shareProvider(cloudKitSharingService: NSSharingService, provider: NSItemProvider): NSCloudKitSharingServiceOptions;
  sharingService_didSaveShare(sharingService: NSSharingService, share: CKShare): void;
  sharingService_didStopSharing(sharingService: NSSharingService, share: CKShare): void;
}

declare interface INSSharingServicePickerDelegate {
  sharingServicePicker_sharingServicesForItems_proposedSharingServices(sharingServicePicker: NSSharingServicePicker, items: NSArray<any> | any[], proposedServices: NSArray<any> | any[]): NSArray<any>;
  sharingServicePicker_delegateForSharingService(sharingServicePicker: NSSharingServicePicker, sharingService: NSSharingService): any;
  sharingServicePicker_didChooseSharingService(sharingServicePicker: NSSharingServicePicker, service: NSSharingService | null): void;
}

declare type NSSharingServiceName = NSString

declare enum NSSharingContentScope {
  NSSharingContentScopeItem,
  NSSharingContentScopePartial,
  NSSharingContentScopeFull,
}

declare enum NSCloudKitSharingServiceOptions {
  NSCloudKitSharingServiceStandard = 0,
  NSCloudKitSharingServiceAllowPublic = 1 << 0,
  NSCloudKitSharingServiceAllowPrivate = 1 << 1,
  NSCloudKitSharingServiceAllowReadOnly = 1 << 4,
  NSCloudKitSharingServiceAllowReadWrite = 1 << 5,
}

declare class NSSharingServicePickerTouchBarItem extends NSTouchBarItem {
  delegate(): any;
  setDelegate(delegate: any): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  buttonTitle(): NSString;
  setButtonTitle(buttonTitle: NSString | string): void;
  buttonImage(): NSImage;
  setButtonImage(buttonImage: NSImage): void;
}

declare interface INSSharingServicePickerTouchBarItemDelegate {
  itemsForSharingServicePickerTouchBarItem(pickerTouchBarItem: NSSharingServicePickerTouchBarItem): NSArray<any>;
}

declare class NSSimpleHorizontalTypesetter extends NSTypesetter {
  static sharedInstance(): any;
  currentLayoutManager(): NSLayoutManager;
  currentContainer(): NSTextContainer;
  currentParagraphStyle(): NSParagraphStyle;
  currentTextStorage(): NSTextStorage;
  baseOfTypesetterGlyphInfo(): NSTypesetterGlyphInfo;
  sizeOfTypesetterGlyphInfo(): NSUInteger;
  capacityOfTypesetterGlyphInfo(): NSUInteger;
  firstGlyphIndexOfCurrentLineFragment(): NSUInteger;
  layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex(layoutManager: NSLayoutManager, startGlyphIndex: NSUInteger, maxNumLines: NSUInteger, nextGlyph: NSUInteger): void;
  layoutGlyphsInHorizontalLineFragment_baseline(lineFragmentRect: NSRect, baseline: number): NSLayoutStatus;
  clearGlyphCache(): void;
  fillAttributesCache(): void;
  clearAttributesCache(): void;
  growGlyphCaches_fillGlyphInfo(desiredCapacity: NSUInteger, fillGlyphInfo: boolean): NSUInteger;
  updateCurGlyphOffset(): void;
  insertGlyph_atGlyphIndex_characterIndex(glyph: NSGlyph, glyphIndex: NSUInteger, charIndex: NSUInteger): void;
  layoutControlGlyphForLineFragment(lineFrag: NSRect): NSLayoutStatus;
  layoutTab(): void;
  breakLineAtIndex(location: NSUInteger): void;
  glyphIndexToBreakLineByHyphenatingWordAtIndex(charIndex: NSUInteger): NSUInteger;
  glyphIndexToBreakLineByWordWrappingAtIndex(charIndex: NSUInteger): NSUInteger;
  fullJustifyLineAtGlyphIndex(glyphIndexForLineBreak: NSUInteger): void;
  typesetterLaidOneGlyph(gl: NSTypesetterGlyphInfo): void;
  willSetLineFragmentRect_forGlyphRange_usedRect(rect: NSRect, range: NSRange, bRect: NSRect): void;
}

declare enum NSLayoutStatus {
  NSLayoutNotDone = 0,
  NSLayoutDone,
  NSLayoutCantFit,
  NSLayoutOutOfGlyphs,
}

declare enum NSGlyphLayoutMode {
  NSGlyphLayoutAtAPoint = 0,
  NSGlyphLayoutAgainstAPoint,
  NSGlyphLayoutWithPrevious,
}

declare enum NSLayoutDirection {
  NSLayoutLeftToRight = 0,
  NSLayoutRightToLeft,
}

declare class NSSlider extends NSControl implements INSAccessibilitySlider {
  acceptsFirstMouse(event: NSEvent | null): boolean;
  tickMarkValueAtIndex(index: NSInteger): number;
  rectOfTickMarkAtIndex(index: NSInteger): NSRect;
  indexOfTickMarkAtPoint(point: NSPoint): NSInteger;
  closestTickMarkValueToValue(value: number): number;
  static sliderWithTarget_action(target: any | null, action: string | null): NSSlider;
  static sliderWithValue_minValue_maxValue_target_action(value: number, minValue: number, maxValue: number, target: any | null, action: string | null): NSSlider;
  setTitleCell(cell: NSCell): void;
  titleCell(): any;
  setTitleColor(newColor: NSColor): void;
  titleColor(): NSColor;
  setTitleFont(fontObj: NSFont): void;
  titleFont(): NSFont;
  title(): NSString;
  setTitle(string: NSString | string): void;
  setKnobThickness(thickness: CGFloat): void;
  setImage(backgroundImage: NSImage): void;
  image(): NSImage;
  accessibilityLabel(): NSString;
  accessibilityValue(): any;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformDecrement(): boolean;

  sliderType(): NSSliderType;
  setSliderType(sliderType: NSSliderType): void;
  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  altIncrementValue(): number;
  setAltIncrementValue(altIncrementValue: number): void;
  knobThickness(): CGFloat;
  setKnobThickness(knobThickness: CGFloat): void;
  vertical(): boolean;
  setVertical(vertical: boolean): void;
  trackFillColor(): NSColor;
  setTrackFillColor(trackFillColor: NSColor): void;
  numberOfTickMarks(): NSInteger;
  setNumberOfTickMarks(numberOfTickMarks: NSInteger): void;
  tickMarkPosition(): NSTickMarkPosition;
  setTickMarkPosition(tickMarkPosition: NSTickMarkPosition): void;
  allowsTickMarkValuesOnly(): boolean;
  setAllowsTickMarkValuesOnly(allowsTickMarkValuesOnly: boolean): void;
}

declare class NSSliderAccessory extends NSObject implements INSCoding, INSAccessibility, INSAccessibilityElement {
  static accessoryWithImage(image: NSImage): NSSliderAccessory;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSSliderAccessory>(aDecoder: NSCoder): T;
  accessibilityLayoutPointForScreenPoint(point: NSPoint): NSPoint;
  accessibilityLayoutSizeForScreenSize(size: NSSize): NSSize;
  accessibilityScreenPointForLayoutPoint(point: NSPoint): NSPoint;
  accessibilityScreenSizeForLayoutSize(size: NSSize): NSSize;
  accessibilityCellForColumn_row(column: NSInteger, row: NSInteger): any;
  accessibilityAttributedStringForRange(range: NSRange): NSAttributedString;
  accessibilityRangeForLine(line: NSInteger): NSRange;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityRangeForPosition(point: NSPoint): NSRange;
  accessibilityRangeForIndex(index: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;
  accessibilityRTFForRange(range: NSRange): NSData;
  accessibilityStyleRangeForIndex(index: NSInteger): NSRange;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityPerformCancel(): boolean;
  accessibilityPerformConfirm(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityPerformDelete(): boolean;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformPick(): boolean;
  accessibilityPerformPress(): boolean;
  accessibilityPerformRaise(): boolean;
  accessibilityPerformShowAlternateUI(): boolean;
  accessibilityPerformShowDefaultUI(): boolean;
  accessibilityPerformShowMenu(): boolean;
  isAccessibilitySelectorAllowed(selector: string): boolean;
  accessibilityFrame(): NSRect;
  accessibilityParent(): any;
  isAccessibilityFocused(): boolean;
  accessibilityIdentifier(): NSString;

  behavior(): NSSliderAccessoryBehavior;
  setBehavior(behavior: NSSliderAccessoryBehavior): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  accessibilityElement(): boolean;
  setAccessibilityElement(accessibilityElement: boolean): void;
  accessibilityFrame(): NSRect;
  setAccessibilityFrame(accessibilityFrame: NSRect): void;
  accessibilityFocused(): boolean;
  setAccessibilityFocused(accessibilityFocused: boolean): void;
  accessibilityActivationPoint(): NSPoint;
  setAccessibilityActivationPoint(accessibilityActivationPoint: NSPoint): void;
  accessibilityTopLevelUIElement(): any;
  setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement: any): void;
  accessibilityURL(): NSURL;
  setAccessibilityURL(accessibilityURL: NSURL): void;
  accessibilityValue(): any;
  setAccessibilityValue(accessibilityValue: any): void;
  accessibilityValueDescription(): NSString;
  setAccessibilityValueDescription(accessibilityValueDescription: NSString | string): void;
  accessibilityVisibleChildren(): NSArray<any>;
  setAccessibilityVisibleChildren(accessibilityVisibleChildren: NSArray<any> | any[]): void;
  accessibilitySubrole(): NSAccessibilitySubrole;
  setAccessibilitySubrole(accessibilitySubrole: NSAccessibilitySubrole): void;
  accessibilityTitle(): NSString;
  setAccessibilityTitle(accessibilityTitle: NSString | string): void;
  accessibilityTitleUIElement(): any;
  setAccessibilityTitleUIElement(accessibilityTitleUIElement: any): void;
  accessibilityNextContents(): NSArray<any>;
  setAccessibilityNextContents(accessibilityNextContents: NSArray<any> | any[]): void;
  accessibilityOrientation(): NSAccessibilityOrientation;
  setAccessibilityOrientation(accessibilityOrientation: NSAccessibilityOrientation): void;
  accessibilityOverflowButton(): any;
  setAccessibilityOverflowButton(accessibilityOverflowButton: any): void;
  accessibilityParent(): any;
  setAccessibilityParent(accessibilityParent: any): void;
  accessibilityPlaceholderValue(): NSString;
  setAccessibilityPlaceholderValue(accessibilityPlaceholderValue: NSString | string): void;
  accessibilityPreviousContents(): NSArray<any>;
  setAccessibilityPreviousContents(accessibilityPreviousContents: NSArray<any> | any[]): void;
  accessibilityRole(): NSAccessibilityRole;
  setAccessibilityRole(accessibilityRole: NSAccessibilityRole): void;
  accessibilityRoleDescription(): NSString;
  setAccessibilityRoleDescription(accessibilityRoleDescription: NSString | string): void;
  accessibilitySearchButton(): any;
  setAccessibilitySearchButton(accessibilitySearchButton: any): void;
  accessibilitySearchMenu(): any;
  setAccessibilitySearchMenu(accessibilitySearchMenu: any): void;
  accessibilitySelected(): boolean;
  setAccessibilitySelected(accessibilitySelected: boolean): void;
  accessibilitySelectedChildren(): NSArray<any>;
  setAccessibilitySelectedChildren(accessibilitySelectedChildren: NSArray<any> | any[]): void;
  accessibilityServesAsTitleForUIElements(): NSArray<any>;
  setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements: NSArray<any> | any[]): void;
  accessibilityShownMenu(): any;
  setAccessibilityShownMenu(accessibilityShownMenu: any): void;
  accessibilityMinValue(): any;
  setAccessibilityMinValue(accessibilityMinValue: any): void;
  accessibilityMaxValue(): any;
  setAccessibilityMaxValue(accessibilityMaxValue: any): void;
  accessibilityLinkedUIElements(): NSArray<any>;
  setAccessibilityLinkedUIElements(accessibilityLinkedUIElements: NSArray<any> | any[]): void;
  accessibilityWindow(): any;
  setAccessibilityWindow(accessibilityWindow: any): void;
  accessibilityIdentifier(): NSString;
  setAccessibilityIdentifier(accessibilityIdentifier: NSString | string): void;
  accessibilityHelp(): NSString;
  setAccessibilityHelp(accessibilityHelp: NSString | string): void;
  accessibilityFilename(): NSString;
  setAccessibilityFilename(accessibilityFilename: NSString | string): void;
  accessibilityExpanded(): boolean;
  setAccessibilityExpanded(accessibilityExpanded: boolean): void;
  accessibilityEdited(): boolean;
  setAccessibilityEdited(accessibilityEdited: boolean): void;
  accessibilityEnabled(): boolean;
  setAccessibilityEnabled(accessibilityEnabled: boolean): void;
  accessibilityChildren(): NSArray<any>;
  setAccessibilityChildren(accessibilityChildren: NSArray<any> | any[]): void;
  accessibilityChildrenInNavigationOrder(): NSArray<any>;
  setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder: NSArray<any> | any[]): void;
  accessibilityClearButton(): any;
  setAccessibilityClearButton(accessibilityClearButton: any): void;
  accessibilityCancelButton(): any;
  setAccessibilityCancelButton(accessibilityCancelButton: any): void;
  accessibilityProtectedContent(): boolean;
  setAccessibilityProtectedContent(accessibilityProtectedContent: boolean): void;
  accessibilityContents(): NSArray<any>;
  setAccessibilityContents(accessibilityContents: NSArray<any> | any[]): void;
  accessibilityLabel(): NSString;
  setAccessibilityLabel(accessibilityLabel: NSString | string): void;
  accessibilityAlternateUIVisible(): boolean;
  setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible: boolean): void;
  accessibilitySharedFocusElements(): NSArray<any>;
  setAccessibilitySharedFocusElements(accessibilitySharedFocusElements: NSArray<any> | any[]): void;
  accessibilityRequired(): boolean;
  setAccessibilityRequired(accessibilityRequired: boolean): void;
  accessibilityCustomRotors(): NSArray<any>;
  setAccessibilityCustomRotors(accessibilityCustomRotors: NSArray<any> | any[]): void;
  accessibilityApplicationFocusedUIElement(): any;
  setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement: any): void;
  accessibilityMainWindow(): any;
  setAccessibilityMainWindow(accessibilityMainWindow: any): void;
  accessibilityHidden(): boolean;
  setAccessibilityHidden(accessibilityHidden: boolean): void;
  accessibilityFrontmost(): boolean;
  setAccessibilityFrontmost(accessibilityFrontmost: boolean): void;
  accessibilityFocusedWindow(): any;
  setAccessibilityFocusedWindow(accessibilityFocusedWindow: any): void;
  accessibilityWindows(): NSArray<any>;
  setAccessibilityWindows(accessibilityWindows: NSArray<any> | any[]): void;
  accessibilityExtrasMenuBar(): any;
  setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar: any): void;
  accessibilityMenuBar(): any;
  setAccessibilityMenuBar(accessibilityMenuBar: any): void;
  accessibilityColumnTitles(): NSArray<any>;
  setAccessibilityColumnTitles(accessibilityColumnTitles: NSArray<any> | any[]): void;
  accessibilityOrderedByRow(): boolean;
  setAccessibilityOrderedByRow(accessibilityOrderedByRow: boolean): void;
  accessibilityHorizontalUnits(): NSAccessibilityUnits;
  setAccessibilityHorizontalUnits(accessibilityHorizontalUnits: NSAccessibilityUnits): void;
  accessibilityVerticalUnits(): NSAccessibilityUnits;
  setAccessibilityVerticalUnits(accessibilityVerticalUnits: NSAccessibilityUnits): void;
  accessibilityHorizontalUnitDescription(): NSString;
  setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription: NSString | string): void;
  accessibilityVerticalUnitDescription(): NSString;
  setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription: NSString | string): void;
  accessibilityHandles(): NSArray<any>;
  setAccessibilityHandles(accessibilityHandles: NSArray<any> | any[]): void;
  accessibilityWarningValue(): any;
  setAccessibilityWarningValue(accessibilityWarningValue: any): void;
  accessibilityCriticalValue(): any;
  setAccessibilityCriticalValue(accessibilityCriticalValue: any): void;
  accessibilityDisclosed(): boolean;
  setAccessibilityDisclosed(accessibilityDisclosed: boolean): void;
  accessibilityDisclosedByRow(): any;
  setAccessibilityDisclosedByRow(accessibilityDisclosedByRow: any): void;
  accessibilityDisclosedRows(): any;
  setAccessibilityDisclosedRows(accessibilityDisclosedRows: any): void;
  accessibilityDisclosureLevel(): NSInteger;
  setAccessibilityDisclosureLevel(accessibilityDisclosureLevel: NSInteger): void;
  accessibilityMarkerUIElements(): NSArray<any>;
  setAccessibilityMarkerUIElements(accessibilityMarkerUIElements: NSArray<any> | any[]): void;
  accessibilityMarkerValues(): any;
  setAccessibilityMarkerValues(accessibilityMarkerValues: any): void;
  accessibilityMarkerGroupUIElement(): any;
  setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement: any): void;
  accessibilityUnits(): NSAccessibilityUnits;
  setAccessibilityUnits(accessibilityUnits: NSAccessibilityUnits): void;
  accessibilityUnitDescription(): NSString;
  setAccessibilityUnitDescription(accessibilityUnitDescription: NSString | string): void;
  accessibilityRulerMarkerType(): NSAccessibilityRulerMarkerType;
  setAccessibilityRulerMarkerType(accessibilityRulerMarkerType: NSAccessibilityRulerMarkerType): void;
  accessibilityMarkerTypeDescription(): NSString;
  setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription: NSString | string): void;
  accessibilityHorizontalScrollBar(): any;
  setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar: any): void;
  accessibilityVerticalScrollBar(): any;
  setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar: any): void;
  accessibilityAllowedValues(): NSArray<any>;
  setAccessibilityAllowedValues(accessibilityAllowedValues: NSArray<any> | any[]): void;
  accessibilityLabelUIElements(): NSArray<any>;
  setAccessibilityLabelUIElements(accessibilityLabelUIElements: NSArray<any> | any[]): void;
  accessibilityLabelValue(): number;
  setAccessibilityLabelValue(accessibilityLabelValue: number): void;
  accessibilitySplitters(): NSArray<any>;
  setAccessibilitySplitters(accessibilitySplitters: NSArray<any> | any[]): void;
  accessibilityDecrementButton(): any;
  setAccessibilityDecrementButton(accessibilityDecrementButton: any): void;
  accessibilityIncrementButton(): any;
  setAccessibilityIncrementButton(accessibilityIncrementButton: any): void;
  accessibilityTabs(): NSArray<any>;
  setAccessibilityTabs(accessibilityTabs: NSArray<any> | any[]): void;
  accessibilityHeader(): any;
  setAccessibilityHeader(accessibilityHeader: any): void;
  accessibilityColumnCount(): NSInteger;
  setAccessibilityColumnCount(accessibilityColumnCount: NSInteger): void;
  accessibilityRowCount(): NSInteger;
  setAccessibilityRowCount(accessibilityRowCount: NSInteger): void;
  accessibilityIndex(): NSInteger;
  setAccessibilityIndex(accessibilityIndex: NSInteger): void;
  accessibilityColumns(): NSArray<any>;
  setAccessibilityColumns(accessibilityColumns: NSArray<any> | any[]): void;
  accessibilityRows(): NSArray<any>;
  setAccessibilityRows(accessibilityRows: NSArray<any> | any[]): void;
  accessibilityVisibleRows(): NSArray<any>;
  setAccessibilityVisibleRows(accessibilityVisibleRows: NSArray<any> | any[]): void;
  accessibilitySelectedRows(): NSArray<any>;
  setAccessibilitySelectedRows(accessibilitySelectedRows: NSArray<any> | any[]): void;
  accessibilityVisibleColumns(): NSArray<any>;
  setAccessibilityVisibleColumns(accessibilityVisibleColumns: NSArray<any> | any[]): void;
  accessibilitySelectedColumns(): NSArray<any>;
  setAccessibilitySelectedColumns(accessibilitySelectedColumns: NSArray<any> | any[]): void;
  accessibilitySortDirection(): NSAccessibilitySortDirection;
  setAccessibilitySortDirection(accessibilitySortDirection: NSAccessibilitySortDirection): void;
  accessibilityRowHeaderUIElements(): NSArray<any>;
  setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements: NSArray<any> | any[]): void;
  accessibilitySelectedCells(): NSArray<any>;
  setAccessibilitySelectedCells(accessibilitySelectedCells: NSArray<any> | any[]): void;
  accessibilityVisibleCells(): NSArray<any>;
  setAccessibilityVisibleCells(accessibilityVisibleCells: NSArray<any> | any[]): void;
  accessibilityColumnHeaderUIElements(): NSArray<any>;
  setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements: NSArray<any> | any[]): void;
  accessibilityRowIndexRange(): NSRange;
  setAccessibilityRowIndexRange(accessibilityRowIndexRange: NSRange): void;
  accessibilityColumnIndexRange(): NSRange;
  setAccessibilityColumnIndexRange(accessibilityColumnIndexRange: NSRange): void;
  accessibilityInsertionPointLineNumber(): NSInteger;
  setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber: NSInteger): void;
  accessibilitySharedCharacterRange(): NSRange;
  setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange: NSRange): void;
  accessibilitySharedTextUIElements(): NSArray<any>;
  setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements: NSArray<any> | any[]): void;
  accessibilityVisibleCharacterRange(): NSRange;
  setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange: NSRange): void;
  accessibilityNumberOfCharacters(): NSInteger;
  setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters: NSInteger): void;
  accessibilitySelectedText(): NSString;
  setAccessibilitySelectedText(accessibilitySelectedText: NSString | string): void;
  accessibilitySelectedTextRange(): NSRange;
  setAccessibilitySelectedTextRange(accessibilitySelectedTextRange: NSRange): void;
  accessibilitySelectedTextRanges(): NSArray<any>;
  setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges: NSArray<any> | any[]): void;
  accessibilityToolbarButton(): any;
  setAccessibilityToolbarButton(accessibilityToolbarButton: any): void;
  accessibilityModal(): boolean;
  setAccessibilityModal(accessibilityModal: boolean): void;
  accessibilityProxy(): any;
  setAccessibilityProxy(accessibilityProxy: any): void;
  accessibilityMain(): boolean;
  setAccessibilityMain(accessibilityMain: boolean): void;
  accessibilityFullScreenButton(): any;
  setAccessibilityFullScreenButton(accessibilityFullScreenButton: any): void;
  accessibilityGrowArea(): any;
  setAccessibilityGrowArea(accessibilityGrowArea: any): void;
  accessibilityDocument(): NSString;
  setAccessibilityDocument(accessibilityDocument: NSString | string): void;
  accessibilityDefaultButton(): any;
  setAccessibilityDefaultButton(accessibilityDefaultButton: any): void;
  accessibilityCloseButton(): any;
  setAccessibilityCloseButton(accessibilityCloseButton: any): void;
  accessibilityZoomButton(): any;
  setAccessibilityZoomButton(accessibilityZoomButton: any): void;
  accessibilityMinimizeButton(): any;
  setAccessibilityMinimizeButton(accessibilityMinimizeButton: any): void;
  accessibilityMinimized(): boolean;
  setAccessibilityMinimized(accessibilityMinimized: boolean): void;
  accessibilityCustomActions(): NSArray<any>;
  setAccessibilityCustomActions(accessibilityCustomActions: NSArray<any> | any[]): void;
}

declare class NSSliderAccessoryBehavior extends NSObject implements INSCoding, INSCopying {
  static behaviorWithTarget_action(target: any | null, action: string): NSSliderAccessoryBehavior;
  static behaviorWithHandler(handler: Block): NSSliderAccessoryBehavior;
  handleAction(sender: NSSliderAccessory): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSSliderAccessoryBehavior>(aDecoder: NSCoder): T;
  copyWithZone(zone: NSZone | null): any;

  static automaticBehavior(): NSSliderAccessoryBehavior;
  static setAutomaticBehavior(automaticBehavior: NSSliderAccessoryBehavior): void;
  static valueStepBehavior(): NSSliderAccessoryBehavior;
  static setValueStepBehavior(valueStepBehavior: NSSliderAccessoryBehavior): void;
  static valueResetBehavior(): NSSliderAccessoryBehavior;
  static setValueResetBehavior(valueResetBehavior: NSSliderAccessoryBehavior): void;
}

declare class NSSliderCell extends NSActionCell {
  knobRectFlipped(flipped: boolean): NSRect;
  barRectFlipped(flipped: boolean): NSRect;
  drawKnob(knobRect: NSRect): void;
  drawKnob(): void;
  drawBarInside_flipped(rect: NSRect, flipped: boolean): void;
  tickMarkValueAtIndex(index: NSInteger): number;
  rectOfTickMarkAtIndex(index: NSInteger): NSRect;
  indexOfTickMarkAtPoint(point: NSPoint): NSInteger;
  closestTickMarkValueToValue(value: number): number;
  drawTickMarks(): void;
  setTitleColor(newColor: NSColor): void;
  titleColor(): NSColor;
  setTitleFont(fontObj: NSFont): void;
  titleFont(): NSFont;
  title(): NSString;
  setTitle(string: NSString | string): void;
  setTitleCell(cell: NSCell): void;
  titleCell(): any;
  setKnobThickness(thickness: CGFloat): void;

  static prefersTrackingUntilMouseUp(): boolean;
  static setPrefersTrackingUntilMouseUp(prefersTrackingUntilMouseUp: boolean): void;
  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  altIncrementValue(): number;
  setAltIncrementValue(altIncrementValue: number): void;
  sliderType(): NSSliderType;
  setSliderType(sliderType: NSSliderType): void;
  vertical(): boolean;
  setVertical(vertical: boolean): void;
  trackRect(): NSRect;
  setTrackRect(trackRect: NSRect): void;
  knobThickness(): CGFloat;
  setKnobThickness(knobThickness: CGFloat): void;
  numberOfTickMarks(): NSInteger;
  setNumberOfTickMarks(numberOfTickMarks: NSInteger): void;
  tickMarkPosition(): NSTickMarkPosition;
  setTickMarkPosition(tickMarkPosition: NSTickMarkPosition): void;
  allowsTickMarkValuesOnly(): boolean;
  setAllowsTickMarkValuesOnly(allowsTickMarkValuesOnly: boolean): void;
}

declare enum NSTickMarkPosition {
  NSTickMarkPositionBelow = 0,
  NSTickMarkPositionAbove = 1,
  NSTickMarkPositionLeading,
  NSTickMarkPositionTrailing,
}

declare enum NSSliderType {
  NSSliderTypeLinear = 0,
  NSSliderTypeCircular = 1,
}

declare class NSSliderTouchBarItem extends NSTouchBarItem {
  view(): NSView;
  setView(view: NSView): void;
  slider(): NSSlider;
  setSlider(slider: NSSlider): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  minimumValueAccessory(): NSSliderAccessory;
  setMinimumValueAccessory(minimumValueAccessory: NSSliderAccessory): void;
  maximumValueAccessory(): NSSliderAccessory;
  setMaximumValueAccessory(maximumValueAccessory: NSSliderAccessory): void;
  valueAccessoryWidth(): NSSliderAccessoryWidth;
  setValueAccessoryWidth(valueAccessoryWidth: NSSliderAccessoryWidth): void;
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
}

declare type NSSliderAccessoryWidth = CGFloat

declare class NSSound extends NSObject implements INSCopying, INSCoding, INSPasteboardReading, INSPasteboardWriting {
  static soundNamed(name: NSSoundName): NSSound;
  initWithContentsOfURL_byReference<T extends NSSound>(url: NSURL, byRef: boolean): T;
  initWithContentsOfFile_byReference<T extends NSSound>(path: NSString | string, byRef: boolean): T;
  initWithData<T extends NSSound>(data: NSData): T;
  setName(string: NSSoundName | null): boolean;
  static canInitWithPasteboard(pasteboard: NSPasteboard): boolean;
  initWithPasteboard<T extends NSSound>(pasteboard: NSPasteboard): T;
  writeToPasteboard(pasteboard: NSPasteboard): void;
  play(): boolean;
  pause(): boolean;
  resume(): boolean;
  stop(): boolean;
  setChannelMapping(channelMapping: NSArray<any> | any[]): void;
  channelMapping(): NSArray<any>;
  static soundUnfilteredFileTypes(): NSArray<any>;
  static soundUnfilteredPasteboardTypes(): NSArray<any>;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSSound>(aDecoder: NSCoder): T;
  static readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  initWithPasteboardPropertyList_ofType<T extends NSSound>(propertyList: any, type: NSPasteboardType): T;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;

  name(): NSSoundName;
  setName(name: NSSoundName): void;
  static soundUnfilteredTypes(): NSArray<any>;
  static setSoundUnfilteredTypes(soundUnfilteredTypes: NSArray<any> | any[]): void;
  playing(): boolean;
  setPlaying(playing: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  duration(): NSTimeInterval;
  setDuration(duration: NSTimeInterval): void;
  volume(): number;
  setVolume(volume: number): void;
  currentTime(): NSTimeInterval;
  setCurrentTime(currentTime: NSTimeInterval): void;
  loops(): boolean;
  setLoops(loops: boolean): void;
  playbackDeviceIdentifier(): NSSoundPlaybackDeviceIdentifier;
  setPlaybackDeviceIdentifier(playbackDeviceIdentifier: NSSoundPlaybackDeviceIdentifier): void;
}

declare interface INSSoundDelegate {
  sound_didFinishPlaying(sound: NSSound, flag: boolean): void;
}

declare type NSSoundName = NSString

declare type NSSoundPlaybackDeviceIdentifier = NSString

declare class NSSpeechRecognizer extends NSObject {
  init<T extends NSSpeechRecognizer>(): T;
  startListening(): void;
  stopListening(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  commands(): NSArray<any>;
  setCommands(commands: NSArray<any> | any[]): void;
  displayedCommandsTitle(): NSString;
  setDisplayedCommandsTitle(displayedCommandsTitle: NSString | string): void;
  listensInForegroundOnly(): boolean;
  setListensInForegroundOnly(listensInForegroundOnly: boolean): void;
  blocksOtherRecognizers(): boolean;
  setBlocksOtherRecognizers(blocksOtherRecognizers: boolean): void;
}

declare interface INSSpeechRecognizerDelegate {
  speechRecognizer_didRecognizeCommand(sender: NSSpeechRecognizer, command: NSString | string): void;
}

declare class NSSpeechSynthesizer extends NSObject {
  initWithVoice<T extends NSSpeechSynthesizer>(voice: NSSpeechSynthesizerVoiceName | null): T;
  startSpeakingString(string: NSString | string): boolean;
  startSpeakingString_toURL(string: NSString | string, url: NSURL): boolean;
  stopSpeaking(): void;
  stopSpeakingAtBoundary(boundary: NSSpeechBoundary): void;
  pauseSpeakingAtBoundary(boundary: NSSpeechBoundary): void;
  continueSpeaking(): void;
  voice(): NSSpeechSynthesizerVoiceName;
  setVoice(voice: NSSpeechSynthesizerVoiceName | null): boolean;
  addSpeechDictionary(speechDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  phonemesFromText(text: NSString | string): NSString;
  objectForProperty_error(property: NSSpeechPropertyKey, outError: NSError): any;
  setObject_forProperty_error(object: any | null, property: NSSpeechPropertyKey, outError: NSError): boolean;
  static attributesForVoice(voice: NSSpeechSynthesizerVoiceName): NSDictionary<any, any>;

  speaking(): boolean;
  setSpeaking(speaking: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  rate(): number;
  setRate(rate: number): void;
  volume(): number;
  setVolume(volume: number): void;
  usesFeedbackWindow(): boolean;
  setUsesFeedbackWindow(usesFeedbackWindow: boolean): void;
  static anyApplicationSpeaking(): boolean;
  static setAnyApplicationSpeaking(anyApplicationSpeaking: boolean): void;
  static defaultVoice(): NSSpeechSynthesizerVoiceName;
  static setDefaultVoice(defaultVoice: NSSpeechSynthesizerVoiceName): void;
  static availableVoices(): NSArray<any>;
  static setAvailableVoices(availableVoices: NSArray<any> | any[]): void;
}

declare interface INSSpeechSynthesizerDelegate {
  speechSynthesizer_didFinishSpeaking(sender: NSSpeechSynthesizer, finishedSpeaking: boolean): void;
  speechSynthesizer_willSpeakWord_ofString(sender: NSSpeechSynthesizer, characterRange: NSRange, string: NSString | string): void;
  speechSynthesizer_willSpeakPhoneme(sender: NSSpeechSynthesizer, phonemeOpcode: number): void;
  speechSynthesizer_didEncounterErrorAtIndex_ofString_message(sender: NSSpeechSynthesizer, characterIndex: NSUInteger, string: NSString | string, message: NSString | string): void;
  speechSynthesizer_didEncounterSyncMessage(sender: NSSpeechSynthesizer, message: NSString | string): void;
}

declare type NSSpeechSynthesizerVoiceName = NSString

declare type NSVoiceAttributeKey = NSString

declare type NSSpeechDictionaryKey = NSString

declare type NSVoiceGenderName = NSString

declare type NSSpeechPropertyKey = NSString

declare type NSSpeechMode = NSString

declare type NSSpeechStatusKey = NSString

declare type NSSpeechErrorKey = NSString

declare type NSSpeechSynthesizerInfoKey = NSString

declare type NSSpeechPhonemeInfoKey = NSString

declare type NSSpeechCommandDelimiterKey = NSString

declare enum NSSpeechBoundary {
  NSSpeechImmediateBoundary = 0,
  NSSpeechWordBoundary,
  NSSpeechSentenceBoundary,
}

declare class NSSpellChecker extends NSObject {
  static uniqueSpellDocumentTag(): NSInteger;
  checkSpellingOfString_startingAt_language_wrap_inSpellDocumentWithTag_wordCount(stringToCheck: NSString | string, startingOffset: NSInteger, language: NSString | string | null, wrapFlag: boolean, tag: NSInteger, wordCount: NSInteger | null): NSRange;
  checkSpellingOfString_startingAt(stringToCheck: NSString | string, startingOffset: NSInteger): NSRange;
  countWordsInString_language(stringToCount: NSString | string, language: NSString | string | null): NSInteger;
  checkGrammarOfString_startingAt_language_wrap_inSpellDocumentWithTag_details(stringToCheck: NSString | string, startingOffset: NSInteger, language: NSString | string | null, wrapFlag: boolean, tag: NSInteger, details: NSArray<any> | any[]): NSRange;
  checkString_range_types_options_inSpellDocumentWithTag_orthography_wordCount(stringToCheck: NSString | string, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any} | null, tag: NSInteger, orthography: NSOrthography, wordCount: NSInteger | null): NSArray<any>;
  requestCheckingOfString_range_types_options_inSpellDocumentWithTag_completionHandler(stringToCheck: NSString | string, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any} | null, tag: NSInteger, completionHandler: Block): NSInteger;
  requestCandidatesForSelectedRange_inString_types_options_inSpellDocumentWithTag_completionHandler(selectedRange: NSRange, stringToCheck: NSString | string, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any} | null, tag: NSInteger, completionHandler: Block): NSInteger;
  menuForResult_string_options_atLocation_inView(result: NSTextCheckingResult, checkedString: NSString | string, options: NSDictionary<any, any> | {[key: string]: any} | null, location: NSPoint, view: NSView): NSMenu;
  userQuotesArrayForLanguage(language: NSString | string): NSArray<any>;
  updateSpellingPanelWithMisspelledWord(word: NSString | string): void;
  updateSpellingPanelWithGrammarString_detail(string: NSString | string, detail: NSDictionary<any, any> | {[key: string]: any}): void;
  updatePanels(): void;
  ignoreWord_inSpellDocumentWithTag(wordToIgnore: NSString | string, tag: NSInteger): void;
  ignoredWordsInSpellDocumentWithTag(tag: NSInteger): NSArray<any>;
  setIgnoredWords_inSpellDocumentWithTag(words: NSArray<any> | any[], tag: NSInteger): void;
  guessesForWordRange_inString_language_inSpellDocumentWithTag(range: NSRange, string: NSString | string, language: NSString | string | null, tag: NSInteger): NSArray<any>;
  correctionForWordRange_inString_language_inSpellDocumentWithTag(range: NSRange, string: NSString | string, language: NSString | string, tag: NSInteger): NSString;
  completionsForPartialWordRange_inString_language_inSpellDocumentWithTag(range: NSRange, string: NSString | string, language: NSString | string | null, tag: NSInteger): NSArray<any>;
  languageForWordRange_inString_orthography(range: NSRange, string: NSString | string, orthography: NSOrthography | null): NSString;
  closeSpellDocumentWithTag(tag: NSInteger): void;
  recordResponse_toCorrection_forWord_language_inSpellDocumentWithTag(response: NSCorrectionResponse, correction: NSString | string, word: NSString | string, language: NSString | string | null, tag: NSInteger): void;
  showCorrectionIndicatorOfType_primaryString_alternativeStrings_forStringInRect_view_completionHandler(type: NSCorrectionIndicatorType, primaryString: NSString | string, alternativeStrings: NSArray<any> | any[], rectOfTypedString: NSRect, view: NSView, completionBlock: Block): void;
  dismissCorrectionIndicatorForView(view: NSView): void;
  preventsAutocorrectionBeforeString_language(string: NSString | string, language: NSString | string | null): boolean;
  deletesAutospaceBetweenString_andString_language(precedingString: NSString | string, followingString: NSString | string, language: NSString | string | null): boolean;
  setWordFieldStringValue(string: NSString | string): void;
  learnWord(word: NSString | string): void;
  hasLearnedWord(word: NSString | string): boolean;
  unlearnWord(word: NSString | string): void;
  language(): NSString;
  setLanguage(language: NSString | string): boolean;
  guessesForWord(word: NSString | string): NSArray<any>;
  forgetWord(word: NSString | string): void;

  static sharedSpellChecker(): NSSpellChecker;
  static setSharedSpellChecker(sharedSpellChecker: NSSpellChecker): void;
  static sharedSpellCheckerExists(): boolean;
  static setSharedSpellCheckerExists(sharedSpellCheckerExists: boolean): void;
  userReplacementsDictionary(): NSDictionary<any, any>;
  setUserReplacementsDictionary(userReplacementsDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  spellingPanel(): NSPanel;
  setSpellingPanel(spellingPanel: NSPanel): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
  substitutionsPanel(): NSPanel;
  setSubstitutionsPanel(substitutionsPanel: NSPanel): void;
  substitutionsPanelAccessoryViewController(): NSViewController;
  setSubstitutionsPanelAccessoryViewController(substitutionsPanelAccessoryViewController: NSViewController): void;
  availableLanguages(): NSArray<any>;
  setAvailableLanguages(availableLanguages: NSArray<any> | any[]): void;
  userPreferredLanguages(): NSArray<any>;
  setUserPreferredLanguages(userPreferredLanguages: NSArray<any> | any[]): void;
  automaticallyIdentifiesLanguages(): boolean;
  setAutomaticallyIdentifiesLanguages(automaticallyIdentifiesLanguages: boolean): void;
  static automaticTextReplacementEnabled(): boolean;
  static setAutomaticTextReplacementEnabled(automaticTextReplacementEnabled: boolean): void;
  static automaticSpellingCorrectionEnabled(): boolean;
  static setAutomaticSpellingCorrectionEnabled(automaticSpellingCorrectionEnabled: boolean): void;
  static automaticQuoteSubstitutionEnabled(): boolean;
  static setAutomaticQuoteSubstitutionEnabled(automaticQuoteSubstitutionEnabled: boolean): void;
  static automaticDashSubstitutionEnabled(): boolean;
  static setAutomaticDashSubstitutionEnabled(automaticDashSubstitutionEnabled: boolean): void;
  static automaticCapitalizationEnabled(): boolean;
  static setAutomaticCapitalizationEnabled(automaticCapitalizationEnabled: boolean): void;
  static automaticPeriodSubstitutionEnabled(): boolean;
  static setAutomaticPeriodSubstitutionEnabled(automaticPeriodSubstitutionEnabled: boolean): void;
  static automaticTextCompletionEnabled(): boolean;
  static setAutomaticTextCompletionEnabled(automaticTextCompletionEnabled: boolean): void;
}

declare type NSTextCheckingOptionKey = NSString

declare enum NSCorrectionResponse {
  NSCorrectionResponseNone,
  NSCorrectionResponseAccepted,
  NSCorrectionResponseRejected,
  NSCorrectionResponseIgnored,
  NSCorrectionResponseEdited,
  NSCorrectionResponseReverted,
}

declare enum NSCorrectionIndicatorType {
  NSCorrectionIndicatorTypeDefault = 0,
  NSCorrectionIndicatorTypeReversion,
  NSCorrectionIndicatorTypeGuesses,
}

declare interface INSChangeSpelling {
  changeSpelling(sender: any | null): void;
}

declare interface INSIgnoreMisspelledWords {
  ignoreSpelling(sender: any | null): void;
}

declare class NSSplitView extends NSView {
  drawDividerInRect(rect: NSRect): void;
  adjustSubviews(): void;
  isSubviewCollapsed(subview: NSView): boolean;
  minPossiblePositionOfDividerAtIndex(dividerIndex: NSInteger): CGFloat;
  maxPossiblePositionOfDividerAtIndex(dividerIndex: NSInteger): CGFloat;
  setPosition_ofDividerAtIndex(position: CGFloat, dividerIndex: NSInteger): void;
  holdingPriorityForSubviewAtIndex(subviewIndex: NSInteger): NSLayoutPriority;
  setHoldingPriority_forSubviewAtIndex(priority: NSLayoutPriority, subviewIndex: NSInteger): void;
  addArrangedSubview(view: NSView): void;
  insertArrangedSubview_atIndex(view: NSView, index: NSInteger): void;
  removeArrangedSubview(view: NSView): void;
  setIsPaneSplitter(flag: boolean): void;
  isPaneSplitter(): boolean;

  vertical(): boolean;
  setVertical(vertical: boolean): void;
  dividerStyle(): NSSplitViewDividerStyle;
  setDividerStyle(dividerStyle: NSSplitViewDividerStyle): void;
  autosaveName(): NSSplitViewAutosaveName;
  setAutosaveName(autosaveName: NSSplitViewAutosaveName): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  dividerColor(): NSColor;
  setDividerColor(dividerColor: NSColor): void;
  dividerThickness(): CGFloat;
  setDividerThickness(dividerThickness: CGFloat): void;
  arrangesAllSubviews(): boolean;
  setArrangesAllSubviews(arrangesAllSubviews: boolean): void;
  arrangedSubviews(): NSArray<any>;
  setArrangedSubviews(arrangedSubviews: NSArray<any> | any[]): void;
}

declare interface INSSplitViewDelegate {
  splitView_canCollapseSubview(splitView: NSSplitView, subview: NSView): boolean;
  splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(splitView: NSSplitView, subview: NSView, dividerIndex: NSInteger): boolean;
  splitView_constrainMinCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMinimumPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_constrainMaxCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMaximumPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_constrainSplitPosition_ofSubviewAt(splitView: NSSplitView, proposedPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_resizeSubviewsWithOldSize(splitView: NSSplitView, oldSize: NSSize): void;
  splitView_shouldAdjustSizeOfSubview(splitView: NSSplitView, view: NSView): boolean;
  splitView_shouldHideDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger): boolean;
  splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(splitView: NSSplitView, proposedEffectiveRect: NSRect, drawnRect: NSRect, dividerIndex: NSInteger): NSRect;
  splitView_additionalEffectiveRectOfDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger): NSRect;
  splitViewWillResizeSubviews(notification: NSNotification): void;
  splitViewDidResizeSubviews(notification: NSNotification): void;
}

declare type NSSplitViewAutosaveName = NSString

declare enum NSSplitViewDividerStyle {
  NSSplitViewDividerStyleThick = 1,
  NSSplitViewDividerStyleThin = 2,
  NSSplitViewDividerStylePaneSplitter = 3,
}

declare class NSSplitViewController extends NSViewController implements INSSplitViewDelegate, INSUserInterfaceValidations {
  addSplitViewItem(splitViewItem: NSSplitViewItem): void;
  insertSplitViewItem_atIndex(splitViewItem: NSSplitViewItem, index: NSInteger): void;
  removeSplitViewItem(splitViewItem: NSSplitViewItem): void;
  splitViewItemForViewController(viewController: NSViewController): NSSplitViewItem;
  validateUserInterfaceItem(item: any): boolean;
  toggleSidebar(sender: any | null): IBAction;
  splitView_canCollapseSubview(splitView: NSSplitView, subview: NSView): boolean;
  splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(splitView: NSSplitView, subview: NSView, dividerIndex: NSInteger): boolean;
  splitView_constrainMinCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMinimumPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_constrainMaxCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMaximumPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_constrainSplitPosition_ofSubviewAt(splitView: NSSplitView, proposedPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_resizeSubviewsWithOldSize(splitView: NSSplitView, oldSize: NSSize): void;
  splitView_shouldAdjustSizeOfSubview(splitView: NSSplitView, view: NSView): boolean;
  splitView_shouldHideDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger): boolean;
  splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(splitView: NSSplitView, proposedEffectiveRect: NSRect, drawnRect: NSRect, dividerIndex: NSInteger): NSRect;
  splitView_additionalEffectiveRectOfDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger): NSRect;
  splitViewWillResizeSubviews(notification: NSNotification): void;
  splitViewDidResizeSubviews(notification: NSNotification): void;
  validateUserInterfaceItem(item: any): boolean;

  splitView(): NSSplitView;
  setSplitView(splitView: NSSplitView): void;
  splitViewItems(): NSArray<any>;
  setSplitViewItems(splitViewItems: NSArray<any> | any[]): void;
  minimumThicknessForInlineSidebars(): CGFloat;
  setMinimumThicknessForInlineSidebars(minimumThicknessForInlineSidebars: CGFloat): void;
}

declare class NSSplitViewItem extends NSObject implements INSAnimatablePropertyContainer, INSCoding {
  static splitViewItemWithViewController(viewController: NSViewController): NSSplitViewItem;
  static sidebarWithViewController(viewController: NSViewController): NSSplitViewItem;
  static contentListWithViewController(viewController: NSViewController): NSSplitViewItem;
  animator(): NSSplitViewItem;
  animationForKey(key: NSAnimatablePropertyKey): any;
  static defaultAnimationForKey(key: NSAnimatablePropertyKey): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSSplitViewItem>(aDecoder: NSCoder): T;

  behavior(): NSSplitViewItemBehavior;
  setBehavior(behavior: NSSplitViewItemBehavior): void;
  viewController(): NSViewController;
  setViewController(viewController: NSViewController): void;
  collapsed(): boolean;
  setCollapsed(collapsed: boolean): void;
  canCollapse(): boolean;
  setCanCollapse(canCollapse: boolean): void;
  collapseBehavior(): NSSplitViewItemCollapseBehavior;
  setCollapseBehavior(collapseBehavior: NSSplitViewItemCollapseBehavior): void;
  minimumThickness(): CGFloat;
  setMinimumThickness(minimumThickness: CGFloat): void;
  maximumThickness(): CGFloat;
  setMaximumThickness(maximumThickness: CGFloat): void;
  preferredThicknessFraction(): CGFloat;
  setPreferredThicknessFraction(preferredThicknessFraction: CGFloat): void;
  holdingPriority(): NSLayoutPriority;
  setHoldingPriority(holdingPriority: NSLayoutPriority): void;
  automaticMaximumThickness(): CGFloat;
  setAutomaticMaximumThickness(automaticMaximumThickness: CGFloat): void;
  springLoaded(): boolean;
  setSpringLoaded(springLoaded: boolean): void;
  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare enum NSSplitViewItemBehavior {
  NSSplitViewItemBehaviorDefault,
  NSSplitViewItemBehaviorSidebar,
  NSSplitViewItemBehaviorContentList,
}

declare enum NSSplitViewItemCollapseBehavior {
  NSSplitViewItemCollapseBehaviorDefault,
  NSSplitViewItemCollapseBehaviorPreferResizingSplitViewWithFixedSiblings,
  NSSplitViewItemCollapseBehaviorPreferResizingSiblingsWithFixedSplitView,
  NSSplitViewItemCollapseBehaviorUseConstraints,
}

declare class NSStackView extends NSView {
  static stackViewWithViews(views: NSArray<any> | any[]): NSStackView;
  setCustomSpacing_afterView(spacing: CGFloat, view: NSView): void;
  customSpacingAfterView(view: NSView): CGFloat;
  addArrangedSubview(view: NSView): void;
  insertArrangedSubview_atIndex(view: NSView, index: NSInteger): void;
  removeArrangedSubview(view: NSView): void;
  setVisibilityPriority_forView(priority: NSStackViewVisibilityPriority, view: NSView): void;
  visibilityPriorityForView(view: NSView): NSStackViewVisibilityPriority;
  clippingResistancePriorityForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutPriority;
  setClippingResistancePriority_forOrientation(clippingResistancePriority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation): void;
  huggingPriorityForOrientation(orientation: NSLayoutConstraintOrientation): NSLayoutPriority;
  setHuggingPriority_forOrientation(huggingPriority: NSLayoutPriority, orientation: NSLayoutConstraintOrientation): void;
  addView_inGravity(view: NSView, gravity: NSStackViewGravity): void;
  insertView_atIndex_inGravity(view: NSView, index: NSUInteger, gravity: NSStackViewGravity): void;
  removeView(view: NSView): void;
  viewsInGravity(gravity: NSStackViewGravity): NSArray<any>;
  setViews_inGravity(views: NSArray<any> | any[], gravity: NSStackViewGravity): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  orientation(): NSUserInterfaceLayoutOrientation;
  setOrientation(orientation: NSUserInterfaceLayoutOrientation): void;
  alignment(): NSLayoutAttribute;
  setAlignment(alignment: NSLayoutAttribute): void;
  edgeInsets(): NSEdgeInsets;
  setEdgeInsets(edgeInsets: NSEdgeInsets): void;
  distribution(): NSStackViewDistribution;
  setDistribution(distribution: NSStackViewDistribution): void;
  spacing(): CGFloat;
  setSpacing(spacing: CGFloat): void;
  detachesHiddenViews(): boolean;
  setDetachesHiddenViews(detachesHiddenViews: boolean): void;
  arrangedSubviews(): NSArray<any>;
  setArrangedSubviews(arrangedSubviews: NSArray<any> | any[]): void;
  detachedViews(): NSArray<any>;
  setDetachedViews(detachedViews: NSArray<any> | any[]): void;
  views(): NSArray<any>;
  setViews(views: NSArray<any> | any[]): void;
  hasEqualSpacing(): boolean;
  setHasEqualSpacing(hasEqualSpacing: boolean): void;
}

declare interface INSStackViewDelegate {
  stackView_willDetachViews(stackView: NSStackView, views: NSArray<any> | any[]): void;
  stackView_didReattachViews(stackView: NSStackView, views: NSArray<any> | any[]): void;
}

declare type NSStackViewVisibilityPriority = number

declare enum NSStackViewGravity {
  NSStackViewGravityTop = 1,
  NSStackViewGravityLeading = 1,
  NSStackViewGravityCenter = 2,
  NSStackViewGravityBottom = 3,
  NSStackViewGravityTrailing = 3,
}

declare enum NSStackViewDistribution {
  NSStackViewDistributionGravityAreas = -1,
  NSStackViewDistributionFill = 0,
  NSStackViewDistributionFillEqually,
  NSStackViewDistributionFillProportionally,
  NSStackViewDistributionEqualSpacing,
  NSStackViewDistributionEqualCentering,
}

declare class NSStatusBar extends NSObject {
  statusItemWithLength(length: CGFloat): NSStatusItem;
  removeStatusItem(item: NSStatusItem): void;

  static systemStatusBar(): NSStatusBar;
  static setSystemStatusBar(systemStatusBar: NSStatusBar): void;
  vertical(): boolean;
  setVertical(vertical: boolean): void;
  thickness(): CGFloat;
  setThickness(thickness: CGFloat): void;
}

declare class NSStatusBarButton extends NSButton {
  appearsDisabled(): boolean;
  setAppearsDisabled(appearsDisabled: boolean): void;
}

declare class NSStatusItem extends NSObject {
  sendActionOn(mask: NSInteger): NSInteger;
  drawStatusBarBackgroundInRect_withHighlight(rect: NSRect, highlight: boolean): void;
  popUpStatusItemMenu(menu: NSMenu): void;

  statusBar(): NSStatusBar;
  setStatusBar(statusBar: NSStatusBar): void;
  length(): CGFloat;
  setLength(length: CGFloat): void;
  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  button(): NSStatusBarButton;
  setButton(button: NSStatusBarButton): void;
  behavior(): NSStatusItemBehavior;
  setBehavior(behavior: NSStatusItemBehavior): void;
  visible(): boolean;
  setVisible(visible: boolean): void;
  autosaveName(): NSStatusItemAutosaveName;
  setAutosaveName(autosaveName: NSStatusItemAutosaveName): void;
  action(): string;
  setAction(action: string): void;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  target(): any;
  setTarget(target: any): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  alternateImage(): NSImage;
  setAlternateImage(alternateImage: NSImage): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  highlightMode(): boolean;
  setHighlightMode(highlightMode: boolean): void;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
  view(): NSView;
  setView(view: NSView): void;
}

declare type NSStatusItemAutosaveName = NSString

declare enum NSStatusItemBehavior {
  NSStatusItemBehaviorRemovalAllowed,
  NSStatusItemBehaviorTerminationOnRemoval,
}

declare class NSStepper extends NSControl implements INSAccessibilityStepper {
  accessibilityLabel(): NSString;
  accessibilityPerformIncrement(): boolean;
  accessibilityPerformDecrement(): boolean;
  accessibilityValue(): any;

  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  increment(): number;
  setIncrement(increment: number): void;
  valueWraps(): boolean;
  setValueWraps(valueWraps: boolean): void;
  autorepeat(): boolean;
  setAutorepeat(autorepeat: boolean): void;
}

declare class NSStepperCell extends NSActionCell {
  minValue(): number;
  setMinValue(minValue: number): void;
  maxValue(): number;
  setMaxValue(maxValue: number): void;
  increment(): number;
  setIncrement(increment: number): void;
  valueWraps(): boolean;
  setValueWraps(valueWraps: boolean): void;
  autorepeat(): boolean;
  setAutorepeat(autorepeat: boolean): void;
}

declare class NSStoryboard extends NSObject {
  static storyboardWithName_bundle(name: NSStoryboardName, storyboardBundleOrNil: NSBundle | null): NSStoryboard;
  instantiateInitialController(): any;
  instantiateControllerWithIdentifier(identifier: NSStoryboardSceneIdentifier): any;

  static mainStoryboard(): NSStoryboard;
  static setMainStoryboard(mainStoryboard: NSStoryboard): void;
}

declare type NSStoryboardName = NSString

declare type NSStoryboardSceneIdentifier = NSString

declare class NSStoryboardSegue extends NSObject {
  static segueWithIdentifier_source_destination_performHandler(identifier: NSStoryboardSegueIdentifier, sourceController: any, destinationController: any, performHandler: Block): NSStoryboardSegue;
  initWithIdentifier_source_destination<T extends NSStoryboardSegue>(identifier: NSStoryboardSegueIdentifier, sourceController: any, destinationController: any): T;
  perform(): void;

  identifier(): NSStoryboardSegueIdentifier;
  setIdentifier(identifier: NSStoryboardSegueIdentifier): void;
  sourceController(): any;
  setSourceController(sourceController: any): void;
  destinationController(): any;
  setDestinationController(destinationController: any): void;
}

declare interface INSSeguePerforming {
  prepareForSegue_sender(segue: NSStoryboardSegue, sender: any | null): void;
  performSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: any | null): void;
  shouldPerformSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: any | null): boolean;
}

declare type NSStoryboardSegueIdentifier = NSString

declare class NSStringDrawingContext extends NSObject {
  minimumScaleFactor(): CGFloat;
  setMinimumScaleFactor(minimumScaleFactor: CGFloat): void;
  actualScaleFactor(): CGFloat;
  setActualScaleFactor(actualScaleFactor: CGFloat): void;
  totalBounds(): NSRect;
  setTotalBounds(totalBounds: NSRect): void;
}

declare enum NSStringDrawingOptions {
  NSStringDrawingUsesLineFragmentOrigin = 1 << 0,
  NSStringDrawingUsesFontLeading = 1 << 1,
  NSStringDrawingUsesDeviceMetrics = 1 << 3,
  NSStringDrawingTruncatesLastVisibleLine = 1 << 5,
  NSStringDrawingDisableScreenFontSubstitution,
  NSStringDrawingOneShot,
}

declare class NSTabView extends NSView {
  selectTabViewItem(tabViewItem: NSTabViewItem | null): void;
  selectTabViewItemAtIndex(index: NSInteger): void;
  selectTabViewItemWithIdentifier(identifier: any): void;
  takeSelectedTabViewItemFromSender(sender: any | null): void;
  selectFirstTabViewItem(sender: any | null): void;
  selectLastTabViewItem(sender: any | null): void;
  selectNextTabViewItem(sender: any | null): void;
  selectPreviousTabViewItem(sender: any | null): void;
  addTabViewItem(tabViewItem: NSTabViewItem): void;
  insertTabViewItem_atIndex(tabViewItem: NSTabViewItem, index: NSInteger): void;
  removeTabViewItem(tabViewItem: NSTabViewItem): void;
  tabViewItemAtPoint(point: NSPoint): NSTabViewItem;
  indexOfTabViewItem(tabViewItem: NSTabViewItem): NSInteger;
  tabViewItemAtIndex(index: NSInteger): NSTabViewItem;
  indexOfTabViewItemWithIdentifier(identifier: any): NSInteger;

  selectedTabViewItem(): NSTabViewItem;
  setSelectedTabViewItem(selectedTabViewItem: NSTabViewItem): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  tabViewType(): NSTabViewType;
  setTabViewType(tabViewType: NSTabViewType): void;
  tabPosition(): NSTabPosition;
  setTabPosition(tabPosition: NSTabPosition): void;
  tabViewBorderType(): NSTabViewBorderType;
  setTabViewBorderType(tabViewBorderType: NSTabViewBorderType): void;
  tabViewItems(): NSArray<any>;
  setTabViewItems(tabViewItems: NSArray<any> | any[]): void;
  allowsTruncatedLabels(): boolean;
  setAllowsTruncatedLabels(allowsTruncatedLabels: boolean): void;
  minimumSize(): NSSize;
  setMinimumSize(minimumSize: NSSize): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  controlTint(): NSControlTint;
  setControlTint(controlTint: NSControlTint): void;
  controlSize(): NSControlSize;
  setControlSize(controlSize: NSControlSize): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  contentRect(): NSRect;
  setContentRect(contentRect: NSRect): void;
  numberOfTabViewItems(): NSInteger;
  setNumberOfTabViewItems(numberOfTabViewItems: NSInteger): void;
}

declare interface INSTabViewDelegate {
  tabView_shouldSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem | null): boolean;
  tabView_willSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem | null): void;
  tabView_didSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem | null): void;
  tabViewDidChangeNumberOfTabViewItems(tabView: NSTabView): void;
}

declare enum NSTabViewType {
  NSTopTabsBezelBorder = 0,
  NSLeftTabsBezelBorder = 1,
  NSBottomTabsBezelBorder = 2,
  NSRightTabsBezelBorder = 3,
  NSNoTabsBezelBorder = 4,
  NSNoTabsLineBorder = 5,
  NSNoTabsNoBorder = 6,
}

declare enum NSTabPosition {
  NSTabPositionNone = 0,
  NSTabPositionTop = 1,
  NSTabPositionLeft = 2,
  NSTabPositionBottom = 3,
  NSTabPositionRight = 4,
}

declare enum NSTabViewBorderType {
  NSTabViewBorderTypeNone = 0,
  NSTabViewBorderTypeLine = 1,
  NSTabViewBorderTypeBezel = 2,
}

declare class NSTabViewController extends NSViewController implements INSTabViewDelegate, INSToolbarDelegate {
  addTabViewItem(tabViewItem: NSTabViewItem): void;
  insertTabViewItem_atIndex(tabViewItem: NSTabViewItem, index: NSInteger): void;
  removeTabViewItem(tabViewItem: NSTabViewItem): void;
  tabViewItemForViewController(viewController: NSViewController): NSTabViewItem;
  tabView_shouldSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem | null): boolean;
  tabView_willSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem | null): void;
  tabView_didSelectTabViewItem(tabView: NSTabView, tabViewItem: NSTabViewItem | null): void;
  tabViewDidChangeNumberOfTabViewItems(tabView: NSTabView): void;
  toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSToolbarItemIdentifier, flag: boolean): NSToolbarItem;
  toolbarDefaultItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarAllowedItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarSelectableItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarWillAddItem(notification: NSNotification): void;
  toolbarDidRemoveItem(notification: NSNotification): void;

  tabStyle(): NSTabViewControllerTabStyle;
  setTabStyle(tabStyle: NSTabViewControllerTabStyle): void;
  tabView(): NSTabView;
  setTabView(tabView: NSTabView): void;
  transitionOptions(): NSViewControllerTransitionOptions;
  setTransitionOptions(transitionOptions: NSViewControllerTransitionOptions): void;
  canPropagateSelectedChildViewControllerTitle(): boolean;
  setCanPropagateSelectedChildViewControllerTitle(canPropagateSelectedChildViewControllerTitle: boolean): void;
  tabViewItems(): NSArray<any>;
  setTabViewItems(tabViewItems: NSArray<any> | any[]): void;
  selectedTabViewItemIndex(): NSInteger;
  setSelectedTabViewItemIndex(selectedTabViewItemIndex: NSInteger): void;
}

declare enum NSTabViewControllerTabStyle {
  NSTabViewControllerTabStyleSegmentedControlOnTop = 0,
  NSTabViewControllerTabStyleSegmentedControlOnBottom,
  NSTabViewControllerTabStyleToolbar,
  NSTabViewControllerTabStyleUnspecified = -1,
}

declare class NSTabViewItem extends NSObject implements INSCoding {
  static tabViewItemWithViewController(viewController: NSViewController): NSTabViewItem;
  initWithIdentifier<T extends NSTabViewItem>(identifier: any | null): T;
  drawLabel_inRect(shouldTruncateLabel: boolean, labelRect: NSRect): void;
  sizeOfLabel(computeMin: boolean): NSSize;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTabViewItem>(aDecoder: NSCoder): T;

  identifier(): any;
  setIdentifier(identifier: any): void;
  color(): NSColor;
  setColor(color: NSColor): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  view(): NSView;
  setView(view: NSView): void;
  viewController(): NSViewController;
  setViewController(viewController: NSViewController): void;
  tabState(): NSTabState;
  setTabState(tabState: NSTabState): void;
  tabView(): NSTabView;
  setTabView(tabView: NSTabView): void;
  initialFirstResponder(): NSView;
  setInitialFirstResponder(initialFirstResponder: NSView): void;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
}

declare enum NSTabState {
  NSSelectedTab = 0,
  NSBackgroundTab = 1,
  NSPressedTab = 2,
}

declare class NSTableCellView extends NSView {
  objectValue(): any;
  setObjectValue(objectValue: any): void;
  textField(): NSTextField;
  setTextField(textField: NSTextField): void;
  imageView(): NSImageView;
  setImageView(imageView: NSImageView): void;
  backgroundStyle(): NSBackgroundStyle;
  setBackgroundStyle(backgroundStyle: NSBackgroundStyle): void;
  rowSizeStyle(): NSTableViewRowSizeStyle;
  setRowSizeStyle(rowSizeStyle: NSTableViewRowSizeStyle): void;
  draggingImageComponents(): NSArray<any>;
  setDraggingImageComponents(draggingImageComponents: NSArray<any> | any[]): void;
}

declare class NSTableColumn extends NSObject implements INSCoding, INSUserInterfaceItemIdentification {
  initWithIdentifier<T extends NSTableColumn>(identifier: NSUserInterfaceItemIdentifier): T;
  initWithCoder<T extends NSTableColumn>(coder: NSCoder): T;
  sizeToFit(): void;
  setResizable(flag: boolean): void;
  isResizable(): boolean;
  dataCellForRow(row: NSInteger): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTableColumn>(aDecoder: NSCoder): T;

  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  tableView(): NSTableView;
  setTableView(tableView: NSTableView): void;
  width(): CGFloat;
  setWidth(width: CGFloat): void;
  minWidth(): CGFloat;
  setMinWidth(minWidth: CGFloat): void;
  maxWidth(): CGFloat;
  setMaxWidth(maxWidth: CGFloat): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  headerCell(): NSTableHeaderCell;
  setHeaderCell(headerCell: NSTableHeaderCell): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  sortDescriptorPrototype(): NSSortDescriptor;
  setSortDescriptorPrototype(sortDescriptorPrototype: NSSortDescriptor): void;
  resizingMask(): NSTableColumnResizingOptions;
  setResizingMask(resizingMask: NSTableColumnResizingOptions): void;
  headerToolTip(): NSString;
  setHeaderToolTip(headerToolTip: NSString | string): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  dataCell(): any;
  setDataCell(dataCell: any): void;
}

declare enum NSTableColumnResizingOptions {
  NSTableColumnNoResizing = 0,
  NSTableColumnAutoresizingMask,
  NSTableColumnUserResizingMask,
}

declare class NSTableHeaderCell extends NSTextFieldCell {
  drawSortIndicatorWithFrame_inView_ascending_priority(cellFrame: NSRect, controlView: NSView, ascending: boolean, priority: NSInteger): void;
  sortIndicatorRectForBounds(rect: NSRect): NSRect;
}

declare class NSTableHeaderView extends NSView {
  headerRectOfColumn(column: NSInteger): NSRect;
  columnAtPoint(point: NSPoint): NSInteger;

  tableView(): NSTableView;
  setTableView(tableView: NSTableView): void;
  draggedColumn(): NSInteger;
  setDraggedColumn(draggedColumn: NSInteger): void;
  draggedDistance(): CGFloat;
  setDraggedDistance(draggedDistance: CGFloat): void;
  resizedColumn(): NSInteger;
  setResizedColumn(resizedColumn: NSInteger): void;
}

declare class NSTableRowView extends NSView implements INSAccessibilityRow {
  drawBackgroundInRect(dirtyRect: NSRect): void;
  drawSelectionInRect(dirtyRect: NSRect): void;
  drawSeparatorInRect(dirtyRect: NSRect): void;
  drawDraggingDestinationFeedbackInRect(dirtyRect: NSRect): void;
  viewAtColumn(column: NSInteger): any;
  accessibilityIndex(): NSInteger;
  accessibilityDisclosureLevel(): NSInteger;

  selectionHighlightStyle(): NSTableViewSelectionHighlightStyle;
  setSelectionHighlightStyle(selectionHighlightStyle: NSTableViewSelectionHighlightStyle): void;
  emphasized(): boolean;
  setEmphasized(emphasized: boolean): void;
  groupRowStyle(): boolean;
  setGroupRowStyle(groupRowStyle: boolean): void;
  selected(): boolean;
  setSelected(selected: boolean): void;
  previousRowSelected(): boolean;
  setPreviousRowSelected(previousRowSelected: boolean): void;
  nextRowSelected(): boolean;
  setNextRowSelected(nextRowSelected: boolean): void;
  floating(): boolean;
  setFloating(floating: boolean): void;
  targetForDropOperation(): boolean;
  setTargetForDropOperation(targetForDropOperation: boolean): void;
  draggingDestinationFeedbackStyle(): NSTableViewDraggingDestinationFeedbackStyle;
  setDraggingDestinationFeedbackStyle(draggingDestinationFeedbackStyle: NSTableViewDraggingDestinationFeedbackStyle): void;
  indentationForDropOperation(): CGFloat;
  setIndentationForDropOperation(indentationForDropOperation: CGFloat): void;
  interiorBackgroundStyle(): NSBackgroundStyle;
  setInteriorBackgroundStyle(interiorBackgroundStyle: NSBackgroundStyle): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  numberOfColumns(): NSInteger;
  setNumberOfColumns(numberOfColumns: NSInteger): void;
}

declare class NSTableView extends NSControl implements INSUserInterfaceValidations, INSTextViewDelegate, INSDraggingSource, INSAccessibilityTable {
  // initWithFrame<T extends NSTableView>(frameRect: NSRect): T;
  // initWithCoder<T extends NSTableView>(coder: NSCoder): T;
  noteHeightOfRowsWithIndexesChanged(indexSet: NSIndexSet): void;
  addTableColumn(tableColumn: NSTableColumn): void;
  removeTableColumn(tableColumn: NSTableColumn): void;
  moveColumn_toColumn(oldIndex: NSInteger, newIndex: NSInteger): void;
  columnWithIdentifier(identifier: NSUserInterfaceItemIdentifier): NSInteger;
  tableColumnWithIdentifier(identifier: NSUserInterfaceItemIdentifier): NSTableColumn;
  tile(): void;
  sizeToFit(): void;
  sizeLastColumnToFit(): void;
  scrollRowToVisible(row: NSInteger): void;
  scrollColumnToVisible(column: NSInteger): void;
  reloadData(): void;
  noteNumberOfRowsChanged(): void;
  reloadDataForRowIndexes_columnIndexes(rowIndexes: NSIndexSet, columnIndexes: NSIndexSet): void;
  setIndicatorImage_inTableColumn(image: NSImage | null, tableColumn: NSTableColumn): void;
  indicatorImageInTableColumn(tableColumn: NSTableColumn): NSImage;
  canDragRowsWithIndexes_atPoint(rowIndexes: NSIndexSet, mouseDownPoint: NSPoint): boolean;
  dragImageForRowsWithIndexes_tableColumns_event_offset(dragRows: NSIndexSet, tableColumns: NSArray<any> | any[], dragEvent: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  setDraggingSourceOperationMask_forLocal(mask: NSDragOperation, isLocal: boolean): void;
  setDropRow_dropOperation(row: NSInteger, dropOperation: NSTableViewDropOperation): void;
  selectAll(sender: any | null): void;
  deselectAll(sender: any | null): void;
  selectColumnIndexes_byExtendingSelection(indexes: NSIndexSet, extend: boolean): void;
  selectRowIndexes_byExtendingSelection(indexes: NSIndexSet, extend: boolean): void;
  deselectColumn(column: NSInteger): void;
  deselectRow(row: NSInteger): void;
  isColumnSelected(column: NSInteger): boolean;
  isRowSelected(row: NSInteger): boolean;
  rectOfColumn(column: NSInteger): NSRect;
  rectOfRow(row: NSInteger): NSRect;
  columnIndexesInRect(rect: NSRect): NSIndexSet;
  rowsInRect(rect: NSRect): NSRange;
  columnAtPoint(point: NSPoint): NSInteger;
  rowAtPoint(point: NSPoint): NSInteger;
  frameOfCellAtColumn_row(column: NSInteger, row: NSInteger): NSRect;
  editColumn_row_withEvent_select(column: NSInteger, row: NSInteger, event: NSEvent | null, select: boolean): void;
  drawRow_clipRect(row: NSInteger, clipRect: NSRect): void;
  highlightSelectionInClipRect(clipRect: NSRect): void;
  drawGridInClipRect(clipRect: NSRect): void;
  drawBackgroundInClipRect(clipRect: NSRect): void;
  viewAtColumn_row_makeIfNecessary(column: NSInteger, row: NSInteger, makeIfNecessary: boolean): NSView;
  rowViewAtRow_makeIfNecessary(row: NSInteger, makeIfNecessary: boolean): NSTableRowView;
  rowForView(view: NSView): NSInteger;
  columnForView(view: NSView): NSInteger;
  makeViewWithIdentifier_owner(identifier: NSUserInterfaceItemIdentifier, owner: any | null): NSView;
  enumerateAvailableRowViewsUsingBlock(handler: Block): void;
  beginUpdates(): void;
  endUpdates(): void;
  insertRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: NSTableViewAnimationOptions): void;
  removeRowsAtIndexes_withAnimation(indexes: NSIndexSet, animationOptions: NSTableViewAnimationOptions): void;
  moveRowAtIndex_toIndex(oldIndex: NSInteger, newIndex: NSInteger): void;
  hideRowsAtIndexes_withAnimation(indexes: NSIndexSet, rowAnimation: NSTableViewAnimationOptions): void;
  unhideRowsAtIndexes_withAnimation(indexes: NSIndexSet, rowAnimation: NSTableViewAnimationOptions): void;
  registerNib_forIdentifier(nib: NSNib | null, identifier: NSUserInterfaceItemIdentifier): void;
  didAddRowView_forRow(rowView: NSTableRowView, row: NSInteger): void;
  didRemoveRowView_forRow(rowView: NSTableRowView, row: NSInteger): void;
  setDrawsGrid(flag: boolean): void;
  drawsGrid(): boolean;
  selectColumn_byExtendingSelection(column: NSInteger, extend: boolean): void;
  selectRow_byExtendingSelection(row: NSInteger, extend: boolean): void;
  selectedColumnEnumerator(): NSEnumerator<any>;
  selectedRowEnumerator(): NSEnumerator<any>;
  dragImageForRows_event_dragImageOffset(dragRows: NSArray<any> | any[], dragEvent: NSEvent, dragImageOffset: NSPointPointer): NSImage;
  setAutoresizesAllColumnsToFit(flag: boolean): void;
  autoresizesAllColumnsToFit(): boolean;
  columnsInRect(rect: NSRect): NSRange;
  preparedCellAtColumn_row(column: NSInteger, row: NSInteger): NSCell;
  textShouldBeginEditing(textObject: NSText): boolean;
  textShouldEndEditing(textObject: NSText): boolean;
  textDidBeginEditing(notification: NSNotification): void;
  textDidEndEditing(notification: NSNotification): void;
  textDidChange(notification: NSNotification): void;
  shouldFocusCell_atColumn_row(cell: NSCell, column: NSInteger, row: NSInteger): boolean;
  focusedColumn(): NSInteger;
  setFocusedColumn(focusedColumn: NSInteger): void;
  performClickOnCellAtColumn_row(column: NSInteger, row: NSInteger): void;
  selectRow_extendSelection(rowIndex: NSInteger, flag: boolean): void;
  validateUserInterfaceItem(item: any): boolean;
  textView_clickedOnLink_atIndex(textView: NSTextView, link: any, charIndex: NSUInteger): boolean;
  textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: any, rect: NSRect, event: NSEvent, charIndex: NSUInteger): void;
  textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: any, charIndex: NSUInteger): NSArray<any>;
  textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: any, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType): boolean;
  textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange): NSRange;
  textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSArray<any> | any[], newSelectedCharRanges: NSArray<any> | any[]): NSArray<any>;
  textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSDictionary<any, any> | {[key: string]: any}, newTypingAttributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  textViewDidChangeSelection(notification: NSNotification): void;
  textViewDidChangeTypingAttributes(notification: NSNotification): void;
  textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: NSString | string, characterIndex: NSUInteger): NSString;
  textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger | null): NSArray<any>;
  textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  textView_doCommandBySelector(textView: NSTextView, commandSelector: string): boolean;
  textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange): NSInteger;
  textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger): NSMenu;
  textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSDictionary<any, any> | {[key: string]: any}, checkingTypes: NSTextCheckingTypes): NSDictionary<any, any>;
  textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, results: NSArray<any> | any[], orthography: NSOrthography, wordCount: NSInteger): NSArray<any>;
  textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger): NSURL;
  textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray<any> | any[]): NSSharingServicePicker;
  undoManagerForTextView(view: NSTextView): NSUndoManager;
  textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSArray<any> | any[]): NSArray<any>;
  textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger): boolean;
  textView_clickedOnLink(textView: NSTextView, link: any): boolean;
  textView_clickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_draggedCell_inRect_event(view: NSTextView, cell: any, rect: NSRect, event: NSEvent): void;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;

  dataSource(): any;
  setDataSource(dataSource: any): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  headerView(): NSTableHeaderView;
  setHeaderView(headerView: NSTableHeaderView): void;
  cornerView(): NSView;
  setCornerView(cornerView: NSView): void;
  allowsColumnReordering(): boolean;
  setAllowsColumnReordering(allowsColumnReordering: boolean): void;
  allowsColumnResizing(): boolean;
  setAllowsColumnResizing(allowsColumnResizing: boolean): void;
  columnAutoresizingStyle(): NSTableViewColumnAutoresizingStyle;
  setColumnAutoresizingStyle(columnAutoresizingStyle: NSTableViewColumnAutoresizingStyle): void;
  gridStyleMask(): NSTableViewGridLineStyle;
  setGridStyleMask(gridStyleMask: NSTableViewGridLineStyle): void;
  intercellSpacing(): NSSize;
  setIntercellSpacing(intercellSpacing: NSSize): void;
  usesAlternatingRowBackgroundColors(): boolean;
  setUsesAlternatingRowBackgroundColors(usesAlternatingRowBackgroundColors: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  gridColor(): NSColor;
  setGridColor(gridColor: NSColor): void;
  rowSizeStyle(): NSTableViewRowSizeStyle;
  setRowSizeStyle(rowSizeStyle: NSTableViewRowSizeStyle): void;
  effectiveRowSizeStyle(): NSTableViewRowSizeStyle;
  setEffectiveRowSizeStyle(effectiveRowSizeStyle: NSTableViewRowSizeStyle): void;
  rowHeight(): CGFloat;
  setRowHeight(rowHeight: CGFloat): void;
  tableColumns(): NSArray<any>;
  setTableColumns(tableColumns: NSArray<any> | any[]): void;
  numberOfColumns(): NSInteger;
  setNumberOfColumns(numberOfColumns: NSInteger): void;
  numberOfRows(): NSInteger;
  setNumberOfRows(numberOfRows: NSInteger): void;
  editedColumn(): NSInteger;
  setEditedColumn(editedColumn: NSInteger): void;
  editedRow(): NSInteger;
  setEditedRow(editedRow: NSInteger): void;
  clickedColumn(): NSInteger;
  setClickedColumn(clickedColumn: NSInteger): void;
  clickedRow(): NSInteger;
  setClickedRow(clickedRow: NSInteger): void;
  doubleAction(): string;
  setDoubleAction(doubleAction: string): void;
  sortDescriptors(): NSArray<any>;
  setSortDescriptors(sortDescriptors: NSArray<any> | any[]): void;
  highlightedTableColumn(): NSTableColumn;
  setHighlightedTableColumn(highlightedTableColumn: NSTableColumn): void;
  verticalMotionCanBeginDrag(): boolean;
  setVerticalMotionCanBeginDrag(verticalMotionCanBeginDrag: boolean): void;
  allowsMultipleSelection(): boolean;
  setAllowsMultipleSelection(allowsMultipleSelection: boolean): void;
  allowsEmptySelection(): boolean;
  setAllowsEmptySelection(allowsEmptySelection: boolean): void;
  allowsColumnSelection(): boolean;
  setAllowsColumnSelection(allowsColumnSelection: boolean): void;
  selectedColumnIndexes(): NSIndexSet;
  setSelectedColumnIndexes(selectedColumnIndexes: NSIndexSet): void;
  selectedRowIndexes(): NSIndexSet;
  setSelectedRowIndexes(selectedRowIndexes: NSIndexSet): void;
  selectedColumn(): NSInteger;
  setSelectedColumn(selectedColumn: NSInteger): void;
  selectedRow(): NSInteger;
  setSelectedRow(selectedRow: NSInteger): void;
  numberOfSelectedColumns(): NSInteger;
  setNumberOfSelectedColumns(numberOfSelectedColumns: NSInteger): void;
  numberOfSelectedRows(): NSInteger;
  setNumberOfSelectedRows(numberOfSelectedRows: NSInteger): void;
  allowsTypeSelect(): boolean;
  setAllowsTypeSelect(allowsTypeSelect: boolean): void;
  selectionHighlightStyle(): NSTableViewSelectionHighlightStyle;
  setSelectionHighlightStyle(selectionHighlightStyle: NSTableViewSelectionHighlightStyle): void;
  draggingDestinationFeedbackStyle(): NSTableViewDraggingDestinationFeedbackStyle;
  setDraggingDestinationFeedbackStyle(draggingDestinationFeedbackStyle: NSTableViewDraggingDestinationFeedbackStyle): void;
  autosaveName(): NSTableViewAutosaveName;
  setAutosaveName(autosaveName: NSTableViewAutosaveName): void;
  autosaveTableColumns(): boolean;
  setAutosaveTableColumns(autosaveTableColumns: boolean): void;
  floatsGroupRows(): boolean;
  setFloatsGroupRows(floatsGroupRows: boolean): void;
  rowActionsVisible(): boolean;
  setRowActionsVisible(rowActionsVisible: boolean): void;
  hiddenRowIndexes(): NSIndexSet;
  setHiddenRowIndexes(hiddenRowIndexes: NSIndexSet): void;
  registeredNibsByIdentifier(): NSDictionary<any, any>;
  setRegisteredNibsByIdentifier(registeredNibsByIdentifier: NSDictionary<any, any> | {[key: string]: any}): void;
  usesStaticContents(): boolean;
  setUsesStaticContents(usesStaticContents: boolean): void;
  userInterfaceLayoutDirection(): NSUserInterfaceLayoutDirection;
  setUserInterfaceLayoutDirection(userInterfaceLayoutDirection: NSUserInterfaceLayoutDirection): void;
  usesAutomaticRowHeights(): boolean;
  setUsesAutomaticRowHeights(usesAutomaticRowHeights: boolean): void;
}

declare interface INSTableViewDelegate {
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;
}

declare interface INSTableViewDataSource {
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;
}

declare type NSTableViewAutosaveName = NSString

declare enum NSTableViewDropOperation {
  NSTableViewDropOn,
  NSTableViewDropAbove,
}

declare enum NSTableViewColumnAutoresizingStyle {
  NSTableViewNoColumnAutoresizing = 0,
  NSTableViewUniformColumnAutoresizingStyle,
  NSTableViewSequentialColumnAutoresizingStyle,
  NSTableViewReverseSequentialColumnAutoresizingStyle,
  NSTableViewLastColumnOnlyAutoresizingStyle,
  NSTableViewFirstColumnOnlyAutoresizingStyle,
}

declare enum NSTableViewGridLineStyle {
  NSTableViewGridNone = 0,
  NSTableViewSolidVerticalGridLineMask = 1 << 0,
  NSTableViewSolidHorizontalGridLineMask = 1 << 1,
  NSTableViewDashedHorizontalGridLineMask = 1 << 3,
}

declare enum NSTableViewRowSizeStyle {
  NSTableViewRowSizeStyleDefault = -1,
  NSTableViewRowSizeStyleCustom = 0,
  NSTableViewRowSizeStyleSmall = 1,
  NSTableViewRowSizeStyleMedium = 2,
  NSTableViewRowSizeStyleLarge = 3,
}

declare enum NSTableViewSelectionHighlightStyle {
  NSTableViewSelectionHighlightStyleNone = -1,
  NSTableViewSelectionHighlightStyleRegular = 0,
  NSTableViewSelectionHighlightStyleSourceList = 1,
}

declare enum NSTableViewDraggingDestinationFeedbackStyle {
  NSTableViewDraggingDestinationFeedbackStyleNone = -1,
  NSTableViewDraggingDestinationFeedbackStyleRegular = 0,
  NSTableViewDraggingDestinationFeedbackStyleSourceList = 1,
  NSTableViewDraggingDestinationFeedbackStyleGap = 2,
}

declare enum NSTableRowActionEdge {
  NSTableRowActionEdgeLeading,
  NSTableRowActionEdgeTrailing,
}

declare enum NSTableViewAnimationOptions {
  NSTableViewAnimationEffectNone = 0x0,
  NSTableViewAnimationEffectFade = 0x1,
  NSTableViewAnimationEffectGap = 0x2,
  NSTableViewAnimationSlideUp = 0x10,
  NSTableViewAnimationSlideDown = 0x20,
  NSTableViewAnimationSlideLeft = 0x30,
  NSTableViewAnimationSlideRight = 0x40,
}

declare class NSTableViewRowAction extends NSObject implements INSCopying {
  static rowActionWithStyle_title_handler(style: NSTableViewRowActionStyle, title: NSString | string, handler: Block): NSTableViewRowAction;
  copyWithZone(zone: NSZone | null): any;

  style(): NSTableViewRowActionStyle;
  setStyle(style: NSTableViewRowActionStyle): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  image(): NSImage;
  setImage(image: NSImage): void;
}

declare enum NSTableViewRowActionStyle {
  NSTableViewRowActionStyleRegular,
  NSTableViewRowActionStyleDestructive,
}

declare class NSText extends NSView implements INSChangeSpelling, INSIgnoreMisspelledWords {
  // initWithFrame<T extends NSText>(frameRect: NSRect): T;
  // initWithCoder<T extends NSText>(coder: NSCoder): T;
  replaceCharactersInRange_withString(range: NSRange, string: NSString | string): void;
  replaceCharactersInRange_withRTF(range: NSRange, rtfData: NSData): void;
  replaceCharactersInRange_withRTFD(range: NSRange, rtfdData: NSData): void;
  RTFFromRange(range: NSRange): NSData;
  RTFDFromRange(range: NSRange): NSData;
  writeRTFDToFile_atomically(path: NSString | string, flag: boolean): boolean;
  readRTFDFromFile(path: NSString | string): boolean;
  scrollRangeToVisible(range: NSRange): void;
  setTextColor_range(color: NSColor | null, range: NSRange): void;
  setFont_range(font: NSFont, range: NSRange): void;
  sizeToFit(): void;
  copy(sender: any | null): void;
  copyFont(sender: any | null): void;
  copyRuler(sender: any | null): void;
  cut(sender: any | null): void;
  delete(sender: any | null): void;
  paste(sender: any | null): void;
  pasteFont(sender: any | null): void;
  pasteRuler(sender: any | null): void;
  selectAll(sender: any | null): void;
  changeFont(sender: any | null): void;
  alignLeft(sender: any | null): void;
  alignRight(sender: any | null): void;
  alignCenter(sender: any | null): void;
  subscript(sender: any | null): void;
  superscript(sender: any | null): void;
  underline(sender: any | null): void;
  unscript(sender: any | null): void;
  showGuessPanel(sender: any | null): void;
  checkSpelling(sender: any | null): void;
  toggleRuler(sender: any | null): void;
  changeSpelling(sender: any | null): void;
  ignoreSpelling(sender: any | null): void;

  string(): NSString;
  setString(string: NSString | string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  richText(): boolean;
  setRichText(richText: boolean): void;
  importsGraphics(): boolean;
  setImportsGraphics(importsGraphics: boolean): void;
  fieldEditor(): boolean;
  setFieldEditor(fieldEditor: boolean): void;
  usesFontPanel(): boolean;
  setUsesFontPanel(usesFontPanel: boolean): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  rulerVisible(): boolean;
  setRulerVisible(rulerVisible: boolean): void;
  selectedRange(): NSRange;
  setSelectedRange(selectedRange: NSRange): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  textColor(): NSColor;
  setTextColor(textColor: NSColor): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  baseWritingDirection(): NSWritingDirection;
  setBaseWritingDirection(baseWritingDirection: NSWritingDirection): void;
  maxSize(): NSSize;
  setMaxSize(maxSize: NSSize): void;
  minSize(): NSSize;
  setMinSize(minSize: NSSize): void;
  horizontallyResizable(): boolean;
  setHorizontallyResizable(horizontallyResizable: boolean): void;
  verticallyResizable(): boolean;
  setVerticallyResizable(verticallyResizable: boolean): void;
}

declare interface INSTextDelegate {
  textShouldBeginEditing(textObject: NSText): boolean;
  textShouldEndEditing(textObject: NSText): boolean;
  textDidBeginEditing(notification: NSNotification): void;
  textDidEndEditing(notification: NSNotification): void;
  textDidChange(notification: NSNotification): void;
}

declare enum NSTextAlignment {
  NSTextAlignmentLeft = 0,
  NSTextAlignmentRight = 1,
  NSTextAlignmentCenter = 2,
  NSTextAlignmentJustified = 3,
  NSTextAlignmentNatural = 4,
}

declare enum NSWritingDirection {
  NSWritingDirectionNatural = -1,
  NSWritingDirectionLeftToRight = 0,
  NSWritingDirectionRightToLeft = 1,
}

declare enum NSTextMovement {
  NSTextMovementReturn = 0x10,
  NSTextMovementTab = 0x11,
  NSTextMovementBacktab = 0x12,
  NSTextMovementLeft = 0x13,
  NSTextMovementRight = 0x14,
  NSTextMovementUp = 0x15,
  NSTextMovementDown = 0x16,
  NSTextMovementCancel = 0x17,
  NSTextMovementOther = 0,
}

declare class NSTextAlternatives extends NSObject {
  initWithPrimaryString_alternativeStrings<T extends NSTextAlternatives>(primaryString: NSString | string, alternativeStrings: NSArray<any> | any[]): T;
  noteSelectedAlternativeString(alternativeString: NSString | string): void;

  primaryString(): NSString;
  setPrimaryString(primaryString: NSString | string): void;
  alternativeStrings(): NSArray<any>;
  setAlternativeStrings(alternativeStrings: NSArray<any> | any[]): void;
}

declare class NSTextAttachment extends NSObject implements INSTextAttachmentContainer, INSCoding {
  initWithData_ofType<T extends NSTextAttachment>(contentData: NSData | null, uti: NSString | string | null): T;
  initWithFileWrapper<T extends NSTextAttachment>(fileWrapper: NSFileWrapper | null): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTextAttachment>(aDecoder: NSCoder): T;

  contents(): NSData;
  setContents(contents: NSData): void;
  fileType(): NSString;
  setFileType(fileType: NSString | string): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  bounds(): NSRect;
  setBounds(bounds: NSRect): void;
  fileWrapper(): NSFileWrapper;
  setFileWrapper(fileWrapper: NSFileWrapper): void;
  attachmentCell(): any;
  setAttachmentCell(attachmentCell: any): void;
}

declare class NSTextAttachmentCell extends NSCell implements INSTextAttachmentCell {
  drawWithFrame_inView(cellFrame: NSRect, controlView: NSView | null): void;
  wantsToTrackMouse(): boolean;
  highlight_withFrame_inView(flag: boolean, cellFrame: NSRect, controlView: NSView | null): void;
  trackMouse_inRect_ofView_untilMouseUp(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView | null, flag: boolean): boolean;
  cellSize(): NSSize;
  cellBaselineOffset(): NSPoint;
  drawWithFrame_inView_characterIndex(cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger): void;
  drawWithFrame_inView_characterIndex_layoutManager(cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger, layoutManager: NSLayoutManager): void;
  wantsToTrackMouseForEvent_inRect_ofView_atCharacterIndex(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger): boolean;
  trackMouse_inRect_ofView_atCharacterIndex_untilMouseUp(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger, flag: boolean): boolean;
  cellFrameForTextContainer_proposedLineFragment_glyphPosition_characterIndex(textContainer: NSTextContainer, lineFrag: NSRect, position: NSPoint, charIndex: NSUInteger): NSRect;

  attachment(): NSTextAttachment;
  setAttachment(attachment: NSTextAttachment): void;
}

declare interface INSTextAttachmentCell {
  drawWithFrame_inView(cellFrame: NSRect, controlView: NSView | null): void;
  wantsToTrackMouse(): boolean;
  highlight_withFrame_inView(flag: boolean, cellFrame: NSRect, controlView: NSView | null): void;
  trackMouse_inRect_ofView_untilMouseUp(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView | null, flag: boolean): boolean;
  cellSize(): NSSize;
  cellBaselineOffset(): NSPoint;
  drawWithFrame_inView_characterIndex(cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger): void;
  drawWithFrame_inView_characterIndex_layoutManager(cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger, layoutManager: NSLayoutManager): void;
  wantsToTrackMouseForEvent_inRect_ofView_atCharacterIndex(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger): boolean;
  trackMouse_inRect_ofView_atCharacterIndex_untilMouseUp(theEvent: NSEvent, cellFrame: NSRect, controlView: NSView | null, charIndex: NSUInteger, flag: boolean): boolean;
  cellFrameForTextContainer_proposedLineFragment_glyphPosition_characterIndex(textContainer: NSTextContainer, lineFrag: NSRect, position: NSPoint, charIndex: NSUInteger): NSRect;

  attachment(): NSTextAttachment;
  setAttachment(attachment: NSTextAttachment): void;
}

declare class NSTextContainer extends NSObject implements INSCoding, INSTextLayoutOrientationProvider {
  initWithSize<T extends NSTextContainer>(size: NSSize): T;
  initWithCoder<T extends NSTextContainer>(coder: NSCoder): T;
  replaceLayoutManager(newLayoutManager: NSLayoutManager): void;
  lineFragmentRectForProposedRect_atIndex_writingDirection_remainingRect(proposedRect: NSRect, characterIndex: NSUInteger, baseWritingDirection: NSWritingDirection, remainingRect: NSRect | null): NSRect;
  initWithContainerSize<T extends NSTextContainer>(aContainerSize: NSSize): T;
  lineFragmentRectForProposedRect_sweepDirection_movementDirection_remainingRect(proposedRect: NSRect, sweepDirection: NSLineSweepDirection, movementDirection: NSLineMovementDirection, remainingRect: NSRectPointer | null): NSRect;
  containsPoint(point: NSPoint): boolean;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTextContainer>(aDecoder: NSCoder): T;

  layoutManager(): NSLayoutManager;
  setLayoutManager(layoutManager: NSLayoutManager): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  exclusionPaths(): NSArray<any>;
  setExclusionPaths(exclusionPaths: NSArray<any> | any[]): void;
  lineBreakMode(): NSLineBreakMode;
  setLineBreakMode(lineBreakMode: NSLineBreakMode): void;
  lineFragmentPadding(): CGFloat;
  setLineFragmentPadding(lineFragmentPadding: CGFloat): void;
  maximumNumberOfLines(): NSUInteger;
  setMaximumNumberOfLines(maximumNumberOfLines: NSUInteger): void;
  simpleRectangularTextContainer(): boolean;
  setSimpleRectangularTextContainer(simpleRectangularTextContainer: boolean): void;
  widthTracksTextView(): boolean;
  setWidthTracksTextView(widthTracksTextView: boolean): void;
  heightTracksTextView(): boolean;
  setHeightTracksTextView(heightTracksTextView: boolean): void;
  textView(): NSTextView;
  setTextView(textView: NSTextView): void;
  containerSize(): NSSize;
  setContainerSize(containerSize: NSSize): void;
}

declare enum NSLineSweepDirection {
  NSLineSweepLeft = 0,
  NSLineSweepRight = 1,
  NSLineSweepDown = 2,
  NSLineSweepUp = 3,
}

declare enum NSLineMovementDirection {
  NSLineDoesntMove = 0,
  NSLineMovesLeft = 1,
  NSLineMovesRight = 2,
  NSLineMovesDown = 3,
  NSLineMovesUp = 4,
}

declare class NSTextField extends NSControl implements INSUserInterfaceValidations, INSAccessibilityNavigableStaticText {
  selectText(sender: any | null): void;
  textShouldBeginEditing(textObject: NSText): boolean;
  textShouldEndEditing(textObject: NSText): boolean;
  textDidBeginEditing(notification: NSNotification): void;
  textDidEndEditing(notification: NSNotification): void;
  textDidChange(notification: NSNotification): void;
  static labelWithString(stringValue: NSString | string): NSTextField;
  static wrappingLabelWithString(stringValue: NSString | string): NSTextField;
  static labelWithAttributedString(attributedStringValue: NSAttributedString): NSTextField;
  static textFieldWithString(stringValue: NSString | string): NSTextField;
  setTitleWithMnemonic(stringWithAmpersand: NSString | string): void;
  validateUserInterfaceItem(item: any): boolean;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityRangeForLine(lineNumber: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;

  placeholderString(): NSString;
  setPlaceholderString(placeholderString: NSString | string): void;
  placeholderAttributedString(): NSAttributedString;
  setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  textColor(): NSColor;
  setTextColor(textColor: NSColor): void;
  bordered(): boolean;
  setBordered(bordered: boolean): void;
  bezeled(): boolean;
  setBezeled(bezeled: boolean): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  acceptsFirstResponder(): boolean;
  setAcceptsFirstResponder(acceptsFirstResponder: boolean): void;
  bezelStyle(): NSTextFieldBezelStyle;
  setBezelStyle(bezelStyle: NSTextFieldBezelStyle): void;
  preferredMaxLayoutWidth(): CGFloat;
  setPreferredMaxLayoutWidth(preferredMaxLayoutWidth: CGFloat): void;
  maximumNumberOfLines(): NSInteger;
  setMaximumNumberOfLines(maximumNumberOfLines: NSInteger): void;
  allowsDefaultTighteningForTruncation(): boolean;
  setAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: boolean): void;
  automaticTextCompletionEnabled(): boolean;
  setAutomaticTextCompletionEnabled(automaticTextCompletionEnabled: boolean): void;
  allowsCharacterPickerTouchBarItem(): boolean;
  setAllowsCharacterPickerTouchBarItem(allowsCharacterPickerTouchBarItem: boolean): void;
  allowsEditingTextAttributes(): boolean;
  setAllowsEditingTextAttributes(allowsEditingTextAttributes: boolean): void;
  importsGraphics(): boolean;
  setImportsGraphics(importsGraphics: boolean): void;
}

declare interface INSTextFieldDelegate {
  textField_textView_candidatesForSelectedRange(textField: NSTextField, textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textField_textView_candidates_forSelectedRange(textField: NSTextField, textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textField_textView_shouldSelectCandidateAtIndex(textField: NSTextField, textView: NSTextView, index: NSUInteger): boolean;
}

declare class NSTextFieldCell extends NSActionCell {
  // initTextCell<T extends NSTextFieldCell>(string: NSString | string): T;
  // initWithCoder<T extends NSTextFieldCell>(coder: NSCoder): T;
  setUpFieldEditorAttributes(textObj: NSText): NSText;
  setWantsNotificationForMarkedText(flag: boolean): void;

  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  textColor(): NSColor;
  setTextColor(textColor: NSColor): void;
  bezelStyle(): NSTextFieldBezelStyle;
  setBezelStyle(bezelStyle: NSTextFieldBezelStyle): void;
  placeholderString(): NSString;
  setPlaceholderString(placeholderString: NSString | string): void;
  placeholderAttributedString(): NSAttributedString;
  setPlaceholderAttributedString(placeholderAttributedString: NSAttributedString): void;
  allowedInputSourceLocales(): NSArray<any>;
  setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray<any> | any[]): void;
}

declare enum NSTextFieldBezelStyle {
  NSTextFieldSquareBezel = 0,
  NSTextFieldRoundedBezel = 1,
}

declare class NSTextFinder extends NSObject implements INSCoding {
  init<T extends NSTextFinder>(): T;
  initWithCoder<T extends NSTextFinder>(decoder: NSCoder): T;
  performAction(op: NSTextFinderAction): void;
  validateAction(op: NSTextFinderAction): boolean;
  cancelFindIndicator(): void;
  static drawIncrementalMatchHighlightInRect(rect: NSRect): void;
  noteClientStringWillChange(): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTextFinder>(aDecoder: NSCoder): T;

  client(): any;
  setClient(client: any): void;
  findBarContainer(): any;
  setFindBarContainer(findBarContainer: any): void;
  findIndicatorNeedsUpdate(): boolean;
  setFindIndicatorNeedsUpdate(findIndicatorNeedsUpdate: boolean): void;
  incrementalSearchingEnabled(): boolean;
  setIncrementalSearchingEnabled(incrementalSearchingEnabled: boolean): void;
  incrementalSearchingShouldDimContentView(): boolean;
  setIncrementalSearchingShouldDimContentView(incrementalSearchingShouldDimContentView: boolean): void;
  incrementalMatchRanges(): NSArray<any>;
  setIncrementalMatchRanges(incrementalMatchRanges: NSArray<any> | any[]): void;
}

declare interface INSTextFinderClient {
  stringAtIndex_effectiveRange_endsWithSearchBoundary(characterIndex: NSUInteger, outRange: NSRangePointer, outFlag: boolean): NSString;
  stringLength(): NSUInteger;
  scrollRangeToVisible(range: NSRange): void;
  shouldReplaceCharactersInRanges_withStrings(ranges: NSArray<any> | any[], strings: NSArray<any> | any[]): boolean;
  replaceCharactersInRange_withString(range: NSRange, string: NSString | string): void;
  didReplaceCharacters(): void;
  contentViewAtIndex_effectiveCharacterRange(index: NSUInteger, outRange: NSRangePointer): NSView;
  rectsForCharacterRange(range: NSRange): NSArray<any>;
  drawCharactersInRange_forContentView(range: NSRange, view: NSView): void;

  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  allowsMultipleSelection(): boolean;
  setAllowsMultipleSelection(allowsMultipleSelection: boolean): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  string(): NSString;
  setString(string: NSString | string): void;
  firstSelectedRange(): NSRange;
  setFirstSelectedRange(firstSelectedRange: NSRange): void;
  selectedRanges(): NSArray<any>;
  setSelectedRanges(selectedRanges: NSArray<any> | any[]): void;
  visibleCharacterRanges(): NSArray<any>;
  setVisibleCharacterRanges(visibleCharacterRanges: NSArray<any> | any[]): void;
}

declare interface INSTextFinderBarContainer {
  findBarViewDidChangeHeight(): void;
  contentView(): NSView;

  findBarView(): NSView;
  setFindBarView(findBarView: NSView): void;
  findBarVisible(): boolean;
  setFindBarVisible(findBarVisible: boolean): void;
}

declare type NSPasteboardTypeTextFinderOptionKey = NSString

declare enum NSTextFinderAction {
  NSTextFinderActionShowFindInterface = 1,
  NSTextFinderActionNextMatch = 2,
  NSTextFinderActionPreviousMatch = 3,
  NSTextFinderActionReplaceAll = 4,
  NSTextFinderActionReplace = 5,
  NSTextFinderActionReplaceAndFind = 6,
  NSTextFinderActionSetSearchString = 7,
  NSTextFinderActionReplaceAllInSelection = 8,
  NSTextFinderActionSelectAll = 9,
  NSTextFinderActionSelectAllInSelection = 10,
  NSTextFinderActionHideFindInterface = 11,
  NSTextFinderActionShowReplaceInterface = 12,
  NSTextFinderActionHideReplaceInterface = 13,
}

declare enum NSTextFinderMatchingType {
  NSTextFinderMatchingTypeContains = 0,
  NSTextFinderMatchingTypeStartsWith = 1,
  NSTextFinderMatchingTypeFullWord = 2,
  NSTextFinderMatchingTypeEndsWith = 3,
}

declare interface INSTextInputClient {
  insertText_replacementRange(string: any, replacementRange: NSRange): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange_replacementRange(string: any, selectedRange: NSRange, replacementRange: NSRange): void;
  unmarkText(): void;
  selectedRange(): NSRange;
  markedRange(): NSRange;
  hasMarkedText(): boolean;
  attributedSubstringForProposedRange_actualRange(range: NSRange, actualRange: NSRangePointer | null): NSAttributedString;
  validAttributesForMarkedText(): NSArray<any>;
  firstRectForCharacterRange_actualRange(range: NSRange, actualRange: NSRangePointer | null): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  attributedString(): NSAttributedString;
  fractionOfDistanceThroughGlyphForPoint(point: NSPoint): CGFloat;
  baselineDeltaForCharacterAtIndex(anIndex: NSUInteger): CGFloat;
  windowLevel(): NSInteger;
  drawsVerticallyForCharacterAtIndex(charIndex: NSUInteger): boolean;
}

declare class NSTextInputContext extends NSObject {
  initWithClient<T extends NSTextInputContext>(client: any): T;
  activate(): void;
  deactivate(): void;
  handleEvent(event: NSEvent): boolean;
  discardMarkedText(): void;
  invalidateCharacterCoordinates(): void;
  static localizedNameForInputSource(inputSourceIdentifier: NSTextInputSourceIdentifier): NSString;

  static currentInputContext(): NSTextInputContext;
  static setCurrentInputContext(currentInputContext: NSTextInputContext): void;
  client(): any;
  setClient(client: any): void;
  acceptsGlyphInfo(): boolean;
  setAcceptsGlyphInfo(acceptsGlyphInfo: boolean): void;
  allowedInputSourceLocales(): NSArray<any>;
  setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray<any> | any[]): void;
  keyboardInputSources(): NSArray<any>;
  setKeyboardInputSources(keyboardInputSources: NSArray<any> | any[]): void;
  selectedKeyboardInputSource(): NSTextInputSourceIdentifier;
  setSelectedKeyboardInputSource(selectedKeyboardInputSource: NSTextInputSourceIdentifier): void;
}

declare type NSTextInputSourceIdentifier = NSString

declare class NSTextList extends NSObject implements INSCoding, INSCopying {
  initWithMarkerFormat_options<T extends NSTextList>(format: NSTextListMarkerFormat, mask: NSUInteger): T;
  markerForItemNumber(itemNum: NSInteger): NSString;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTextList>(aDecoder: NSCoder): T;
  copyWithZone(zone: NSZone | null): any;

  markerFormat(): NSTextListMarkerFormat;
  setMarkerFormat(markerFormat: NSTextListMarkerFormat): void;
  listOptions(): NSTextListOptions;
  setListOptions(listOptions: NSTextListOptions): void;
  startingItemNumber(): NSInteger;
  setStartingItemNumber(startingItemNumber: NSInteger): void;
}

declare type NSTextListMarkerFormat = NSString

declare enum NSTextListOptions {
  NSTextListPrependEnclosingMarker,
}

declare class NSTextStorage extends NSMutableAttributedString {
  addLayoutManager(aLayoutManager: NSLayoutManager): void;
  removeLayoutManager(aLayoutManager: NSLayoutManager): void;
  edited_range_changeInLength(editedMask: NSTextStorageEditActions, editedRange: NSRange, delta: NSInteger): void;
  processEditing(): void;
  invalidateAttributesInRange(range: NSRange): void;
  ensureAttributesAreFixedInRange(range: NSRange): void;
  copyTextStorage(): any;
  boundsForTextBehaviour_original(behaviour: BCTextBehaviourType, rect: NSRect): NSRect;
  glyphBounds(): NSRect;
  attributeValuesByRangeForKey(key: NSString | string): NSDictionary<any, any>;
  attributeValuesByRangeForKey_range(key: NSString | string, rangeToExamine: NSRange): NSDictionary<any, any>;
  setAttributeValuesByRange_forKey(valuesByRange: NSDictionary<any, any> | {[key: string]: any}, key: NSString | string): void;

  layoutManagers(): NSArray<any>;
  setLayoutManagers(layoutManagers: NSArray<any> | any[]): void;
  editedMask(): NSTextStorageEditActions;
  setEditedMask(editedMask: NSTextStorageEditActions): void;
  editedRange(): NSRange;
  setEditedRange(editedRange: NSRange): void;
  changeInLength(): NSInteger;
  setChangeInLength(changeInLength: NSInteger): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  fixesAttributesLazily(): boolean;
  setFixesAttributesLazily(fixesAttributesLazily: boolean): void;
  attributeRuns(): NSArray<any>;
  setAttributeRuns(attributeRuns: NSArray<any> | any[]): void;
  paragraphs(): NSArray<any>;
  setParagraphs(paragraphs: NSArray<any> | any[]): void;
  words(): NSArray<any>;
  setWords(words: NSArray<any> | any[]): void;
  characters(): NSArray<any>;
  setCharacters(characters: NSArray<any> | any[]): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  foregroundColor(): NSColor;
  setForegroundColor(foregroundColor: NSColor): void;
}

declare interface INSTextStorageDelegate {
  textStorage_willProcessEditing_range_changeInLength(textStorage: NSTextStorage, editedMask: NSTextStorageEditActions, editedRange: NSRange, delta: NSInteger): void;
  textStorage_didProcessEditing_range_changeInLength(textStorage: NSTextStorage, editedMask: NSTextStorageEditActions, editedRange: NSRange, delta: NSInteger): void;
}

declare type NSTextStorageEditedOptions = NSUInteger

declare enum NSTextStorageEditActions {
  NSTextStorageEditedAttributes,
  NSTextStorageEditedCharacters,
}

declare class NSTextBlock extends NSObject implements INSCoding, INSCopying {
  init<T extends NSTextBlock>(): T;
  setValue_type_forDimension(val: CGFloat, type: NSTextBlockValueType, dimension: NSTextBlockDimension): void;
  valueForDimension(dimension: NSTextBlockDimension): CGFloat;
  valueTypeForDimension(dimension: NSTextBlockDimension): NSTextBlockValueType;
  setContentWidth_type(val: CGFloat, type: NSTextBlockValueType): void;
  setWidth_type_forLayer_edge(val: CGFloat, type: NSTextBlockValueType, layer: NSTextBlockLayer, edge: NSRectEdge): void;
  setWidth_type_forLayer(val: CGFloat, type: NSTextBlockValueType, layer: NSTextBlockLayer): void;
  widthForLayer_edge(layer: NSTextBlockLayer, edge: NSRectEdge): CGFloat;
  widthValueTypeForLayer_edge(layer: NSTextBlockLayer, edge: NSRectEdge): NSTextBlockValueType;
  setBorderColor_forEdge(color: NSColor | null, edge: NSRectEdge): void;
  setBorderColor(color: NSColor | null): void;
  borderColorForEdge(edge: NSRectEdge): NSColor;
  rectForLayoutAtPoint_inRect_textContainer_characterRange(startingPoint: NSPoint, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange): NSRect;
  boundsRectForContentRect_inRect_textContainer_characterRange(contentRect: NSRect, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange): NSRect;
  drawBackgroundWithFrame_inView_characterRange_layoutManager(frameRect: NSRect, controlView: NSView, charRange: NSRange, layoutManager: NSLayoutManager): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTextBlock>(aDecoder: NSCoder): T;
  copyWithZone(zone: NSZone | null): any;

  contentWidth(): CGFloat;
  setContentWidth(contentWidth: CGFloat): void;
  contentWidthValueType(): NSTextBlockValueType;
  setContentWidthValueType(contentWidthValueType: NSTextBlockValueType): void;
  verticalAlignment(): NSTextBlockVerticalAlignment;
  setVerticalAlignment(verticalAlignment: NSTextBlockVerticalAlignment): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
}

declare class NSTextTableBlock extends NSTextBlock {
  initWithTable_startingRow_rowSpan_startingColumn_columnSpan<T extends NSTextTableBlock>(table: NSTextTable, row: NSInteger, rowSpan: NSInteger, col: NSInteger, colSpan: NSInteger): T;

  table(): NSTextTable;
  setTable(table: NSTextTable): void;
  startingRow(): NSInteger;
  setStartingRow(startingRow: NSInteger): void;
  rowSpan(): NSInteger;
  setRowSpan(rowSpan: NSInteger): void;
  startingColumn(): NSInteger;
  setStartingColumn(startingColumn: NSInteger): void;
  columnSpan(): NSInteger;
  setColumnSpan(columnSpan: NSInteger): void;
}

declare class NSTextTable extends NSTextBlock {
  rectForBlock_layoutAtPoint_inRect_textContainer_characterRange(block: NSTextTableBlock, startingPoint: NSPoint, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange): NSRect;
  boundsRectForBlock_contentRect_inRect_textContainer_characterRange(block: NSTextTableBlock, contentRect: NSRect, rect: NSRect, textContainer: NSTextContainer, charRange: NSRange): NSRect;
  drawBackgroundForBlock_withFrame_inView_characterRange_layoutManager(block: NSTextTableBlock, frameRect: NSRect, controlView: NSView, charRange: NSRange, layoutManager: NSLayoutManager): void;

  numberOfColumns(): NSUInteger;
  setNumberOfColumns(numberOfColumns: NSUInteger): void;
  layoutAlgorithm(): NSTextTableLayoutAlgorithm;
  setLayoutAlgorithm(layoutAlgorithm: NSTextTableLayoutAlgorithm): void;
  collapsesBorders(): boolean;
  setCollapsesBorders(collapsesBorders: boolean): void;
  hidesEmptyCells(): boolean;
  setHidesEmptyCells(hidesEmptyCells: boolean): void;
}

declare enum NSTextBlockValueType {
  NSTextBlockAbsoluteValueType = 0,
  NSTextBlockPercentageValueType = 1,
}

declare enum NSTextBlockDimension {
  NSTextBlockWidth = 0,
  NSTextBlockMinimumWidth = 1,
  NSTextBlockMaximumWidth = 2,
  NSTextBlockHeight = 4,
  NSTextBlockMinimumHeight = 5,
  NSTextBlockMaximumHeight = 6,
}

declare enum NSTextBlockLayer {
  NSTextBlockPadding = -1,
  NSTextBlockBorder = 0,
  NSTextBlockMargin = 1,
}

declare enum NSTextBlockVerticalAlignment {
  NSTextBlockTopAlignment = 0,
  NSTextBlockMiddleAlignment = 1,
  NSTextBlockBottomAlignment = 2,
  NSTextBlockBaselineAlignment = 3,
}

declare enum NSTextTableLayoutAlgorithm {
  NSTextTableAutomaticLayoutAlgorithm = 0,
  NSTextTableFixedLayoutAlgorithm = 1,
}

declare class NSTextView extends NSText implements INSUserInterfaceValidations, INSTextInputClient, INSTextLayoutOrientationProvider, INSDraggingSource, INSTextInput, INSAccessibilityNavigableStaticText {
  initWithFrame_textContainer<T extends NSTextView>(frameRect: NSRect, container: NSTextContainer | null): T;
  // initWithCoder<T extends NSTextView>(coder: NSCoder): T;
  // initWithFrame<T extends NSTextView>(frameRect: NSRect): T;
  replaceTextContainer(newContainer: NSTextContainer): void;
  invalidateTextContainerOrigin(): void;
  insertText(insertString: any): void;
  setConstrainedFrameSize(desiredSize: NSSize): void;
  setAlignment_range(alignment: NSTextAlignment, range: NSRange): void;
  setBaseWritingDirection_range(writingDirection: NSWritingDirection, range: NSRange): void;
  turnOffKerning(sender: any | null): void;
  tightenKerning(sender: any | null): void;
  loosenKerning(sender: any | null): void;
  useStandardKerning(sender: any | null): void;
  turnOffLigatures(sender: any | null): void;
  useStandardLigatures(sender: any | null): void;
  useAllLigatures(sender: any | null): void;
  raiseBaseline(sender: any | null): void;
  lowerBaseline(sender: any | null): void;
  toggleTraditionalCharacterShape(sender: any | null): void;
  outline(sender: any | null): void;
  performFindPanelAction(sender: any | null): void;
  alignJustified(sender: any | null): void;
  changeColor(sender: any | null): void;
  changeAttributes(sender: any | null): void;
  changeDocumentBackgroundColor(sender: any | null): void;
  orderFrontSpacingPanel(sender: any | null): void;
  orderFrontLinkPanel(sender: any | null): void;
  orderFrontListPanel(sender: any | null): void;
  orderFrontTablePanel(sender: any | null): void;
  rulerView_didMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_didRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_didAddMarker(ruler: NSRulerView, marker: NSRulerMarker): void;
  rulerView_shouldMoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_shouldAddMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willMoveMarker_toLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_shouldRemoveMarker(ruler: NSRulerView, marker: NSRulerMarker): boolean;
  rulerView_willAddMarker_atLocation(ruler: NSRulerView, marker: NSRulerMarker, location: CGFloat): CGFloat;
  rulerView_handleMouseDown(ruler: NSRulerView, event: NSEvent): void;
  setNeedsDisplayInRect_avoidAdditionalLayout(rect: NSRect, flag: boolean): void;
  drawInsertionPointInRect_color_turnedOn(rect: NSRect, color: NSColor, flag: boolean): void;
  drawViewBackgroundInRect(rect: NSRect): void;
  updateRuler(): void;
  updateFontPanel(): void;
  updateDragTypeRegistration(): void;
  selectionRangeForProposedRange_granularity(proposedCharRange: NSRange, granularity: NSSelectionGranularity): NSRange;
  clickedOnLink_atIndex(link: any, charIndex: NSUInteger): void;
  startSpeaking(sender: any | null): void;
  stopSpeaking(sender: any | null): void;
  setLayoutOrientation(orientation: NSTextLayoutOrientation): void;
  changeLayoutOrientation(sender: any | null): void;
  characterIndexForInsertionAtPoint(point: NSPoint): NSUInteger;
  complete(sender: any | null): void;
  completionsForPartialWordRange_indexOfSelectedItem(charRange: NSRange, index: NSInteger): NSArray<any>;
  insertCompletion_forPartialWordRange_movement_isFinal(word: NSString | string, charRange: NSRange, movement: NSInteger, flag: boolean): void;
  writeSelectionToPasteboard_type(pboard: NSPasteboard, type: NSPasteboardType): boolean;
  writeSelectionToPasteboard_types(pboard: NSPasteboard, types: NSArray<any> | any[]): boolean;
  preferredPasteboardTypeFromArray_restrictedToTypesFromArray(availableTypes: NSArray<any> | any[], allowedTypes: NSArray<any> | any[] | null): NSPasteboardType;
  readSelectionFromPasteboard_type(pboard: NSPasteboard, type: NSPasteboardType): boolean;
  readSelectionFromPasteboard(pboard: NSPasteboard): boolean;
  static registerForServices(): void;
  validRequestorForSendType_returnType(sendType: NSPasteboardType | null, returnType: NSPasteboardType | null): any;
  pasteAsPlainText(sender: any | null): void;
  pasteAsRichText(sender: any | null): void;
  dragSelectionWithEvent_offset_slideBack(event: NSEvent, mouseOffset: NSSize, slideBack: boolean): boolean;
  dragImageForSelectionWithEvent_origin(event: NSEvent, origin: NSPointPointer | null): NSImage;
  dragOperationForDraggingInfo_type(dragInfo: any, type: NSPasteboardType): NSDragOperation;
  cleanUpAfterDragOperation(): void;
  setSelectedRanges_affinity_stillSelecting(ranges: NSArray<any> | any[], affinity: NSSelectionAffinity, stillSelectingFlag: boolean): void;
  setSelectedRange_affinity_stillSelecting(charRange: NSRange, affinity: NSSelectionAffinity, stillSelectingFlag: boolean): void;
  updateInsertionPointStateAndRestartTimer(restartFlag: boolean): void;
  toggleContinuousSpellChecking(sender: any | null): void;
  toggleGrammarChecking(sender: any | null): void;
  setSpellingState_range(value: NSInteger, charRange: NSRange): void;
  shouldChangeTextInRanges_replacementStrings(affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  shouldChangeTextInRange_replacementString(affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  didChangeText(): void;
  breakUndoCoalescing(): void;
  showFindIndicatorForRange(charRange: NSRange): void;
  setSelectedRange(charRange: NSRange): void;
  smartDeleteRangeForProposedRange(proposedCharRange: NSRange): NSRange;
  toggleSmartInsertDelete(sender: any | null): void;
  smartInsertForString_replacingRange_beforeString_afterString(pasteString: NSString | string, charRangeToReplace: NSRange, beforeString: NSString | string, afterString: NSString | string): void;
  smartInsertBeforeStringForString_replacingRange(pasteString: NSString | string, charRangeToReplace: NSRange): NSString;
  smartInsertAfterStringForString_replacingRange(pasteString: NSString | string, charRangeToReplace: NSRange): NSString;
  toggleAutomaticQuoteSubstitution(sender: any | null): void;
  toggleAutomaticLinkDetection(sender: any | null): void;
  toggleAutomaticDataDetection(sender: any | null): void;
  toggleAutomaticDashSubstitution(sender: any | null): void;
  toggleAutomaticTextReplacement(sender: any | null): void;
  toggleAutomaticSpellingCorrection(sender: any | null): void;
  checkTextInRange_types_options(range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}): void;
  handleTextCheckingResults_forRange_types_options_orthography_wordCount(results: NSArray<any> | any[], range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, orthography: NSOrthography, wordCount: NSInteger): void;
  orderFrontSubstitutionsPanel(sender: any | null): void;
  checkTextInSelection(sender: any | null): void;
  checkTextInDocument(sender: any | null): void;
  toggleQuickLookPreviewPanel(sender: any | null): IBAction;
  quickLookPreviewableItemsInRanges(ranges: NSArray<any> | any[]): NSArray<any>;
  updateQuickLookPreviewPanel(): void;
  orderFrontSharingServicePicker(sender: any | null): IBAction;
  toggleAutomaticTextCompletion(sender: any | null): IBAction;
  updateTouchBarItemIdentifiers(): void;
  updateTextTouchBarItems(): void;
  updateCandidates(): void;
  toggleBaseWritingDirection(sender: any | null): void;
  validateUserInterfaceItem(item: any): boolean;
  insertText_replacementRange(string: any, replacementRange: NSRange): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange_replacementRange(string: any, selectedRange: NSRange, replacementRange: NSRange): void;
  unmarkText(): void;
  selectedRange(): NSRange;
  markedRange(): NSRange;
  hasMarkedText(): boolean;
  attributedSubstringForProposedRange_actualRange(range: NSRange, actualRange: NSRangePointer | null): NSAttributedString;
  validAttributesForMarkedText(): NSArray<any>;
  firstRectForCharacterRange_actualRange(range: NSRange, actualRange: NSRangePointer | null): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  attributedString(): NSAttributedString;
  fractionOfDistanceThroughGlyphForPoint(point: NSPoint): CGFloat;
  baselineDeltaForCharacterAtIndex(anIndex: NSUInteger): CGFloat;
  windowLevel(): NSInteger;
  drawsVerticallyForCharacterAtIndex(charIndex: NSUInteger): boolean;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
  insertText(string: any): void;
  doCommandBySelector(selector: string): void;
  setMarkedText_selectedRange(string: any, selRange: NSRange): void;
  unmarkText(): void;
  hasMarkedText(): boolean;
  conversationIdentifier(): NSInteger;
  attributedSubstringFromRange(range: NSRange): NSAttributedString;
  markedRange(): NSRange;
  selectedRange(): NSRange;
  firstRectForCharacterRange(range: NSRange): NSRect;
  characterIndexForPoint(point: NSPoint): NSUInteger;
  validAttributesForMarkedText(): NSArray<any>;
  accessibilityStringForRange(range: NSRange): NSString;
  accessibilityLineForIndex(index: NSInteger): NSInteger;
  accessibilityRangeForLine(lineNumber: NSInteger): NSRange;
  accessibilityFrameForRange(range: NSRange): NSRect;

  textContainer(): NSTextContainer;
  setTextContainer(textContainer: NSTextContainer): void;
  textContainerInset(): NSSize;
  setTextContainerInset(textContainerInset: NSSize): void;
  textContainerOrigin(): NSPoint;
  setTextContainerOrigin(textContainerOrigin: NSPoint): void;
  layoutManager(): NSLayoutManager;
  setLayoutManager(layoutManager: NSLayoutManager): void;
  textStorage(): NSTextStorage;
  setTextStorage(textStorage: NSTextStorage): void;
  shouldDrawInsertionPoint(): boolean;
  setShouldDrawInsertionPoint(shouldDrawInsertionPoint: boolean): void;
  static stronglyReferencesTextStorage(): boolean;
  static setStronglyReferencesTextStorage(stronglyReferencesTextStorage: boolean): void;
  rangeForUserCompletion(): NSRange;
  setRangeForUserCompletion(rangeForUserCompletion: NSRange): void;
  writablePasteboardTypes(): NSArray<any>;
  setWritablePasteboardTypes(writablePasteboardTypes: NSArray<any> | any[]): void;
  readablePasteboardTypes(): NSArray<any>;
  setReadablePasteboardTypes(readablePasteboardTypes: NSArray<any> | any[]): void;
  acceptableDragTypes(): NSArray<any>;
  setAcceptableDragTypes(acceptableDragTypes: NSArray<any> | any[]): void;
  selectedRanges(): NSArray<any>;
  setSelectedRanges(selectedRanges: NSArray<any> | any[]): void;
  selectionAffinity(): NSSelectionAffinity;
  setSelectionAffinity(selectionAffinity: NSSelectionAffinity): void;
  selectionGranularity(): NSSelectionGranularity;
  setSelectionGranularity(selectionGranularity: NSSelectionGranularity): void;
  selectedTextAttributes(): NSDictionary<any, any>;
  setSelectedTextAttributes(selectedTextAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  insertionPointColor(): NSColor;
  setInsertionPointColor(insertionPointColor: NSColor): void;
  markedTextAttributes(): NSDictionary<any, any>;
  setMarkedTextAttributes(markedTextAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  linkTextAttributes(): NSDictionary<any, any>;
  setLinkTextAttributes(linkTextAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  displaysLinkToolTips(): boolean;
  setDisplaysLinkToolTips(displaysLinkToolTips: boolean): void;
  acceptsGlyphInfo(): boolean;
  setAcceptsGlyphInfo(acceptsGlyphInfo: boolean): void;
  usesRuler(): boolean;
  setUsesRuler(usesRuler: boolean): void;
  usesInspectorBar(): boolean;
  setUsesInspectorBar(usesInspectorBar: boolean): void;
  continuousSpellCheckingEnabled(): boolean;
  setContinuousSpellCheckingEnabled(continuousSpellCheckingEnabled: boolean): void;
  spellCheckerDocumentTag(): NSInteger;
  setSpellCheckerDocumentTag(spellCheckerDocumentTag: NSInteger): void;
  grammarCheckingEnabled(): boolean;
  setGrammarCheckingEnabled(grammarCheckingEnabled: boolean): void;
  typingAttributes(): NSDictionary<any, any>;
  setTypingAttributes(typingAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  rangesForUserTextChange(): NSArray<any>;
  setRangesForUserTextChange(rangesForUserTextChange: NSArray<any> | any[]): void;
  rangesForUserCharacterAttributeChange(): NSArray<any>;
  setRangesForUserCharacterAttributeChange(rangesForUserCharacterAttributeChange: NSArray<any> | any[]): void;
  rangesForUserParagraphAttributeChange(): NSArray<any>;
  setRangesForUserParagraphAttributeChange(rangesForUserParagraphAttributeChange: NSArray<any> | any[]): void;
  rangeForUserTextChange(): NSRange;
  setRangeForUserTextChange(rangeForUserTextChange: NSRange): void;
  rangeForUserCharacterAttributeChange(): NSRange;
  setRangeForUserCharacterAttributeChange(rangeForUserCharacterAttributeChange: NSRange): void;
  rangeForUserParagraphAttributeChange(): NSRange;
  setRangeForUserParagraphAttributeChange(rangeForUserParagraphAttributeChange: NSRange): void;
  allowsDocumentBackgroundColorChange(): boolean;
  setAllowsDocumentBackgroundColorChange(allowsDocumentBackgroundColorChange: boolean): void;
  defaultParagraphStyle(): NSParagraphStyle;
  setDefaultParagraphStyle(defaultParagraphStyle: NSParagraphStyle): void;
  allowsUndo(): boolean;
  setAllowsUndo(allowsUndo: boolean): void;
  coalescingUndo(): boolean;
  setCoalescingUndo(coalescingUndo: boolean): void;
  allowsImageEditing(): boolean;
  setAllowsImageEditing(allowsImageEditing: boolean): void;
  usesRolloverButtonForSelection(): boolean;
  setUsesRolloverButtonForSelection(usesRolloverButtonForSelection: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  editable(): boolean;
  setEditable(editable: boolean): void;
  selectable(): boolean;
  setSelectable(selectable: boolean): void;
  richText(): boolean;
  setRichText(richText: boolean): void;
  importsGraphics(): boolean;
  setImportsGraphics(importsGraphics: boolean): void;
  drawsBackground(): boolean;
  setDrawsBackground(drawsBackground: boolean): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  fieldEditor(): boolean;
  setFieldEditor(fieldEditor: boolean): void;
  usesFontPanel(): boolean;
  setUsesFontPanel(usesFontPanel: boolean): void;
  rulerVisible(): boolean;
  setRulerVisible(rulerVisible: boolean): void;
  allowedInputSourceLocales(): NSArray<any>;
  setAllowedInputSourceLocales(allowedInputSourceLocales: NSArray<any> | any[]): void;
  smartInsertDeleteEnabled(): boolean;
  setSmartInsertDeleteEnabled(smartInsertDeleteEnabled: boolean): void;
  automaticQuoteSubstitutionEnabled(): boolean;
  setAutomaticQuoteSubstitutionEnabled(automaticQuoteSubstitutionEnabled: boolean): void;
  automaticLinkDetectionEnabled(): boolean;
  setAutomaticLinkDetectionEnabled(automaticLinkDetectionEnabled: boolean): void;
  automaticDataDetectionEnabled(): boolean;
  setAutomaticDataDetectionEnabled(automaticDataDetectionEnabled: boolean): void;
  automaticDashSubstitutionEnabled(): boolean;
  setAutomaticDashSubstitutionEnabled(automaticDashSubstitutionEnabled: boolean): void;
  automaticTextReplacementEnabled(): boolean;
  setAutomaticTextReplacementEnabled(automaticTextReplacementEnabled: boolean): void;
  automaticSpellingCorrectionEnabled(): boolean;
  setAutomaticSpellingCorrectionEnabled(automaticSpellingCorrectionEnabled: boolean): void;
  enabledTextCheckingTypes(): NSTextCheckingTypes;
  setEnabledTextCheckingTypes(enabledTextCheckingTypes: NSTextCheckingTypes): void;
  usesFindPanel(): boolean;
  setUsesFindPanel(usesFindPanel: boolean): void;
  usesFindBar(): boolean;
  setUsesFindBar(usesFindBar: boolean): void;
  incrementalSearchingEnabled(): boolean;
  setIncrementalSearchingEnabled(incrementalSearchingEnabled: boolean): void;
  automaticTextCompletionEnabled(): boolean;
  setAutomaticTextCompletionEnabled(automaticTextCompletionEnabled: boolean): void;
  allowsCharacterPickerTouchBarItem(): boolean;
  setAllowsCharacterPickerTouchBarItem(allowsCharacterPickerTouchBarItem: boolean): void;
  candidateListTouchBarItem(): NSCandidateListTouchBarItem<any>;
  setCandidateListTouchBarItem(candidateListTouchBarItem: NSCandidateListTouchBarItem<any>): void;
}

declare interface INSTextViewDelegate {
  textView_clickedOnLink_atIndex(textView: NSTextView, link: any, charIndex: NSUInteger): boolean;
  textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: any, rect: NSRect, event: NSEvent, charIndex: NSUInteger): void;
  textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: any, charIndex: NSUInteger): NSArray<any>;
  textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: any, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType): boolean;
  textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange): NSRange;
  textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSArray<any> | any[], newSelectedCharRanges: NSArray<any> | any[]): NSArray<any>;
  textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSDictionary<any, any> | {[key: string]: any}, newTypingAttributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  textViewDidChangeSelection(notification: NSNotification): void;
  textViewDidChangeTypingAttributes(notification: NSNotification): void;
  textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: NSString | string, characterIndex: NSUInteger): NSString;
  textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger | null): NSArray<any>;
  textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  textView_doCommandBySelector(textView: NSTextView, commandSelector: string): boolean;
  textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange): NSInteger;
  textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger): NSMenu;
  textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSDictionary<any, any> | {[key: string]: any}, checkingTypes: NSTextCheckingTypes): NSDictionary<any, any>;
  textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, results: NSArray<any> | any[], orthography: NSOrthography, wordCount: NSInteger): NSArray<any>;
  textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger): NSURL;
  textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray<any> | any[]): NSSharingServicePicker;
  undoManagerForTextView(view: NSTextView): NSUndoManager;
  textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSArray<any> | any[]): NSArray<any>;
  textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger): boolean;
  textView_clickedOnLink(textView: NSTextView, link: any): boolean;
  textView_clickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_draggedCell_inRect_event(view: NSTextView, cell: any, rect: NSRect, event: NSEvent): void;
}

declare type NSPasteboardTypeFindPanelSearchOptionKey = NSString

declare enum NSSelectionGranularity {
  NSSelectByCharacter = 0,
  NSSelectByWord = 1,
  NSSelectByParagraph = 2,
}

declare enum NSSelectionAffinity {
  NSSelectionAffinityUpstream = 0,
  NSSelectionAffinityDownstream = 1,
}

declare enum NSFindPanelAction {
  NSFindPanelActionShowFindPanel = 1,
  NSFindPanelActionNext = 2,
  NSFindPanelActionPrevious = 3,
  NSFindPanelActionReplaceAll = 4,
  NSFindPanelActionReplace = 5,
  NSFindPanelActionReplaceAndFind = 6,
  NSFindPanelActionSetFindString = 7,
  NSFindPanelActionReplaceAllInSelection = 8,
  NSFindPanelActionSelectAll = 9,
  NSFindPanelActionSelectAllInSelection = 10,
}

declare enum NSFindPanelSubstringMatchType {
  NSFindPanelSubstringMatchTypeContains = 0,
  NSFindPanelSubstringMatchTypeStartsWith = 1,
  NSFindPanelSubstringMatchTypeFullWord = 2,
  NSFindPanelSubstringMatchTypeEndsWith = 3,
}

declare class NSTitlebarAccessoryViewController extends NSViewController implements INSAnimationDelegate, INSAnimatablePropertyContainer {
  animationShouldStart(animation: NSAnimation): boolean;
  animationDidStop(animation: NSAnimation): void;
  animationDidEnd(animation: NSAnimation): void;
  animation_valueForProgress(animation: NSAnimation, progress: NSAnimationProgress): number;
  animation_didReachProgressMark(animation: NSAnimation, progress: NSAnimationProgress): void;
  animator(): NSTitlebarAccessoryViewController;
  animationForKey(key: NSAnimatablePropertyKey): any;
  static defaultAnimationForKey(key: NSAnimatablePropertyKey): any;

  layoutAttribute(): NSLayoutAttribute;
  setLayoutAttribute(layoutAttribute: NSLayoutAttribute): void;
  fullScreenMinHeight(): CGFloat;
  setFullScreenMinHeight(fullScreenMinHeight: CGFloat): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  animations(): NSDictionary<any, any>;
  setAnimations(animations: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class NSTokenField extends NSTextField {
  delegate(): any;
  setDelegate(delegate: any): void;
  tokenStyle(): NSTokenStyle;
  setTokenStyle(tokenStyle: NSTokenStyle): void;
  completionDelay(): NSTimeInterval;
  setCompletionDelay(completionDelay: NSTimeInterval): void;
  static defaultCompletionDelay(): NSTimeInterval;
  static setDefaultCompletionDelay(defaultCompletionDelay: NSTimeInterval): void;
  tokenizingCharacterSet(): NSCharacterSet;
  setTokenizingCharacterSet(tokenizingCharacterSet: NSCharacterSet): void;
  static defaultTokenizingCharacterSet(): NSCharacterSet;
  static setDefaultTokenizingCharacterSet(defaultTokenizingCharacterSet: NSCharacterSet): void;
}

declare interface INSTokenFieldDelegate {
  tokenField_completionsForSubstring_indexOfToken_indexOfSelectedItem(tokenField: NSTokenField, substring: NSString | string, tokenIndex: NSInteger, selectedIndex: NSInteger | null): NSArray<any>;
  tokenField_shouldAddObjects_atIndex(tokenField: NSTokenField, tokens: NSArray<any> | any[], index: NSUInteger): NSArray<any>;
  tokenField_displayStringForRepresentedObject(tokenField: NSTokenField, representedObject: any): NSString;
  tokenField_editingStringForRepresentedObject(tokenField: NSTokenField, representedObject: any): NSString;
  tokenField_representedObjectForEditingString(tokenField: NSTokenField, editingString: NSString | string): any;
  tokenField_writeRepresentedObjects_toPasteboard(tokenField: NSTokenField, objects: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  tokenField_readFromPasteboard(tokenField: NSTokenField, pboard: NSPasteboard): NSArray<any>;
  tokenField_menuForRepresentedObject(tokenField: NSTokenField, representedObject: any): NSMenu;
  tokenField_hasMenuForRepresentedObject(tokenField: NSTokenField, representedObject: any): boolean;
  tokenField_styleForRepresentedObject(tokenField: NSTokenField, representedObject: any): NSTokenStyle;
}

declare class NSTokenFieldCell extends NSTextFieldCell {
  tokenStyle(): NSTokenStyle;
  setTokenStyle(tokenStyle: NSTokenStyle): void;
  completionDelay(): NSTimeInterval;
  setCompletionDelay(completionDelay: NSTimeInterval): void;
  static defaultCompletionDelay(): NSTimeInterval;
  static setDefaultCompletionDelay(defaultCompletionDelay: NSTimeInterval): void;
  tokenizingCharacterSet(): NSCharacterSet;
  setTokenizingCharacterSet(tokenizingCharacterSet: NSCharacterSet): void;
  static defaultTokenizingCharacterSet(): NSCharacterSet;
  static setDefaultTokenizingCharacterSet(defaultTokenizingCharacterSet: NSCharacterSet): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface INSTokenFieldCellDelegate {
  tokenFieldCell_completionsForSubstring_indexOfToken_indexOfSelectedItem(tokenFieldCell: NSTokenFieldCell, substring: NSString | string, tokenIndex: NSInteger, selectedIndex: NSInteger): NSArray<any>;
  tokenFieldCell_shouldAddObjects_atIndex(tokenFieldCell: NSTokenFieldCell, tokens: NSArray<any> | any[], index: NSUInteger): NSArray<any>;
  tokenFieldCell_displayStringForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: any): NSString;
  tokenFieldCell_editingStringForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: any): NSString;
  tokenFieldCell_representedObjectForEditingString(tokenFieldCell: NSTokenFieldCell, editingString: NSString | string): any;
  tokenFieldCell_writeRepresentedObjects_toPasteboard(tokenFieldCell: NSTokenFieldCell, objects: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  tokenFieldCell_readFromPasteboard(tokenFieldCell: NSTokenFieldCell, pboard: NSPasteboard): NSArray<any>;
  tokenFieldCell_menuForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: any): NSMenu;
  tokenFieldCell_hasMenuForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: any): boolean;
  tokenFieldCell_styleForRepresentedObject(tokenFieldCell: NSTokenFieldCell, representedObject: any): NSTokenStyle;
}

declare enum NSTokenStyle {
  NSTokenStyleDefault,
  NSTokenStyleNone,
  NSTokenStyleRounded,
  NSTokenStyleSquared,
  NSTokenStylePlainSquared,
}

declare class NSToolbar extends NSObject {
  initWithIdentifier<T extends NSToolbar>(identifier: NSToolbarIdentifier): T;
  init<T extends NSToolbar>(): T;
  insertItemWithItemIdentifier_atIndex(itemIdentifier: NSToolbarItemIdentifier, index: NSInteger): void;
  removeItemAtIndex(index: NSInteger): void;
  runCustomizationPalette(sender: any | null): void;
  setConfigurationFromDictionary(configDict: NSDictionary<any, any> | {[key: string]: any}): void;
  validateVisibleItems(): void;
  itemWithIdentifier(identifier: NSString | string): NSToolbarItem;
  _toolbarView(): any;
  ms_toolbarHeight(): CGFloat;
  _fullLayout(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  visible(): boolean;
  setVisible(visible: boolean): void;
  customizationPaletteIsRunning(): boolean;
  setCustomizationPaletteIsRunning(customizationPaletteIsRunning: boolean): void;
  displayMode(): NSToolbarDisplayMode;
  setDisplayMode(displayMode: NSToolbarDisplayMode): void;
  selectedItemIdentifier(): NSToolbarItemIdentifier;
  setSelectedItemIdentifier(selectedItemIdentifier: NSToolbarItemIdentifier): void;
  sizeMode(): NSToolbarSizeMode;
  setSizeMode(sizeMode: NSToolbarSizeMode): void;
  showsBaselineSeparator(): boolean;
  setShowsBaselineSeparator(showsBaselineSeparator: boolean): void;
  allowsUserCustomization(): boolean;
  setAllowsUserCustomization(allowsUserCustomization: boolean): void;
  identifier(): NSToolbarIdentifier;
  setIdentifier(identifier: NSToolbarIdentifier): void;
  items(): NSArray<any>;
  setItems(items: NSArray<any> | any[]): void;
  visibleItems(): NSArray<any>;
  setVisibleItems(visibleItems: NSArray<any> | any[]): void;
  autosavesConfiguration(): boolean;
  setAutosavesConfiguration(autosavesConfiguration: boolean): void;
  configurationDictionary(): NSDictionary<any, any>;
  setConfigurationDictionary(configurationDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  allowsExtensionItems(): boolean;
  setAllowsExtensionItems(allowsExtensionItems: boolean): void;
  fullScreenAccessoryView(): NSView;
  setFullScreenAccessoryView(fullScreenAccessoryView: NSView): void;
  fullScreenAccessoryViewMinHeight(): CGFloat;
  setFullScreenAccessoryViewMinHeight(fullScreenAccessoryViewMinHeight: CGFloat): void;
  fullScreenAccessoryViewMaxHeight(): CGFloat;
  setFullScreenAccessoryViewMaxHeight(fullScreenAccessoryViewMaxHeight: CGFloat): void;
}

declare interface INSToolbarDelegate {
  toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSToolbarItemIdentifier, flag: boolean): NSToolbarItem;
  toolbarDefaultItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarAllowedItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarSelectableItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarWillAddItem(notification: NSNotification): void;
  toolbarDidRemoveItem(notification: NSNotification): void;
}

declare type NSToolbarIdentifier = NSString

declare type NSToolbarItemIdentifier = NSString

declare enum NSToolbarDisplayMode {
  NSToolbarDisplayModeDefault,
  NSToolbarDisplayModeIconAndLabel,
  NSToolbarDisplayModeIconOnly,
  NSToolbarDisplayModeLabelOnly,
}

declare enum NSToolbarSizeMode {
  NSToolbarSizeModeDefault,
  NSToolbarSizeModeRegular,
  NSToolbarSizeModeSmall,
}

declare class NSToolbarItem extends NSObject implements INSCopying, INSValidatedUserInterfaceItem {
  initWithItemIdentifier<T extends NSToolbarItem>(itemIdentifier: NSToolbarItemIdentifier): T;
  validate(): void;
  copyWithZone(zone: NSZone | null): any;

  itemIdentifier(): NSToolbarItemIdentifier;
  setItemIdentifier(itemIdentifier: NSToolbarItemIdentifier): void;
  toolbar(): NSToolbar;
  setToolbar(toolbar: NSToolbar): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  paletteLabel(): NSString;
  setPaletteLabel(paletteLabel: NSString | string): void;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
  menuFormRepresentation(): NSMenuItem;
  setMenuFormRepresentation(menuFormRepresentation: NSMenuItem): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  view(): NSView;
  setView(view: NSView): void;
  minSize(): NSSize;
  setMinSize(minSize: NSSize): void;
  maxSize(): NSSize;
  setMaxSize(maxSize: NSSize): void;
  visibilityPriority(): NSToolbarItemVisibilityPriority;
  setVisibilityPriority(visibilityPriority: NSToolbarItemVisibilityPriority): void;
  autovalidates(): boolean;
  setAutovalidates(autovalidates: boolean): void;
  allowsDuplicatesInToolbar(): boolean;
  setAllowsDuplicatesInToolbar(allowsDuplicatesInToolbar: boolean): void;
}

declare interface INSCloudSharingValidation {
  cloudShareForUserInterfaceItem(item: any): CKShare;
}

declare type NSToolbarItemVisibilityPriority = NSInteger

declare class NSToolbarItemGroup extends NSToolbarItem {
  subitems(): NSArray<any>;
  setSubitems(subitems: NSArray<any> | any[]): void;
}

declare class NSTouch extends NSObject implements INSCopying {
  locationInView(view: NSView | null): NSPoint;
  previousLocationInView(view: NSView | null): NSPoint;
  copyWithZone(zone: NSZone | null): any;

  identity(): any;
  setIdentity(identity: any): void;
  phase(): NSTouchPhase;
  setPhase(phase: NSTouchPhase): void;
  normalizedPosition(): NSPoint;
  setNormalizedPosition(normalizedPosition: NSPoint): void;
  resting(): boolean;
  setResting(resting: boolean): void;
  device(): any;
  setDevice(device: any): void;
  deviceSize(): NSSize;
  setDeviceSize(deviceSize: NSSize): void;
  type(): NSTouchType;
  setType(type: NSTouchType): void;
}

declare enum NSTouchPhase {
  NSTouchPhaseBegan = 1 << 0,
  NSTouchPhaseMoved = 1 << 1,
  NSTouchPhaseStationary = 1 << 2,
  NSTouchPhaseEnded = 1 << 3,
  NSTouchPhaseCancelled = 1 << 4,
  NSTouchPhaseTouching,
  NSTouchPhaseAny,
}

declare enum NSTouchType {
  NSTouchTypeDirect,
  NSTouchTypeIndirect,
}

declare enum NSTouchTypeMask {
  NSTouchTypeMaskDirect,
  NSTouchTypeMaskIndirect,
}

declare class NSTouchBar extends NSObject implements INSCoding, INSCoding {
  init<T extends NSTouchBar>(): T;
  initWithCoder<T extends NSTouchBar>(aDecoder: NSCoder): T;
  itemForIdentifier(identifier: NSTouchBarItemIdentifier): NSTouchBarItem;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTouchBar>(aDecoder: NSCoder): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTouchBar>(aDecoder: NSCoder): T;

  customizationIdentifier(): NSTouchBarCustomizationIdentifier;
  setCustomizationIdentifier(customizationIdentifier: NSTouchBarCustomizationIdentifier): void;
  customizationAllowedItemIdentifiers(): NSArray<any>;
  setCustomizationAllowedItemIdentifiers(customizationAllowedItemIdentifiers: NSArray<any> | any[]): void;
  customizationRequiredItemIdentifiers(): NSArray<any>;
  setCustomizationRequiredItemIdentifiers(customizationRequiredItemIdentifiers: NSArray<any> | any[]): void;
  defaultItemIdentifiers(): NSArray<any>;
  setDefaultItemIdentifiers(defaultItemIdentifiers: NSArray<any> | any[]): void;
  itemIdentifiers(): NSArray<any>;
  setItemIdentifiers(itemIdentifiers: NSArray<any> | any[]): void;
  principalItemIdentifier(): NSTouchBarItemIdentifier;
  setPrincipalItemIdentifier(principalItemIdentifier: NSTouchBarItemIdentifier): void;
  escapeKeyReplacementItemIdentifier(): NSTouchBarItemIdentifier;
  setEscapeKeyReplacementItemIdentifier(escapeKeyReplacementItemIdentifier: NSTouchBarItemIdentifier): void;
  templateItems(): NSSet<any>;
  setTemplateItems(templateItems: NSSet<any>): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  visible(): boolean;
  setVisible(visible: boolean): void;
}

declare interface INSTouchBarDelegate extends NSObject {
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;
}

declare interface INSTouchBarProvider {
  touchBar(): NSTouchBar;
  setTouchBar(touchBar: NSTouchBar): void;
}

declare type NSTouchBarCustomizationIdentifier = NSString

declare class NSTouchBarItem extends NSObject implements INSCoding, INSCoding {
  initWithIdentifier<T extends NSTouchBarItem>(identifier: NSTouchBarItemIdentifier): T;
  initWithCoder<T extends NSTouchBarItem>(coder: NSCoder): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTouchBarItem>(aDecoder: NSCoder): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTouchBarItem>(aDecoder: NSCoder): T;

  identifier(): NSTouchBarItemIdentifier;
  setIdentifier(identifier: NSTouchBarItemIdentifier): void;
  visibilityPriority(): NSTouchBarItemPriority;
  setVisibilityPriority(visibilityPriority: NSTouchBarItemPriority): void;
  view(): NSView;
  setView(view: NSView): void;
  viewController(): NSViewController;
  setViewController(viewController: NSViewController): void;
  customizationLabel(): NSString;
  setCustomizationLabel(customizationLabel: NSString | string): void;
  visible(): boolean;
  setVisible(visible: boolean): void;
}

declare type NSTouchBarItemIdentifier = NSString

declare type NSTouchBarItemPriority = number

declare class NSTrackingArea extends NSObject implements INSCopying, INSCoding {
  initWithRect_options_owner_userInfo<T extends NSTrackingArea>(rect: NSRect, options: NSTrackingAreaOptions, owner: any | null, userInfo: NSDictionary<any, any> | {[key: string]: any} | null): T;
  static mouseEnterExitTrackingArea(owner: any): NSTrackingArea;
  static trackingAreaWithOptions_owner(options: NSTrackingAreaOptions, owner: any): NSTrackingArea;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSTrackingArea>(aDecoder: NSCoder): T;

  rect(): NSRect;
  setRect(rect: NSRect): void;
  options(): NSTrackingAreaOptions;
  setOptions(options: NSTrackingAreaOptions): void;
  owner(): any;
  setOwner(owner: any): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare enum NSTrackingAreaOptions {
  NSTrackingMouseEnteredAndExited = 0x01,
  NSTrackingMouseMoved = 0x02,
  NSTrackingCursorUpdate = 0x04,
  NSTrackingActiveWhenFirstResponder = 0x10,
  NSTrackingActiveInKeyWindow = 0x20,
  NSTrackingActiveInActiveApp = 0x40,
  NSTrackingActiveAlways = 0x80,
  NSTrackingAssumeInside = 0x100,
  NSTrackingInVisibleRect = 0x200,
  NSTrackingEnabledDuringMouseDrag = 0x400,
}

declare class NSTreeController extends NSObjectController {
  rearrangeObjects(): void;
  add(sender: any | null): IBAction;
  remove(sender: any | null): IBAction;
  addChild(sender: any | null): IBAction;
  insert(sender: any | null): IBAction;
  insertChild(sender: any | null): IBAction;
  insertObject_atArrangedObjectIndexPath(object: any | null, indexPath: NSIndexPath): void;
  insertObjects_atArrangedObjectIndexPaths(objects: NSArray<any> | any[], indexPaths: NSArray<any> | any[]): void;
  removeObjectAtArrangedObjectIndexPath(indexPath: NSIndexPath): void;
  removeObjectsAtArrangedObjectIndexPaths(indexPaths: NSArray<any> | any[]): void;
  setSelectionIndexPaths(indexPaths: NSArray<any> | any[]): boolean;
  setSelectionIndexPath(indexPath: NSIndexPath | null): boolean;
  addSelectionIndexPaths(indexPaths: NSArray<any> | any[]): boolean;
  removeSelectionIndexPaths(indexPaths: NSArray<any> | any[]): boolean;
  moveNode_toIndexPath(node: NSTreeNode, indexPath: NSIndexPath): void;
  moveNodes_toIndexPath(nodes: NSArray<any> | any[], startingIndexPath: NSIndexPath): void;
  childrenKeyPathForNode(node: NSTreeNode): NSString;
  countKeyPathForNode(node: NSTreeNode): NSString;
  leafKeyPathForNode(node: NSTreeNode): NSString;

  arrangedObjects(): NSTreeNode;
  setArrangedObjects(arrangedObjects: NSTreeNode): void;
  childrenKeyPath(): NSString;
  setChildrenKeyPath(childrenKeyPath: NSString | string): void;
  countKeyPath(): NSString;
  setCountKeyPath(countKeyPath: NSString | string): void;
  leafKeyPath(): NSString;
  setLeafKeyPath(leafKeyPath: NSString | string): void;
  sortDescriptors(): NSArray<any>;
  setSortDescriptors(sortDescriptors: NSArray<any> | any[]): void;
  content(): any;
  setContent(content: any): void;
  canInsert(): boolean;
  setCanInsert(canInsert: boolean): void;
  canInsertChild(): boolean;
  setCanInsertChild(canInsertChild: boolean): void;
  canAddChild(): boolean;
  setCanAddChild(canAddChild: boolean): void;
  avoidsEmptySelection(): boolean;
  setAvoidsEmptySelection(avoidsEmptySelection: boolean): void;
  preservesSelection(): boolean;
  setPreservesSelection(preservesSelection: boolean): void;
  selectsInsertedObjects(): boolean;
  setSelectsInsertedObjects(selectsInsertedObjects: boolean): void;
  alwaysUsesMultipleValuesMarker(): boolean;
  setAlwaysUsesMultipleValuesMarker(alwaysUsesMultipleValuesMarker: boolean): void;
  selectedObjects(): NSArray<any>;
  setSelectedObjects(selectedObjects: NSArray<any> | any[]): void;
  selectionIndexPaths(): NSArray<any>;
  setSelectionIndexPaths(selectionIndexPaths: NSArray<any> | any[]): void;
  selectionIndexPath(): NSIndexPath;
  setSelectionIndexPath(selectionIndexPath: NSIndexPath): void;
  selectedNodes(): NSArray<any>;
  setSelectedNodes(selectedNodes: NSArray<any> | any[]): void;
}

declare class NSTreeNode extends NSObject {
  static treeNodeWithRepresentedObject(modelObject: any | null): NSTreeNode;
  initWithRepresentedObject<T extends NSTreeNode>(modelObject: any | null): T;
  descendantNodeAtIndexPath(indexPath: NSIndexPath): NSTreeNode;
  sortWithSortDescriptors_recursively(sortDescriptors: NSArray<any> | any[], recursively: boolean): void;

  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  indexPath(): NSIndexPath;
  setIndexPath(indexPath: NSIndexPath): void;
  leaf(): boolean;
  setLeaf(leaf: boolean): void;
  childNodes(): NSArray<any>;
  setChildNodes(childNodes: NSArray<any> | any[]): void;
  mutableChildNodes(): NSMutableArray<any>;
  setMutableChildNodes(mutableChildNodes: NSMutableArray<any> | any[]): void;
  parentNode(): NSTreeNode;
  setParentNode(parentNode: NSTreeNode): void;
}

declare class NSTypesetter extends NSObject {
  substituteFontForFont(originalFont: NSFont): NSFont;
  textTabForGlyphLocation_writingDirection_maxLocation(glyphLocation: CGFloat, direction: NSWritingDirection, maxLocation: CGFloat): NSTextTab;
  setParagraphGlyphRange_separatorGlyphRange(paragraphRange: NSRange, paragraphSeparatorRange: NSRange): void;
  layoutParagraphAtPoint(lineFragmentOrigin: NSPointPointer): NSUInteger;
  beginParagraph(): void;
  endParagraph(): void;
  beginLineWithGlyphAtIndex(glyphIndex: NSUInteger): void;
  endLineWithGlyphRange(lineGlyphRange: NSRange): void;
  lineSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  paragraphSpacingBeforeGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  paragraphSpacingAfterGlyphAtIndex_withProposedLineFragmentRect(glyphIndex: NSUInteger, rect: NSRect): CGFloat;
  getLineFragmentRect_usedRect_forParagraphSeparatorGlyphRange_atProposedOrigin(lineFragmentRect: NSRectPointer, lineFragmentUsedRect: NSRectPointer, paragraphSeparatorGlyphRange: NSRange, lineOrigin: NSPoint): void;
  setHardInvalidation_forGlyphRange(flag: boolean, glyphRange: NSRange): void;
  layoutGlyphsInLayoutManager_startingAtGlyphIndex_maxNumberOfLineFragments_nextGlyphIndex(layoutManager: NSLayoutManager, startGlyphIndex: NSUInteger, maxNumLines: NSUInteger, nextGlyph: NSUInteger): void;
  layoutCharactersInRange_forLayoutManager_maximumNumberOfLineFragments(characterRange: NSRange, layoutManager: NSLayoutManager, maxNumLines: NSUInteger): NSRange;
  static printingAdjustmentInLayoutManager_forNominallySpacedGlyphRange_packedGlyphs_count(layoutMgr: NSLayoutManager, nominallySpacedGlyphsRange: NSRange, packedGlyphs: string, packedGlyphsCount: NSUInteger): NSSize;
  baselineOffsetInLayoutManager_glyphIndex(layoutMgr: NSLayoutManager, glyphIndex: NSUInteger): CGFloat;
  static sharedSystemTypesetterForBehavior(behavior: NSTypesetterBehavior): any;
  willSetLineFragmentRect_forGlyphRange_usedRect_baselineOffset(lineRect: NSRectPointer, glyphRange: NSRange, usedRect: NSRectPointer, baselineOffset: CGFloat): void;
  shouldBreakLineByWordBeforeCharacterAtIndex(charIndex: NSUInteger): boolean;
  shouldBreakLineByHyphenatingBeforeCharacterAtIndex(charIndex: NSUInteger): boolean;
  hyphenationFactorForGlyphAtIndex(glyphIndex: NSUInteger): number;
  hyphenCharacterForGlyphAtIndex(glyphIndex: NSUInteger): string;
  boundingBoxForControlGlyphAtIndex_forTextContainer_proposedLineFragment_glyphPosition_characterIndex(glyphIndex: NSUInteger, textContainer: NSTextContainer, proposedRect: NSRect, glyphPosition: NSPoint, charIndex: NSUInteger): NSRect;
  characterRangeForGlyphRange_actualGlyphRange(glyphRange: NSRange, actualGlyphRange: NSRangePointer | null): NSRange;
  glyphRangeForCharacterRange_actualCharacterRange(charRange: NSRange, actualCharRange: NSRangePointer | null): NSRange;
  getLineFragmentRect_usedRect_remainingRect_forStartingGlyphAtIndex_proposedRect_lineSpacing_paragraphSpacingBefore_paragraphSpacingAfter(lineFragmentRect: NSRectPointer, lineFragmentUsedRect: NSRectPointer, remainingRect: NSRectPointer, startingGlyphIndex: NSUInteger, proposedRect: NSRect, lineSpacing: CGFloat, paragraphSpacingBefore: CGFloat, paragraphSpacingAfter: CGFloat): void;
  setLineFragmentRect_forGlyphRange_usedRect_baselineOffset(fragmentRect: NSRect, glyphRange: NSRange, usedRect: NSRect, baselineOffset: CGFloat): void;
  setNotShownAttribute_forGlyphRange(flag: boolean, glyphRange: NSRange): void;
  setDrawsOutsideLineFragment_forGlyphRange(flag: boolean, glyphRange: NSRange): void;
  setLocation_withAdvancements_forStartOfGlyphRange(location: NSPoint, advancements: CGFloat, glyphRange: NSRange): void;
  setAttachmentSize_forGlyphRange(attachmentSize: NSSize, glyphRange: NSRange): void;
  setBidiLevels_forGlyphRange(levels: number, glyphRange: NSRange): void;
  actionForControlCharacterAtIndex(charIndex: NSUInteger): NSTypesetterControlCharacterAction;
  getGlyphsInRange_glyphs_characterIndexes_glyphInscriptions_elasticBits_bidiLevels(glyphsRange: NSRange, glyphBuffer: NSGlyph, charIndexBuffer: NSUInteger, inscribeBuffer: NSGlyphInscription, elasticBuffer: boolean, bidiLevelBuffer: string): NSUInteger;
  substituteGlyphsInRange_withGlyphs(glyphRange: NSRange, glyphs: NSGlyph): void;
  insertGlyph_atGlyphIndex_characterIndex(glyph: NSGlyph, glyphIndex: NSUInteger, characterIndex: NSUInteger): void;
  deleteGlyphsInRange(glyphRange: NSRange): void;

  usesFontLeading(): boolean;
  setUsesFontLeading(usesFontLeading: boolean): void;
  typesetterBehavior(): NSTypesetterBehavior;
  setTypesetterBehavior(typesetterBehavior: NSTypesetterBehavior): void;
  hyphenationFactor(): number;
  setHyphenationFactor(hyphenationFactor: number): void;
  lineFragmentPadding(): CGFloat;
  setLineFragmentPadding(lineFragmentPadding: CGFloat): void;
  bidiProcessingEnabled(): boolean;
  setBidiProcessingEnabled(bidiProcessingEnabled: boolean): void;
  attributedString(): NSAttributedString;
  setAttributedString(attributedString: NSAttributedString): void;
  paragraphGlyphRange(): NSRange;
  setParagraphGlyphRange(paragraphGlyphRange: NSRange): void;
  paragraphSeparatorGlyphRange(): NSRange;
  setParagraphSeparatorGlyphRange(paragraphSeparatorGlyphRange: NSRange): void;
  paragraphCharacterRange(): NSRange;
  setParagraphCharacterRange(paragraphCharacterRange: NSRange): void;
  paragraphSeparatorCharacterRange(): NSRange;
  setParagraphSeparatorCharacterRange(paragraphSeparatorCharacterRange: NSRange): void;
  attributesForExtraLineFragment(): NSDictionary<any, any>;
  setAttributesForExtraLineFragment(attributesForExtraLineFragment: NSDictionary<any, any> | {[key: string]: any}): void;
  layoutManager(): NSLayoutManager;
  setLayoutManager(layoutManager: NSLayoutManager): void;
  textContainers(): NSArray<any>;
  setTextContainers(textContainers: NSArray<any> | any[]): void;
  currentTextContainer(): NSTextContainer;
  setCurrentTextContainer(currentTextContainer: NSTextContainer): void;
  currentParagraphStyle(): NSParagraphStyle;
  setCurrentParagraphStyle(currentParagraphStyle: NSParagraphStyle): void;
  static sharedSystemTypesetter(): NSTypesetter;
  static setSharedSystemTypesetter(sharedSystemTypesetter: NSTypesetter): void;
  static defaultTypesetterBehavior(): NSTypesetterBehavior;
  static setDefaultTypesetterBehavior(defaultTypesetterBehavior: NSTypesetterBehavior): void;
}

declare enum NSTypesetterControlCharacterAction {
  NSTypesetterZeroAdvancementAction,
  NSTypesetterWhitespaceAction,
  NSTypesetterHorizontalTabAction,
  NSTypesetterLineBreakAction,
  NSTypesetterParagraphBreakAction,
  NSTypesetterContainerBreakAction,
}

declare class NSUserDefaultsController extends NSController {
  initWithDefaults_initialValues<T extends NSUserDefaultsController>(defaults: NSUserDefaults | null, initialValues: NSDictionary<any, any> | {[key: string]: any} | null): T;
  // initWithCoder<T extends NSUserDefaultsController>(coder: NSCoder): T;
  revert(sender: any | null): IBAction;
  save(sender: any | null): IBAction;
  revertToInitialValues(sender: any | null): IBAction;

  static sharedUserDefaultsController(): NSUserDefaultsController;
  static setSharedUserDefaultsController(sharedUserDefaultsController: NSUserDefaultsController): void;
  defaults(): NSUserDefaults;
  setDefaults(defaults: NSUserDefaults): void;
  initialValues(): NSDictionary<any, any>;
  setInitialValues(initialValues: NSDictionary<any, any> | {[key: string]: any}): void;
  appliesImmediately(): boolean;
  setAppliesImmediately(appliesImmediately: boolean): void;
  hasUnappliedChanges(): boolean;
  setHasUnappliedChanges(hasUnappliedChanges: boolean): void;
  values(): any;
  setValues(values: any): void;
}

declare class NSUserInterfaceCompressionOptions extends NSObject implements INSCopying, INSCoding {
  init<T extends NSUserInterfaceCompressionOptions>(): T;
  initWithCoder<T extends NSUserInterfaceCompressionOptions>(coder: NSCoder): T;
  initWithIdentifier<T extends NSUserInterfaceCompressionOptions>(identifier: NSString | string): T;
  initWithCompressionOptions<T extends NSUserInterfaceCompressionOptions>(options: NSSet<any>): T;
  containsOptions(options: NSUserInterfaceCompressionOptions): boolean;
  intersectsOptions(options: NSUserInterfaceCompressionOptions): boolean;
  optionsByAddingOptions(options: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
  optionsByRemovingOptions(options: NSUserInterfaceCompressionOptions): NSUserInterfaceCompressionOptions;
  copyWithZone(zone: NSZone | null): any;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends NSUserInterfaceCompressionOptions>(aDecoder: NSCoder): T;

  empty(): boolean;
  setEmpty(empty: boolean): void;
  static hideImagesOption(): NSUserInterfaceCompressionOptions;
  static setHideImagesOption(hideImagesOption: NSUserInterfaceCompressionOptions): void;
  static hideTextOption(): NSUserInterfaceCompressionOptions;
  static setHideTextOption(hideTextOption: NSUserInterfaceCompressionOptions): void;
  static reduceMetricsOption(): NSUserInterfaceCompressionOptions;
  static setReduceMetricsOption(reduceMetricsOption: NSUserInterfaceCompressionOptions): void;
  static breakEqualWidthsOption(): NSUserInterfaceCompressionOptions;
  static setBreakEqualWidthsOption(breakEqualWidthsOption: NSUserInterfaceCompressionOptions): void;
  static standardOptions(): NSUserInterfaceCompressionOptions;
  static setStandardOptions(standardOptions: NSUserInterfaceCompressionOptions): void;
}

declare interface INSUserInterfaceCompression {
  compressWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): void;
  minimumSizeWithPrioritizedCompressionOptions(prioritizedOptions: NSArray<any> | any[]): NSSize;

  activeCompressionOptions(): NSUserInterfaceCompressionOptions;
  setActiveCompressionOptions(activeCompressionOptions: NSUserInterfaceCompressionOptions): void;
}

declare interface INSUserInterfaceItemIdentification {
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
}

declare type NSUserInterfaceItemIdentifier = NSString

declare interface INSUserInterfaceItemSearching {
  searchForItemsWithSearchString_resultLimit_matchedItemHandler(searchString: NSString | string, resultLimit: NSInteger, handleMatchedItems: Block): void;
  localizedTitlesForItem(item: any): NSArray<any>;
  performActionForItem(item: any): void;
  showAllHelpTopicsForSearchString(searchString: NSString | string): void;
}

declare enum NSUserInterfaceLayoutDirection {
  NSUserInterfaceLayoutDirectionLeftToRight = 0,
  NSUserInterfaceLayoutDirectionRightToLeft = 1,
}

declare enum NSUserInterfaceLayoutOrientation {
  NSUserInterfaceLayoutOrientationHorizontal = 0,
  NSUserInterfaceLayoutOrientationVertical = 1,
}

declare interface INSValidatedUserInterfaceItem {
  action(): string;
  setAction(action: string): void;
  tag(): NSInteger;
  setTag(tag: NSInteger): void;
}

declare interface INSUserInterfaceValidations {
  validateUserInterfaceItem(item: any): boolean;
}

declare type NSTrackingRectTag = NSInteger

declare type NSToolTipTag = NSInteger

declare type NSViewFullScreenModeOptionKey = NSString

declare type NSDefinitionOptionKey = NSString

declare type NSDefinitionPresentationType = NSString

declare enum NSAutoresizingMaskOptions {
  NSViewNotSizable = 0,
  NSViewMinXMargin = 1,
  NSViewWidthSizable = 2,
  NSViewMaxXMargin = 4,
  NSViewMinYMargin = 8,
  NSViewHeightSizable = 16,
  NSViewMaxYMargin = 32,
}

declare enum NSBorderType {
  NSNoBorder = 0,
  NSLineBorder = 1,
  NSBezelBorder = 2,
  NSGrooveBorder = 3,
}

declare enum NSViewLayerContentsRedrawPolicy {
  NSViewLayerContentsRedrawNever = 0,
  NSViewLayerContentsRedrawOnSetNeedsDisplay = 1,
  NSViewLayerContentsRedrawDuringViewResize = 2,
  NSViewLayerContentsRedrawBeforeViewResize = 3,
  NSViewLayerContentsRedrawCrossfade = 4,
}

declare enum NSViewLayerContentsPlacement {
  NSViewLayerContentsPlacementScaleAxesIndependently = 0,
  NSViewLayerContentsPlacementScaleProportionallyToFit = 1,
  NSViewLayerContentsPlacementScaleProportionallyToFill = 2,
  NSViewLayerContentsPlacementCenter = 3,
  NSViewLayerContentsPlacementTop = 4,
  NSViewLayerContentsPlacementTopRight = 5,
  NSViewLayerContentsPlacementRight = 6,
  NSViewLayerContentsPlacementBottomRight = 7,
  NSViewLayerContentsPlacementBottom = 8,
  NSViewLayerContentsPlacementBottomLeft = 9,
  NSViewLayerContentsPlacementLeft = 10,
  NSViewLayerContentsPlacementTopLeft = 11,
}

declare class NSViewController extends NSResponder implements INSCoding, INSSeguePerforming, INSUserInterfaceItemIdentification {
  initWithNibName_bundle<T extends NSViewController>(nibNameOrNil: NSNibName | null, nibBundleOrNil: NSBundle | null): T;
  // initWithCoder<T extends NSViewController>(coder: NSCoder): T;
  loadView(): void;
  commitEditingWithDelegate_didCommitSelector_contextInfo(delegate: any | null, didCommitSelector: string | null, contextInfo: void | null): void;
  commitEditing(): boolean;
  discardEditing(): void;
  viewDidLoad(): void;
  viewWillAppear(): void;
  viewDidAppear(): void;
  viewWillDisappear(): void;
  viewDidDisappear(): void;
  updateViewConstraints(): void;
  viewWillLayout(): void;
  viewDidLayout(): void;
  presentViewController_animator(viewController: NSViewController, animator: any): void;
  dismissViewController(viewController: NSViewController): void;
  dismissController(sender: any | null): IBAction;
  presentViewControllerAsSheet(viewController: NSViewController): void;
  presentViewControllerAsModalWindow(viewController: NSViewController): void;
  presentViewController_asPopoverRelativeToRect_ofView_preferredEdge_behavior(viewController: NSViewController, positioningRect: NSRect, positioningView: NSView, preferredEdge: NSRectEdge, behavior: NSPopoverBehavior): void;
  transitionFromViewController_toViewController_options_completionHandler(fromViewController: NSViewController, toViewController: NSViewController, options: NSViewControllerTransitionOptions, completion: Block): void;
  addChildViewController(childViewController: NSViewController): void;
  removeFromParentViewController(): void;
  insertChildViewController_atIndex(childViewController: NSViewController, index: NSInteger): void;
  removeChildViewControllerAtIndex(index: NSInteger): void;
  preferredContentSizeDidChangeForViewController(viewController: NSViewController): void;
  viewWillTransitionToSize(newSize: NSSize): void;
  presentViewController_asBCPopoverRelativeToView_preferredEdge_screenEdgeBehaviour(viewController: NSViewController, positioningView: NSView, preferredEdge: NSRectEdge, behaviour: BCPopoverScreenEdgeBehaviour): BCPopover;
  targetViewControllerForAction_sender(action: string, sender: any | null): NSViewController;
  ensureLoaded(): void;
  inspectorController(): MSInspectorController;
  reloadInspectorStack(sender: any): IBAction;
  encodeWithCoder(aCoder: NSCoder): void;
  // initWithCoder<T extends NSViewController>(aDecoder: NSCoder): T;
  prepareForSegue_sender(segue: NSStoryboardSegue, sender: any | null): void;
  performSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: any | null): void;
  shouldPerformSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: any | null): boolean;

  nibName(): NSNibName;
  setNibName(nibName: NSNibName): void;
  nibBundle(): NSBundle;
  setNibBundle(nibBundle: NSBundle): void;
  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  view(): NSView;
  setView(view: NSView): void;
  viewLoaded(): boolean;
  setViewLoaded(viewLoaded: boolean): void;
  preferredContentSize(): NSSize;
  setPreferredContentSize(preferredContentSize: NSSize): void;
  presentedViewControllers(): NSArray<any>;
  setPresentedViewControllers(presentedViewControllers: NSArray<any> | any[]): void;
  presentingViewController(): NSViewController;
  setPresentingViewController(presentingViewController: NSViewController): void;
  parentViewController(): NSViewController;
  setParentViewController(parentViewController: NSViewController): void;
  childViewControllers(): NSArray<any>;
  setChildViewControllers(childViewControllers: NSArray<any> | any[]): void;
  storyboard(): NSStoryboard;
  setStoryboard(storyboard: NSStoryboard): void;
  extensionContext(): NSExtensionContext;
  setExtensionContext(extensionContext: NSExtensionContext): void;
  sourceItemView(): NSView;
  setSourceItemView(sourceItemView: NSView): void;
  preferredScreenOrigin(): NSPoint;
  setPreferredScreenOrigin(preferredScreenOrigin: NSPoint): void;
  preferredMinimumSize(): NSSize;
  setPreferredMinimumSize(preferredMinimumSize: NSSize): void;
  preferredMaximumSize(): NSSize;
  setPreferredMaximumSize(preferredMaximumSize: NSSize): void;
  rootViewController(): NSViewController;
  setRootViewController(rootViewController: NSViewController): void;
  identifier(): NSUserInterfaceItemIdentifier;
  setIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
}

declare interface INSViewControllerPresentationAnimator {
  animatePresentationOfViewController_fromViewController(viewController: NSViewController, fromViewController: NSViewController): void;
  animateDismissalOfViewController_fromViewController(viewController: NSViewController, fromViewController: NSViewController): void;
}

declare enum NSViewControllerTransitionOptions {
  NSViewControllerTransitionNone = 0x0,
  NSViewControllerTransitionCrossfade = 0x1,
  NSViewControllerTransitionSlideUp = 0x10,
  NSViewControllerTransitionSlideDown = 0x20,
  NSViewControllerTransitionSlideLeft = 0x40,
  NSViewControllerTransitionSlideRight = 0x80,
  NSViewControllerTransitionSlideForward = 0x140,
  NSViewControllerTransitionSlideBackward = 0x180,
  NSViewControllerTransitionAllowUserInteraction = 0x1000,
}

declare class NSVisualEffectView extends NSView {
  material(): NSVisualEffectMaterial;
  setMaterial(material: NSVisualEffectMaterial): void;
  interiorBackgroundStyle(): NSBackgroundStyle;
  setInteriorBackgroundStyle(interiorBackgroundStyle: NSBackgroundStyle): void;
  blendingMode(): NSVisualEffectBlendingMode;
  setBlendingMode(blendingMode: NSVisualEffectBlendingMode): void;
  state(): NSVisualEffectState;
  setState(state: NSVisualEffectState): void;
  maskImage(): NSImage;
  setMaskImage(maskImage: NSImage): void;
  emphasized(): boolean;
  setEmphasized(emphasized: boolean): void;
}

declare enum NSVisualEffectMaterial {
  NSVisualEffectMaterialAppearanceBased = 0,
  NSVisualEffectMaterialTitlebar = 3,
  NSVisualEffectMaterialSelection = 4,
  NSVisualEffectMaterialMenu = 5,
  NSVisualEffectMaterialPopover = 6,
  NSVisualEffectMaterialSidebar = 7,
  NSVisualEffectMaterialLight = 1,
  NSVisualEffectMaterialDark = 2,
  NSVisualEffectMaterialMediumLight = 8,
  NSVisualEffectMaterialUltraDark = 9,
}

declare enum NSVisualEffectBlendingMode {
  NSVisualEffectBlendingModeBehindWindow,
  NSVisualEffectBlendingModeWithinWindow,
}

declare enum NSVisualEffectState {
  NSVisualEffectStateFollowsWindowActiveState,
  NSVisualEffectStateActive,
  NSVisualEffectStateInactive,
}

declare interface INSWindowDelegate {
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
}

declare type NSWindowLevel = NSInteger

declare type NSWindowFrameAutosaveName = NSString

declare type NSWindowTabbingIdentifier = NSString

declare enum NSWindowStyleMask {
  NSWindowStyleMaskBorderless = 0,
  NSWindowStyleMaskTitled = 1 << 0,
  NSWindowStyleMaskClosable = 1 << 1,
  NSWindowStyleMaskMiniaturizable = 1 << 2,
  NSWindowStyleMaskResizable = 1 << 3,
  NSWindowStyleMaskTexturedBackground = 1 << 8,
  NSWindowStyleMaskUnifiedTitleAndToolbar = 1 << 12,
  NSWindowStyleMaskFullScreen = 1 << 14,
  NSWindowStyleMaskFullSizeContentView = 1 << 15,
  NSWindowStyleMaskUtilityWindow = 1 << 4,
  NSWindowStyleMaskDocModalWindow = 1 << 6,
  NSWindowStyleMaskNonactivatingPanel = 1 << 7,
  NSWindowStyleMaskHUDWindow = 1 << 13,
}

declare enum NSWindowSharingType {
  NSWindowSharingNone = 0,
  NSWindowSharingReadOnly = 1,
  NSWindowSharingReadWrite = 2,
}

declare enum NSWindowBackingLocation {
  NSWindowBackingLocationDefault = 0,
  NSWindowBackingLocationVideoMemory = 1,
  NSWindowBackingLocationMainMemory = 2,
}

declare enum NSWindowCollectionBehavior {
  NSWindowCollectionBehaviorDefault = 0,
  NSWindowCollectionBehaviorCanJoinAllSpaces = 1 << 0,
  NSWindowCollectionBehaviorMoveToActiveSpace = 1 << 1,
  NSWindowCollectionBehaviorManaged = 1 << 2,
  NSWindowCollectionBehaviorTransient = 1 << 3,
  NSWindowCollectionBehaviorStationary = 1 << 4,
  NSWindowCollectionBehaviorParticipatesInCycle = 1 << 5,
  NSWindowCollectionBehaviorIgnoresCycle = 1 << 6,
  NSWindowCollectionBehaviorFullScreenPrimary = 1 << 7,
  NSWindowCollectionBehaviorFullScreenAuxiliary = 1 << 8,
  NSWindowCollectionBehaviorFullScreenNone = 1 << 9,
  NSWindowCollectionBehaviorFullScreenAllowsTiling = 1 << 11,
  NSWindowCollectionBehaviorFullScreenDisallowsTiling = 1 << 12,
}

declare enum NSWindowAnimationBehavior {
  NSWindowAnimationBehaviorDefault = 0,
  NSWindowAnimationBehaviorNone = 2,
  NSWindowAnimationBehaviorDocumentWindow = 3,
  NSWindowAnimationBehaviorUtilityWindow = 4,
  NSWindowAnimationBehaviorAlertPanel = 5,
}

declare enum NSWindowNumberListOptions {
  NSWindowNumberListAllApplications = 1 << 0,
  NSWindowNumberListAllSpaces = 1 << 4,
}

declare enum NSWindowOcclusionState {
  NSWindowOcclusionStateVisible = 1 << 1,
}

declare enum NSSelectionDirection {
  NSDirectSelection = 0,
  NSSelectingNext,
  NSSelectingPrevious,
}

declare enum NSWindowButton {
  NSWindowCloseButton,
  NSWindowMiniaturizeButton,
  NSWindowZoomButton,
  NSWindowToolbarButton,
  NSWindowDocumentIconButton,
  NSWindowDocumentVersionsButton = 6,
  NSWindowFullScreenButton,
}

declare enum NSWindowTitleVisibility {
  NSWindowTitleVisible = 0,
  NSWindowTitleHidden = 1,
}

declare enum NSWindowUserTabbingPreference {
  NSWindowUserTabbingPreferenceManual,
  NSWindowUserTabbingPreferenceAlways,
  NSWindowUserTabbingPreferenceInFullScreen,
}

declare enum NSWindowTabbingMode {
  NSWindowTabbingModeAutomatic,
  NSWindowTabbingModePreferred,
  NSWindowTabbingModeDisallowed,
}

declare class NSWindowController extends NSResponder implements INSSeguePerforming {
  initWithWindow<T extends NSWindowController>(window: NSWindow | null): T;
  // initWithCoder<T extends NSWindowController>(coder: NSCoder): T;
  initWithWindowNibName<T extends NSWindowController>(windowNibName: NSNibName): T;
  initWithWindowNibName_owner<T extends NSWindowController>(windowNibName: NSNibName, owner: any): T;
  initWithWindowNibPath_owner<T extends NSWindowController>(windowNibPath: NSString | string, owner: any): T;
  setDocumentEdited(dirtyFlag: boolean): void;
  synchronizeWindowTitleWithDocumentName(): void;
  windowTitleForDocumentDisplayName(displayName: NSString | string): NSString;
  windowWillLoad(): void;
  windowDidLoad(): void;
  loadWindow(): void;
  close(): void;
  showWindow(sender: any | null): IBAction;
  dismissController(sender: any | null): IBAction;
  prepareForSegue_sender(segue: NSStoryboardSegue, sender: any | null): void;
  performSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: any | null): void;
  shouldPerformSegueWithIdentifier_sender(identifier: NSStoryboardSegueIdentifier, sender: any | null): boolean;

  windowNibName(): NSNibName;
  setWindowNibName(windowNibName: NSNibName): void;
  windowNibPath(): NSString;
  setWindowNibPath(windowNibPath: NSString | string): void;
  owner(): any;
  setOwner(owner: any): void;
  windowFrameAutosaveName(): NSWindowFrameAutosaveName;
  setWindowFrameAutosaveName(windowFrameAutosaveName: NSWindowFrameAutosaveName): void;
  shouldCascadeWindows(): boolean;
  setShouldCascadeWindows(shouldCascadeWindows: boolean): void;
  document(): any;
  setDocument(document: any): void;
  shouldCloseDocument(): boolean;
  setShouldCloseDocument(shouldCloseDocument: boolean): void;
  contentViewController(): NSViewController;
  setContentViewController(contentViewController: NSViewController): void;
  window(): NSWindow;
  setWindow(window: NSWindow): void;
  windowLoaded(): boolean;
  setWindowLoaded(windowLoaded: boolean): void;
  storyboard(): NSStoryboard;
  setStoryboard(storyboard: NSStoryboard): void;
}

declare interface INSWindowRestoration {}

declare class NSWindowTab extends NSObject {
  title(): NSString;
  setTitle(title: NSString | string): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  toolTip(): NSString;
  setToolTip(toolTip: NSString | string): void;
  accessoryView(): NSView;
  setAccessoryView(accessoryView: NSView): void;
}

declare class NSWindowTabGroup extends NSObject {
  addWindow(window: NSWindow): void;
  insertWindow_atIndex(window: NSWindow, index: NSInteger): void;
  removeWindow(window: NSWindow): void;

  identifier(): NSWindowTabbingIdentifier;
  setIdentifier(identifier: NSWindowTabbingIdentifier): void;
  windows(): NSArray<any>;
  setWindows(windows: NSArray<any> | any[]): void;
  overviewVisible(): boolean;
  setOverviewVisible(overviewVisible: boolean): void;
  tabBarVisible(): boolean;
  setTabBarVisible(tabBarVisible: boolean): void;
  selectedWindow(): NSWindow;
  setSelectedWindow(selectedWindow: NSWindow): void;
}

declare type NSWorkspaceLaunchConfigurationKey = NSString

declare type NSWorkspaceDesktopImageOptionKey = NSString

declare type NSWorkspaceFileOperationName = NSString

declare enum NSWorkspaceLaunchOptions {
  NSWorkspaceLaunchAndPrint = 0x00000002,
  NSWorkspaceLaunchWithErrorPresentation = 0x00000040,
  NSWorkspaceLaunchInhibitingBackgroundOnly = 0x00000080,
  NSWorkspaceLaunchWithoutAddingToRecents = 0x00000100,
  NSWorkspaceLaunchWithoutActivation = 0x00000200,
  NSWorkspaceLaunchAsync = 0x00010000,
  NSWorkspaceLaunchNewInstance = 0x00080000,
  NSWorkspaceLaunchAndHide = 0x00100000,
  NSWorkspaceLaunchAndHideOthers = 0x00200000,
  NSWorkspaceLaunchDefault,
  NSWorkspaceLaunchAllowingClassicStartup = 0x00020000,
  NSWorkspaceLaunchPreferringClassic = 0x00040000,
}

declare enum NSWorkspaceIconCreationOptions {
  NSExcludeQuickDrawElementsIconCreationOption = 1 << 1,
  NSExclude10_4ElementsIconCreationOption = 1 << 2,
}

declare class AFHTTPRequestOperation extends AFURLConnectionOperation {
  setCompletionBlockWithSuccess_failure(success: Block | null, failure: Block | null): void;

  response(): NSHTTPURLResponse;
  setResponse(response: NSHTTPURLResponse): void;
  responseSerializer(): AFHTTPResponseSerializer;
  setResponseSerializer(responseSerializer: AFHTTPResponseSerializer): void;
  responseObject(): any;
  setResponseObject(responseObject: any): void;
}

declare class AFHTTPRequestOperationManager extends NSObject implements INSSecureCoding, INSCopying {
  static manager(): AFHTTPRequestOperationManager;
  initWithBaseURL<T extends AFHTTPRequestOperationManager>(url: NSURL | null): T;
  HTTPRequestOperationWithRequest_success_failure(request: NSURLRequest, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  GET_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  HEAD_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  POST_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  POST_parameters_constructingBodyWithBlock_success_failure(URLString: NSString | string, parameters: any | null, block: Block | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  PUT_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  PATCH_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  DELETE_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): AFHTTPRequestOperation;
  copyWithZone(zone: NSZone | null): any;

  baseURL(): NSURL;
  setBaseURL(baseURL: NSURL): void;
  requestSerializer(): AFHTTPRequestSerializer;
  setRequestSerializer(requestSerializer: AFHTTPRequestSerializer): void;
  responseSerializer(): AFHTTPResponseSerializer;
  setResponseSerializer(responseSerializer: AFHTTPResponseSerializer): void;
  operationQueue(): NSOperationQueue;
  setOperationQueue(operationQueue: NSOperationQueue): void;
  shouldUseCredentialStorage(): boolean;
  setShouldUseCredentialStorage(shouldUseCredentialStorage: boolean): void;
  credential(): NSURLCredential;
  setCredential(credential: NSURLCredential): void;
  securityPolicy(): AFSecurityPolicy;
  setSecurityPolicy(securityPolicy: AFSecurityPolicy): void;
  reachabilityManager(): AFNetworkReachabilityManager;
  setReachabilityManager(reachabilityManager: AFNetworkReachabilityManager): void;
  completionQueue(): dispatch_queue_t;
  setCompletionQueue(completionQueue: dispatch_queue_t): void;
  completionGroup(): dispatch_group_t;
  setCompletionGroup(completionGroup: dispatch_group_t): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class AFHTTPSessionManager extends AFURLSessionManager implements INSSecureCoding, INSCopying {
  static manager(): AFHTTPSessionManager;
  initWithBaseURL<T extends AFHTTPSessionManager>(url: NSURL | null): T;
  initWithBaseURL_sessionConfiguration<T extends AFHTTPSessionManager>(url: NSURL | null, configuration: NSURLSessionConfiguration | null): T;
  GET_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  HEAD_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  POST_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  POST_parameters_constructingBodyWithBlock_success_failure(URLString: NSString | string, parameters: any | null, block: Block | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  PUT_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  PATCH_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  DELETE_parameters_success_failure(URLString: NSString | string, parameters: any | null, success: Block | null, failure: Block | null): NSURLSessionDataTask;
  copyWithZone(zone: NSZone | null): any;

  baseURL(): NSURL;
  setBaseURL(baseURL: NSURL): void;
  requestSerializer(): AFHTTPRequestSerializer;
  setRequestSerializer(requestSerializer: AFHTTPRequestSerializer): void;
  responseSerializer(): AFHTTPResponseSerializer;
  setResponseSerializer(responseSerializer: AFHTTPResponseSerializer): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class AFNetworkReachabilityManager extends NSObject {
  static sharedManager(): AFNetworkReachabilityManager;
  static managerForDomain(domain: NSString | string): AFNetworkReachabilityManager;
  static managerForAddress(address: void): AFNetworkReachabilityManager;
  initWithReachability<T extends AFNetworkReachabilityManager>(reachability: SCNetworkReachabilityRef): T;
  startMonitoring(): void;
  stopMonitoring(): void;
  localizedNetworkReachabilityStatusString(): NSString;
  setReachabilityStatusChangeBlock(block: Block | null): void;

  networkReachabilityStatus(): AFNetworkReachabilityStatus;
  setNetworkReachabilityStatus(networkReachabilityStatus: AFNetworkReachabilityStatus): void;
  reachable(): boolean;
  setReachable(reachable: boolean): void;
  reachableViaWWAN(): boolean;
  setReachableViaWWAN(reachableViaWWAN: boolean): void;
  reachableViaWiFi(): boolean;
  setReachableViaWiFi(reachableViaWiFi: boolean): void;
}

declare enum AFNetworkReachabilityStatus {
  AFNetworkReachabilityStatusUnknown = -1,
  AFNetworkReachabilityStatusNotReachable = 0,
  AFNetworkReachabilityStatusReachableViaWWAN = 1,
  AFNetworkReachabilityStatusReachableViaWiFi = 2,
}

declare class AFSecurityPolicy extends NSObject implements INSSecureCoding, INSCopying {
  static defaultPolicy(): AFSecurityPolicy;
  static policyWithPinningMode(pinningMode: AFSSLPinningMode): AFSecurityPolicy;
  evaluateServerTrust_DEPRECATED_ATTRIBUTE(serverTrust: SecTrustRef): boolean;
  evaluateServerTrust_forDomain(serverTrust: SecTrustRef, domain: NSString | string | null): boolean;
  copyWithZone(zone: NSZone | null): any;

  SSLPinningMode(): AFSSLPinningMode;
  setSSLPinningMode(SSLPinningMode: AFSSLPinningMode): void;
  pinnedCertificates(): NSArray<any>;
  setPinnedCertificates(pinnedCertificates: NSArray<any> | any[]): void;
  allowInvalidCertificates(): boolean;
  setAllowInvalidCertificates(allowInvalidCertificates: boolean): void;
  validatesDomainName(): boolean;
  setValidatesDomainName(validatesDomainName: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum AFSSLPinningMode {
  AFSSLPinningModeNone,
  AFSSLPinningModePublicKey,
  AFSSLPinningModeCertificate,
}

declare class AFURLConnectionOperation extends NSOperation implements INSURLConnectionDelegate, INSURLConnectionDataDelegate, INSSecureCoding, INSCopying {
  initWithRequest<T extends AFURLConnectionOperation>(urlRequest: NSURLRequest): T;
  pause(): void;
  isPaused(): boolean;
  resume(): void;
  setShouldExecuteAsBackgroundTaskWithExpirationHandler(handler: Block | null): void;
  setUploadProgressBlock(block: Block | null): void;
  setDownloadProgressBlock(block: Block | null): void;
  setWillSendRequestForAuthenticationChallengeBlock(block: Block | null): void;
  setRedirectResponseBlock(block: Block | null): void;
  setCacheResponseBlock(block: Block | null): void;
  static batchOfRequestOperations_progressBlock_completionBlock(operations: NSArray<any> | any[] | null, progressBlock: Block | null, completionBlock: Block | null): NSArray<any>;
  connection_didFailWithError(connection: NSURLConnection, error: NSError): void;
  connectionShouldUseCredentialStorage(connection: NSURLConnection): boolean;
  connection_willSendRequestForAuthenticationChallenge(connection: NSURLConnection, challenge: NSURLAuthenticationChallenge): void;
  connection_canAuthenticateAgainstProtectionSpace(connection: NSURLConnection, protectionSpace: NSURLProtectionSpace): boolean;
  connection_didReceiveAuthenticationChallenge(connection: NSURLConnection, challenge: NSURLAuthenticationChallenge): void;
  connection_didCancelAuthenticationChallenge(connection: NSURLConnection, challenge: NSURLAuthenticationChallenge): void;
  connection_willSendRequest_redirectResponse(connection: NSURLConnection, request: NSURLRequest, response: NSURLResponse | null): NSURLRequest;
  connection_didReceiveResponse(connection: NSURLConnection, response: NSURLResponse): void;
  connection_didReceiveData(connection: NSURLConnection, data: NSData): void;
  connection_needNewBodyStream(connection: NSURLConnection, request: NSURLRequest): NSInputStream;
  connection_didSendBodyData_totalBytesWritten_totalBytesExpectedToWrite(connection: NSURLConnection, bytesWritten: NSInteger, totalBytesWritten: NSInteger, totalBytesExpectedToWrite: NSInteger): void;
  connection_willCacheResponse(connection: NSURLConnection, cachedResponse: NSCachedURLResponse): NSCachedURLResponse;
  connectionDidFinishLoading(connection: NSURLConnection): void;
  copyWithZone(zone: NSZone | null): any;

  runLoopModes(): NSSet<any>;
  setRunLoopModes(runLoopModes: NSSet<any>): void;
  request(): NSURLRequest;
  setRequest(request: NSURLRequest): void;
  response(): NSURLResponse;
  setResponse(response: NSURLResponse): void;
  error(): NSError;
  setError(error: NSError): void;
  responseData(): NSData;
  setResponseData(responseData: NSData): void;
  responseString(): NSString;
  setResponseString(responseString: NSString | string): void;
  responseStringEncoding(): NSStringEncoding;
  setResponseStringEncoding(responseStringEncoding: NSStringEncoding): void;
  shouldUseCredentialStorage(): boolean;
  setShouldUseCredentialStorage(shouldUseCredentialStorage: boolean): void;
  credential(): NSURLCredential;
  setCredential(credential: NSURLCredential): void;
  securityPolicy(): AFSecurityPolicy;
  setSecurityPolicy(securityPolicy: AFSecurityPolicy): void;
  inputStream(): NSInputStream;
  setInputStream(inputStream: NSInputStream): void;
  outputStream(): NSOutputStream;
  setOutputStream(outputStream: NSOutputStream): void;
  completionQueue(): dispatch_queue_t;
  setCompletionQueue(completionQueue: dispatch_queue_t): void;
  completionGroup(): dispatch_group_t;
  setCompletionGroup(completionGroup: dispatch_group_t): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class AFHTTPRequestSerializer extends NSObject implements IAFURLRequestSerialization {
  static serializer(): AFHTTPRequestSerializer;
  setValue_forHTTPHeaderField(value: NSString | string | null, field: NSString | string): void;
  valueForHTTPHeaderField(field: NSString | string): NSString;
  setAuthorizationHeaderFieldWithUsername_password(username: NSString | string, password: NSString | string): void;
  setAuthorizationHeaderFieldWithToken_DEPRECATED_ATTRIBUTE(token: NSString | string): void;
  clearAuthorizationHeader(): void;
  setQueryStringSerializationWithStyle(style: AFHTTPRequestQueryStringSerializationStyle): void;
  setQueryStringSerializationWithBlock(block: Block | null): void;
  requestWithMethod_URLString_parameters_DEPRECATED_ATTRIBUTE(method: NSString | string, URLString: NSString | string, parameters: any): NSMutableURLRequest;
  requestWithMethod_URLString_parameters_error(method: NSString | string, URLString: NSString | string, parameters: any | null, error: NSError): NSMutableURLRequest;
  multipartFormRequestWithMethod_URLString_parameters_constructingBodyWithBlock_DEPRECATED_ATTRIBUTE(method: NSString | string, URLString: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any}, block: Block): NSMutableURLRequest;
  multipartFormRequestWithMethod_URLString_parameters_constructingBodyWithBlock_error(method: NSString | string, URLString: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any} | null, block: Block | null, error: NSError): NSMutableURLRequest;
  requestWithMultipartFormRequest_writingStreamContentsToFile_completionHandler(request: NSURLRequest, fileURL: NSURL, handler: Block | null): NSMutableURLRequest;
  requestBySerializingRequest_withParameters_error(request: NSURLRequest, parameters: any | null, error: NSError): NSURLRequest;

  stringEncoding(): NSStringEncoding;
  setStringEncoding(stringEncoding: NSStringEncoding): void;
  allowsCellularAccess(): boolean;
  setAllowsCellularAccess(allowsCellularAccess: boolean): void;
  cachePolicy(): NSURLRequestCachePolicy;
  setCachePolicy(cachePolicy: NSURLRequestCachePolicy): void;
  HTTPShouldHandleCookies(): boolean;
  setHTTPShouldHandleCookies(HTTPShouldHandleCookies: boolean): void;
  HTTPShouldUsePipelining(): boolean;
  setHTTPShouldUsePipelining(HTTPShouldUsePipelining: boolean): void;
  networkServiceType(): NSURLRequestNetworkServiceType;
  setNetworkServiceType(networkServiceType: NSURLRequestNetworkServiceType): void;
  timeoutInterval(): NSTimeInterval;
  setTimeoutInterval(timeoutInterval: NSTimeInterval): void;
  HTTPRequestHeaders(): NSDictionary<any, any>;
  setHTTPRequestHeaders(HTTPRequestHeaders: NSDictionary<any, any> | {[key: string]: any}): void;
  HTTPMethodsEncodingParametersInURI(): NSSet<any>;
  setHTTPMethodsEncodingParametersInURI(HTTPMethodsEncodingParametersInURI: NSSet<any>): void;
}

declare class AFJSONRequestSerializer extends AFHTTPRequestSerializer {
  static serializerWithWritingOptions(writingOptions: NSJSONWritingOptions): AFJSONRequestSerializer;

  writingOptions(): NSJSONWritingOptions;
  setWritingOptions(writingOptions: NSJSONWritingOptions): void;
}

declare class AFPropertyListRequestSerializer extends AFHTTPRequestSerializer {
  static serializerWithFormat_writeOptions(format: NSPropertyListFormat, writeOptions: NSPropertyListWriteOptions): AFPropertyListRequestSerializer;

  format(): NSPropertyListFormat;
  setFormat(format: NSPropertyListFormat): void;
  writeOptions(): NSPropertyListWriteOptions;
  setWriteOptions(writeOptions: NSPropertyListWriteOptions): void;
}

declare interface IAFURLRequestSerialization {
  requestBySerializingRequest_withParameters_error(request: NSURLRequest, parameters: any | null, error: NSError): NSURLRequest;
}

declare interface IAFMultipartFormData {
  appendPartWithFileURL_name_error(fileURL: NSURL, name: NSString | string, error: NSError): boolean;
  appendPartWithFileURL_name_fileName_mimeType_error(fileURL: NSURL, name: NSString | string, fileName: NSString | string, mimeType: NSString | string, error: NSError): boolean;
  appendPartWithInputStream_name_fileName_length_mimeType(inputStream: NSInputStream | null, name: NSString | string, fileName: NSString | string, length: number, mimeType: NSString | string): void;
  appendPartWithFileData_name_fileName_mimeType(data: NSData, name: NSString | string, fileName: NSString | string, mimeType: NSString | string): void;
  appendPartWithFormData_name(data: NSData, name: NSString | string): void;
  appendPartWithHeaders_body(headers: NSDictionary<any, any> | {[key: string]: any} | null, body: NSData): void;
  throttleBandwidthWithPacketSize_delay(numberOfBytes: NSUInteger, delay: NSTimeInterval): void;
}

declare enum AFHTTPRequestQueryStringSerializationStyle {
  AFHTTPRequestQueryStringDefaultStyle = 0,
}

declare class AFHTTPResponseSerializer extends NSObject implements IAFURLResponseSerialization {
  init<T extends AFHTTPResponseSerializer>(): T;
  static serializer(): AFHTTPResponseSerializer;
  validateResponse_data_error(response: NSHTTPURLResponse | null, data: NSData | null, error: NSError): boolean;
  responseObjectForResponse_data_error(response: NSURLResponse | null, data: NSData | null, error: NSError): any;

  stringEncoding(): NSStringEncoding;
  setStringEncoding(stringEncoding: NSStringEncoding): void;
  acceptableStatusCodes(): NSIndexSet;
  setAcceptableStatusCodes(acceptableStatusCodes: NSIndexSet): void;
  acceptableContentTypes(): NSSet<any>;
  setAcceptableContentTypes(acceptableContentTypes: NSSet<any>): void;
}

declare class AFJSONResponseSerializer extends AFHTTPResponseSerializer {
  // init<T extends AFJSONResponseSerializer>(): T;
  static serializerWithReadingOptions(readingOptions: NSJSONReadingOptions): AFJSONResponseSerializer;

  readingOptions(): NSJSONReadingOptions;
  setReadingOptions(readingOptions: NSJSONReadingOptions): void;
  removesKeysWithNullValues(): boolean;
  setRemovesKeysWithNullValues(removesKeysWithNullValues: boolean): void;
}

declare class AFXMLParserResponseSerializer extends AFHTTPResponseSerializer {}

declare class AFXMLDocumentResponseSerializer extends AFHTTPResponseSerializer {
  // init<T extends AFXMLDocumentResponseSerializer>(): T;
  static serializerWithXMLDocumentOptions(mask: NSUInteger): AFXMLDocumentResponseSerializer;

  options(): NSUInteger;
  setOptions(options: NSUInteger): void;
}

declare class AFPropertyListResponseSerializer extends AFHTTPResponseSerializer {
  // init<T extends AFPropertyListResponseSerializer>(): T;
  static serializerWithFormat_readOptions(format: NSPropertyListFormat, readOptions: NSPropertyListReadOptions): AFPropertyListResponseSerializer;

  format(): NSPropertyListFormat;
  setFormat(format: NSPropertyListFormat): void;
  readOptions(): NSPropertyListReadOptions;
  setReadOptions(readOptions: NSPropertyListReadOptions): void;
}

declare class AFImageResponseSerializer extends AFHTTPResponseSerializer {
  imageScale(): CGFloat;
  setImageScale(imageScale: CGFloat): void;
  automaticallyInflatesResponseImage(): boolean;
  setAutomaticallyInflatesResponseImage(automaticallyInflatesResponseImage: boolean): void;
}

declare class AFCompoundResponseSerializer extends AFHTTPResponseSerializer {
  static compoundSerializerWithResponseSerializers(responseSerializers: NSArray<any> | any[]): AFCompoundResponseSerializer;

  responseSerializers(): NSArray<any>;
  setResponseSerializers(responseSerializers: NSArray<any> | any[]): void;
}

declare interface IAFURLResponseSerialization {
  responseObjectForResponse_data_error(response: NSURLResponse | null, data: NSData | null, error: NSError): any;
}

declare class AFURLSessionManager extends NSObject implements INSURLSessionDelegate, INSURLSessionTaskDelegate, INSURLSessionDataDelegate, INSURLSessionDownloadDelegate, INSSecureCoding, INSCopying {
  initWithSessionConfiguration<T extends AFURLSessionManager>(configuration: NSURLSessionConfiguration | null): T;
  invalidateSessionCancelingTasks(cancelPendingTasks: boolean): void;
  dataTaskWithRequest_completionHandler(request: NSURLRequest, completionHandler: Block | null): NSURLSessionDataTask;
  uploadTaskWithRequest_fromFile_progress_completionHandler(request: NSURLRequest, fileURL: NSURL, progress: NSProgress, completionHandler: Block | null): NSURLSessionUploadTask;
  uploadTaskWithRequest_fromData_progress_completionHandler(request: NSURLRequest, bodyData: NSData | null, progress: NSProgress, completionHandler: Block | null): NSURLSessionUploadTask;
  uploadTaskWithStreamedRequest_progress_completionHandler(request: NSURLRequest, progress: NSProgress, completionHandler: Block | null): NSURLSessionUploadTask;
  downloadTaskWithRequest_progress_destination_completionHandler(request: NSURLRequest, progress: NSProgress, destination: Block | null, completionHandler: Block | null): NSURLSessionDownloadTask;
  downloadTaskWithResumeData_progress_destination_completionHandler(resumeData: NSData, progress: NSProgress, destination: Block | null, completionHandler: Block | null): NSURLSessionDownloadTask;
  uploadProgressForTask(uploadTask: NSURLSessionUploadTask): NSProgress;
  downloadProgressForTask(downloadTask: NSURLSessionDownloadTask): NSProgress;
  setSessionDidBecomeInvalidBlock(block: Block | null): void;
  setSessionDidReceiveAuthenticationChallengeBlock(block: Block | null): void;
  setTaskNeedNewBodyStreamBlock(block: Block | null): void;
  setTaskWillPerformHTTPRedirectionBlock(block: Block | null): void;
  setTaskDidReceiveAuthenticationChallengeBlock(block: Block | null): void;
  setTaskDidSendBodyDataBlock(block: Block | null): void;
  setTaskDidCompleteBlock(block: Block | null): void;
  setDataTaskDidReceiveResponseBlock(block: Block | null): void;
  setDataTaskDidBecomeDownloadTaskBlock(block: Block | null): void;
  setDataTaskDidReceiveDataBlock(block: Block | null): void;
  setDataTaskWillCacheResponseBlock(block: Block | null): void;
  setDidFinishEventsForBackgroundURLSessionBlock(block: Block | null): void;
  setDownloadTaskDidFinishDownloadingBlock(block: Block | null): void;
  setDownloadTaskDidWriteDataBlock(block: Block | null): void;
  setDownloadTaskDidResumeBlock(block: Block | null): void;
  URLSession_didBecomeInvalidWithError(session: NSURLSession, error: NSError | null): void;
  URLSession_didReceiveChallenge_completionHandler(session: NSURLSession, challenge: NSURLAuthenticationChallenge, completionHandler: Block): void;
  URLSessionDidFinishEventsForBackgroundURLSession(session: NSURLSession): void;
  URLSession_task_willBeginDelayedRequest_completionHandler(session: NSURLSession, task: NSURLSessionTask, request: NSURLRequest, completionHandler: Block): void;
  URLSession_taskIsWaitingForConnectivity(session: NSURLSession, task: NSURLSessionTask): void;
  URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler(session: NSURLSession, task: NSURLSessionTask, response: NSHTTPURLResponse, request: NSURLRequest, completionHandler: Block): void;
  URLSession_task_didReceiveChallenge_completionHandler(session: NSURLSession, task: NSURLSessionTask, challenge: NSURLAuthenticationChallenge, completionHandler: Block): void;
  URLSession_task_needNewBodyStream(session: NSURLSession, task: NSURLSessionTask, completionHandler: Block): void;
  URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend(session: NSURLSession, task: NSURLSessionTask, bytesSent: number, totalBytesSent: number, totalBytesExpectedToSend: number): void;
  URLSession_task_didFinishCollectingMetrics(session: NSURLSession, task: NSURLSessionTask, metrics: NSURLSessionTaskMetrics): void;
  URLSession_task_didCompleteWithError(session: NSURLSession, task: NSURLSessionTask, error: NSError | null): void;
  URLSession_dataTask_didReceiveResponse_completionHandler(session: NSURLSession, dataTask: NSURLSessionDataTask, response: NSURLResponse, completionHandler: Block): void;
  URLSession_dataTask_didBecomeDownloadTask(session: NSURLSession, dataTask: NSURLSessionDataTask, downloadTask: NSURLSessionDownloadTask): void;
  URLSession_dataTask_didBecomeStreamTask(session: NSURLSession, dataTask: NSURLSessionDataTask, streamTask: NSURLSessionStreamTask): void;
  URLSession_dataTask_didReceiveData(session: NSURLSession, dataTask: NSURLSessionDataTask, data: NSData): void;
  URLSession_dataTask_willCacheResponse_completionHandler(session: NSURLSession, dataTask: NSURLSessionDataTask, proposedResponse: NSCachedURLResponse, completionHandler: Block): void;
  URLSession_downloadTask_didFinishDownloadingToURL(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, location: NSURL): void;
  URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, bytesWritten: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, fileOffset: number, expectedTotalBytes: number): void;
  copyWithZone(zone: NSZone | null): any;

  session(): NSURLSession;
  setSession(session: NSURLSession): void;
  operationQueue(): NSOperationQueue;
  setOperationQueue(operationQueue: NSOperationQueue): void;
  responseSerializer(): any;
  setResponseSerializer(responseSerializer: any): void;
  securityPolicy(): AFSecurityPolicy;
  setSecurityPolicy(securityPolicy: AFSecurityPolicy): void;
  reachabilityManager(): AFNetworkReachabilityManager;
  setReachabilityManager(reachabilityManager: AFNetworkReachabilityManager): void;
  tasks(): NSArray<any>;
  setTasks(tasks: NSArray<any> | any[]): void;
  dataTasks(): NSArray<any>;
  setDataTasks(dataTasks: NSArray<any> | any[]): void;
  uploadTasks(): NSArray<any>;
  setUploadTasks(uploadTasks: NSArray<any> | any[]): void;
  downloadTasks(): NSArray<any>;
  setDownloadTasks(downloadTasks: NSArray<any> | any[]): void;
  completionQueue(): dispatch_queue_t;
  setCompletionQueue(completionQueue: dispatch_queue_t): void;
  completionGroup(): dispatch_group_t;
  setCompletionGroup(completionGroup: dispatch_group_t): void;
  attemptsToRecreateUploadTasksForBackgroundSessions(): boolean;
  setAttemptsToRecreateUploadTasksForBackgroundSessions(attemptsToRecreateUploadTasksForBackgroundSessions: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class ExtensionDelegate extends NSObject implements IWKExtensionDelegate {}

declare class AFAppDotNetAPIClient extends AFHTTPSessionManager {
  static sharedClient(): AFAppDotNetAPIClient;
}

declare class Post extends NSObject {
  initWithAttributes<T extends Post>(attributes: NSDictionary<any, any> | {[key: string]: any}): T;
  static globalTimelinePostsWithBlock(block: Block): NSURLSessionDataTask;

  postID(): NSUInteger;
  setPostID(postID: NSUInteger): void;
  text(): NSString;
  setText(text: NSString | string): void;
  user(): User;
  setUser(user: User): void;
}

declare class User extends NSObject {
  initWithAttributes<T extends User>(attributes: NSDictionary<any, any> | {[key: string]: any}): T;

  userID(): NSUInteger;
  setUserID(userID: NSUInteger): void;
  username(): NSString;
  setUsername(username: NSString | string): void;
  avatarImageURL(): NSURL;
  setAvatarImageURL(avatarImageURL: NSURL): void;
  profileImage(): NSImage;
  setProfileImage(profileImage: NSImage): void;
}

declare class AFNetworkActivityIndicatorManager extends NSObject {
  static sharedManager(): AFNetworkActivityIndicatorManager;
  incrementActivityCount(): void;
  decrementActivityCount(): void;

  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  isNetworkActivityIndicatorVisible(): boolean;
  setIsNetworkActivityIndicatorVisible(isNetworkActivityIndicatorVisible: boolean): void;
}

declare class BCAssertion extends NSObject {
  static assertObject_isOfClass(object: any, c: any): any;
}

declare enum BCAttributeMatchResult {
  BCAttributeMatchResultMixed = -1,
  BCAttributeMatchResultNone = 0,
  BCAttributeMatchResultMatched = 1,
}

declare class MSRange extends NSObject {
  static from_to_do(fromIndex: NSUInteger, toIndex: NSUInteger, block: Block): void;
}

declare class BCCache extends NSObject {
  cachedObjectForOwner_andKey(owner: any, key: any): any;
  setCachedObject_forOwner_andKey(obj: any, owner: any, key: any): void;
  cachedObjectForOwner_andKey_orCreateWithBlock(owner: any, key: any, block: BCCacheCreateObjectBlock): any;
  removeCachedObjectForOwner_andKey(owner: any, key: any): void;
  removeCachedObjectsForOwner(owner: any): void;
  removeCachedObjectsExceptForOwners(ownersToKeep: NSSet<any>): void;
  removeAllCachedObjects(): void;

  count(): NSUInteger;
  setCount(count: NSUInteger): void;
  allOwners(): NSSet<any>;
  setAllOwners(allOwners: NSSet<any>): void;
}

declare enum BCConstraint {
  BCConstraintNone = 0,
  BCConstraintMaxXSizeable = 1 << 0,
  BCConstraintWidthSizeable = 1 << 1,
  BCConstraintMinXSizeable = 1 << 2,
  BCConstraintMaxYSizeable = 1 << 3,
  BCConstraintHeightSizeable = 1 << 4,
  BCConstraintMinYSizeable = 1 << 5,
  BCConstraintAllFixed = 1 << 6,
  BCConstraintAllSizeable,
}

declare enum BCCorner {
  BCCornerNone = -1,
  BCCornerTopLeft = 0,
  BCCornerTopRight = 1,
  BCCornerBottomLeft = 2,
  BCCornerBottomRight = 3,
  BCCornerMidTop = 4,
  BCCornerMidLeft = 5,
  BCCornerMidRight = 6,
  BCCornerMidBottom = 7,
  BCCornerMid = 8,
  BCCornerMinimum,
  BCCornerMaximum,
}

declare class BCDownloadManager {
  initWithSessionConfiguration_delegate_completionHandler<T extends BCDownloadManager>(sessionConfiguration: NSURLSessionConfiguration, delegate: any | null, completionHandler: Block | null): T;
  addDownloadTaskWithDownloadRequestURL(downloadRequestURL: NSURL): NSString;
  addDownloadTaskWithDownloadRequest(downloadRequest: NSURLRequest): NSString;
  addDownloadTaskWithDownloadRequest_completionHandler(request: NSURLRequest, completionHandler: Block): NSString;
  removeDownloadTaskWithIdentifier(identifier: NSString | string): boolean;
  resumeDownloadTaskWithIdentifier(identifier: NSString | string): void;
  suspendDownloadTaskWithIdentifier(identifier: NSString | string): void;
  cancelAllTasksAndInvalidate(): void;
  finishTasksAndInvalidate(): void;
  downloadTaskCurrentStateWithIdentifier(identifier: NSString | string): NSDictionary<any, any>;
  cancelTaskWithIdentifier(identifier: NSString | string): void;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  hasBeenInvalidated(): boolean;
  setHasBeenInvalidated(hasBeenInvalidated: boolean): void;
  canAcceptNewDownloadTasks(): boolean;
  setCanAcceptNewDownloadTasks(canAcceptNewDownloadTasks: boolean): void;
  numberOfUnfinishedDownloadTasks(): NSInteger;
  setNumberOfUnfinishedDownloadTasks(numberOfUnfinishedDownloadTasks: NSInteger): void;
  allTasksIdentifiers(): NSArray<any>;
  setAllTasksIdentifiers(allTasksIdentifiers: NSArray<any> | any[]): void;
}

declare interface IBCDownloadManagerDelegate {
  downloadManager_downloadTaskHasUpdatedForIdentifier_downloadedSoFar_withDownloadSize(downloadManager: BCDownloadManager, identifier: NSString | string, downloadedSoFar: NSUInteger, downloadSize: NSUInteger): void;
  downloadManager_downloadTaskFinishedForIdentifier_downloadedURL_httpStatusCode(downloadManager: BCDownloadManager, identifier: NSString | string, downloadedURL: NSURL, statusCode: NSInteger): void;
  downloadManager_downloadTaskWithIdentifier_failedWithError(downloadManager: BCDownloadManager, identifier: NSString | string, error: NSError): void;
  downloadManager_sessionBecameInvalidWithError(downloadManager: BCDownloadManager, error: NSError | null): void;
}

declare type BCFloatRange = {
  location: CGFloat
  length: CGFloat
}

declare type BCEdgePaddings = {
  maxYEdge: CGFloat
  minXEdge: CGFloat
  minYEdge: CGFloat
  maxXEdge: CGFloat
}

declare enum BCAxis {
  BCAxisNone = 0,
  BCAxisX = 1 << 0,
  BCAxisY = 1 << 1,
  BCAxisBoth,
}

declare enum BCEdge {
  BCEdgeLeft = 1<<0,
  BCEdgeRight = 1<<1,
  BCEdgeTop = 1<<2,
  BCEdgeBottom = 1<<3,
  BCEdgeMidX = 1<<4,
  BCEdgeMidY = 1<<5,
  BCEdgeAll,
  BCEdgeVertical,
  BCEdgeHorizontal,
}

declare type BCIntPoint = {
  x: number
  y: number
}

declare type BCIntPointArray = {
  count: number
  points: [BCIntPoint]
}

declare type BCIntRect = {
  x: number
  y: number
  width: number
  height: number
}

declare type BCIntRectArray = {
  count: number
  capacity: number
  rects: BCIntRect
}

declare class BCJSONEncoder extends NSObject {
  static encoderForWritingToMutableData(data: NSMutableData): BCJSONEncoder;
  static encodeObjectAsData_error(root: NSObject, error: NSError): NSData;
  static setAliasName_forClass(codedName: NSString | string | null, className: any): void;
  encodeRootObject_error(root: NSObject | null, error: NSError): boolean;
  encodeObject_forKey(object: NSObject | null, key: NSString | string): void;
  encodeDouble_forKey(value: number, key: NSString | string): void;
  encodeBool_forKey(value: boolean, key: NSString | string): void;
  encodeRect_forKey(rect: CGRect, key: NSString | string): void;
  encodePoint_forKey(point: CGPoint, key: NSString | string): void;
  encodeInteger_forKey(value: NSInteger, key: NSString | string): void;
  encodeSize_forKey(size: CGSize, key: NSString | string): void;
  static encoderForWritingToFile(file: NSFileHandle): BCJSONEncoder;
  static encodeObject_toFile_error(root: NSObject, file: NSFileHandle, error: NSError): boolean;
  static encoderForWritingToURL(url: NSURL): BCJSONEncoder;
  static encodeObject_toURL_error(root: NSObject, url: NSURL, error: NSError): boolean;
  static encodeObjectAsString_error(root: NSObject, error: NSError): NSString;

  userInfo(): any;
  setUserInfo(userInfo: any): void;
  error(): NSError;
  setError(error: NSError): void;
  archiver(): MSJSONArchiver;
  setArchiver(archiver: MSJSONArchiver): void;
}

declare class BCJSONDecoder extends NSObject {
  static setClass_forClassName(className: any | null, codedName: NSString | string): void;
  static decodeFileAtURL_error(url: NSURL, error: NSError): any;
  decodeData_error(data: NSData, error: NSError): any;
  decodeDictionary_error(dict: NSDictionary<any, any> | {[key: string]: any}, error: NSError): any;
  containsValueForKey(key: NSString | string): boolean;
  decodeObjectForKey(key: NSString | string): any;
  decodeDoubleForKey_withDefault(key: NSString | string, defaultValue: number): number;
  decodeBoolForKey_withDefault(key: NSString | string, defaultValue: boolean): boolean;
  decodeRectForKey_withDefault(key: NSString | string, defaultValue: CGRect): CGRect;
  decodePointForKey_withDefault(key: NSString | string, defaultValue: CGPoint): CGPoint;
  decodeIntegerForKey_withDefault(key: NSString | string, defaultValue: NSInteger): NSInteger;
  decodeSizeForKey_withDefault(key: NSString | string, defaultValue: CGSize): CGSize;

  userInfo(): any;
  setUserInfo(userInfo: any): void;
  error(): NSError;
  setError(error: NSError): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  unarchiver(): MSJSONUnarchiver;
  setUnarchiver(unarchiver: MSJSONUnarchiver): void;
}

declare interface IBCJSONDecoderDelegate {
  decoder_shouldInstantiateObjectOfClass(decoder: BCJSONDecoder, aClass: any): boolean;
}

declare interface IBCJSONEncoding {
  encodeAsJSON(coder: BCJSONEncoder): void;
  // initWithJSONDecoder<T extends IBCJSONEncoding>(decoder: BCJSONDecoder): T;
  replacementObjectForJSONEncoder(coder: BCJSONEncoder): NSObject;
}

declare type BCOrthogonalLine = {
  position: CGFloat
  axis: BCAxis
}

declare class BCNetworkManager extends NSObject {
  static sendSynchronousRequest_returningResponse_error(request: NSURLRequest, response: NSURLResponse, error: NSError): NSData;
}

declare class BCObjectPool extends NSObject implements INSDiscardableContent {
  initWithObjectCreatorBlock<T extends BCObjectPool>(block: any): T;
  vendObject(): any;
  recycleObject(object: any): void;
  beginContentAccess(): boolean;
  endContentAccess(): void;
  discardContentIfPossible(): void;
  isContentDiscarded(): boolean;

  maximumPoolCount(): NSUInteger;
  setMaximumPoolCount(maximumPoolCount: NSUInteger): void;
}

declare class BCObjectSorting extends NSObject {
  static sortObjectsAlphabetically(sortableObjects: NSArray<any> | any[]): NSArray<any>;
  static sortObjectsWithNesting(sortableObjects: NSArray<any> | any[]): NSArray<any>;
  static sortObjectsWithCompressedNesting(sortableObjects: NSArray<any> | any[]): NSArray<any>;
}

declare interface IBCSortable {
  name(): NSString;
  setName(name: NSString | string): void;
}

declare class BCPerformanceTimer extends NSObject {}

declare type BCTime = number

declare type BCDuration = number

declare class BCRangeMap extends NSObject {
  allRanges(): NSSet<any>;
  allObjects(): NSSet<any>;
  objectForLocation(index: NSUInteger): any;
  rangeForLocation(index: NSUInteger): NSRange;
  setObject_forRange(object: any, range: NSRange): void;
  removeObjectsAtOrBeyondLocation(index: NSUInteger): void;
}

declare class BCReadWriteLock extends NSObject {
  protectedRead(block: BCVoidBlock): void;
  protectedWrite(block: BCVoidBlock): void;
}

declare class BCRect extends NSObject implements INSCopying, IBCRect {
  static rectWithRect(aRect: CGRect): BCRect;
  initWithRect<T extends BCRect>(aRect: CGRect): T;
  copyWithZone(zone: NSZone | null): any;

  rect(): CGRect;
  setRect(rect: CGRect): void;
  size(): CGSize;
  setSize(size: CGSize): void;
  origin(): CGPoint;
  setOrigin(origin: CGPoint): void;
}

declare interface IBCRect {
  rect(): CGRect;
  setRect(rect: CGRect): void;
  origin(): CGPoint;
  setOrigin(origin: CGPoint): void;
  size(): CGSize;
  setSize(size: CGSize): void;
}

declare enum BCRectComparison {
  BCRectComparisonLeftToRightTopToBottom = 0,
  BCRectComparisonRightToLeftTopToBottom,
  BCRectComparisonTopToBottomLeftToRight,
  BCRectComparisonTopToBottomRightToLeft,
  BCRectComparisonLeftToRightBottomToTop,
  BCRectComparisonRightToLeftBottomToTop,
  BCRectComparisonBottomToTopLeftToRight,
  BCRectComparisonBottomToTopRightToLeft,
  BCRectComparisonDefault,
}

declare class BCSingleton extends NSObject {
  static sharedInstance(): BCSingleton;
}

declare class BCToolRunningResult extends NSObject {
  errorOutput(): NSData;
  setErrorOutput(errorOutput: NSData): void;
  exitStatus(): number;
  setExitStatus(exitStatus: number): void;
  output(): NSData;
  setOutput(output: NSData): void;
  terminationReason(): NSTaskTerminationReason;
  setTerminationReason(terminationReason: NSTaskTerminationReason): void;
}

declare class BCToolRunner extends NSObject {
  runToolAtExecutableURL_workingDirectoryURL_arguments_completionHandler(toolURL: NSURL, workingDirectoryURL: NSURL, arguments: NSArray<any> | any[], completionHandler: MSToolCompletionHandler): void;
}

declare class BCFilterInfo extends NSObject {
  filterTypeMatches(filterType: BCOutlineViewFilterTypeMask): boolean;
  shouldIncludeNode(node: any): boolean;

  filterTypeMask(): BCOutlineViewFilterTypeMask;
  setFilterTypeMask(filterTypeMask: BCOutlineViewFilterTypeMask): void;
  filterString(): NSString;
  setFilterString(filterString: NSString | string): void;
  isActive(): boolean;
  setIsActive(isActive: boolean): void;
}

declare class BCIndifferentButtonCell extends NSButtonCell {}

declare class BCLayerListFilterViewController extends NSViewController {
  showFilterMenu(sender: any): IBAction;
  toggleFilter(sender: any): IBAction;
  findLayer(sender: any): IBAction;

  filter(): BCFilterInfo;
  setFilter(filter: BCFilterInfo): void;
}

declare class BCLayerListViewController extends BCOutlineViewController {}

declare class BCOutlineView extends NSOutlineView {
  deliberateScrollRowToVisible(row: NSInteger): void;
  scrollRowToVisible(row: NSInteger): void;

  dataController(): BCOutlineViewDataController;
  setDataController(dataController: BCOutlineViewDataController): void;
  discloserTriangleClickedItem(): any;
  setDiscloserTriangleClickedItem(discloserTriangleClickedItem: any): void;
}

declare class BCOutlineViewController extends NSViewController implements INSOutlineViewDataSource, INSOutlineViewDelegate {
  initWithDataController<T extends BCOutlineViewController>(dataController: BCOutlineViewDataController): T;
  refreshWithMask(mask: BCOutlineViewControllerRefreshType): void;
  flagsChangedNotification(): void;
  renameNode(): void;
  executeAfterRefreshCompleted(block: BCOutlineViewControllerPostRefreshBlock): void;
  static itemRowCanFloat(item: any): boolean;
  outlineView_numberOfChildrenOfItem(outlineView: NSOutlineView, item: any | null): NSInteger;
  outlineView_child_ofItem(outlineView: NSOutlineView, index: NSInteger, item: any | null): any;
  outlineView_isItemExpandable(outlineView: NSOutlineView, item: any): boolean;
  outlineView_objectValueForTableColumn_byItem(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any | null): any;
  outlineView_setObjectValue_forTableColumn_byItem(outlineView: NSOutlineView, object: any | null, tableColumn: NSTableColumn | null, item: any | null): void;
  outlineView_itemForPersistentObject(outlineView: NSOutlineView, object: any): any;
  outlineView_persistentObjectForItem(outlineView: NSOutlineView, item: any | null): any;
  outlineView_sortDescriptorsDidChange(outlineView: NSOutlineView, oldDescriptors: NSArray<any> | any[]): void;
  outlineView_pasteboardWriterForItem(outlineView: NSOutlineView, item: any): any;
  outlineView_draggingSession_willBeginAtPoint_forItems(outlineView: NSOutlineView, session: NSDraggingSession, screenPoint: NSPoint, draggedItems: NSArray<any> | any[]): void;
  outlineView_draggingSession_endedAtPoint_operation(outlineView: NSOutlineView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  outlineView_writeItems_toPasteboard(outlineView: NSOutlineView, items: NSArray<any> | any[], pasteboard: NSPasteboard): boolean;
  outlineView_updateDraggingItemsForDrag(outlineView: NSOutlineView, draggingInfo: any): void;
  outlineView_validateDrop_proposedItem_proposedChildIndex(outlineView: NSOutlineView, info: any, item: any | null, index: NSInteger): NSDragOperation;
  outlineView_acceptDrop_item_childIndex(outlineView: NSOutlineView, info: any, item: any | null, index: NSInteger): boolean;
  outlineView_namesOfPromisedFilesDroppedAtDestination_forDraggedItems(outlineView: NSOutlineView, dropDestination: NSURL, items: NSArray<any> | any[]): NSArray<any>;
  outlineView_viewForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): NSView;
  outlineView_rowViewForItem(outlineView: NSOutlineView, item: any): NSTableRowView;
  outlineView_didAddRowView_forRow(outlineView: NSOutlineView, rowView: NSTableRowView, row: NSInteger): void;
  outlineView_didRemoveRowView_forRow(outlineView: NSOutlineView, rowView: NSTableRowView, row: NSInteger): void;
  outlineView_willDisplayCell_forTableColumn_item(outlineView: NSOutlineView, cell: any, tableColumn: NSTableColumn | null, item: any): void;
  outlineView_shouldEditTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): boolean;
  selectionShouldChangeInOutlineView(outlineView: NSOutlineView): boolean;
  outlineView_shouldSelectItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_selectionIndexesForProposedSelection(outlineView: NSOutlineView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  outlineView_shouldSelectTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn | null): boolean;
  outlineView_mouseDownInHeaderOfTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn): void;
  outlineView_didClickTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn): void;
  outlineView_didDragTableColumn(outlineView: NSOutlineView, tableColumn: NSTableColumn): void;
  outlineView_toolTipForCell_rect_tableColumn_item_mouseLocation(outlineView: NSOutlineView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, item: any, mouseLocation: NSPoint): NSString;
  outlineView_heightOfRowByItem(outlineView: NSOutlineView, item: any): CGFloat;
  outlineView_typeSelectStringForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): NSString;
  outlineView_nextTypeSelectMatchFromItem_toItem_forString(outlineView: NSOutlineView, startItem: any, endItem: any, searchString: NSString | string): any;
  outlineView_shouldTypeSelectForEvent_withCurrentSearchString(outlineView: NSOutlineView, event: NSEvent, searchString: NSString | string | null): boolean;
  outlineView_shouldShowCellExpansionForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): boolean;
  outlineView_shouldTrackCell_forTableColumn_item(outlineView: NSOutlineView, cell: NSCell, tableColumn: NSTableColumn | null, item: any): boolean;
  outlineView_dataCellForTableColumn_item(outlineView: NSOutlineView, tableColumn: NSTableColumn | null, item: any): NSCell;
  outlineView_isGroupItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_shouldExpandItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_shouldCollapseItem(outlineView: NSOutlineView, item: any): boolean;
  outlineView_willDisplayOutlineCell_forTableColumn_item(outlineView: NSOutlineView, cell: any, tableColumn: NSTableColumn | null, item: any): void;
  outlineView_sizeToFitWidthOfColumn(outlineView: NSOutlineView, column: NSInteger): CGFloat;
  outlineView_shouldReorderColumn_toColumn(outlineView: NSOutlineView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  outlineView_shouldShowOutlineCellForItem(outlineView: NSOutlineView, item: any): boolean;
  outlineViewSelectionDidChange(notification: NSNotification): void;
  outlineViewColumnDidMove(notification: NSNotification): void;
  outlineViewColumnDidResize(notification: NSNotification): void;
  outlineViewSelectionIsChanging(notification: NSNotification): void;
  outlineViewItemWillExpand(notification: NSNotification): void;
  outlineViewItemDidExpand(notification: NSNotification): void;
  outlineViewItemWillCollapse(notification: NSNotification): void;
  outlineViewItemDidCollapse(notification: NSNotification): void;

  outlineView(): BCOutlineView;
  setOutlineView(outlineView: BCOutlineView): void;
  preferredHeight(): CGFloat;
  setPreferredHeight(preferredHeight: CGFloat): void;
  filter(): BCFilterInfo;
  setFilter(filter: BCFilterInfo): void;
}

declare enum BCOutlineViewControllerRefreshType {
  BCOutlineViewControllerRefreshTypeSelection = 0x01,
  BCOutlineViewControllerRefreshTypeExpansion = 0x02,
  BCOutlineViewControllerRefreshTypeLayout = 0x04,
  BCOutlineViewControllerRefreshTypePreviewImages = 0x08,
  BCOutlineViewControllerRefreshTypeAll = 0x0F,
}

declare class BCOutlineViewDataController extends NSObject {
  initWithDataSource_delegate<T extends BCOutlineViewDataController>(dataSource: NSObject, delegate: NSObject): T;
  childrenOfNode(node: any): NSArray<any>;
  numberOfChildrenOfNode(node: any): NSUInteger;
  childOfNode_atIndex(node: any, index: NSInteger): any;
  shouldExpandNode(node: any): boolean;
  writeNodes_toPasteboard(nodes: NSArray<any> | any[], pasteboard: NSPasteboard): boolean;
  handleDragWithPasteboard_forProposedItem_proposedChildIndex_copying_validationOnly(pasteboard: NSPasteboard, item: any, index: NSInteger, copying: boolean, validating: boolean): boolean;
  changeSelectionTo(selection: NSArray<any> | any[]): void;
  isNodeSelected(node: any): boolean;
  multipleNodesSelected(): boolean;
  isNodeExpanded(node: any): boolean;
  isNodeExpandable(node: any): boolean;
  updateNode_expandedState(node: any, expanded: BCOutlineViewNodeExpansionState): void;
  menuItemsForSelectedObjects(selection: NSArray<any> | any[]): NSArray<any>;
  hoverNodeDidChangeTo(node: any): void;
  isNodeHighlighted(node: any): boolean;
  handleBadgePressedOnNode_withAltState(node: any, alt: boolean): void;
  refreshPreviewsOnNodes(nodes: NSArray<any> | any[]): void;
  namesOfPromisedFilesDroppedAtDestination_forDraggedItems(dropDestination: NSURL, items: NSArray<any> | any[]): NSArray<any>;

  filter(): BCFilterInfo;
  setFilter(filter: BCFilterInfo): void;
  rootObject(): any;
  setRootObject(rootObject: any): void;
  dragTypes(): NSArray<any>;
  setDragTypes(dragTypes: NSArray<any> | any[]): void;
  canProvideContextMenuItems(): boolean;
  setCanProvideContextMenuItems(canProvideContextMenuItems: boolean): void;
}

declare interface IBCOutlineViewDataSource {
  dataController_childrenOfNode(dataController: BCOutlineViewDataController | null, node: any | null): NSArray<any>;
  rootObject(): any;
}

declare interface IBCOutlineViewDelegate {
  dataController_isNodeSelected(dataController: BCOutlineViewDataController, node: any): boolean;
  multipleNodesSelectedForDataController(dataController: BCOutlineViewDataController): boolean;
  dataController_nodeHasSharedStyle(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_changeSelectionTo(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_isNodeExpanded(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeExpandable(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeHighlighted(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_updateNode_expandedState(dataController: BCOutlineViewDataController, node: any, expanded: BCOutlineViewNodeExpansionState): void;
  dataController_exportNodes_toFolder(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[], folder: NSURL): NSArray<any>;
  dragTypesForDataController(dataController: BCOutlineViewDataController): NSArray<any>;
  dataController_writeNodes_toPasteboard(dataController: BCOutlineViewDataController, items: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  dataController_canMoveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_canCopyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_moveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_copyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_handleBadgePressedOnNode_withAltState(dataController: BCOutlineViewDataController, node: any, alt: boolean): void;
  dataController_refreshPreviewsOnNodes(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_menuItemsForSelectedObjects(dataController: BCOutlineViewDataController, selection: NSArray<any> | any[]): NSArray<any>;
  dataController_hoverNodeDidChangeTo(dataController: BCOutlineViewDataController, node: any): void;
}

declare enum BCOutlineViewNodeExpansionState {
  BCOutlineViewNodeExpansionStateModelExpanded,
  BCOutlineViewNodeExpansionStateUserExpanded,
  BCOutlineViewNodeExpansionStateDragAutoExpanded,
  BCOutlineViewNodeExpansionStateModelCollapsed,
  BCOutlineViewNodeExpansionStateUserCollapsed,
  BCOutlineViewNodeExpansionStateDragAutoCollapsed,
}

declare interface IBCOutlineViewNode {
  badgeMap(): NSDictionary<any, any>;
  previewImages(): NSDictionary<any, any>;
  badgeMenu(): NSMenu;

  displayType(): BCOutlineViewDisplayType;
  setDisplayType(displayType: BCOutlineViewDisplayType): void;
  filterTypeMask(): BCOutlineViewFilterTypeMask;
  setFilterTypeMask(filterTypeMask: BCOutlineViewFilterTypeMask): void;
  nodeName(): NSString;
  setNodeName(nodeName: NSString | string): void;
  isActive(): boolean;
  setIsActive(isActive: boolean): void;
  isEditableInLayerList(): boolean;
  setIsEditableInLayerList(isEditableInLayerList: boolean): void;
  hasBadgedIcon(): boolean;
  setHasBadgedIcon(hasBadgedIcon: boolean): void;
  selectedBadgeMenuItemIndex(): NSUInteger;
  setSelectedBadgeMenuItemIndex(selectedBadgeMenuItemIndex: NSUInteger): void;
  isExpanded(): boolean;
  setIsExpanded(isExpanded: boolean): void;
}

declare enum BCOutlineViewDisplayType {
  BCOutlineViewDisplayTypeStandard,
  BCOutlineViewDisplayTypeArtboard,
  BCOutlineViewDisplayTypePage,
}

declare enum BCOutlineViewFilterTypeMask {
  BCOutlineViewFilterTypeMaskShape = 1 << 0,
  BCOutlineViewFilterTypeMaskText = 1 << 1,
  BCOutlineViewFilterTypeMaskImage = 1 << 2,
  BCOutlineViewFilterTypeMaskGroup = 1 << 3,
  BCOutlineViewFilterTypeMaskExportable = 1 << 4,
  BCOutlineViewFilterTypeMaskPrototypingFlow = 1 << 5,
  BCOutlineViewFilterTypeMaskSymbol = 1 << 6,
}

declare class BCPageListViewController extends BCOutlineViewController {}

declare class BCSideBarViewController extends NSViewController {
  initWithPageListDataSource_delegate_layerListDataSource_delegate<T extends BCSideBarViewController>(pageListDataSource: NSObject, pageListDelegate: NSObject, layerListDataSource: NSObject, layerListDelegate: NSObject): T;
  refreshWithMask(mask: BCSideBarRefreshType): void;
  renamePage(): IBAction;
  renameLayer(): IBAction;
  renameLayerAfterNextLayerListRefresh(): IBAction;
  flagsChangedNotification(): void;
  showPageView(): void;

  delegate(): NSObject;
  setDelegate(delegate: NSObject): void;
  filterViewController(): BCLayerListFilterViewController;
  setFilterViewController(filterViewController: BCLayerListFilterViewController): void;
}

declare interface IBCSideBarViewControllerDelegate {
  pageListHeight(): CGFloat;
  setPageListHeight(pageListHeight: CGFloat): void;
}

declare enum BCSideBarRefreshType {
  BCSideBarRefreshTypeSelection,
  BCSideBarRefreshTypeLayout,
  BCSideBarRefreshTypePreviewImages,
  BCSideBarRefreshTypeAll,
  BCSideBarRefreshTypeLayerList = 0x10,
  BCSideBarRefreshTypePageList = 0x20,
}

declare class BCSidebarPreviewImageView extends NSView {
  image(): NSImage;
  setImage(image: NSImage): void;
}

declare class BCSplitView extends NSSplitView {}

declare class BCStringWithoutNewlineTransformer extends NSValueTransformer {}

declare class BCTableCellTitleTextField extends NSTextField {}

declare class BCTableCellView extends NSTableCellView implements INSMenuDelegate {
  renameNode(): void;
  updateBadge(): void;
  drawDragImageInRect(dragRect: NSRect): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;

  delegate(): any;
  setDelegate(delegate: any): void;
  displayState(): BCTableCellViewDisplayState;
  setDisplayState(displayState: BCTableCellViewDisplayState): void;
  widthForDragImage(): CGFloat;
  setWidthForDragImage(widthForDragImage: CGFloat): void;
}

declare interface IBCTableCellViewDelegate {
  isTableCellViewNodeSelected(tableCellView: BCTableCellView): boolean;
  tableCellViewHandleBadgePressed(tableCellView: BCTableCellView): void;
  tableCellViewMouseEntered(tableCellView: BCTableCellView): void;
  tableCellViewMouseExited(tableCellView: BCTableCellView): void;
  tableCellViewDidBeginEditing(tableCellView: BCTableCellView): void;
  tableCellViewDestinationWindow(view: BCTableCellView): NSWindow;
}

declare enum BCTableCellViewDisplayState {
  BCTableCellViewDisplayStateNormal,
  BCTableCellViewDisplayStateHovered,
  BCTableCellViewDisplayStateAlternate,
}

declare class BCTableRowView extends NSTableRowView {
  node(): NSObject;
  setNode(node: NSObject): void;
  delegate(): NSObject;
  setDelegate(delegate: NSObject): void;
  displayType(): BCOutlineViewDisplayType;
  setDisplayType(displayType: BCOutlineViewDisplayType): void;
  expansionState(): BCOutlineViewNodeExpansionState;
  setExpansionState(expansionState: BCOutlineViewNodeExpansionState): void;
  outlineView(): BCOutlineView;
  setOutlineView(outlineView: BCOutlineView): void;
  drawsTopBorder(): boolean;
  setDrawsTopBorder(drawsTopBorder: boolean): void;
  drawsBottomBorder(): boolean;
  setDrawsBottomBorder(drawsBottomBorder: boolean): void;
  hasBottomPaddingApplied(): boolean;
  setHasBottomPaddingApplied(hasBottomPaddingApplied: boolean): void;
  hasTopPaddingApplied(): boolean;
  setHasTopPaddingApplied(hasTopPaddingApplied: boolean): void;
}

declare interface IBCTableRowViewDelegate {
  isNodeSelectedInTableRowView(view: BCTableRowView): boolean;
  isNodeSelectedOnRow(row: NSInteger): boolean;
  multipleNodesSelected(): boolean;
  isNodeExpandedInTableRowView(view: BCTableRowView): boolean;
  indexOfTableRowView(view: BCTableRowView): NSInteger;
  tableRowView_displayTypeOfRowAtIndex(view: BCTableRowView, index: NSInteger): BCOutlineViewDisplayType;
}

declare class MSBlueButtonCell extends NSButtonCell {}

declare enum MSLayerPreviewBadgeType {
  MSLayerPreviewBadgeTypeNone,
  MSLayerPreviewBadgeTypeSlice,
  MSLayerPreviewBadgeTypeFlow,
}

declare class LLTestBaseController extends NSObject implements IBCOutlineViewDataSource, IBCOutlineViewDelegate {
  dataController_removeNodes(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_childrenOfNode(dataController: BCOutlineViewDataController | null, node: any | null): NSArray<any>;
  rootObject(): any;
  dataController_isNodeSelected(dataController: BCOutlineViewDataController, node: any): boolean;
  multipleNodesSelectedForDataController(dataController: BCOutlineViewDataController): boolean;
  dataController_nodeHasSharedStyle(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_changeSelectionTo(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_isNodeExpanded(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeExpandable(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeHighlighted(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_updateNode_expandedState(dataController: BCOutlineViewDataController, node: any, expanded: BCOutlineViewNodeExpansionState): void;
  dataController_exportNodes_toFolder(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[], folder: NSURL): NSArray<any>;
  dragTypesForDataController(dataController: BCOutlineViewDataController): NSArray<any>;
  dataController_writeNodes_toPasteboard(dataController: BCOutlineViewDataController, items: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  dataController_canMoveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_canCopyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_moveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_copyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_handleBadgePressedOnNode_withAltState(dataController: BCOutlineViewDataController, node: any, alt: boolean): void;
  dataController_refreshPreviewsOnNodes(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_menuItemsForSelectedObjects(dataController: BCOutlineViewDataController, selection: NSArray<any> | any[]): NSArray<any>;
  dataController_hoverNodeDidChangeTo(dataController: BCOutlineViewDataController, node: any): void;

  root(): any;
  setRoot(root: any): void;
}

declare class LLTestLayerListController extends LLTestBaseController {}

declare class LLTestPageListController extends LLTestBaseController {
  addPage(): void;
}

declare class BCAppDelegate extends NSObject implements INSApplicationDelegate, IBCPopoverDelegate, INSApplicationDelegate {
  attach(sender: any): IBAction;
  resize(sender: any): IBAction;
  applicationShouldTerminate(sender: NSApplication): NSApplicationTerminateReply;
  application_openURLs(application: NSApplication, urls: NSArray<any> | any[]): void;
  application_openFile(sender: NSApplication, filename: NSString | string): boolean;
  application_openFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  application_openTempFile(sender: NSApplication, filename: NSString | string): boolean;
  applicationShouldOpenUntitledFile(sender: NSApplication): boolean;
  applicationOpenUntitledFile(sender: NSApplication): boolean;
  application_openFileWithoutUI(sender: any, filename: NSString | string): boolean;
  application_printFile(sender: NSApplication, filename: NSString | string): boolean;
  application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: NSArray<any> | any[], printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanels: boolean): NSApplicationPrintReply;
  applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication): boolean;
  applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: boolean): boolean;
  applicationDockMenu(sender: NSApplication): NSMenu;
  application_willPresentError(application: NSApplication, error: NSError): NSError;
  application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData): void;
  application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError): void;
  application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  application_willEncodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_didDecodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_willContinueUserActivityWithType(application: NSApplication, userActivityType: NSString | string): boolean;
  application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: Block): boolean;
  application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: NSString | string, error: NSError): void;
  application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity): void;
  application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata): void;
  applicationWillFinishLaunching(notification: NSNotification): void;
  applicationDidFinishLaunching(notification: NSNotification): void;
  applicationWillHide(notification: NSNotification): void;
  applicationDidHide(notification: NSNotification): void;
  applicationWillUnhide(notification: NSNotification): void;
  applicationDidUnhide(notification: NSNotification): void;
  applicationWillBecomeActive(notification: NSNotification): void;
  applicationDidBecomeActive(notification: NSNotification): void;
  applicationWillResignActive(notification: NSNotification): void;
  applicationDidResignActive(notification: NSNotification): void;
  applicationWillUpdate(notification: NSNotification): void;
  applicationDidUpdate(notification: NSNotification): void;
  applicationWillTerminate(notification: NSNotification): void;
  applicationDidChangeScreenParameters(notification: NSNotification): void;
  applicationDidChangeOcclusionState(notification: NSNotification): void;
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;
  applicationShouldTerminate(sender: NSApplication): NSApplicationTerminateReply;
  application_openURLs(application: NSApplication, urls: NSArray<any> | any[]): void;
  application_openFile(sender: NSApplication, filename: NSString | string): boolean;
  application_openFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  application_openTempFile(sender: NSApplication, filename: NSString | string): boolean;
  applicationShouldOpenUntitledFile(sender: NSApplication): boolean;
  applicationOpenUntitledFile(sender: NSApplication): boolean;
  application_openFileWithoutUI(sender: any, filename: NSString | string): boolean;
  application_printFile(sender: NSApplication, filename: NSString | string): boolean;
  application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: NSArray<any> | any[], printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanels: boolean): NSApplicationPrintReply;
  applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication): boolean;
  applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: boolean): boolean;
  applicationDockMenu(sender: NSApplication): NSMenu;
  application_willPresentError(application: NSApplication, error: NSError): NSError;
  application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData): void;
  application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError): void;
  application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  application_willEncodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_didDecodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_willContinueUserActivityWithType(application: NSApplication, userActivityType: NSString | string): boolean;
  application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: Block): boolean;
  application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: NSString | string, error: NSError): void;
  application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity): void;
  application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata): void;
  applicationWillFinishLaunching(notification: NSNotification): void;
  applicationDidFinishLaunching(notification: NSNotification): void;
  applicationWillHide(notification: NSNotification): void;
  applicationDidHide(notification: NSNotification): void;
  applicationWillUnhide(notification: NSNotification): void;
  applicationDidUnhide(notification: NSNotification): void;
  applicationWillBecomeActive(notification: NSNotification): void;
  applicationDidBecomeActive(notification: NSNotification): void;
  applicationWillResignActive(notification: NSNotification): void;
  applicationDidResignActive(notification: NSNotification): void;
  applicationWillUpdate(notification: NSNotification): void;
  applicationDidUpdate(notification: NSNotification): void;
  applicationWillTerminate(notification: NSNotification): void;
  applicationDidChangeScreenParameters(notification: NSNotification): void;
  applicationDidChangeOcclusionState(notification: NSNotification): void;

  window(): NSWindow;
  setWindow(window: NSWindow): void;
  button(): NSButton;
  setButton(button: NSButton): void;
}

declare class BCDummyViewController extends NSViewController {}

declare class BCRedLinedView extends NSView {}

declare class BCColorButtonCell extends NSButtonCell {
  backgroundColorStringRepresentation(): NSString;
  setBackgroundColorStringRepresentation(backgroundColorStringRepresentation: NSString | string): void;
  backgroundHighlightedColor(): NSString;
  setBackgroundHighlightedColor(backgroundHighlightedColor: NSString | string): void;
  textColor(): NSString;
  setTextColor(textColor: NSString | string): void;
  backgroundSelectedColor(): NSString;
  setBackgroundSelectedColor(backgroundSelectedColor: NSString | string): void;
  backgroundSelectedHighlightedColor(): NSString;
  setBackgroundSelectedHighlightedColor(backgroundSelectedHighlightedColor: NSString | string): void;
  textSelectedColor(): NSString;
  setTextSelectedColor(textSelectedColor: NSString | string): void;
}

declare class BCDebugMenuController extends BCSingleton {
  addDebugMenu(): void;
}

declare class BCHighlightColorButtonCell extends NSButtonCell {}

declare class BCHighlightColorTextFieldCell extends NSTextFieldCell {
  highlightColor(): NSColor;
  setHighlightColor(highlightColor: NSColor): void;
}

declare class BCHighlightImageCell extends NSImageCell {}

declare class BCIOSStyleSwitchButton extends NSButton {}

declare class BCJSONZippedDecoder extends BCJSONDecoder {
  initWithURL<T extends BCJSONZippedDecoder>(url: NSURL): T;
  rawDataAtSubpath_error(path: NSString | string, error: NSError): NSData;
  decodeFileAtSubpath_error(path: NSString | string, error: NSError): any;
  containsFileAtSubpath(path: NSString | string): boolean;
}

declare class BCJSONZippedEncoder extends BCJSONEncoder {
  static zipEncoderForWritingAtURL(url: NSURL): BCJSONZippedEncoder;
  encodeObject_toSubpath_error(root: NSObject, path: NSString | string, error: NSError): boolean;
  encodeRawData_toSubpath_error(data: NSData, path: NSString | string, error: NSError): boolean;
  finishEncodingError(error: NSError): boolean;
}

declare class BCJSONZippedUnarchiver extends BCJSONUnarchiver {
  initWithURL<T extends BCJSONZippedUnarchiver>(url: NSURL): T;
  unarchiveObjectAtSubpath_error(path: NSString | string, error: NSError): any;
}

declare class BCKeyEventActionTableView extends NSTableView {
  setTarget_action_forKeyDownEventWithCharacters(target: any, action: string, characters: NSString | string): void;
}

declare class BCPasteboardMock extends NSObject {
  static generalPasteboard(): NSPasteboard;
  static pasteboardWithName(name: NSString | string): NSPasteboard;
  declareTypes_owner(types: NSArray<any> | any[], owner: any): void;
  addTypes_owner(types: NSArray<any> | any[], owner: any): void;
  setData_forType(data: NSData, dataType: NSString | string): void;
  dataForType(type: NSString | string): NSData;
  setString_forType(string: NSString | string, dataType: NSString | string): boolean;
  stringForType(dataType: NSString | string): NSString;
  setPropertyList_forType(plist: any, dataType: NSString | string): boolean;
  propertyListForType(dataType: NSString | string): any;
  availableTypeFromArray(types: NSArray<any> | any[]): NSString;
  types(): NSArray<any>;
  writeObjects(objects: NSArray<any> | any[]): boolean;
  clearContents(): void;

  name(): NSString;
  setName(name: NSString | string): void;
  changeCount(): NSInteger;
  setChangeCount(changeCount: NSInteger): void;
}

declare class BCPopover extends NSObject implements INSWindowDelegate, INSViewControllerPresentationAnimator {
  showRelativeToView_preferredEdge(view: NSView, edge: NSRectEdge): void;
  close(): void;
  move(): void;
  popoverWindowFrame(): NSRect;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  animatePresentationOfViewController_fromViewController(viewController: NSViewController, fromViewController: NSViewController): void;
  animateDismissalOfViewController_fromViewController(viewController: NSViewController, fromViewController: NSViewController): void;

  contentViewController(): NSViewController;
  setContentViewController(contentViewController: NSViewController): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  minimumHeight(): CGFloat;
  setMinimumHeight(minimumHeight: CGFloat): void;
  window(): BCPopoverWindow;
  setWindow(window: BCPopoverWindow): void;
  screenEdgeBehaviour(): BCPopoverScreenEdgeBehaviour;
  setScreenEdgeBehaviour(screenEdgeBehaviour: BCPopoverScreenEdgeBehaviour): void;
  layerDependency(): BCPopupLayerDependency;
  setLayerDependency(layerDependency: BCPopupLayerDependency): void;
  closesOnWindowDidResignKey(): boolean;
  setClosesOnWindowDidResignKey(closesOnWindowDidResignKey: boolean): void;
  attachedToView(): NSView;
  setAttachedToView(attachedToView: NSView): void;
  attachedToViewMargin(): CGFloat;
  setAttachedToViewMargin(attachedToViewMargin: CGFloat): void;
  preferredEdge(): NSRectEdge;
  setPreferredEdge(preferredEdge: NSRectEdge): void;
}

declare enum BCPopupLayerDependency {
  BCPopoverLayerDependant,
  BCPopoverLayerIndependent,
}

declare enum BCPopoverScreenEdgeBehaviour {
  BCPopoverScreenEdgeBehaviourNone,
  BCPopoverScreenEdgeBehaviourResize,
  BCPopoverScreenEdgeBehaviourMove,
}

declare class BCPopoverContentView extends NSView {
  availableContentRect(): NSRect;

  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  arrowEdge(): NSRectEdge;
  setArrowEdge(arrowEdge: NSRectEdge): void;
  arrowPosition(): CGFloat;
  setArrowPosition(arrowPosition: CGFloat): void;
}

declare interface IBCPopoverDelegate {
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;
}

declare class BCPopoverWindow extends NSWindow {
  static attachedWindowWithView(aView: NSView): any;

  arrowEdge(): NSRectEdge;
  setArrowEdge(arrowEdge: NSRectEdge): void;
  arrowPosition(): CGFloat;
  setArrowPosition(arrowPosition: CGFloat): void;
}

declare class BCWindowBadge extends MSHoverButton {
  tintColor(): NSColor;
  setTintColor(tintColor: NSColor): void;
}

declare class BCZeroHeightWhenEmptyTextField extends NSTextField {
  paddingIfNotEmpty(): CGFloat;
  setPaddingIfNotEmpty(paddingIfNotEmpty: CGFloat): void;
}

declare class CHFlippedView extends NSView {}

declare class CHImagelessPopupButtonCell extends NSPopUpButtonCell {}

declare class CHOutlineView extends NSOutlineView {}

declare class CHTableView extends NSTableView {}

declare class CHProgressSheet extends CHSheetController {
  setProgressMaximum(max: NSInteger): void;
  incrementProgress(): void;
  incrementProgressBy(amount: NSInteger): void;
  isMaximum(): boolean;
  setMessage(message: NSString | string): void;
  setTitle(aTitle: NSString | string): void;
  setSubtitle(subtitle: NSString | string): void;
  setShowsCancelButton(flag: boolean): void;
  setIndeterminate(flag: boolean): void;
}

declare class CHSheetController extends CHWindowController implements INSTouchBarDelegate {
  static runForWindow(window: NSWindow): any;
  static runForWindow_withObject(window: NSWindow, obj: any): any;
  run(): any;
  confirm(sender: any): IBAction;
  cancel(sender: any): IBAction;
  _init(): any;
  touchBarItemIdentifiers(): NSArray<any>;
  selectorForTouchbarItemIdentifier(itemIdentifier: NSTouchBarItemIdentifier): string;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;

  object(): any;
  setObject(object: any): void;
}

declare class CHStringAttributes extends NSDictionary<any, any> implements INSCopying {
  static stringAttributesWithFont(aFont: NSFont): any;
  static stringAttributesWithFont_color(aFont: NSFont, aColor: NSColor): any;
  static stringAttributesWithFont_color_alignment(aFont: NSFont, aColor: NSColor, align: NSTextAlignment): any;
  copyWithZone(zone: NSZone | null): any;

  font(): NSFont;
  setFont(font: NSFont): void;
  color(): NSColor;
  setColor(color: NSColor): void;
  shadow(): NSShadow;
  setShadow(shadow: NSShadow): void;
  alignment(): NSTextAlignment;
  setAlignment(alignment: NSTextAlignment): void;
  fontSize(): CGFloat;
  setFontSize(fontSize: CGFloat): void;
}

declare class CHTransparentView extends NSView {
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
}

declare class CHTransparentWindow extends NSWindow {
  initWithContentRect<T extends CHTransparentWindow>(contentRect: NSRect): T;
}

declare class CHVerticallyCentredPopupButtonCell extends NSPopUpButtonCell {}

declare class CHWindowController extends NSWindowController {}

declare class MSAltButton extends MSHoverButton {
  bc_weakTarget(): any;
  setBc_weakTarget(bc_weakTarget: any): void;
}

declare class MSAltButtonCell extends MSHoverButtonCell {}

declare interface IMSAltButtonTarget {
  altButtonCanShowAltImage(altButton: MSAltButton): boolean;
}

declare interface IMSDropableViewDelegate {
  draggedTypesForView(view: NSView): NSArray<any>;
  view_performDragOperation(view: NSView, sender: any): boolean;
  view_draggingEntered(view: NSView, sender: any): NSDragOperation;
  view_draggingUpdated(view: NSView, sender: any): NSDragOperation;
  view_draggingExited(view: NSView, sender: any): void;
  view_draggingEnded(view: NSView, sender: any): void;
  view_prepareForDragOperation(view: NSView, sender: any): boolean;
  view_concludeDragOperation(view: NSView, sender: any): void;
  viewWantsPeriodicDraggingUpdates(view: NSView): boolean;
  view_updateDraggingItemsForDrag(view: NSView, sender: any): void;
}

declare class MSFileMonitor extends MSFolderMonitor {}

declare class MSFolderMonitor extends NSObject {
  initWithURL_contentsChangedBlock<T extends MSFolderMonitor>(folderURL: NSURL, block: Block): T;
  initWithURL_latency_contentsChangedBlock<T extends MSFolderMonitor>(folderURL: NSURL, latency: NSTimeInterval, block: Block): T;
  flush(): void;

  folderURL(): NSURL;
  setFolderURL(folderURL: NSURL): void;
}

declare class MSHoverButton extends NSButton {
  mouseIsHovering(): boolean;
  setMouseIsHovering(mouseIsHovering: boolean): void;
}

declare class MSHoverButtonCell extends NSButtonCell {}

declare class MSTintedHoverButtonCell extends MSHoverButtonCell {
  normalTint(): NSString;
  setNormalTint(normalTint: NSString | string): void;
  hoverTint(): NSString;
  setHoverTint(hoverTint: NSString | string): void;
}

declare class MSNamedInterfaceImageOwner extends NSObject implements IMSInterfaceImageOwner {
  initWithImage_cacheOwner<T extends MSNamedInterfaceImageOwner>(image: NSImage, cacheOwner: any): T;

  interfaceImageIdentifier(): NSString;
  setInterfaceImageIdentifier(interfaceImageIdentifier: NSString | string): void;
  cacheOwner(): any;
  setCacheOwner(cacheOwner: any): void;
}

declare interface IMSInterfaceImageOwner {
  interfaceImageIdentifier(): NSString;
  setInterfaceImageIdentifier(interfaceImageIdentifier: NSString | string): void;
  cacheOwner(): any;
  setCacheOwner(cacheOwner: any): void;
}

declare class MSPlainButton extends MSHoverButton {}

declare class MSPlainButtonCell extends MSHoverButtonCell {}

declare class MSPreviewPopupButtonCell extends NSPopUpButtonCell {
  previewImage(): NSImage;
  setPreviewImage(previewImage: NSImage): void;
  previewImageFrame(): CGRect;
  setPreviewImageFrame(previewImageFrame: CGRect): void;
  titleOffset(): CGFloat;
  setTitleOffset(titleOffset: CGFloat): void;
}

declare class MSTheme extends NSObject {
  colorNamed(colorName: NSString | string): NSColor;
  colorNamed_options(colorName: NSString | string, options: MSThemeResolvingOptions): NSColor;
  imageNamed(imageName: NSString | string): NSImage;
  imageNamed_options(imageName: NSString | string, options: MSThemeResolvingOptions): NSImage;
  cacheImage_forKey_owner(image: NSImage, key: NSString | string, owner: any): void;
  cachedImageForKey_owner(key: NSString | string, owner: any): NSImage;
  cachedImageForKey_owner_createBlock(key: NSString | string, owner: any, block: BCCacheCreateObjectBlock): NSImage;

  static sharedTheme(): MSTheme;
  static setSharedTheme(sharedTheme: MSTheme): void;
}

declare enum MSThemeResolvingOptions {
  MSThemeResolvingOptionsDefault = 0,
  MSThemeResolvingOptionInactiveWindow = 1,
  MSThemeResolvingOptionDarkMode = 2,
}

declare type CHTransformStruct = {
  rotation: CGFloat
  isFlippedHorizontal: boolean
  isFlippedVertical: boolean
  flipOrder: boolean
}

declare enum DKCGContextCreateFlags {
  DKCGContextCreateDefault = 0,
  DKCGContextCreateIsFlipped = 0x01,
}

declare class COSAlertWindow extends NSObject {
  addTextFieldWithValue(value: NSString | string): void;
  addAccessoryView(view: NSView): void;

  alert(): NSAlert;
  setAlert(alert: NSAlert): void;
}

declare class COSFiber extends NSObject {
  static createWithCocoaScript(cos: COScript): any;
  onCleanup(jsFunction: MOJavaScriptObject | Function): void;
  cleanup(): void;

  coscript(): COScript;
  setCoscript(coscript: COScript): void;
  cleanUpJSfunc(): MOJavaScriptObject;
  setCleanUpJSfunc(cleanUpJSfunc: MOJavaScriptObject | Function): void;
}

declare class COSGifAnimator extends NSObject {
  fps(): CGFloat;
  setFps(fps: CGFloat): void;
  seconds(): CGFloat;
  setSeconds(seconds: CGFloat): void;
  size(): NSSize;
  setSize(size: NSSize): void;
}

declare class COSInterval extends COSFiber {
  static scheduleWithInterval_cocoaScript_jsFunction_repeat(i: NSTimeInterval, cos: COScript, jsFunction: MOJavaScriptObject | Function, repeat: boolean): any;
  cancel(): void;

  jsfunc(): MOJavaScriptObject;
  setJsfunc(jsfunc: MOJavaScriptObject | Function): void;
}

declare class COSListener extends NSObject {
  static sharedListener(): COSListener;
  static listen(): void;
  static listenWithRootObject(rootObject: any): void;

  rootObject(): any;
  setRootObject(rootObject: any): void;
}

declare class COSMarkdown extends NSObject {}

declare class COSPreprocessor extends NSObject {
  static preprocessCode(sourceString: NSString | string): NSString;
  static preprocessCode_withBaseURL(sourceString: NSString | string, base: NSURL): NSString;
}

declare class JSTPSymbolGroup extends NSObject {
  addSymbol(aSymbol: any): void;

  args(): NSMutableArray<any>;
  setArgs(args: NSMutableArray<any> | any[]): void;
  parent(): JSTPSymbolGroup;
  setParent(parent: JSTPSymbolGroup): void;
}

declare class COSR extends NSObject {}

declare class COScript extends NSObject {
  static insertInMainMenu(): boolean;
  addFiber(fiber: COSFiber): void;
  cleanupFibers(): void;
  removeFiber(fiber: COSFiber): void;
  createFiber(): COSFiber;
  initWithCoreModules_andName<T extends COScript>(coreModules: NSDictionary<any, any> | {[key: string]: any}, name: NSString | string): T;
  cleanup(): void;
  garbageCollect(): void;
  executeString(str: NSString | string): any;
  executeString_baseURL(str: NSString | string, base: NSURL): any;
  pushObject_withName(obj: any, name: NSString | string): void;
  deleteObjectWithName(name: NSString | string): void;
  print(s: any): void;
  require(module: NSString | string): any;
  shouldKeepRunning(): boolean;
  context(): JSGlobalContextRef;
  callFunctionNamed_withArguments(name: NSString | string, args: NSArray<any> | any[]): any;
  hasFunctionNamed(name: NSString | string): boolean;
  callJSFunction_withArgumentsInArray(jsFunction: JSObjectRef, arguments: NSArray<any> | any[]): any;
  static loadBridgeSupportFileAtURL(url: NSURL): void;
  static listen(): void;
  static resetPlugins(): void;
  static loadPlugins(): void;
  static setShouldLoadJSTPlugins(b: boolean): void;
  static application(app: NSString | string): any;
  static app(app: NSString | string): any;
  static currentCOScript(): COScript;
  static setDebugController(debugController: any): any;

  printController(): any;
  setPrintController(printController: any): void;
  env(): NSMutableDictionary<any, any>;
  setEnv(env: NSMutableDictionary<any, any> | {[key: string]: any}): void;
  shouldPreprocess(): boolean;
  setShouldPreprocess(shouldPreprocess: boolean): void;
  shouldKeepAround(): boolean;
  setShouldKeepAround(shouldKeepAround: boolean): void;
  processedSource(): NSString;
  setProcessedSource(processedSource: NSString | string): void;
  coreModuleMap(): NSDictionary<any, any>;
  setCoreModuleMap(coreModuleMap: NSDictionary<any, any> | {[key: string]: any}): void;
  moduleCache(): NSMutableDictionary<any, any>;
  setModuleCache(moduleCache: NSMutableDictionary<any, any> | {[key: string]: any}): void;
}

declare class COSTarget extends NSObject {
  static targetWithJSFunction(jsFunction: MOJavaScriptObject | Function): COSTarget;
  initWithJSFunction<T extends COSTarget>(jsFunction: MOJavaScriptObject | Function): T;
  callAction(sender: any): void;
  action(): string;

  jsFunction(): MOJavaScriptObject;
  setJsFunction(jsFunction: MOJavaScriptObject | Function): void;
  callCount(): NSUInteger;
  setCallCount(callCount: NSUInteger): void;
}

declare class JSTalk extends COScript {}

declare interface ICOPrintController {
  print(s: any): void;
}

declare interface ICODebugController {
  output_args(format: NSString | string, ...args: any[]): void;
}

declare class MarkerLineNumberView extends NoodleLineNumberView {}

declare class NoodleLineNumberMarker extends NSRulerMarker {
  initWithRulerView_lineNumber_image_imageOrigin<T extends NoodleLineNumberMarker>(aRulerView: NSRulerView, line: CGFloat, anImage: NSImage, imageOrigin: NSPoint): T;
  setLineNumber(line: NSUInteger): void;
  lineNumber(): NSUInteger;
}

declare class NoodleLineNumberView extends NSRulerView {
  initWithScrollView<T extends NoodleLineNumberView>(aScrollView: NSScrollView): T;
  setFont(aFont: NSFont): void;
  font(): NSFont;
  setTextColor(color: NSColor): void;
  textColor(): NSColor;
  setAlternateTextColor(color: NSColor): void;
  alternateTextColor(): NSColor;
  setBackgroundColor(color: NSColor): void;
  backgroundColor(): NSColor;
  lineNumberForLocation(location: CGFloat): NSInteger;
  markerAtLine(line: NSUInteger): NoodleLineNumberMarker;
}

declare class MOBridgeSupportController extends NSObject {
  static sharedController(): MOBridgeSupportController;
  isBridgeSupportLoadedForURL(aURL: NSURL): boolean;
  loadBridgeSupportAtURL_error(aURL: NSURL, outError: NSError): boolean;
  performQueryForSymbolsOfType(classes: NSArray<any> | any[]): NSDictionary<any, any>;
  performQueryForSymbolName(name: NSString | string): any;
  performQueryForSymbolName_ofType(name: NSString | string, klass: any): any;

  symbols(): NSDictionary<any, any>;
  setSymbols(symbols: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MOBridgeSupportLibrary extends NSObject {
  addDependency(dependency: NSString | string): void;
  removeDependency(dependency: NSString | string): void;
  symbolWithName(name: NSString | string): MOBridgeSupportSymbol;
  setSymbol_forName(symbol: MOBridgeSupportSymbol, name: NSString | string): void;
  removeSymbolForName(name: NSString | string): void;

  name(): NSString;
  setName(name: NSString | string): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
  dependencies(): NSArray<any>;
  setDependencies(dependencies: NSArray<any> | any[]): void;
  symbols(): NSDictionary<any, any>;
  setSymbols(symbols: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MOBridgeSupportParser extends NSObject {
  libraryWithBridgeSupportURL_error(aURL: NSURL, outError: NSError): MOBridgeSupportLibrary;
}

declare class MOBridgeSupportSymbol extends NSObject {
  name(): NSString;
  setName(name: NSString | string): void;
}

declare class MOBridgeSupportStruct extends MOBridgeSupportSymbol {
  type(): NSString;
  setType(type: NSString | string): void;
  type64(): NSString;
  setType64(type64: NSString | string): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
}

declare class MOBridgeSupportCFType extends MOBridgeSupportSymbol {
  type(): NSString;
  setType(type: NSString | string): void;
  type64(): NSString;
  setType64(type64: NSString | string): void;
  tollFreeBridgedClassName(): NSString;
  setTollFreeBridgedClassName(tollFreeBridgedClassName: NSString | string): void;
  getTypeIDFunctionName(): NSString;
  setGetTypeIDFunctionName(getTypeIDFunctionName: NSString | string): void;
}

declare class MOBridgeSupportOpaque extends MOBridgeSupportSymbol {
  type(): NSString;
  setType(type: NSString | string): void;
  type64(): NSString;
  setType64(type64: NSString | string): void;
  hasMagicCookie(): boolean;
  setHasMagicCookie(hasMagicCookie: boolean): void;
}

declare class MOBridgeSupportConstant extends MOBridgeSupportSymbol {
  type(): NSString;
  setType(type: NSString | string): void;
  type64(): NSString;
  setType64(type64: NSString | string): void;
  hasMagicCookie(): boolean;
  setHasMagicCookie(hasMagicCookie: boolean): void;
}

declare class MOBridgeSupportStringConstant extends MOBridgeSupportSymbol {
  value(): NSString;
  setValue(value: NSString | string): void;
  hasNSString(): boolean;
  setHasNSString(hasNSString: boolean): void;
}

declare class MOBridgeSupportEnum extends MOBridgeSupportSymbol {
  value(): NSNumber;
  setValue(value: NSNumber | number): void;
  value64(): NSNumber;
  setValue64(value64: NSNumber | number): void;
  ignored(): boolean;
  setIgnored(ignored: boolean): void;
  suggestion(): NSString;
  setSuggestion(suggestion: NSString | string): void;
}

declare class MOBridgeSupportFunction extends MOBridgeSupportSymbol {
  addArgument(argument: MOBridgeSupportArgument): void;
  removeArgument(argument: MOBridgeSupportArgument): void;

  variadic(): boolean;
  setVariadic(variadic: boolean): void;
  sentinel(): NSNumber;
  setSentinel(sentinel: NSNumber | number): void;
  inlineFunction(): boolean;
  setInlineFunction(inlineFunction: boolean): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  returnValue(): MOBridgeSupportArgument;
  setReturnValue(returnValue: MOBridgeSupportArgument): void;
}

declare class MOBridgeSupportFunctionAlias extends MOBridgeSupportSymbol {
  original(): NSString;
  setOriginal(original: NSString | string): void;
}

declare class MOBridgeSupportClass extends MOBridgeSupportSymbol {
  addMethod(method: MOBridgeSupportMethod): void;
  removeMethod(method: MOBridgeSupportMethod): void;
  methodWithSelector(selector: string): MOBridgeSupportMethod;

  methods(): NSArray<any>;
  setMethods(methods: NSArray<any> | any[]): void;
}

declare class MOBridgeSupportInformalProtocol extends MOBridgeSupportSymbol {
  addMethod(method: MOBridgeSupportMethod): void;
  removeMethod(method: MOBridgeSupportMethod): void;
  methodWithSelector(selector: string): MOBridgeSupportMethod;

  methods(): NSArray<any>;
  setMethods(methods: NSArray<any> | any[]): void;
}

declare class MOBridgeSupportMethod extends MOBridgeSupportSymbol {
  addArgument(argument: MOBridgeSupportArgument): void;
  removeArgument(argument: MOBridgeSupportArgument): void;

  selector(): string;
  setSelector(selector: string): void;
  type(): NSString;
  setType(type: NSString | string): void;
  type64(): NSString;
  setType64(type64: NSString | string): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  returnValue(): MOBridgeSupportArgument;
  setReturnValue(returnValue: MOBridgeSupportArgument): void;
  classMethod(): boolean;
  setClassMethod(classMethod: boolean): void;
  variadic(): boolean;
  setVariadic(variadic: boolean): void;
  sentinel(): NSNumber;
  setSentinel(sentinel: NSNumber | number): void;
  ignored(): boolean;
  setIgnored(ignored: boolean): void;
  suggestion(): NSString;
  setSuggestion(suggestion: NSString | string): void;
}

declare class MOBridgeSupportArgument extends NSObject {
  addArgument(argument: MOBridgeSupportArgument): void;
  removeArgument(argument: MOBridgeSupportArgument): void;

  type(): NSString;
  setType(type: NSString | string): void;
  type64(): NSString;
  setType64(type64: NSString | string): void;
  typeModifier(): NSString;
  setTypeModifier(typeModifier: NSString | string): void;
  signature(): NSString;
  setSignature(signature: NSString | string): void;
  signature64(): NSString;
  setSignature64(signature64: NSString | string): void;
  cArrayLengthInArg(): NSString;
  setCArrayLengthInArg(cArrayLengthInArg: NSString | string): void;
  cArrayOfFixedLength(): boolean;
  setCArrayOfFixedLength(cArrayOfFixedLength: boolean): void;
  cArrayDelimitedByNull(): boolean;
  setCArrayDelimitedByNull(cArrayDelimitedByNull: boolean): void;
  cArrayOfVariableLength(): boolean;
  setCArrayOfVariableLength(cArrayOfVariableLength: boolean): void;
  cArrayLengthInReturnValue(): boolean;
  setCArrayLengthInReturnValue(cArrayLengthInReturnValue: boolean): void;
  index(): NSUInteger;
  setIndex(index: NSUInteger): void;
  acceptsNull(): boolean;
  setAcceptsNull(acceptsNull: boolean): void;
  acceptsPrintfFormat(): boolean;
  setAcceptsPrintfFormat(acceptsPrintfFormat: boolean): void;
  alreadyRetained(): boolean;
  setAlreadyRetained(alreadyRetained: boolean): void;
  functionPointer(): boolean;
  setFunctionPointer(functionPointer: boolean): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  returnValue(): MOBridgeSupportArgument;
  setReturnValue(returnValue: MOBridgeSupportArgument): void;
}

declare class Mocha extends NSObject {
  static sharedRuntime(): Mocha;
  initWithName<T extends Mocha>(name: NSString | string): T;
  evalString(string: NSString | string): any;
  evalString_atURL(string: NSString | string, url: NSURL): any;
  callFunctionWithName(functionName: NSString | string): any;
  callFunctionWithName_withArguments(functionName: NSString | string, firstArg: any, ...args: any[]): any;
  callFunctionWithName_withArgumentsInArray(functionName: NSString | string, arguments: NSArray<any> | any[]): any;
  isSyntaxValidForString(string: NSString | string): boolean;
  loadFrameworkWithName(frameworkName: NSString | string): boolean;
  loadFrameworkWithName_inDirectory(frameworkName: NSString | string, directory: NSString | string): boolean;
  loadBridgeSupportFilesAtPath(path: NSString | string): boolean;
  addFrameworkSearchPath(path: NSString | string): void;
  insertFrameworkSearchPath_atIndex(path: NSString | string, idx: NSUInteger): void;
  removeFrameworkSearchPathAtIndex(idx: NSUInteger): void;
  garbageCollect(): void;
  context(): JSGlobalContextRef;
  static runtimeWithContext(ctx: JSContextRef): Mocha;
  static JSValueForObject_inContext(object: any, ctx: JSContextRef): JSValueRef;
  static objectForJSValue_inContext(value: JSValueRef, ctx: JSContextRef): any;
  static objectForJSValue_inContext_unboxObjects(value: JSValueRef, ctx: JSContextRef, unboxObjects: boolean): any;
  static arrayForJSArray_inContext(arrayValue: JSObjectRef, ctx: JSContextRef): NSArray<any>;
  static dictionaryForJSHash_inContext(hashValue: JSObjectRef, ctx: JSContextRef): NSDictionary<any, any>;
  JSValueForObject(object: any): JSValueRef;
  objectForJSValue(value: JSValueRef): any;
  objectForJSValue_unboxObjects(value: JSValueRef, unboxObjects: boolean): any;
  boxedJSObjectForObject(object: any): JSObjectRef;
  unboxedObjectForJSObject(jsObject: JSObjectRef): any;
  objectWithName(name: NSString | string): any;
  setObject_withName(object: any, name: NSString | string): JSValueRef;
  setObject_withName_attributes(object: any, name: NSString | string, attributes: JSPropertyAttributes): JSValueRef;
  removeObjectWithName(name: NSString | string): boolean;
  evalJSString(string: NSString | string): JSValueRef;
  evalJSString_scriptPath(string: NSString | string, scriptPath: NSString | string): JSValueRef;
  JSFunctionWithName(functionName: NSString | string): JSObjectRef;
  callJSFunctionWithName_withArgumentsInArray(functionName: NSString | string, arguments: NSArray<any> | any[]): JSValueRef;
  callJSFunction_withArgumentsInArray(jsFunction: JSObjectRef, arguments: NSArray<any> | any[]): JSValueRef;
  static exceptionWithJSException_context(exception: JSValueRef, ctx: JSContextRef): NSException;
  exceptionWithJSException(exception: JSValueRef): NSException;
  throwJSException(exception: JSValueRef): void;
  installBuiltins(): void;
  cleanUp(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  frameworkSearchPaths(): NSArray<any>;
  setFrameworkSearchPaths(frameworkSearchPaths: NSArray<any> | any[]): void;
  globalSymbolNames(): NSArray<any>;
  setGlobalSymbolNames(globalSymbolNames: NSArray<any> | any[]): void;
  context(): JSGlobalContextRef;
  setContext(context: JSGlobalContextRef): void;
}

declare interface IMochaDelegate {}

declare class MOAllocator extends NSObject {
  static allocator(): MOAllocator;

  objectClass(): any;
  setObjectClass(objectClass: any): void;
}

declare class MOBox extends NSObject {
  initWithManager_object_jsObject<T extends MOBox>(manager: MOBoxManager, object: any, jsObject: JSObjectRef): T;
  disassociateObject(): void;

  representedObject(): any;
  setRepresentedObject(representedObject: any): void;
  JSObject(): JSObjectRef;
  setJSObject(JSObject: JSObjectRef): void;
  manager(): MOBoxManager;
  setManager(manager: MOBoxManager): void;
  representedObjectCanaryDesc(): NSString;
  setRepresentedObjectCanaryDesc(representedObjectCanaryDesc: NSString | string): void;
  count(): NSUInteger;
  setCount(count: NSUInteger): void;
}

declare class MOBoxManager extends NSObject {
  initWithContext<T extends MOBoxManager>(context: JSGlobalContextRef): T;
  cleanup(): void;
  boxForObject(object: any): MOBox;
  makeBoxForObject_jsClass(object: any, jsClass: JSClassRef): JSObjectRef;
  removeBoxForObject(object: any): void;
}

declare class MOBoxManagerBoxContext extends NSObject {
  initWithManager_object<T extends MOBoxManagerBoxContext>(manager: MOBoxManager, object: any): T;
  finishMakingBoxForObject(jsObject: JSObjectRef): void;
}

declare class MOClassDescription extends NSObject {
  static descriptionForClassWithName(name: NSString | string): MOClassDescription;
  static descriptionForClass(aClass: any): MOClassDescription;
  static allocateDescriptionForClassWithName_superclass(name: NSString | string, superclass: any): MOClassDescription;
  registerClass(): any;
  addInstanceVariableWithName_typeEncoding(name: NSString | string, typeEncoding: NSString | string): boolean;
  addClassMethodWithSelector_typeEncoding_block(selector: string, typeEncoding: NSString | string, block: any): boolean;
  addClassMethodWithSelector_function(selector: string, functionName: MOJavaScriptObject | Function): boolean;
  addInstanceMethodWithSelector_typeEncoding_block(selector: string, typeEncoding: NSString | string, block: any): boolean;
  addInstanceMethodWithSelector_function(selector: string, functionName: MOJavaScriptObject | Function): boolean;
  addProperty(property: MOPropertyDescription): boolean;
  addProtocol(protocol: MOProtocolDescription): void;

  name(): NSString;
  setName(name: NSString | string): void;
  descriptedClass(): any;
  setDescriptedClass(descriptedClass: any): void;
  superclass(): MOClassDescription;
  setSuperclass(superclass: MOClassDescription): void;
  ancestors(): NSArray<any>;
  setAncestors(ancestors: NSArray<any> | any[]): void;
  instanceVariables(): NSArray<any>;
  setInstanceVariables(instanceVariables: NSArray<any> | any[]): void;
  instanceVariablesWithAncestors(): NSArray<any>;
  setInstanceVariablesWithAncestors(instanceVariablesWithAncestors: NSArray<any> | any[]): void;
  classMethods(): NSArray<any>;
  setClassMethods(classMethods: NSArray<any> | any[]): void;
  classMethodsWithAncestors(): NSArray<any>;
  setClassMethodsWithAncestors(classMethodsWithAncestors: NSArray<any> | any[]): void;
  instanceMethods(): NSArray<any>;
  setInstanceMethods(instanceMethods: NSArray<any> | any[]): void;
  instanceMethodsWithAncestors(): NSArray<any>;
  setInstanceMethodsWithAncestors(instanceMethodsWithAncestors: NSArray<any> | any[]): void;
  properties(): NSArray<any>;
  setProperties(properties: NSArray<any> | any[]): void;
  propertiesWithAncestors(): NSArray<any>;
  setPropertiesWithAncestors(propertiesWithAncestors: NSArray<any> | any[]): void;
  protocols(): NSArray<any>;
  setProtocols(protocols: NSArray<any> | any[]): void;
  protocolsWithAncestors(): NSArray<any>;
  setProtocolsWithAncestors(protocolsWithAncestors: NSArray<any> | any[]): void;
}

declare class MOClosure extends NSObject {
  static closureWithBlock(block: any): MOClosure;
  initWithBlock<T extends MOClosure>(block: any): T;

  block(): any;
  setBlock(block: any): void;
  callAddress(): void;
  setCallAddress(callAddress: void): void;
  typeEncoding(): string;
  setTypeEncoding(typeEncoding: string): void;
}

declare class MOInstanceVariableDescription extends NSObject {
  static instanceVariableWithName_typeEncoding(name: NSString | string, typeEncoding: NSString | string): MOInstanceVariableDescription;
  initWithName_typeEncoding<T extends MOInstanceVariableDescription>(name: NSString | string, typeEncoding: NSString | string): T;

  name(): NSString;
  setName(name: NSString | string): void;
  typeEncoding(): NSString;
  setTypeEncoding(typeEncoding: NSString | string): void;
}

declare class MOJavaScriptObject extends NSObject {
  static objectWithJSObject_context(jsObject: JSObjectRef, ctx: JSContextRef): MOJavaScriptObject;

  JSObject(): JSObjectRef;
  setJSObject(JSObject: JSObjectRef): void;
  JSContext(): JSContextRef;
  setJSContext(JSContext: JSContextRef): void;
}

declare class MOMethod extends NSObject {
  static methodWithTarget_selector(target: any, selector: string): MOMethod;

  target(): any;
  setTarget(target: any): void;
  selector(): string;
  setSelector(selector: string): void;
  block(): any;
  setBlock(block: any): void;
}

declare class MOMethodDescription extends NSObject {
  static methodWithSelector_typeEncoding(selector: string, typeEncoding: NSString | string): MOMethodDescription;
  initWithSelector_typeEncoding<T extends MOMethodDescription>(selector: string, typeEncoding: NSString | string): T;

  selector(): string;
  setSelector(selector: string): void;
  typeEncoding(): NSString;
  setTypeEncoding(typeEncoding: NSString | string): void;
}

declare class MOObjCRuntime extends NSObject {
  static sharedRuntime(): MOObjCRuntime;

  classes(): NSArray<any>;
  setClasses(classes: NSArray<any> | any[]): void;
  protocols(): NSArray<any>;
  setProtocols(protocols: NSArray<any> | any[]): void;
}

declare class MOPointer extends NSObject {
  initWithValue<T extends MOPointer>(value: any): T;

  value(): any;
  setValue(value: any): void;
}

declare class MOPointerValue extends NSObject {
  initWithPointerValue_typeEncoding<T extends MOPointerValue>(pointerValue: void, typeEncoding: NSString | string): T;

  pointerValue(): void;
  setPointerValue(pointerValue: void): void;
  typeEncoding(): NSString;
  setTypeEncoding(typeEncoding: NSString | string): void;
}

declare class MOPropertyDescription extends NSObject {
  name(): NSString;
  setName(name: NSString | string): void;
  typeEncoding(): NSString;
  setTypeEncoding(typeEncoding: NSString | string): void;
  ivarName(): NSString;
  setIvarName(ivarName: NSString | string): void;
  getterSelector(): string;
  setGetterSelector(getterSelector: string): void;
  setterSelector(): string;
  setSetterSelector(setterSelector: string): void;
  ownershipRule(): MOObjCOwnershipRule;
  setOwnershipRule(ownershipRule: MOObjCOwnershipRule): void;
  dynamic(): boolean;
  setDynamic(dynamic: boolean): void;
  nonAtomic(): boolean;
  setNonAtomic(nonAtomic: boolean): void;
  readOnly(): boolean;
  setReadOnly(readOnly: boolean): void;
  weak(): boolean;
  setWeak(weak: boolean): void;
}

declare class MOProtocolDescription extends NSObject {
  static descriptionForProtocol(protocol: Protocol): MOProtocolDescription;
  static descriptionForProtocolWithName(name: NSString | string): MOProtocolDescription;
  static allocateDescriptionForProtocolWithName(name: NSString | string): MOProtocolDescription;
  addClassMethod_required(method: MOMethodDescription, isRequired: boolean): void;
  addInstanceMethod_required(method: MOMethodDescription, isRequired: boolean): void;
  addProperty_required(property: MOPropertyDescription, isRequired: boolean): void;
  addProtocol(protocol: MOProtocolDescription): void;

  name(): NSString;
  setName(name: NSString | string): void;
  requiredClassMethods(): NSArray<any>;
  setRequiredClassMethods(requiredClassMethods: NSArray<any> | any[]): void;
  optionalClassMethods(): NSArray<any>;
  setOptionalClassMethods(optionalClassMethods: NSArray<any> | any[]): void;
  requiredInstanceMethods(): NSArray<any>;
  setRequiredInstanceMethods(requiredInstanceMethods: NSArray<any> | any[]): void;
  optionalInstanceMethods(): NSArray<any>;
  setOptionalInstanceMethods(optionalInstanceMethods: NSArray<any> | any[]): void;
  properties(): NSArray<any>;
  setProperties(properties: NSArray<any> | any[]): void;
  protocols(): NSArray<any>;
  setProtocols(protocols: NSArray<any> | any[]): void;
  protocol(): Protocol;
  setProtocol(protocol: Protocol): void;
}

declare class MOStruct extends NSObject {
  static structureWithName_memberNames_runtime(name: NSString | string, memberNames: NSArray<any> | any[], runtime: Mocha): MOStruct;
  initWithName_memberNames_runtime<T extends MOStruct>(name: NSString | string, memberNames: NSArray<any> | any[], runtime: Mocha): T;
  objectForMemberName(name: NSString | string): any;
  setObject_forMemberName(obj: any, name: NSString | string): void;

  name(): NSString;
  setName(name: NSString | string): void;
  memberNames(): NSArray<any>;
  setMemberNames(memberNames: NSArray<any> | any[]): void;
}

declare class MOUndefined extends NSObject {
  static undefined(): MOUndefined;
}

declare class MOFunctionArgument extends NSObject {
  setTypeEncoding_withCustomStorage(typeEncoding: string, storagePtr: void): void;
  setPointerTypeEncoding_withCustomStorage(pointerTypeEncoding: NSString | string, storagePtr: void): void;
  setStructureTypeEncoding_withCustomStorage(structureTypeEncoding: NSString | string, storagePtr: void): void;
  getValueAsJSValueInContext(ctx: JSContextRef): JSValueRef;
  setValueAsJSValue_context(value: JSValueRef, ctx: JSContextRef): void;
  getValueAsJSValueInContext_dereference(ctx: JSContextRef, dereference: boolean): JSValueRef;
  setValueAsJSValue_context_dereference(value: JSValueRef, ctx: JSContextRef, dereference: boolean): void;
  static getAlignment_ofTypeEncoding(alignment: size_t, encoding: string): boolean;
  static getSize_ofTypeEncoding(size: size_t, encoding: string): boolean;
  static ffiTypeForTypeEncoding(encoding: string): ffi_type;
  static descriptionOfTypeEncoding(encoding: string): NSString;
  static descriptionOfTypeEncoding_fullTypeEncoding(typeEncoding: string, fullTypeEncoding: NSString | string): NSString;
  static sizeOfStructureTypeEncoding(encoding: NSString | string): size_t;
  static structureNameFromStructureTypeEncoding(encoding: NSString | string): NSString;
  static structureTypeEncodingDescription(structureTypeEncoding: NSString | string): NSString;
  static structureFullTypeEncodingFromStructureTypeEncoding(encoding: NSString | string): NSString;
  static structureFullTypeEncodingFromStructureName(structureName: NSString | string): NSString;
  static typeEncodingsFromStructureTypeEncoding(structureTypeEncoding: NSString | string): NSArray<any>;
  static typeEncodingsFromStructureTypeEncoding_parsedCount(structureTypeEncoding: NSString | string, count: NSInteger): NSArray<any>;
  static fromJSValue_inContext_typeEncoding_fullTypeEncoding_storage(value: JSValueRef, ctx: JSContextRef, typeEncoding: string, fullTypeEncoding: NSString | string, ptr: void): boolean;
  static toJSValue_inContext_typeEncoding_fullTypeEncoding_storage(value: JSValueRef, ctx: JSContextRef, typeEncoding: string, fullTypeEncoding: NSString | string, ptr: void): boolean;
  static structureFromJSObject_inContext_inParentJSValueRef_cString_storage(object: JSObjectRef, ctx: JSContextRef, parentValue: JSValueRef, c: string, ptr: void): NSInteger;
  static structureToJSValue_inContext_cString_storage(value: JSValueRef, ctx: JSContextRef, c: string, ptr: void): NSInteger;
  static structureToJSValue_inContext_cString_storage_initialValues_initialValueCount_convertedValueCount(value: JSValueRef, ctx: JSContextRef, c: string, ptr: void, initialValues: JSValueRef, initialValueCount: NSInteger, convertedValueCount: NSInteger): NSInteger;

  typeEncoding(): string;
  setTypeEncoding(typeEncoding: string): void;
  pointerTypeEncoding(): NSString;
  setPointerTypeEncoding(pointerTypeEncoding: NSString | string): void;
  structureTypeEncoding(): NSString;
  setStructureTypeEncoding(structureTypeEncoding: NSString | string): void;
  pointer(): MOPointer;
  setPointer(pointer: MOPointer): void;
  returnValue(): boolean;
  setReturnValue(returnValue: boolean): void;
  ffiType(): ffi_type;
  setFfiType(ffiType: ffi_type): void;
  storage(): void;
  setStorage(storage: void): void;
  typeDescription(): NSString;
  setTypeDescription(typeDescription: NSString | string): void;
}

declare class MOJSBlock extends NSObject implements INSCopying {
  static blockWithSignature_function(signature: NSString | string, functionName: MOJavaScriptObject | Function): MOJSBlock;
  initWithSignature_function<T extends MOJSBlock>(signature: string, functionName: MOJavaScriptObject | Function): T;
  copyWithZone(zone: NSZone | null): any;

  function(): MOJavaScriptObject;
  setFunction(functionName: MOJavaScriptObject | Function): void;
  signature(): NSMethodSignature;
  setSignature(signature: NSMethodSignature): void;
}

declare class MOMapTable extends NSObject implements INSFastEnumeration {
  static mapTableWithStrongToStrongObjects(): MOMapTable;
  static mapTableWithStrongToUnretainedObjects(): MOMapTable;
  static mapTableWithUnretainedToStrongObjects(): MOMapTable;
  static mapTableWithUnretainedToUnretainedObjects(): MOMapTable;
  keyEnumerator(): NSEnumerator<any>;
  objectEnumerator(): NSEnumerator<any>;
  count(): NSUInteger;
  allKeys(): NSArray<any>;
  allObjects(): NSArray<any>;
  objectForKey(key: any): any;
  setObject_forKey(value: any, key: any): void;
  removeObjectForKey(key: any): void;
  removeAllObjects(): void;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;
}

declare class TDAlternation extends TDCollectionParser {
  static alternation(): any;
}

declare class TDAny extends TDTerminal {
  static any(): any;
}

declare class TDAssembly extends NSObject implements INSCopying {
  static assemblyWithString(s: NSString | string): any;
  initWithString<T extends TDAssembly>(s: NSString | string): T;
  peek(): any;
  next(): any;
  hasMore(): boolean;
  consumedObjectsJoinedByString(delimiter: NSString | string): NSString;
  remainingObjectsJoinedByString(delimiter: NSString | string): NSString;
  pop(): any;
  push(object: any): void;
  isStackEmpty(): boolean;
  objectsAbove(fence: any): NSArray<any>;
  copyWithZone(zone: NSZone | null): any;

  length(): NSUInteger;
  setLength(length: NSUInteger): void;
  objectsConsumed(): NSUInteger;
  setObjectsConsumed(objectsConsumed: NSUInteger): void;
  objectsRemaining(): NSUInteger;
  setObjectsRemaining(objectsRemaining: NSUInteger): void;
  defaultDelimiter(): NSString;
  setDefaultDelimiter(defaultDelimiter: NSString | string): void;
  stack(): NSMutableArray<any>;
  setStack(stack: NSMutableArray<any> | any[]): void;
  target(): any;
  setTarget(target: any): void;
}

declare class TDCaseInsensitiveLiteral extends TDLiteral {}

declare class TDChar extends TDTerminal {
  static char(): any;
}

declare class TDCharacterAssembly extends TDAssembly {}

declare class TDCollectionParser extends TDParser {
  add(p: TDParser): void;

  subparsers(): NSMutableArray<any>;
  setSubparsers(subparsers: NSMutableArray<any> | any[]): void;
}

declare class TDComment extends TDTerminal {
  static comment(): any;
}

declare class TDCommentState extends TDTokenizerState {
  addSingleLineStartSymbol(start: NSString | string): void;
  removeSingleLineStartSymbol(start: NSString | string): void;
  addMultiLineStartSymbol_endSymbol(start: NSString | string, end: NSString | string): void;
  removeMultiLineStartSymbol(start: NSString | string): void;

  reportsCommentTokens(): boolean;
  setReportsCommentTokens(reportsCommentTokens: boolean): void;
  balancesEOFTerminatedComments(): boolean;
  setBalancesEOFTerminatedComments(balancesEOFTerminatedComments: boolean): void;
}

declare class TDDigit extends TDTerminal {
  static digit(): any;
}

declare class TDEmpty extends TDParser {
  static empty(): any;
}

declare class TDLetter extends TDTerminal {
  static letter(): any;
}

declare class TDLiteral extends TDTerminal {
  static literalWithString(s: NSString | string): any;
}

declare class TDLowercaseWord extends TDWord {}

declare class TDMultiLineCommentState extends TDTokenizerState {}

declare class TDNonReservedWord extends TDWord {}

declare class TDNum extends TDTerminal {
  static num(): any;
}

declare class TDNumberState extends TDTokenizerState {
  allowsTrailingDot(): boolean;
  setAllowsTrailingDot(allowsTrailingDot: boolean): void;
}

declare class TDParser extends NSObject {
  static parser(): any;
  setAssembler_selector(a: any, sel: string): void;
  bestMatchFor(inAssembly: TDAssembly): TDAssembly;
  completeMatchFor(inAssembly: TDAssembly): TDAssembly;
  allMatchesFor(inAssemblies: NSSet<any>): NSSet<any>;

  assembler(): any;
  setAssembler(assembler: any): void;
  selector(): string;
  setSelector(selector: string): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare class TDQuoteState extends TDTokenizerState {
  balancesEOFTerminatedQuotes(): boolean;
  setBalancesEOFTerminatedQuotes(balancesEOFTerminatedQuotes: boolean): void;
}

declare class TDQuotedString extends TDTerminal {
  static quotedString(): any;
}

declare class TDReader extends NSObject {
  initWithString<T extends TDReader>(s: NSString | string): T;
  read(): NSInteger;
  unread(): void;

  string(): NSString;
  setString(string: NSString | string): void;
}

declare class TDRepetition extends TDParser {
  static repetitionWithSubparser(p: TDParser): any;
  initWithSubparser<T extends TDRepetition>(p: TDParser): T;
  setPreassembler_selector(a: any, sel: string): void;

  subparser(): TDParser;
  setSubparser(subparser: TDParser): void;
  preassembler(): any;
  setPreassembler(preassembler: any): void;
  preassemblerSelector(): string;
  setPreassemblerSelector(preassemblerSelector: string): void;
}

declare class TDReservedWord extends TDWord {
  static setReservedWords(inWords: NSArray<any> | any[]): void;
}

declare class TDScientificNumberState extends TDNumberState {}

declare class TDSequence extends TDCollectionParser {
  static sequence(): any;
}

declare class TDToken extends NSObject {
  static EOFToken(): TDToken;
  static tokenWithTokenType_stringValue_floatValue(t: TDTokenType, s: NSString | string, n: CGFloat): any;
  initWithTokenType_stringValue_floatValue<T extends TDToken>(t: TDTokenType, s: NSString | string, n: CGFloat): T;
  isEqualIgnoringCase(obj: any): boolean;
  debugDescription(): NSString;

  whitespace(): boolean;
  setWhitespace(whitespace: boolean): void;
  number(): boolean;
  setNumber(number: boolean): void;
  quotedString(): boolean;
  setQuotedString(quotedString: boolean): void;
  symbol(): boolean;
  setSymbol(symbol: boolean): void;
  word(): boolean;
  setWord(word: boolean): void;
  comment(): boolean;
  setComment(comment: boolean): void;
  tokenType(): TDTokenType;
  setTokenType(tokenType: TDTokenType): void;
  floatValue(): CGFloat;
  setFloatValue(floatValue: CGFloat): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  value(): any;
  setValue(value: any): void;
}

declare class TDSignificantWhitespaceState extends TDWhitespaceState {}

declare class TDSingleLineCommentState extends TDTokenizerState {}

declare class TDSpecificChar extends TDTerminal {
  static specificCharWithChar(c: NSInteger): any;
  initWithSpecificChar<T extends TDSpecificChar>(c: NSInteger): T;
}

declare class TDSymbol extends TDTerminal {
  static symbol(): any;
  static symbolWithString(s: NSString | string): any;
}

declare class TDSymbolNode extends NSObject {
  initWithParent_character<T extends TDSymbolNode>(p: TDSymbolNode, c: NSInteger): T;

  ancestry(): NSString;
  setAncestry(ancestry: NSString | string): void;
}

declare class TDSymbolRootNode extends TDSymbolNode {
  add(s: NSString | string): void;
  remove(s: NSString | string): void;
  nextSymbol_startingWith(r: TDReader, cin: NSInteger): NSString;
}

declare class TDSymbolState extends TDTokenizerState {
  add(s: NSString | string): void;
  remove(s: NSString | string): void;
}

declare class TDTerminal extends TDParser {
  initWithString<T extends TDTerminal>(s: NSString | string | null): T;
  discard(): TDTerminal;

  string(): NSString;
  setString(string: NSString | string): void;
}

declare enum TDTokenType {
  TDTokenTypeEOF,
  TDTokenTypeNumber,
  TDTokenTypeQuotedString,
  TDTokenTypeSymbol,
  TDTokenTypeWord,
  TDTokenTypeWhitespace,
  TDTokenTypeComment,
}

declare class TDTokenArraySource extends NSObject {
  initWithTokenizer_delimiter<T extends TDTokenArraySource>(t: TDTokenizer, s: NSString | string): T;
  hasMore(): boolean;
  nextTokenArray(): NSArray<any>;
}

declare class TDTokenAssembly extends TDAssembly implements INSCopying {
  static assemblyWithTokenizer(t: TDTokenizer): any;
  initWithTokenzier<T extends TDTokenAssembly>(t: TDTokenizer): T;
  static assemblyWithTokenArray(a: NSArray<any> | any[]): any;
  initWithTokenArray<T extends TDTokenAssembly>(a: NSArray<any> | any[]): T;
  copyWithZone(zone: NSZone | null): any;

  preservesWhitespaceTokens(): boolean;
  setPreservesWhitespaceTokens(preservesWhitespaceTokens: boolean): void;
}

declare class TDTokenizer extends NSObject {
  static tokenizer(): any;
  static tokenizerWithString(s: NSString | string): any;
  initWithString<T extends TDTokenizer>(s: NSString | string): T;
  nextToken(): TDToken;
  setTokenizerState_from_to(state: TDTokenizerState, start: NSInteger, end: NSInteger): void;

  string(): NSString;
  setString(string: NSString | string): void;
  numberState(): TDNumberState;
  setNumberState(numberState: TDNumberState): void;
  quoteState(): TDQuoteState;
  setQuoteState(quoteState: TDQuoteState): void;
  commentState(): TDCommentState;
  setCommentState(commentState: TDCommentState): void;
  symbolState(): TDSymbolState;
  setSymbolState(symbolState: TDSymbolState): void;
  whitespaceState(): TDWhitespaceState;
  setWhitespaceState(whitespaceState: TDWhitespaceState): void;
  wordState(): TDWordState;
  setWordState(wordState: TDWordState): void;
}

declare class TDTokenizerState extends NSObject {
  nextTokenFromReader_startingWith_tokenizer(r: TDReader, cin: NSInteger, t: TDTokenizer): TDToken;
}

declare class TDTrack extends TDSequence {
  static track(): any;
}

declare class TDTrackException extends NSException {}

declare class TDUppercaseWord extends TDWord {}

declare class TDWhitespaceState extends TDTokenizerState {
  isWhitespaceChar(cin: NSInteger): boolean;
  setWhitespaceChars_from_to(yn: boolean, start: NSInteger, end: NSInteger): void;

  reportsWhitespaceTokens(): boolean;
  setReportsWhitespaceTokens(reportsWhitespaceTokens: boolean): void;
}

declare class TDWord extends TDTerminal {
  static word(): any;
}

declare class TDWordOrReservedState extends TDWordState {
  addReservedWord(s: NSString | string): void;
}

declare class TDWordState extends TDTokenizerState {
  setWordChars_from_to(yn: boolean, start: NSInteger, end: NSInteger): void;
  isWordChar(c: NSInteger): boolean;
}

declare class ECCommandLineExampleCommand extends ECCommandLineCommand {}

declare class ECCommandLineCommand extends NSObject {
  static commandWithName_info_parentCommand(name: NSString | string, info: NSDictionary<any, any> | {[key: string]: any}, parentCommand: ECCommandLineCommand): ECCommandLineCommand;
  enumerateArguments(block: ArgumentBlock): void;
  engine_processCommands(engine: ECCommandLineEngine, commands: NSMutableArray<any> | any[]): ECCommandLineResult;
  engine_willProcessWithArguments(engine: ECCommandLineEngine, arguments: NSMutableArray<any> | any[]): ECCommandLineResult;
  engine_didProcessWithArguments(engine: ECCommandLineEngine, arguments: NSMutableArray<any> | any[]): ECCommandLineResult;
  help(): NSString;
  summaryAs_parentName(name: NSString | string, parentName: NSString | string): NSString;
  usageAs_parentName_engine(name: NSString | string, parentName: NSString | string, engine: ECCommandLineEngine): NSString;
  subcommandSummaryAs(name: NSString | string): NSString;
  resolveCommandPath(commands: NSMutableArray<any> | any[]): ECCommandLineCommand;

  name(): NSString;
  setName(name: NSString | string): void;
  arguments(): NSArray<any>;
  setArguments(arguments: NSArray<any> | any[]): void;
  parentCommand(): ECCommandLineCommand;
  setParentCommand(parentCommand: ECCommandLineCommand): void;
}

declare enum ECCommandLineArgumentMode {
  ECCommandLineArgumentModeNone,
  ECCommandLineArgumentModeRequired,
  ECCommandLineArgumentModeOptinal,
}

declare class ECCommandLineEngine extends NSObject implements IECIODelegate {
  initWithDelegate<T extends ECCommandLineEngine>(delegate: any): T;
  processArguments_argv(argc: number, argv: string): ECCommandLineResult;
  showUsage(): void;
  outputDescription(description: NSString | string): void;
  info(): NSDictionary<any, any>;
  commandWithName(name: NSString | string): ECCommandLineCommand;
  optionWithName(name: NSString | string): ECCommandLineOption;
  paddingLength(): NSUInteger;
  exitWithResult(result: ECCommandLineResult): void;
  static addCommandNamed_withInfo_toDictionary_parentCommand(mainName: NSString | string, info: NSDictionary<any, any> | {[key: string]: any}, dictionary: NSMutableDictionary<any, any> | {[key: string]: any}, parentCommand: ECCommandLineCommand): void;
  static commandsInDisplayOrder(commands: NSDictionary<any, any> | {[key: string]: any}): NSArray<any>;

  name(): NSString;
  setName(name: NSString | string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IECCommandLineEngineDelegate {
  engineDidFinishLaunching(engine: ECCommandLineEngine): void;
  engine_willProcessCommands(engine: ECCommandLineEngine, commands: NSArray<any> | any[]): void;
  engine_didProcessCommands(engine: ECCommandLineEngine, commands: NSArray<any> | any[]): void;
}

declare class ECCommandLineHelpCommand extends ECCommandLineCommand {}

declare class ECCommandLineMissingClassCommand extends ECCommandLineCommand {}

declare class ECCommandLineOption extends NSObject {
  static optionWithName_info(name: NSString | string, info: NSDictionary<any, any> | {[key: string]: any}): ECCommandLineOption;
  mode(): ECCommandLineOptionMode;
  shortOption(): string;
  help(): NSString;
  longUsage(): NSString;
  shortUsage(): NSString;
  defaultValue(): any;

  name(): NSString;
  setName(name: NSString | string): void;
  value(): any;
  setValue(value: any): void;
}

declare enum ECCommandLineOptionMode {
  ECCommandLineOptionModeNone,
  ECCommandLineOptionModeRequired,
  ECCommandLineOptionModeOptinal,
}

declare enum ECCommandLineResult {
  ECCommandLineResultOKButTerminate = -2,
  ECCommandLineResultStayRunning = -1,
  ECCommandLineResultOK = 0,
  ECCommandLineResultUnknownCommand,
  ECCommandLineResultMissingCommandClass,
  ECCommandLineResultNotImplemented,
  ECCommandLineResultMissingArguments,
  ECCommandLineResultImplementationReturnedError,
  ECCommandLineResultMissingBundle,
  ECCommandLineResultJSONConversionFailed,
  ECCommandLineResultJSONOutputFailed,
}

declare class BITCrashDetails extends NSObject {
  incidentIdentifier(): NSString;
  setIncidentIdentifier(incidentIdentifier: NSString | string): void;
  reporterKey(): NSString;
  setReporterKey(reporterKey: NSString | string): void;
  signal(): NSString;
  setSignal(signal: NSString | string): void;
  exceptionName(): NSString;
  setExceptionName(exceptionName: NSString | string): void;
  exceptionReason(): NSString;
  setExceptionReason(exceptionReason: NSString | string): void;
  appStartTime(): NSDate;
  setAppStartTime(appStartTime: NSDate): void;
  crashTime(): NSDate;
  setCrashTime(crashTime: NSDate): void;
  osVersion(): NSString;
  setOsVersion(osVersion: NSString | string): void;
  osBuild(): NSString;
  setOsBuild(osBuild: NSString | string): void;
  appVersion(): NSString;
  setAppVersion(appVersion: NSString | string): void;
  appBuild(): NSString;
  setAppBuild(appBuild: NSString | string): void;
  appProcessIdentifier(): NSUInteger;
  setAppProcessIdentifier(appProcessIdentifier: NSUInteger): void;
}

declare class BITCrashExceptionApplication extends NSApplication {}

declare class BITCrashManager extends BITHockeyBaseManager {
  setCrashCallbacks(callbacks: BITCrashManagerCallbacks): void;
  handleUserInput_withUserProvidedMetaData(userInput: BITCrashManagerUserInput, userProvidedMetaData: BITCrashMetaData): boolean;
  setCrashReportUIHandler(crashReportUIHandler: BITCustomCrashReportUIHandler): void;
  generateTestCrash(): void;

  askUserDetails(): boolean;
  setAskUserDetails(askUserDetails: boolean): void;
  disableMachExceptionHandler(): boolean;
  setDisableMachExceptionHandler(disableMachExceptionHandler: boolean): void;
  autoSubmitCrashReport(): boolean;
  setAutoSubmitCrashReport(autoSubmitCrashReport: boolean): void;
  didCrashInLastSession(): boolean;
  setDidCrashInLastSession(didCrashInLastSession: boolean): void;
  lastSessionCrashDetails(): BITCrashDetails;
  setLastSessionCrashDetails(lastSessionCrashDetails: BITCrashDetails): void;
  timeintervalCrashInLastSessionOccured(): NSTimeInterval;
  setTimeintervalCrashInLastSessionOccured(timeintervalCrashInLastSessionOccured: NSTimeInterval): void;
}

declare type BITCrashManagerCallbacks = {
  context: void
  handleSignal: BITCrashManagerPostCrashSignalCallback
}

declare enum BITCrashManagerUserInput {
  BITCrashManagerUserInputDontSend = 0,
  BITCrashManagerUserInputSend = 1,
  BITCrashManagerUserInputAlwaysSend = 2,
}

declare interface IBITCrashManagerDelegate {
  crashManagerWillSendCrashReport(crashManager: BITCrashManager): void;
  crashManager_didFailWithError(crashManager: BITCrashManager, error: NSError): void;
  crashManagerDidFinishSendingCrashReport(crashManager: BITCrashManager): void;
}

declare class BITCrashMetaData extends NSObject {
  userDescription(): NSString;
  setUserDescription(userDescription: NSString | string): void;
  userName(): NSString;
  setUserName(userName: NSString | string): void;
  userEmail(): NSString;
  setUserEmail(userEmail: NSString | string): void;
  userID(): NSString;
  setUserID(userID: NSString | string): void;
}

declare class BITFeedbackManager extends BITHockeyBaseManager {
  showFeedbackWindow(): void;

  requireUserName(): BITFeedbackUserDataElement;
  setRequireUserName(requireUserName: BITFeedbackUserDataElement): void;
  requireUserEmail(): BITFeedbackUserDataElement;
  setRequireUserEmail(requireUserEmail: BITFeedbackUserDataElement): void;
  showAlertOnIncomingMessages(): boolean;
  setShowAlertOnIncomingMessages(showAlertOnIncomingMessages: boolean): void;
}

declare enum BITFeedbackUserDataElement {
  BITFeedbackUserDataElementDontShow = 0,
  BITFeedbackUserDataElementOptional = 1,
  BITFeedbackUserDataElementRequired = 2,
}

declare class BITFeedbackWindowController extends NSWindowController {
  initWithManager<T extends BITFeedbackWindowController>(feedbackManager: BITFeedbackManager): T;
}

declare class BITHockeyAttachment extends NSObject implements INSCoding, INSCoding, INSCoding {
  initWithFilename_hockeyAttachmentData_contentType<T extends BITHockeyAttachment>(filename: NSString | string, hockeyAttachmentData: NSData, contentType: NSString | string): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends BITHockeyAttachment>(aDecoder: NSCoder): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends BITHockeyAttachment>(aDecoder: NSCoder): T;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends BITHockeyAttachment>(aDecoder: NSCoder): T;

  filename(): NSString;
  setFilename(filename: NSString | string): void;
  hockeyAttachmentData(): NSData;
  setHockeyAttachmentData(hockeyAttachmentData: NSData): void;
  contentType(): NSString;
  setContentType(contentType: NSString | string): void;
}

declare class BITHockeyBaseManager extends NSObject {
  serverURL(): NSString;
  setServerURL(serverURL: NSString | string): void;
}

declare class BITHockeyManager extends NSObject {
  static sharedHockeyManager(): BITHockeyManager;
  configureWithIdentifier(appIdentifier: NSString | string): void;
  configureWithIdentifier_delegate(appIdentifier: NSString | string, delegate: any): void;
  startManager(): void;
  setUserID(userID: NSString | string): void;
  setUserName(userName: NSString | string): void;
  setUserEmail(userEmail: NSString | string): void;
  setLogHandler(logHandler: BITLogHandler): void;
  testIdentifier(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  serverURL(): NSString;
  setServerURL(serverURL: NSString | string): void;
  crashManager(): BITCrashManager;
  setCrashManager(crashManager: BITCrashManager): void;
  disableCrashManager(): boolean;
  setDisableCrashManager(disableCrashManager: boolean): void;
  feedbackManager(): BITFeedbackManager;
  setFeedbackManager(feedbackManager: BITFeedbackManager): void;
  disableFeedbackManager(): boolean;
  setDisableFeedbackManager(disableFeedbackManager: boolean): void;
  metricsManager(): BITMetricsManager;
  setMetricsManager(metricsManager: BITMetricsManager): void;
  disableMetricsManager(): boolean;
  setDisableMetricsManager(disableMetricsManager: boolean): void;
  logLevel(): BITLogLevel;
  setLogLevel(logLevel: BITLogLevel): void;
}

declare interface IBITHockeyManagerDelegate {
  userIDForHockeyManager_componentManager(hockeyManager: BITHockeyManager, componentManager: BITHockeyBaseManager): NSString;
  userNameForHockeyManager_componentManager(hockeyManager: BITHockeyManager, componentManager: BITHockeyBaseManager): NSString;
  userEmailForHockeyManager_componentManager(hockeyManager: BITHockeyManager, componentManager: BITHockeyBaseManager): NSString;
}

declare class BITMetricsManager extends BITHockeyBaseManager {
  trackEventWithName(eventName: NSString | string): void;
  trackEventWithName_properties_measurements(eventName: NSString | string, properties: NSDictionary<any, any> | {[key: string]: any} | null, measurements: NSDictionary<any, any> | {[key: string]: any} | null): void;

  disabled(): boolean;
  setDisabled(disabled: boolean): void;
}

declare class BITSystemProfile extends NSObject {
  static sharedSystemProfile(): BITSystemProfile;
  static deviceIdentifier(): NSString;
  static deviceModel(): NSString;
  static systemVersionString(): NSString;
  systemDataForBundle(bundle: NSBundle): NSMutableArray<any>;
  systemData(): NSMutableArray<any>;
  systemUsageDataForBundle(bundle: NSBundle): NSMutableArray<any>;
  systemUsageData(): NSMutableArray<any>;
  startUsageForBundle(bundle: NSBundle): void;
  startUsage(): void;
  stopUsage(): void;
}

declare enum BITCrashErrorReason {
  BITCrashErrorUnknown,
  BITCrashAPIAppVersionRejected,
  BITCrashAPIReceivedEmptyResponse,
  BITCrashAPIErrorWithStatusCode,
}

declare enum BITFeedbackErrorReason {
  BITFeedbackErrorUnknown,
  BITFeedbackAPIServerReturnedInvalidStatus,
  BITFeedbackAPIServerReturnedInvalidData,
  BITFeedbackAPIServerReturnedEmptyResponse,
  BITFeedbackAPIClientAuthorizationMissingSecret,
  BITFeedbackAPIClientCannotCreateConnection,
}

declare enum BITHockeyErrorReason {
  BITHockeyErrorUnknown,
}

declare enum BITLogLevel {
  BITLogLevelNone = 0,
  BITLogLevelError = 1,
  BITLogLevelWarning = 2,
  BITLogLevelDebug = 3,
  BITLogLevelVerbose = 4,
}

declare class BCCodeSigningVerifier extends NSObject {}

declare class BCDevice extends NSObject {}

declare class BCLicense extends NSObject {
  applicationID(): NSString;
  setApplicationID(applicationID: NSString | string): void;
}

declare enum BCLicenseType {
  BCLicenseUnknown = -1,
  BCLicenseTrial = 0,
  BCLicenseTrialExpired = 1,
  BCLicensePurchased = 2,
}

declare class BCLicenseManager extends NSObject {
  canRenewLicense(): boolean;

  canUseCloud(): boolean;
  setCanUseCloud(canUseCloud: boolean): void;
}

declare enum BCReceiptRegistrationResult {
  BCReceiptRegistrationOK,
  BCReceiptRegistrationLicenseInvalid,
  BCReceiptRegistrationLicenseNoFreeSlot,
  BCReceiptRegistrationVersionNotSupported,
  BCReceiptRegistrationNetworkError,
  BCReceiptRegistrationFailedToSave,
}

declare enum BCLicenseManagerLicenseResult {
  BCLicenseManagerLicenseOk,
  BCLicenseManagerLicenseExpiringSoon,
  BCLicenseManagerLicenseVersionNotSupported,
  BCLicenseManagerTrialExpired,
  BCLicenseManagerLicenseExpired,
  BCLicenseManagerLicenseVariantNotAllowed,
  BCLicenseManagerLicenseError,
}

declare class BCNetworkTime extends NSObject {
  static requestTimeFromHost_timeout_completionBlock(host: NSString | string, timeout: NSUInteger, completion: MSNetworkTimeCompletionBlock): void;
}

declare class BCRSASHA1Verify extends NSObject {
  error(): NSError;
  setError(error: NSError): void;
  verified(): boolean;
  setVerified(verified: boolean): void;
}

declare type ASN1_Data = {
  length: size_t
  data: string
}

declare enum BCReceiptStatus {
  BCReceiptStatusNotChecked,
  BCReceiptStatusVerified,
  BCReceiptStatusInvalidBundleID,
  BCReceiptStatusInvalidBundleVersion,
  BCReceiptStatusFailedToCreateStaticCode,
  BCReceiptStatusFailedToCreateRequirement,
  BCReceiptStatusInvalidSignature,
  BCReceiptStatusMissingReceipt,
  BCReceiptStatusFailedToCreateDecoder,
  BCReceiptStatusFailedToUpdateMessage,
  BCReceiptStatusFailedToFinalizeMessage,
  BCReceiptStatusFailedToDecrypt,
  BCReceiptStatusFailedToGetSignerCount,
  BCReceiptStatusNoSignerFound,
  BCReceiptStatusFailedToGetSignerStatus,
  BCReceiptStatusNoValidSigner,
  BCReceiptStatusFailedToCreateASN1Decoder,
  BCReceiptStatusFailedToDecodePayload,
  BCReceiptStatusInvalidReceiptID,
  BCReceiptStatusInvalidReceiptVersion,
  BCReceiptStatusFailedToGetMACAddress,
  BCReceiptStatusBadReceiptHash,
  BCReceiptStatusFailedToDecodeInteger,
  BCReceiptStatusFailedToDecodeString,
  BCReceiptStatusFailedToDecodeDate,
  BCReceiptStatusFailedQuickValidation,
  BCReceiptStatusUnexpectedError,
}

declare class BCReceiptValidationContext extends NSObject {}

declare class BCReceiptValidationContextWithInfo extends BCReceiptValidationContext {
  initWithBundleID_minimumVersion<T extends BCReceiptValidationContextWithInfo>(bundleID: NSString | string, minimumVersion: NSString | string): T;

  expectedBundleID(): NSString;
  setExpectedBundleID(expectedBundleID: NSString | string): void;
  minimumVersion(): NSString;
  setMinimumVersion(minimumVersion: NSString | string): void;
}

declare class BCReceiptValidationException extends NSException {
  static exceptionWithStatus(status: BCReceiptStatus): BCReceiptValidationException;
  static raiseWithStatus(status: BCReceiptStatus): void;
  static raiseWithStatus_error(status: BCReceiptStatus, error: OSStatus): void;

  status(): BCReceiptStatus;
  setStatus(status: BCReceiptStatus): void;
}

declare class MSLicenseExpiredAction extends MSDocumentAction implements IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSLicenseSheetAction extends MSDocumentAction implements IMSWindowBadgeAction {
  runLicenseDialog(sender: any): IBAction;

  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare interface ISCKAPIAuthentication {
  consumeAccessToken(): NSString;

  authToken(): NSString;
  setAuthToken(authToken: NSString | string): void;
  accessToken(): NSString;
  setAccessToken(accessToken: NSString | string): void;
}

declare class SCKAPIOperation extends SCKURLOperation {
  initWithRequest<T extends SCKAPIOperation>(request: SCKAPIRequest): T;
  processData_response_error(data: NSData | null, response: NSHTTPURLResponse | null, error: NSError | null): void;
  static executeRequest_completionHandler(request: SCKAPIRequest, handler: Block): void;

  request(): SCKAPIRequest;
  setRequest(request: SCKAPIRequest): void;
  error(): NSError;
  setError(error: NSError): void;
  result(): NSArray<any>;
  setResult(result: NSArray<any> | any[]): void;
}

declare class SCKAPIProtocol extends NSURLProtocol {}

declare class SCKAPIRequest extends NSMutableURLRequest {
  static baseURLForEnvironment(environment: SCKEnvironment): NSURL;
  static requestWithPath_queryItems_environment(path: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any} | null, environment: SCKEnvironment): SCKAPIRequest;
  static requestWithPath_environment(path: NSString | string, environment: SCKEnvironment): SCKAPIRequest;
  static requestWithPath(path: NSString | string): SCKAPIRequest;

  environment(): SCKEnvironment;
  setEnvironment(environment: SCKEnvironment): void;
  authentication(): any;
  setAuthentication(authentication: any): void;
  body(): any;
  setBody(body: any): void;
  expectedObjectType(): any;
  setExpectedObjectType(expectedObjectType: any): void;
  applicationVersion(): NSString;
  setApplicationVersion(applicationVersion: NSString | string): void;
  applicationBuild(): NSString;
  setApplicationBuild(applicationBuild: NSString | string): void;
  type(): SCKAPIRequestType;
  setType(type: SCKAPIRequestType): void;
}

declare enum SCKAPIRequestType {
  SCKAPIRequestTypeGet,
  SCKAPIRequestTypeCreate,
  SCKAPIRequestTypeUpdate,
  SCKAPIRequestTypeDelete,
}

declare interface ISCKAPISignable {
  signableString(): NSString;
  setSignableString(signableString: NSString | string): void;
}

declare class SCKAuthAPIRequest extends SCKAPIRequest {
  static loginRequestWithAccessToken(accessToken: NSString | string): SCKAuthAPIRequest;
  static loginRequestWithEmail_password(email: NSString | string, password: NSString | string): SCKAuthAPIRequest;
  static profileRequest(): SCKAuthAPIRequest;
  static forgotPasswordRequestWithEmail(email: NSString | string): SCKAuthAPIRequest;
}

declare class SCKDownloadOperation extends SCKURLOperation implements INSURLSessionDownloadDelegate {
  initWithRequest<T extends SCKDownloadOperation>(request: NSURLRequest): T;
  static operationByRequesting_completionHandler(request: NSURLRequest, block: SCKDownloadOperationHandler): SCKDownloadOperation;
  URLSession_downloadTask_didFinishDownloadingToURL(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, location: NSURL): void;
  URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, bytesWritten: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, fileOffset: number, expectedTotalBytes: number): void;

  request(): NSURLRequest;
  setRequest(request: NSURLRequest): void;
  downloadCompletionBlock(): SCKDownloadOperationHandler;
  setDownloadCompletionBlock(downloadCompletionBlock: SCKDownloadOperationHandler): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
  error(): NSError;
  setError(error: NSError): void;
}

declare class SCKDownloadOperationSessionDelegate extends NSObject implements INSURLSessionDownloadDelegate {
  setDownloadTaskDelegate_forTask(delegate: any, task: NSURLSessionTask): void;
  URLSession_downloadTask_didFinishDownloadingToURL(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, location: NSURL): void;
  URLSession_downloadTask_didWriteData_totalBytesWritten_totalBytesExpectedToWrite(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, bytesWritten: number, totalBytesWritten: number, totalBytesExpectedToWrite: number): void;
  URLSession_downloadTask_didResumeAtOffset_expectedTotalBytes(session: NSURLSession, downloadTask: NSURLSessionDownloadTask, fileOffset: number, expectedTotalBytes: number): void;
}

declare class SCKEnvironment extends NSObject implements INSCopying {
  setKeychainUser_error(keychainUser: SCKAuthenticatedUser | null, error: NSError): boolean;
  accountSettingsURLForUserID(userID: SCKObjectID | null): NSURL;
  settingsURLForShare(share: SCKShare | null): NSURL;
  sharesOverviewURLForUserID(userID: SCKObjectID | null): NSURL;
  signInURLUsingCallback_variant(usingCallback: boolean, variant: NSString | string | null): NSURL;
  signUpURLUsingCallback_variant(usingCallback: boolean, variant: NSString | string | null): NSURL;
  initWithHost<T extends SCKEnvironment>(host: NSString | string | null): T;
  initWithName<T extends SCKEnvironment>(name: NSString | string | null): T;
  initWithDefinition<T extends SCKEnvironment>(definition: SCKEnvironmentDefinition): T;
  static current(): SCKEnvironment;
  setCurrent(): void;
  copyWithZone(zone: NSZone | null): any;

  keychainUser(): SCKAuthenticatedUser;
  setKeychainUser(keychainUser: SCKAuthenticatedUser): void;
  signature(): NSString;
  setSignature(signature: NSString | string): void;
  definition(): SCKEnvironmentDefinition;
  setDefinition(definition: SCKEnvironmentDefinition): void;
  host(): NSString;
  setHost(host: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
  suffixRepresentation(): NSString;
  setSuffixRepresentation(suffixRepresentation: NSString | string): void;
}

declare enum SCKEnvironmentDefinition {
  SCKEnvironmentDefinitionCustom,
  SCKEnvironmentDefinitionProduction,
  SCKEnvironmentDefinitionStaging,
  SCKEnvironmentDefinitionTest,
  SCKEnvironmentDefinitionDevelopment,
}

declare class SCKOperation extends NSOperation {
  finished(): boolean;
  setFinished(finished: boolean): void;
  executing(): boolean;
  setExecuting(executing: boolean): void;
  cancelled(): boolean;
  setCancelled(cancelled: boolean): void;
}

declare class SCKShareAPIRequest extends SCKAPIRequest {
  static shareRequestWithID(shareID: SCKObjectID): SCKShareAPIRequest;
  static shareRequestWithShortID(shortID: NSString | string): SCKShareAPIRequest;
  static shareLibraryAppcastRequestWithShortID(shortID: NSString | string): SCKShareAPIRequest;
  static userSharesListRequest(): SCKShareAPIRequest;
  static shareCreationRequestWithManifest(manifest: NSDictionary<any, any> | {[key: string]: any}): SCKShareAPIRequest;
  static shareUpdateRequestWithManifest_existingShare(manifest: NSDictionary<any, any> | {[key: string]: any}, share: SCKShare): SCKShareAPIRequest;
  static shareDeletionRequestWithID(shareID: SCKObjectID): SCKShareAPIRequest;
  static shareCancelUpdateRequestWithID(shareID: SCKObjectID): SCKShareAPIRequest;
}

declare class SCKShareItemUploadOperation extends SCKOperation implements INSURLSessionTaskDelegate, INSProgressReporting {
  static itemUploadOperationWithItem_fromURL(item: SCKFileUploadSpecs, url: NSURL): SCKShareItemUploadOperation;
  static itemUploadOperationWithDocumentUploadURL_fromURL(url: NSURL, localURL: NSURL): SCKShareItemUploadOperation;
  static fileSizeOfItemAtURL(url: NSURL): NSUInteger;
  static fileSizeOfItemAtURL_multipartIndex_maxChunkSize(url: NSURL, part: NSUInteger, maxSize: NSUInteger): NSUInteger;
  URLSession_task_willBeginDelayedRequest_completionHandler(session: NSURLSession, task: NSURLSessionTask, request: NSURLRequest, completionHandler: Block): void;
  URLSession_taskIsWaitingForConnectivity(session: NSURLSession, task: NSURLSessionTask): void;
  URLSession_task_willPerformHTTPRedirection_newRequest_completionHandler(session: NSURLSession, task: NSURLSessionTask, response: NSHTTPURLResponse, request: NSURLRequest, completionHandler: Block): void;
  URLSession_task_didReceiveChallenge_completionHandler(session: NSURLSession, task: NSURLSessionTask, challenge: NSURLAuthenticationChallenge, completionHandler: Block): void;
  URLSession_task_needNewBodyStream(session: NSURLSession, task: NSURLSessionTask, completionHandler: Block): void;
  URLSession_task_didSendBodyData_totalBytesSent_totalBytesExpectedToSend(session: NSURLSession, task: NSURLSessionTask, bytesSent: number, totalBytesSent: number, totalBytesExpectedToSend: number): void;
  URLSession_task_didFinishCollectingMetrics(session: NSURLSession, task: NSURLSessionTask, metrics: NSURLSessionTaskMetrics): void;
  URLSession_task_didCompleteWithError(session: NSURLSession, task: NSURLSessionTask, error: NSError | null): void;

  urlSession(): NSURLSession;
  setUrlSession(urlSession: NSURLSession): void;
  taskIdentifier(): NSUInteger;
  setTaskIdentifier(taskIdentifier: NSUInteger): void;
  sourceURL(): NSURL;
  setSourceURL(sourceURL: NSURL): void;
  multipartIndex(): NSUInteger;
  setMultipartIndex(multipartIndex: NSUInteger): void;
  documentMultipartSpecs(): SCKDocumentUploadMultipartSpecs;
  setDocumentMultipartSpecs(documentMultipartSpecs: SCKDocumentUploadMultipartSpecs): void;
  item(): SCKFileUploadSpecs;
  setItem(item: SCKFileUploadSpecs): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
  additionalRetryAttempts(): NSUInteger;
  setAdditionalRetryAttempts(additionalRetryAttempts: NSUInteger): void;
  error(): NSError;
  setError(error: NSError): void;
}

declare class SCKShareUploadOperation extends SCKOperation implements INSProgressReporting {
  initWithRequest<T extends SCKShareUploadOperation>(request: SCKShareAPIRequest): T;

  dataSource(): any;
  setDataSource(dataSource: any): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
  share(): SCKShare;
  setShare(share: SCKShare): void;
  errors(): NSArray<any>;
  setErrors(errors: NSArray<any> | any[]): void;
}

declare interface ISCKShareUploadDataSource {
  shareUploadOperation_fileURLForItemWithHash(operation: SCKShareUploadOperation, hash: NSString | string): NSURL;
  shareUploadOperation_willStartUploadingShare(operation: SCKShareUploadOperation, share: SCKShare): void;
  shareUploadOperation_exportDocumentWithHandler(operation: SCKShareUploadOperation, handler: Block): void;
}

declare class SCKURLOperation extends SCKOperation {
  static sharedURLSession(): NSURLSession;

  session(): NSURLSession;
  setSession(session: NSURLSession): void;
}

declare class SCKArtboardDiff extends NSObject implements ISCKDiff {
  initWithObject_comparedTo<T extends SCKArtboardDiff>(object: SCKArtboard, otherObject: SCKArtboard): T;

  object(): SCKArtboard;
  setObject(object: SCKArtboard): void;
  comparedObject(): SCKArtboard;
  setComparedObject(comparedObject: SCKArtboard): void;
  attributes(): SCKArtboardAttributes;
  setAttributes(attributes: SCKArtboardAttributes): void;
}

declare class SCKArtboard extends SCKObject {
  diffComparedTo(object: SCKArtboard): SCKArtboardDiff;

  page(): SCKPage;
  setPage(page: SCKPage): void;
  name(): NSString;
  setName(name: NSString | string): void;
  slug(): NSString;
  setSlug(slug: NSString | string): void;
  order(): NSUInteger;
  setOrder(order: NSUInteger): void;
  unread(): NSUInteger;
  setUnread(unread: NSUInteger): void;
  size(): CGSize;
  setSize(size: CGSize): void;
  viewport(): SCKArtboardViewport;
  setViewport(viewport: SCKArtboardViewport): void;
  files(): NSArray<any>;
  setFiles(files: NSArray<any> | any[]): void;
  possibleFileTypes(): SCKFileImageType;
  setPossibleFileTypes(possibleFileTypes: SCKFileImageType): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  isFlowHome(): boolean;
  setIsFlowHome(isFlowHome: boolean): void;
}

declare class SCKCloudDocumentDiff extends SCKDocumentDiff {
  // initWithObject_comparedTo<T extends SCKCloudDocumentDiff>(object: SCKCloudDocument, otherObject: SCKCloudDocument): T;
}

declare class SCKCloudDocument extends SCKDocument {
  diffComparedTo(object: SCKCloudDocument): SCKCloudDocumentDiff;

  slug(): NSString;
  setSlug(slug: NSString | string): void;
  downloadURL(): NSURL;
  setDownloadURL(downloadURL: NSURL): void;
  isProcessing(): boolean;
  setIsProcessing(isProcessing: boolean): void;
  metaImageURL(): NSURL;
  setMetaImageURL(metaImageURL: NSURL): void;
}

declare class SCKCollectionDiff extends NSObject implements ISCKDiff {
  initWithObject_comparedTo<T extends SCKCollectionDiff>(object: NSArray<any> | any[], otherObject: NSArray<any> | any[]): T;
  initWithCollectionDiffSet<T extends SCKCollectionDiff>(diffSet: NSSet<any>): T;

  object(): NSArray<any>;
  setObject(object: NSArray<any> | any[]): void;
  comparedObject(): NSArray<any>;
  setComparedObject(comparedObject: NSArray<any> | any[]): void;
  insertions(): NSSet<any>;
  setInsertions(insertions: NSSet<any>): void;
  updateDiffs(): NSSet<any>;
  setUpdateDiffs(updateDiffs: NSSet<any>): void;
  deletions(): NSSet<any>;
  setDeletions(deletions: NSSet<any>): void;
}

declare interface ISCKDiffable {
  diffComparedTo(object: SCKObject): any;
}

declare class SCKDocumentDiff extends NSObject implements ISCKDiff {
  initWithObject_comparedTo<T extends SCKDocumentDiff>(object: SCKDocument, otherObject: SCKDocument): T;

  object(): SCKDocument;
  setObject(object: SCKDocument): void;
  comparedObject(): SCKDocument;
  setComparedObject(comparedObject: SCKDocument): void;
  attributes(): SCKDocumentAttributes;
  setAttributes(attributes: SCKDocumentAttributes): void;
  pageDiff(): SCKCollectionDiff;
  setPageDiff(pageDiff: SCKCollectionDiff): void;
  artboardsDiff(): SCKCollectionDiff;
  setArtboardsDiff(artboardsDiff: SCKCollectionDiff): void;
}

declare class SCKDocument extends SCKObject {
  diffComparedTo(object: SCKDocument): SCKDocumentDiff;

  name(): NSString;
  setName(name: NSString | string): void;
  pages(): NSArray<any>;
  setPages(pages: NSArray<any> | any[]): void;
  colorSpace(): SCKColorSpace;
  setColorSpace(colorSpace: SCKColorSpace): void;
}

declare class SCKFlowConnectionDiff extends NSObject implements ISCKDiff {
  initWithObject_comparedTo<T extends SCKFlowConnectionDiff>(object: SCKFlowConnection, otherObject: SCKFlowConnection): T;

  object(): SCKFlowConnection;
  setObject(object: SCKFlowConnection): void;
  comparedObject(): SCKFlowConnection;
  setComparedObject(comparedObject: SCKFlowConnection): void;
  attributes(): SCKFlowConnectionAttributes;
  setAttributes(attributes: SCKFlowConnectionAttributes): void;
}

declare class SCKFlowConnection extends SCKObject {
  diffComparedTo(object: SCKFlowConnection): SCKFlowConnectionDiff;

  isBackAction(): boolean;
  setIsBackAction(isBackAction: boolean): void;
  destinationArtboardID(): SCKObjectID;
  setDestinationArtboardID(destinationArtboardID: SCKObjectID): void;
  animationType(): NSString;
  setAnimationType(animationType: NSString | string): void;
  layer(): SCKLayer;
  setLayer(layer: SCKLayer): void;
}

declare class SCKLayerDiff extends NSObject implements ISCKDiff {
  initWithObject_comparedTo<T extends SCKLayerDiff>(object: SCKLayer, otherObject: SCKLayer): T;

  object(): SCKLayer;
  setObject(object: SCKLayer): void;
  comparedObject(): SCKLayer;
  setComparedObject(comparedObject: SCKLayer): void;
  attributes(): SCKLayerAttributes;
  setAttributes(attributes: SCKLayerAttributes): void;
}

declare class SCKLayer extends SCKObject {
  diffComparedTo(object: SCKLayer): SCKLayerDiff;

  name(): NSString;
  setName(name: NSString | string): void;
  boundingRect(): CGRect;
  setBoundingRect(boundingRect: CGRect): void;
  flowConnection(): SCKFlowConnection;
  setFlowConnection(flowConnection: SCKFlowConnection): void;
  artboard(): SCKArtboard;
  setArtboard(artboard: SCKArtboard): void;
  isFixedToViewport(): boolean;
  setIsFixedToViewport(isFixedToViewport: boolean): void;
}

declare class SCKPageDiff extends NSObject implements ISCKDiff {
  initWithObject_comparedTo<T extends SCKPageDiff>(object: SCKPage, otherObject: SCKPage): T;

  object(): SCKPage;
  setObject(object: SCKPage): void;
  comparedObject(): SCKPage;
  setComparedObject(comparedObject: SCKPage): void;
  attributes(): SCKPageAttributes;
  setAttributes(attributes: SCKPageAttributes): void;
  artboardsDiff(): SCKCollectionDiff;
  setArtboardsDiff(artboardsDiff: SCKCollectionDiff): void;
}

declare class SCKPage extends SCKObject {
  diffComparedTo(object: SCKPage): SCKPageDiff;

  document(): SCKDocument;
  setDocument(document: SCKDocument): void;
  name(): NSString;
  setName(name: NSString | string): void;
  slug(): NSString;
  setSlug(slug: NSString | string): void;
  order(): NSUInteger;
  setOrder(order: NSUInteger): void;
  artboards(): NSArray<any>;
  setArtboards(artboards: NSArray<any> | any[]): void;
}

declare type SCKArtboardViewport = {
  scale: CGFloat
  size: CGSize
}

declare enum SCKArtboardAttributes {
  SCKArtboardNoAttribute = 0,
  SCKArtboardNameAttribute = 1 << 0,
  SCKArtboardSlugAttribute = 1 << 1,
  SCKArtboardOrderAttribute = 1 << 2,
  SCKArtboardUnreadAttribute = 1 << 3,
  SCKArtboardSizeAttribute = 1 << 4,
  SCKArtboardFilesAttribute = 1 << 5,
  SCKArtboardLayersAttribute = 1 << 6,
  SCKArtboardIsFlowHomeAttribute = 1 << 7,
  SCKArtboardViewportAttribute = 1 << 8,
  SCKArtboardPossibleFileTypesAttribute = 1 << 9,
}

declare class SCKAuthenticatedUser extends SCKUser implements ISCKAPIAuthentication {
  initWithObjectID_authToken<T extends SCKAuthenticatedUser>(objectID: SCKObjectID, authToken: NSString | string | null): T;
  static current(): SCKAuthenticatedUser;
  static logoutWithError(error: NSError): boolean;
  static logout(): boolean;
  loginWithError(error: NSError): boolean;
  login(): boolean;
  loginToEnvironment_error(environment: SCKEnvironment, error: NSError): boolean;
  loginToEnvironment(environment: SCKEnvironment): boolean;
  consumeAccessToken(): NSString;

  authToken(): NSString;
  setAuthToken(authToken: NSString | string): void;
  accessToken(): NSString;
  setAccessToken(accessToken: NSString | string): void;
}

declare class SCKAvatar extends NSObject {
  initWithDictionary<T extends SCKAvatar>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
  type(): SCKAvatarType;
  setType(type: SCKAvatarType): void;
  url(): NSURL;
  setUrl(url: NSURL): void;
  largeURL(): NSURL;
  setLargeURL(largeURL: NSURL): void;
}

declare enum SCKAvatarType {
  SCKAvatarTypeRandom = 0,
  SCKAvatarTypeUserDefined,
}

declare enum SCKColorSpace {
  SCKColorSpaceUnmanaged = 0,
  SCKColorSpaceSRGB = 1,
  SCKColorSpaceDisplayP3 = 2,
}

declare enum SCKDocumentAttributes {
  SCKDocumentNoAttribute = 0,
  SCKDocumentNameAttribute = 1 << 0,
  SCKDocumentSlugAttribute = 1 << 1,
  SCKDocumentDownloadURLAttribute = 1 << 2,
  SCKDocumentProcessingAttribute = 1 << 3,
  SCKDocumentMetaImageURLAttribute = 1 << 4,
  SCKDocumentPagesAttribute = 1 << 5,
  SCKDocumentColorSpaceAttribute = 1 << 6,
}

declare class SCKDocumentUploadMultipartSpecs extends NSObject {
  initWithDictionary<T extends SCKDocumentUploadMultipartSpecs>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  uploadRequestCompletionBodyWithSize(size: NSUInteger): NSDictionary<any, any>;

  uploadID(): NSString;
  setUploadID(uploadID: NSString | string): void;
  uploadKey(): NSString;
  setUploadKey(uploadKey: NSString | string): void;
  partSize(): NSUInteger;
  setPartSize(partSize: NSUInteger): void;
  uploadURLs(): NSArray<any>;
  setUploadURLs(uploadURLs: NSArray<any> | any[]): void;
}

declare class SCKFile extends SCKObject {
  dimensions(): CGSize;
  setDimensions(dimensions: CGSize): void;
  fileSize(): NSUInteger;
  setFileSize(fileSize: NSUInteger): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  thumbnails(): NSArray<any>;
  setThumbnails(thumbnails: NSArray<any> | any[]): void;
  url(): NSURL;
  setUrl(url: NSURL): void;
  type(): SCKFileImageType;
  setType(type: SCKFileImageType): void;
}

declare enum SCKFileImageType {
  SCKFileImageTypeFull = 0,
  SCKFileImageTypeScrollable = 1 << 0,
  SCKFileImageTypeFixed = 1 << 1,
}

declare class SCKFileUploadSpecs extends NSObject {
  initWithDictionary<T extends SCKFileUploadSpecs>(dictionary: NSDictionary<any, any> | {[key: string]: any} | null): T;

  fileHash(): NSString;
  setFileHash(fileHash: NSString | string): void;
  uploadURL(): NSURL;
  setUploadURL(uploadURL: NSURL): void;
}

declare enum SCKFlowConnectionAttributes {
  SCKFlowConnectionNoAttribute = 0,
  SCKFlowConnectionBackActionAttribute = 1 << 0,
  SCKFlowConnectionDestinationArtboardIDAttribute = 1 << 1,
  SCKFlowConnectionAnimationTypeAttribute = 1 << 2,
}

declare enum SCKLayerAttributes {
  SCKLayerNoAttribute = 0,
  SCKLayerNameAttribute = 1 << 0,
  SCKLayerBoundingRectAttribute = 1 << 1,
  SCKLayerFlowConnectionAttribute = 1 << 2,
  SCKLayerFixedToViewportAttribute = 1 << 3,
}

declare class SCKObject extends NSObject implements INSSecureCoding {
  initWithData_error<T extends SCKObject>(data: NSData | null, error: NSError): T;
  initWithDictionary<T extends SCKObject>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithDictionary_parentObject<T extends SCKObject>(dictionary: NSDictionary<any, any> | {[key: string]: any}, parent: SCKObject | null): T;
  initWithObjectID<T extends SCKObject>(objectID: SCKObjectID): T;

  parent(): SCKObject;
  setParent(parent: SCKObject): void;
  objectID(): SCKObjectID;
  setObjectID(objectID: SCKObjectID): void;
  creationDate(): NSDate;
  setCreationDate(creationDate: NSDate): void;
  updateDate(): NSDate;
  setUpdateDate(updateDate: NSDate): void;
  deletionDate(): NSDate;
  setDeletionDate(deletionDate: NSDate): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
  localizedUpdatedTimeComponentsString(): NSString;
  setLocalizedUpdatedTimeComponentsString(localizedUpdatedTimeComponentsString: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare type SCKObjectID = NSString

declare enum SCKPageAttributes {
  SCKPageNoAttribute = 0,
  SCKPageNameAttribute = 1 << 0,
  SCKPageSlugAttribute = 1 << 1,
  SCKPageOrderAttribute = 1 << 2,
  SCKPageArtboardsAttribute = 1 << 3,
}

declare class SCKShare extends SCKObject {
  shortID(): NSString;
  setShortID(shortID: NSString | string): void;
  publicURL(): NSURL;
  setPublicURL(publicURL: NSURL): void;
  isPrivate(): boolean;
  setIsPrivate(isPrivate: boolean): void;
  userID(): SCKObjectID;
  setUserID(userID: SCKObjectID): void;
  commentsEnabled(): boolean;
  setCommentsEnabled(commentsEnabled: boolean): void;
  currentVersion(): SCKShareVersion;
  setCurrentVersion(currentVersion: SCKShareVersion): void;
}

declare class SCKShareUploadSpecs extends SCKShare {
  cloudDocumentID(): NSString;
  setCloudDocumentID(cloudDocumentID: NSString | string): void;
  fileUploadSpecs(): NSArray<any>;
  setFileUploadSpecs(fileUploadSpecs: NSArray<any> | any[]): void;
}

declare class SCKShareVersion extends SCKObject {
  number(): NSUInteger;
  setNumber(number: NSUInteger): void;
  message(): NSString;
  setMessage(message: NSString | string): void;
  document(): SCKCloudDocument;
  setDocument(document: SCKCloudDocument): void;
}

declare class SCKThumbnail extends SCKObject {
  URL(): NSURL;
  setURL(URL: NSURL): void;
  dimensions(): CGSize;
  setDimensions(dimensions: CGSize): void;
  fileSize(): NSUInteger;
  setFileSize(fileSize: NSUInteger): void;
}

declare class SCKUser extends SCKObject {
  name(): NSString;
  setName(name: NSString | string): void;
  email(): NSString;
  setEmail(email: NSString | string): void;
  changedEmail(): NSString;
  setChangedEmail(changedEmail: NSString | string): void;
  isAdmin(): boolean;
  setIsAdmin(isAdmin: boolean): void;
  avatar(): SCKAvatar;
  setAvatar(avatar: SCKAvatar): void;
}

declare class SCKTestAuthentication extends NSObject implements ISCKAPIAuthentication {
  consumeAccessToken(): NSString;

  accessToken(): NSString;
  setAccessToken(accessToken: NSString | string): void;
  authToken(): NSString;
  setAuthToken(authToken: NSString | string): void;
  environment(): SCKEnvironment;
  setEnvironment(environment: SCKEnvironment): void;
}

declare class AFAmazonS3Manager extends AFHTTPRequestOperationManager implements INSSecureCoding, INSCopying {
  initWithAccessKeyID_secret<T extends AFAmazonS3Manager>(accessKey: NSString | string, secret: NSString | string): T;
  enqueueS3RequestOperationWithMethod_path_parameters_success_failure(method: NSString | string, path: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any}, success: Block, failure: Block): AFHTTPRequestOperation;
  getServiceWithSuccess_failure(success: Block, failure: Block): AFHTTPRequestOperation;
  getBucket_success_failure(bucket: NSString | string, success: Block, failure: Block): AFHTTPRequestOperation;
  putBucket_parameters_success_failure(bucket: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any}, success: Block, failure: Block): AFHTTPRequestOperation;
  deleteBucket_success_failure(bucket: NSString | string, success: Block, failure: Block): AFHTTPRequestOperation;
  headObjectWithPath_success_failure(path: NSString | string, success: Block, failure: Block): AFHTTPRequestOperation;
  getObjectWithPath_progress_success_failure(path: NSString | string, progress: Block, success: Block, failure: Block): AFHTTPRequestOperation;
  getObjectWithPath_outputStream_progress_success_failure(path: NSString | string, outputStream: NSOutputStream, progress: Block, success: Block, failure: Block): AFHTTPRequestOperation;
  postObjectWithFile_destinationPath_parameters_progress_success_failure(path: NSString | string, destinationPath: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any}, progress: Block, success: Block, failure: Block): AFHTTPRequestOperation;
  putObjectWithFile_destinationPath_parameters_progress_success_failure(path: NSString | string, destinationPath: NSString | string, parameters: NSDictionary<any, any> | {[key: string]: any}, progress: Block, success: Block, failure: Block): AFHTTPRequestOperation;
  deleteObjectWithPath_success_failure(path: NSString | string, success: Block, failure: Block): AFHTTPRequestOperation;
  copyWithZone(zone: NSZone | null): any;

  baseURL(): NSURL;
  setBaseURL(baseURL: NSURL): void;
  requestSerializer(): AFAmazonS3RequestSerializer;
  setRequestSerializer(requestSerializer: AFAmazonS3RequestSerializer): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class AFAmazonS3RequestSerializer extends AFHTTPRequestSerializer {
  setAccessKeyID_secret(accessKey: NSString | string, secret: NSString | string): void;
  requestBySettingAuthorizationHeadersForRequest_error(request: NSURLRequest, error: NSError): NSURLRequest;
  preSignedRequestWithRequest_expiration_error(request: NSURLRequest, expiration: NSDate, error: NSError): NSURLRequest;

  bucket(): NSString;
  setBucket(bucket: NSString | string): void;
  region(): NSString;
  setRegion(region: NSString | string): void;
  sessionToken(): NSString;
  setSessionToken(sessionToken: NSString | string): void;
  useSSL(): boolean;
  setUseSSL(useSSL: boolean): void;
  endpointURL(): NSURL;
  setEndpointURL(endpointURL: NSURL): void;
}

declare class AFAmazonS3ResponseSerializer extends AFHTTPResponseSerializer {}

declare class AFAmazonS3ResponseObject extends NSObject {
  static responseObject(response: NSHTTPURLResponse): AFAmazonS3ResponseObject;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  ETag(): NSString;
  setETag(ETag: NSString | string): void;
  originalResponse(): NSHTTPURLResponse;
  setOriginalResponse(originalResponse: NSHTTPURLResponse): void;
}

declare class MSAction extends NSResponder implements IMSPopToolbarItemActionObject {
  menuItems(): NSArray<any>;
  menuItemsForMenu(menu: NSMenu): NSArray<any>;
  makeToolbarItemForToolbar(willInsertIntoToolbar: boolean): NSToolbarItem;
  doPerformAction(sender: any): IBAction;
  submenuActionIDs(): NSArray<any>;
  containsActionWithID(actionIdentifier: NSString | string): boolean;
  contextForActionObservers(): any;
  handlesKeyEvent(event: NSEvent): boolean;
  toolbarItemShouldDrawWithArrow(toolbarItem: MSPopUpToolbarItem): boolean;

  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  preferredMenuAction(): string;
  setPreferredMenuAction(preferredMenuAction: string): void;
  labelForMenu(): NSString;
  setLabelForMenu(labelForMenu: NSString | string): void;
  showInToolbar(): boolean;
  setShowInToolbar(showInToolbar: boolean): void;
  tooltip(): NSString;
  setTooltip(tooltip: NSString | string): void;
  labelForToolbar(): NSString;
  setLabelForToolbar(labelForToolbar: NSString | string): void;
  labelForToolbarCustomisationSheet(): NSString;
  setLabelForToolbarCustomisationSheet(labelForToolbarCustomisationSheet: NSString | string): void;
  controller(): MSActionController;
  setController(controller: MSActionController): void;
  toolbarItem(): NSToolbarItem;
  setToolbarItem(toolbarItem: NSToolbarItem): void;
  hasSubMenu(): boolean;
  setHasSubMenu(hasSubMenu: boolean): void;
  hasDynamicTitle(): boolean;
  setHasDynamicTitle(hasDynamicTitle: boolean): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  imageName(): NSString;
  setImageName(imageName: NSString | string): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  shortcutCharacter(): unichar;
  setShortcutCharacter(shortcutCharacter: unichar): void;
  isActive(): boolean;
  setIsActive(isActive: boolean): void;
  isSelectable(): boolean;
  setIsSelectable(isSelectable: boolean): void;
  validate(): boolean;
  setValidate(validate: boolean): void;
  validationStatus(): MSActionValidation;
  setValidationStatus(validationStatus: MSActionValidation): void;
}

declare enum MSActionValidation {
  MSActionValidationInvalid = 0,
  MSActionValidationValid = 1,
  MSActionValidationUnavailable = 2,
}

declare class MSActionController extends NSResponder {
  registerAction(action: MSAction): void;
  actionForID(actionIdentifier: NSString | string): MSAction;
  actionForSelector(action: string): MSAction;
  performActionWithID_sender(actionIdentifier: NSString | string, sender: any | null): void;
  allActions(): NSArray<any>;
  insertAfterResponder(responder: NSResponder): void;
  forwardKeyEvent(event: NSEvent): boolean;
  willBeginActionWithID_context(actionID: NSString | string, context: any): void;
  didFinishActionWithID_context(actionID: NSString | string, context: any): void;
  didInstantActionWithID_context(actionID: NSString | string, context: any): void;
  registerActionObserver(observer: any): void;
  unregisterActionObserver(observer: any): void;
  performFakeActionWithID_context_block(actionID: NSString | string, context: any | null, block: MSActionFakeActionBlock | null): void;

  singleKeyShortcuts(): NSDictionary<any, any>;
  setSingleKeyShortcuts(singleKeyShortcuts: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare interface IMSActionObserver {
  actionController_willBeginActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didFinishActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didInstantActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
}

declare class MSAlignLayersUnion extends BCRect {
  static unionWithLayers(layers: NSArray<any> | any[]): MSAlignLayersUnion;

  layers(): any;
  setLayers(layers: any): void;
}

declare class MSAlignmentEngine extends NSObject {
  initWithCycle<T extends MSAlignmentEngine>(cycle: MSAlignmentEngineCycle): T;
  canSnapOnAxis(axis: BCAxis): boolean;
  beginCycleWithPoint_constraint(point: NSPoint, constraint: MSAlignmentEngineConstraint | null): MSAlignmentEngineCycle;
  addTarget(target: MSSnappingTarget): void;
  addTargets(targets: NSArray<any> | any[]): void;
  addTargetWithLineSegment(segment: MSLineSegment): void;
  addOrthogonalTargetsThroughPoint(point: NSPoint): void;
  addTargetsForRect_includeCenter(rect: NSRect, includeCenter: boolean): void;
  static snapTargetsForCentersOfLayers(layers: NSArray<any> | any[]): NSArray<any>;
  includeRulerGuideTargetsForPage_zoomScale(page: MSPage, zoomScale: CGFloat): void;
  static enumeratorForPossibleSnapTargetLayersInGroup(group: MSLayerGroup): MSLayerEnumerator<any>;

  snapDistance(): CGFloat;
  setSnapDistance(snapDistance: CGFloat): void;
  constraint(): MSAlignmentEngineConstraint;
  setConstraint(constraint: MSAlignmentEngineConstraint): void;
  currentCycle(): MSAlignmentEngineCycle;
  setCurrentCycle(currentCycle: MSAlignmentEngineCycle): void;
  alignmentResult(): MSAlignmentEngineResult;
  setAlignmentResult(alignmentResult: MSAlignmentEngineResult): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSAlignmentEngineDelegate {
  alignmentEngine_alignPoint(engine: MSAlignmentEngine, point: NSPoint): NSPoint;
  alignmentEngine_roundPoint(engine: MSAlignmentEngine, point: NSPoint): NSPoint;
}

declare class MSAlignmentEngineConstraint extends NSObject implements INSCopying {
  static constraintWithSourcePoint_toPoint(sourcePoint: NSPoint, point2: NSPoint): MSAlignmentEngineConstraint;
  static orthogonalOrDiagonalConstraintFromPoint_toPoint(sourcePoint: NSPoint, unsnappedDestination: NSPoint): MSAlignmentEngineConstraint;
  copyWithZone(zone: NSZone | null): any;

  sourcePoint(): NSPoint;
  setSourcePoint(sourcePoint: NSPoint): void;
  line(): MSLine;
  setLine(line: MSLine): void;
}

declare class MSAlignmentEngineResultGuide extends NSObject implements INSCopying {
  initWithLineSegment<T extends MSAlignmentEngineResultGuide>(segment: MSLineSegment): T;
  bezierPath(): NSBezierPath;
  drawWithLineWidth(width: CGFloat): void;
  copyWithZone(zone: NSZone | null): any;

  lineSegment(): MSLineSegment;
  setLineSegment(lineSegment: MSLineSegment): void;
}

declare class MSAlignmentEngineResult extends NSObject implements INSCopying {
  initWithPoint_guides<T extends MSAlignmentEngineResult>(point: NSPoint, guides: NSArray<any> | any[]): T;
  static snappingResultWithPoint(point: NSPoint): MSAlignmentEngineResult;
  drawAtZoomValue(zoomValue: CGFloat): void;
  copyWithZone(zone: NSZone | null): any;

  point(): NSPoint;
  setPoint(point: NSPoint): void;
  guides(): NSArray<any>;
  setGuides(guides: NSArray<any> | any[]): void;
}

declare class MSArtboardGroup extends _MSArtboardGroup implements IMSArtboardGroup, IMSRootLayer, IMSLayerWithMutableBackgroundColor, IMSColorConvertible {
  optimalBoundingBox(): NSRect;
  resizeToFitChildren(): void;
  static artboardRectFromLayersInArray(layers: MSLayerArray): NSRect;
  hitTestInNameLabel_zoomValue(mouse: NSPoint, zoom: CGFloat): boolean;
  moveChildrenToIdenticalPositionAfterResizeFromRect(oldRect: NSRect): void;
  makeChildRectsIntegral(): void;
  convertColorsUsing(converter: any): void;

  preset(): MSArtboardPreset;
  setPreset(preset: MSArtboardPreset): void;
  grid(): MSSimpleGrid;
  setGrid(grid: MSSimpleGrid): void;
  layout(): MSLayoutGrid;
  setLayout(layout: MSLayoutGrid): void;
  rulerBase(): NSPoint;
  setRulerBase(rulerBase: NSPoint): void;
  contentBounds(): NSRect;
  setContentBounds(contentBounds: NSRect): void;
  rect(): CGRect;
  setRect(rect: CGRect): void;
  backgroundColor(): MSColor;
  setBackgroundColor(backgroundColor: MSColor): void;
}

declare class MSArtboardOrderSorting extends NSObject {
  static sortArtboards_inOrder(artboards: NSArray<any> | any[], order: MSLayerOrderSortingOptions): NSArray<any>;
  static sortArtboardsInDefaultOrder(artboards: NSArray<any> | any[]): NSArray<any>;
}

declare enum MSLayerOrderSortingOptions {
  MSArtboardSortingCurrentOrder = 8,
  MSArtboardSortingReverseOrder = 9,
  MSArtboardSortingLeftToRight,
  MSArtboardSortingRightToLeft,
  MSArtboardSortingTopToBottom,
}

declare class MSAssetLibrary extends NSObject implements IBCSortable, INSCoding, IMSLibraryObject {
  initWithDocumentAtURL<T extends MSAssetLibrary>(url: NSURL): T;
  initWithName<T extends MSAssetLibrary>(name: NSString | string): T;
  resolveLocationOnDisk(): void;
  loadSynchronously(): boolean;
  loadAsyncWithDispatchGroup_completionHandler(dispatchGroup: dispatch_group_t | null, block: dispatch_block_t): void;
  unload(): void;
  handleAssetLibraryUpdateWithCompletionHandler(block: Block): void;
  static URLForTemplateLibraryNamed(name: NSString | string): NSURL;
  static assetLibraryStatusForDocumentErrorCode(errorCode: MSDocumentErrorCode): MSAssetLibraryStatus;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends MSAssetLibrary>(aDecoder: NSCoder): T;

  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  valid(): boolean;
  setValid(valid: boolean): void;
  status(): MSAssetLibraryStatus;
  setStatus(status: MSAssetLibraryStatus): void;
  locationOnDisk(): NSURL;
  setLocationOnDisk(locationOnDisk: NSURL): void;
  canLibraryBeRemoved(): boolean;
  setCanLibraryBeRemoved(canLibraryBeRemoved: boolean): void;
  document(): MSDocumentData;
  setDocument(document: MSDocumentData): void;
  name(): NSString;
  setName(name: NSString | string): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  dateLastModified(): NSDate;
  setDateLastModified(dateLastModified: NSDate): void;
  libraryType(): MSAssetLibraryType;
  setLibraryType(libraryType: MSAssetLibraryType): void;
  propertyListDictionaryRepresentation(): NSDictionary<any, any>;
  setPropertyListDictionaryRepresentation(propertyListDictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
  previewURL(): NSURL;
  setPreviewURL(previewURL: NSURL): void;
  libraryID(): NSString;
  setLibraryID(libraryID: NSString | string): void;
}

declare enum MSAssetLibraryStatus {
  MSAssetLibraryStatusLoaded = 0,
  MSAssetLibraryStatusNotLoaded,
  MSAssetLibraryStatusNotFound,
  MSAssetLibraryStatusIncompatibleVersion,
  MSAssetLibraryStatusLoadError,
}

declare enum MSAssetLibraryType {
  MSAssetLibraryTypeInternal = 0,
  MSAssetLibraryTypeUser = 1,
  MSAssetLibraryTypeRemote = 2,
}

declare enum MSAssetLibraryVersion {
  MSAssetLibraryInitialVersion = 1,
  MSAssetLibraryDownloadableLibraryVersion = 2,
  MSAssetLibraryBookMarkLocationTrackingRemoved = 3,
  MSAssetLibraryNextVersion,
  MSAssetLibraryCurrentVersion,
}

declare class MSAssetLibraryController extends NSObject implements IMSAssetLibraryDelegate {
  addAssetLibraryAtURL(url: NSURL): MSAssetLibraryControllerAddStatus;
  removeAssetLibrary(library: MSAssetLibrary): void;
  importShareableObjectReference_intoDocument(reference: MSShareableObjectReference, document: MSDocumentData): MSForeignObject;
  syncForeignObject_withMaster_fromLibrary(foreignObject: MSForeignObject, libraryMaster: MSShareableObject, sourceLibrary: MSAssetLibrary): void;
  enumerateForeignObjects_inDocument_includeDisabled_block(objects: NSArray<any> | any[], document: MSDocumentData, includeDisabled: boolean, block: Block): void;
  libraryForShareableObject(object: MSModelObject): MSAssetLibrary;
  loadLibrariesWithDispatchGroup(dispatchGroup: dispatch_group_t | null): void;
  loadInternalLibraryRepresentationWithCompletionHandler(completionHandler: Block): void;
  generatePreviewImageForLibrary_completionHandler(library: MSAssetLibrary, completionHandler: Block): void;
  addRemoteLibraryFromAppcastURL_withCompletionHandler(appcastURL: NSURL, completionHandler: Block): void;
  downloadAssetLibraryAppcastsWithHandler_completionHandler(handler: Block | null, completionBlock: Block): void;
  startDownloadingAssetLibrary_progressHandler_downloadCompletionHandler_completionHandler(assetLibrary: MSRemoteAssetLibrary, progressHandler: Block, downloadCompletionHandler: Block, completionHandler: Block): void;
  librariesWithUpdates(): NSArray<any>;
  addRemoteLibraryFromAppcastURL_context_callback(appcastURL: NSURL, coscript: COScript, callback: MOJavaScriptObject | Function): void;
  assetLibraryChangedOnDisk(library: MSAssetLibrary): void;
  assetLibraryEnableStateChanged(library: MSAssetLibrary): void;

  availableLibraries(): NSArray<any>;
  setAvailableLibraries(availableLibraries: NSArray<any> | any[]): void;
  libraries(): NSArray<any>;
  setLibraries(libraries: NSArray<any> | any[]): void;
}

declare enum MSAssetLibraryControllerAddStatus {
  MSAssetLibraryControllerAddStatusOK,
  MSAssetLibraryControllerAddStatusDuplicate,
  MSAssetLibraryControllerAddStatusLegacyDocument,
  MSAssetLibraryControllerAddStatusInvalidFile,
}

declare interface IMSAssetLibraryDelegate {
  assetLibraryChangedOnDisk(library: MSAssetLibrary): void;
  assetLibraryEnableStateChanged(library: MSAssetLibrary): void;
}

declare class MSAssetLibraryUpdater {
  startDownloadingAssetLibrary_progressHandler_completionHandler(assetLibrary: MSRemoteAssetLibrary, progressHandler: Block, completionHandler: Block): NSString;
  updateAssetLibrary_withLibraryDownloadedTo(assetLibrary: MSRemoteAssetLibrary, downloadedFileURL: NSURL): boolean;
  downloadAppcastAtURL_withCompletionHandler(appcastURL: NSURL, completionHandler: Block): void;
  startFileDownload_completionHandler(remoteURL: NSURL, completionHandler: Block): void;
  cancelDownloadTaskWithIdentifier(downloadTaskIdentifier: NSString | string | null): void;
}

declare class MSAttributeConverter extends NSObject {
  static converterWithAttributeName_block(attributeName: NSString | string, conversionBlock: MSAttributeConverterBlock): MSAttributeConverter;
  initWithAttributeName_block<T extends MSAttributeConverter>(attributeName: NSString | string, conversionBlock: MSAttributeConverterBlock): T;
  convertAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;

  attributeName(): NSString;
  setAttributeName(attributeName: NSString | string): void;
  conversionBlock(): MSAttributeConverterBlock;
  setConversionBlock(conversionBlock: MSAttributeConverterBlock): void;
}

declare class MSAutoCappingNumberFormatter extends MSMathNumberFormatter {}

declare class MSAutoSelectingArrayController extends NSArrayController {}

declare class MSAveragingRenderMonitor extends MSRenderMonitor {
  initWithUpdateBlock<T extends MSAveragingRenderMonitor>(block: MSAveragingRenderMonitorUpdateBlock): T;

  start(): BCTime;
  setStart(start: BCTime): void;
  updateTimer(): NSTimer;
  setUpdateTimer(updateTimer: NSTimer): void;
}

declare class MSBaseGrid extends _MSBaseGrid {
  verticalGuidesForRulerData_inRect(ruler: MSRulerData, aRect: NSRect): NSArray<any>;
  horizontalGuidesForRulerData_inRect(ruler: MSRulerData, aRect: NSRect): NSArray<any>;
  static defaultGrid(): any;
  static setDefaultGrid(grid: MSBaseGrid): void;
  shouldDraw(): boolean;
  drawInRect_horizontalRuler_verticalRuler(dirtyRect: NSRect, horizontalRuler: MSRulerView, verticalRuler: MSRulerView): void;
  verticalGuidesForRuler_inRect(ruler: MSRulerView, aRect: NSRect): NSArray<any>;
  horizontalGuidesForRuler_inRect(ruler: MSRulerView, aRect: NSRect): NSArray<any>;

  forceDraw(): boolean;
  setForceDraw(forceDraw: boolean): void;
}

declare class MSBeepSuppressor extends NSObject {
  static failSilentlyInBlock(block: Block): void;

  static shouldSuppressBeep(): boolean;
  static setShouldSuppressBeep(shouldSuppressBeep: boolean): void;
}

declare class MSBooleanOperations extends NSObject {
  static booleanOperation_onLayers(operation: MSBooleanOperation, layers: MSLayerArray): MSShapeGroup;
  static historyMomentTitleForOperation_onLayers(operation: MSBooleanOperation, layers: MSLayerArray): NSString;
}

declare class MSClickGestureRecognizer extends MSGestureRecognizer {
  buttonMask(): NSUInteger;
  setButtonMask(buttonMask: NSUInteger): void;
  numberOfClicksRequired(): NSInteger;
  setNumberOfClicksRequired(numberOfClicksRequired: NSInteger): void;
}

declare class MSClosePathChange extends MSShapeChange {
  static toggleClosePath(): MSClosePathChange;
  validateWithContext(context: MSShapeChangeContext): boolean;
  titleForContext(context: MSShapeChangeContext): NSString;
}

declare interface IMSCloudExportableDocument {
  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
  UIMetadata(): NSDictionary<any, any>;
  setUIMetadata(UIMetadata: NSDictionary<any, any> | {[key: string]: any}): void;
  cacheManager(): MSCacheManager;
  setCacheManager(cacheManager: MSCacheManager): void;
  cloudShare(): SCKShare;
  setCloudShare(cloudShare: SCKShare): void;
  cloudName(): NSString;
  setCloudName(cloudName: NSString | string): void;
}

declare class MSCloudManifestMaker extends MSManifestMaker {
  imageFileProviderBlock(): MSManifestImageProviderBlock;
  setImageFileProviderBlock(imageFileProviderBlock: MSManifestImageProviderBlock): void;
}

declare class MSCloudShareUploadController extends NSObject {
  initWithDocument<T extends MSCloudShareUploadController>(document: any): T;
  startUpload(): void;
  cancel(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  existingShare(): SCKShare;
  setExistingShare(existingShare: SCKShare): void;
  cancelled(): boolean;
  setCancelled(cancelled: boolean): void;
  progress(): NSProgress;
  setProgress(progress: NSProgress): void;
}

declare interface IMSCloudShareUploadControllerDelegate {
  cloudShareController_didUploadShare(controller: MSCloudShareUploadController, share: SCKShare): void;
  cloudShareController_exportDocumentWithHandler(controller: MSCloudShareUploadController, handler: Block): void;
  cloudShareController_uploadDidFailWithError(controller: MSCloudShareUploadController, error: NSError | null): void;
  cloudShareController_didChangeProgress(controller: MSCloudShareUploadController, progress: NSProgress | null): void;
}

declare class MSCloudUser extends NSObject implements INSSecureCoding {
  initWithDictionary<T extends MSCloudUser>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  verifiedUser(): MSCloudUser;
  static userWithIdentifier_verified(identifier: NSString | string, verified: boolean): MSCloudUser;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  email(): NSString;
  setEmail(email: NSString | string): void;
  pendingEmail(): NSString;
  setPendingEmail(pendingEmail: NSString | string): void;
  isAdmin(): boolean;
  setIsAdmin(isAdmin: boolean): void;
  isVerified(): boolean;
  setIsVerified(isVerified: boolean): void;
  name(): NSString;
  setName(name: NSString | string): void;
  webAccessToken(): NSString;
  setWebAccessToken(webAccessToken: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class MSColorSpaceConverter extends NSObject implements IMSColorConverter {
  initForConversionFromColorSpace_to<T extends MSColorSpaceConverter>(oldColorSpace: MSColorSpace, targetColorSpace: MSColorSpace): T;
  convertColor(color: MSColor): MSColor;
  convertImmutableColor(color: MSImmutableColor): MSImmutableColor;
  shouldConvertColor(color: MSColor): boolean;
  shouldConvertImmutableColor(color: MSImmutableColor): boolean;

  oldColorSpace(): MSColorSpace;
  setOldColorSpace(oldColorSpace: MSColorSpace): void;
  targetColorSpace(): MSColorSpace;
  setTargetColorSpace(targetColorSpace: MSColorSpace): void;
  oldNSColorSpace(): NSColorSpace;
  setOldNSColorSpace(oldNSColorSpace: NSColorSpace): void;
  targetNSColorSpace(): NSColorSpace;
  setTargetNSColorSpace(targetNSColorSpace: NSColorSpace): void;
}

declare class MSCompoundSnapItem extends MSSnapItem {
  // initWithLayers<T extends MSCompoundSnapItem>(layers: NSArray<any> | any[]): T;
}

declare class MSCoordinateInspectorValueAdaptor extends MSMathInspectorValueAdaptor {
  initWithLayerController_layerKeyPath_axis<T extends MSCoordinateInspectorValueAdaptor>(layerController: NSArrayController, keyPath: NSString | string, axis: BCAxis): T;
  initWithLayerController_valueGetter_valueSetter_layerKeyPathsToWatch_axis<T extends MSCoordinateInspectorValueAdaptor>(layerController: NSArrayController, valueGetter: Block, valueSetter: Block, layerKeyPathsToWatch: NSArray<any> | any[], axis: BCAxis): T;

  axis(): BCAxis;
  setAxis(axis: BCAxis): void;
}

declare class MSCornerRadiusInspectorValueAdaptor extends MSMathInspectorValueAdaptor {
  initWithModelsController<T extends MSCornerRadiusInspectorValueAdaptor>(arrayController: NSArrayController): T;
}

declare class MSCornerRadiusInspectorValueAdaptorContext extends NSObject {
  componentStringWithMathValueForModel(model: MSRectangleShape): NSString;

  mode(): MSCornerRadiusMode;
  setMode(mode: MSCornerRadiusMode): void;
  componentString(): NSString;
  setComponentString(componentString: NSString | string): void;
  mathOperator(): NSString;
  setMathOperator(mathOperator: NSString | string): void;
  value(): NSNumber;
  setValue(value: NSNumber | number): void;
}

declare enum MSCornerRadiusMode {
  MSCornerRadiusModeComponentString,
  MSCornerRadiusModeMath,
  MSCornerRadiusModeValue,
}

declare class MSDataMenuProvider extends NSObject implements INSMenuDelegate {
  initWithDataManager<T extends MSDataMenuProvider>(dataManager: MSDataSupplierManager): T;
  menu(): NSMenu;
  overridesMenu(): NSMenu;
  menuItemsForDataType_indentationLevel_smallFont(dataType: MSDataType, menuItemIndentation: NSInteger, smallFont: boolean): NSArray<any>;
  clearDataMenuItemWithSmallFont(smallFont: boolean): NSMenuItem;
  refreshDataMenuItemsWithSmallFont_overridesMenu(smallFont: boolean, overridesMenu: boolean): NSArray<any>;
  addImageToMenuItems(menuItems: NSArray<any> | any[]): NSImage;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;

  dataManager(): MSDataSupplierManager;
  setDataManager(dataManager: MSDataSupplierManager): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSDataMenuProviderDelegate {
  dataMenuProvider_canChooseDataOfType(controller: MSDataMenuProvider, type: MSDataType): boolean;
  dataMenuProviderCanApplyMasterDataToInstances(controller: MSDataMenuProvider): boolean;
  dataMenuProviderCanRefreshData(controller: MSDataMenuProvider): boolean;
  dataMenuProviderSelectedLayersWithAppliedData(controller: MSDataMenuProvider): NSArray<any>;
  dataMenuProviderDataTypeForMenuBuilding(controller: MSDataMenuProvider): MSDataType;
  dataMenuProviderIsInspectorPopupMenu(provider: MSDataMenuProvider): boolean;
  dataMenuProvider_didChooseData(controller: MSDataMenuProvider, data: MSDataSupplier): void;
  dataMenuProviderRefreshData(controller: MSDataMenuProvider): void;
  dataMenuProviderRefreshMasterData(controller: MSDataMenuProvider): void;
  dataMenuProviderRemoveDataRecord(controller: MSDataMenuProvider): void;
  dataMenuProviderDataIdentifier(controller: MSDataMenuProvider): NSString;
}

declare class MSDataOverride extends NSObject {
  initWithOverride_symbolInstance<T extends MSDataOverride>(availableOverride: MSAvailableOverride, symbolInstance: MSSymbolInstance): T;

  availableOverride(): MSAvailableOverride;
  setAvailableOverride(availableOverride: MSAvailableOverride): void;
  symbolInstance(): MSSymbolInstance;
  setSymbolInstance(symbolInstance: MSSymbolInstance): void;
  affectedLayer(): MSImmutableStyledLayer;
  setAffectedLayer(affectedLayer: MSImmutableStyledLayer): void;
  overrideIdentifier(): NSString;
  setOverrideIdentifier(overrideIdentifier: NSString | string): void;
}

declare class MSDataSupplier extends NSObject implements INSCoding {
  initWithDataIdentifier_dataName_dataType<T extends MSDataSupplier>(dataIdentifier: NSString | string, dataName: NSString | string, dataType: MSDataType): T;
  resetMenuItemImage(): void;
  imageFileURLForDataItem(dataItem: NSString | string): NSURL;
  applyDataWithCount_data_dataApplier(count: NSUInteger, dataArray: NSArray<any> | any[], block: MSDataApplierBlock): void;
  generateDataForLayers_dataSupplierManager_dataApplier(layers: NSArray<any> | any[], manager: MSDataSupplierManager, applierBlock: MSDataApplierBlock): void;
  generateDataForOverrides_dataSupplierManager_dataApplier(overrides: NSArray<any> | any[], manager: MSDataSupplierManager, applierBlock: MSDataApplierBlock): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends MSDataSupplier>(aDecoder: NSCoder): T;

  delegate(): any;
  setDelegate(delegate: any): void;
  dataName(): NSString;
  setDataName(dataName: NSString | string): void;
  dataType(): MSDataType;
  setDataType(dataType: MSDataType): void;
  dataIdentifier(): NSString;
  setDataIdentifier(dataIdentifier: NSString | string): void;
  valid(): boolean;
  setValid(valid: boolean): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  menuItemImage(): NSImage;
  setMenuItemImage(menuItemImage: NSImage): void;
}

declare interface IMSDataSupplierDelegate {
  dataSupplierMenuItemImage(dataSupplier: MSDataSupplier): NSImage;
  dataSupplierDataChanged(localDataSupplier: MSLocalDataSupplier): void;
}

declare class MSDataSupplierManager extends NSObject {
  initWithDelegate<T extends MSDataSupplierManager>(delegate: any): T;
  static validLocalDataFileSystemURL(possibleDataURL: NSURL): boolean;
  static URLForBuiltinDataNamed(name: NSString | string): NSURL;
  registerPluginDataSupplier_withName_dataType_pluginIdentifier_commandIdentifier(dynamicDataKey: NSString | string, dataName: NSString | string, dataType: NSString | string, pluginIdentifier: NSString | string, commandIdentifier: NSString | string): void;
  deregisterDataSuppliersForPluginWithIdentifier(pluginIdentifier: NSString | string): void;
  removePluginDataSuppliersNotIdentifiedWithIdentifiers(dataSupplierIdentifiers: NSDictionary<any, any> | {[key: string]: any}): void;
  requestDataFromPluginDataSupplier_dataContext_applierBlock(dataSupplier: MSPluginDataSupplier, dataSupplierContext: MSPluginDataSupplierContext, applierBlock: MSDataApplierBlock): void;
  supplyData_forKey(data: NSArray<any> | any[], dataKey: NSString | string): void;
  addLocalData(localDataSupplier: MSLocalDataSupplier): void;
  removeLocalDataSupplier(dataSupplier: MSLocalDataSupplier): void;
  loadDataSuppliersWithResetBuiltin(resetBuiltin: boolean): void;
  hasLocalDataSupplierWithURL(dataURL: NSURL): boolean;
  dataSupplierWithIdentifier(identifier: NSString | string | null): MSDataSupplier;
  useableDataSupplierWithIdentifier(identifier: NSString | string): MSDataSupplier;

  dataSuppliers(): NSArray<any>;
  setDataSuppliers(dataSuppliers: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSDataSupplierManagerDelegate {
  requestDataFromPluginDataSupplier_pluginContext(pluginDataSupplier: MSPluginDataSupplier, pluginContext: NSDictionary<any, any> | {[key: string]: any}): void;
  isThereAPluginForDataSupplier(pluginDataSupplier: MSPluginDataSupplier): boolean;
  pluginIconForIdentifier(pluginIdentifier: NSString | string): NSImage;
  pluginNameForIdentifier(pluginIdentifier: NSString | string): NSString;
}

declare enum MSDataType {
  MSDataTypeNone = 0,
  MSDataTypeText = 1<<0,
  MSDataTypeImage = 1<<1,
  MSDataTypeAny,
}

declare class MSDigitStringFormatter extends NSFormatter {
  static isDigitString(string: NSString | string): boolean;
}

declare class MSDocumentData extends _MSDocumentData implements IMSDocumentData {
  enumerateColorConvertiblesIgnoringForeignSymbols(block: MSColorConvertibleHandler): void;
  replaceInstancesOfColor_withColor_ignoreAlphaWhenMatching_replaceAlphaOfOriginalColor(color: MSColor, replacementColor: MSColor, ignoreAlphaWhenMatching: boolean, replaceAlphaOfOriginalColor: boolean): void;
  assignColorSpace(colorSpace: MSColorSpace): void;
  convertToColorSpace(colorSpace: MSColorSpace): void;
  defaultPagesArray(): NSArray<any>;
  removePages_detachInstances(page: NSArray<any> | any[], shouldDetachInstances: boolean): void;
  addBlankPage(): MSPage;
  symbolsPage(): MSPage;
  symbolsPageOrCreateIfNecessary(): MSPage;
  sharedObjectContainerOfType(type: MSSharedStyleType): MSSharedObjectContainer;
  documentIsEmpty(): boolean;
  sharedObjectDidChange(instance: MSSharedObjectInstance): void;
  selectedLayers(): MSLayerArray;
  layerTreeLayoutDidChange(): void;
  layerWithID(objectID: NSString | string): MSLayer;
  artboardWithID(objectID: any): MSArtboardGroup;
  layersByObjectID(): NSDictionary<any, any>;
  allArtboards(): NSArray<any>;
  allSymbols(): NSArray<any>;
  localSymbols(): NSArray<any>;
  symbolWithID(symbolID: any): MSSymbolMaster;
  textStyleWithID(sharedStyleID: NSString | string | null): MSSharedStyle;
  layerStyleWithID(sharedStyleID: NSString | string | null): MSSharedStyle;
  allForeignObjects(): NSArray<any>;
  addCopyOfMasterToDocumentIfNecessary(master: MSSymbolMaster): MSSymbolMaster;
  addCopyOfInstanceMasterToDocumentIfNecessary(instance: MSSymbolInstance): MSSymbolMaster;
  addSymbolMaster(master: MSSymbolMaster): void;
  enumerateForeignObjects_withLibraries_block(objects: NSArray<any> | any[], libraries: NSArray<any> | any[], block: Block): void;
  libraryForForeignObject_inLibraries(object: MSForeignObject, libraries: NSArray<any> | any[]): any;
  temporarilyHideSelectionForLayers(layer: NSArray<any> | any[]): void;
  immediatelyShowSelectionForAllLayers(): void;
  replaceExistingCreationMetadata(): void;
  refreshOverlayInRect(rect: NSRect): void;
  refreshOverlay(): void;
  layerSelectionMightHaveChanged(): void;
  determineCurrentArtboard(): void;
  purgeForeignObjects(): void;
  invalidateAffectedSymbolInstances(): void;
  removeShareableObjectsFromInstanceOverrides(removed: NSSet<any>): void;
  replaceFonts(fontReplacements: NSDictionary<any, any> | {[key: string]: any}): void;
  invalidateFonts(): void;
  storeMetadata_forKey_object(toStore: any, key: NSString | string, object: MSModelObject): void;
  metadataForKey_object(key: NSString | string, object: MSModelObject): any;

  cache(): BCCache;
  setCache(cache: BCCache): void;
  currentPage(): MSPage;
  setCurrentPage(currentPage: MSPage): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  autoExpandGroupsInLayerList(): boolean;
  setAutoExpandGroupsInLayerList(autoExpandGroupsInLayerList: boolean): void;
  metadata(): NSDictionary<any, any>;
  setMetadata(metadata: NSDictionary<any, any> | {[key: string]: any}): void;
  fontList(): MSFontList;
  setFontList(fontList: MSFontList): void;
  pages(): NSArray<any>;
  setPages(pages: NSArray<any> | any[]): void;
}

declare class MSDocumentationSearchEntry extends NSObject {
  static searchEntryWithDictionary(dict: NSDictionary<any, any> | {[key: string]: any}): MSDocumentationSearchEntry;
  static markSearchEntriesAsDuplicates(entries: NSArray<any> | any[]): void;
  titles(): NSArray<any>;
  matchesSearchQuery(query: NSString | string): boolean;
  show(): void;
}

declare class MSDocumentationSearcher extends NSObject implements INSUserInterfaceItemSearching {
  documentationMightHaveChanged(): void;
  searchForItemsWithSearchString_resultLimit_matchedItemHandler(searchString: NSString | string, resultLimit: NSInteger, handleMatchedItems: Block): void;
  localizedTitlesForItem(item: any): NSArray<any>;
  performActionForItem(item: any): void;
  showAllHelpTopicsForSearchString(searchString: NSString | string): void;
}

declare class MSDragGestureRecognizer extends MSGestureRecognizer {
  locationInLayer(layer: MSLayer | null): NSPoint;
  translationInLayer(layer: MSLayer | null): CGVector;
  setTranslation_inLayer(translation: CGVector, layer: MSLayer | null): void;
  translationAsPointInLayer(layer: MSLayer | null): NSPoint;
  originInLayer(layer: MSLayer | null): NSPoint;

  beginsUponMouseDown(): boolean;
  setBeginsUponMouseDown(beginsUponMouseDown: boolean): void;
  translationLocked(): boolean;
  setTranslationLocked(translationLocked: boolean): void;
  modifierFlags(): NSEventModifierFlags;
  setModifierFlags(modifierFlags: NSEventModifierFlags): void;
}

declare class MSExportRequest extends NSObject implements INSCopying {
  readSettingsFromDefaults(): void;
  static exportRequestsFromExportableLayer(layer: MSLayer): NSArray<any>;
  static exportRequestsFromExportableLayer_useIDForName(layer: MSLayer, useIDForName: boolean): NSArray<any>;
  static exportRequestsFromExportableLayer_exportFormats_useIDForName(layer: MSLayer, exportFormats: NSArray<any> | any[], useIDForName: boolean): NSArray<any>;
  static exportRequestsFromExportableLayer_inRect_useIDForName(layer: MSLayer, rect: NSRect, useIDForName: boolean): NSArray<any>;
  static exportRequestsFromExportableLayer_exportFormats_inRect_useIDForName(layer: MSLayer, exportFormats: NSArray<any> | any[], rect: NSRect, useIDForName: boolean): NSArray<any>;
  static exportRequestFromExportFormat_layer_inRect_useIDForName(exportFormat: MSExportFormat, layer: MSLayer, rect: NSRect, useIDForName: boolean): MSExportRequest;
  configureForLayer_layerOptions_includedIDs(layer: MSLayer, layerOptions: MSExportLayerOptions, includedIDs: NSArray<any> | any[]): void;
  static exportRequestsFromLayerAncestry(layerAncestry: MSImmutableLayerAncestry): NSArray<any>;
  static exportRequestsFromLayerAncestry_inRect(layerAncestry: MSImmutableLayerAncestry, rect: NSRect): NSArray<any>;
  static exportRequestsFromLayerAncestry_exportFormats(layerAncestry: MSImmutableLayerAncestry, exportFormats: NSArray<any> | any[]): NSArray<any>;
  static exportRequestsFromLayerAncestry_exportFormats_inRect(layerAncestry: MSImmutableLayerAncestry, exportFormats: NSArray<any> | any[], rect: NSRect): NSArray<any>;
  static exportRequestFromLayerAncestry_exportFormat_inRect(ancestry: MSImmutableLayerAncestry, exportFormat: MSImmutableExportFormat, rect: NSRect): MSExportRequest;
  setNameFromID_exportFormat(objectID: NSString | string, format: MSImmutableExportFormat): void;
  configureForLayerAncestry_layerOptions_includedIDs(ancestry: MSImmutableLayerAncestry, layerOptions: MSExportLayerOptions, includedIDs: NSArray<any> | any[]): void;
  copyWithZone(zone: NSZone | null): any;

  rect(): NSRect;
  setRect(rect: NSRect): void;
  name(): NSString;
  setName(name: NSString | string): void;
  options(): MSExportLayerOptions;
  setOptions(options: MSExportLayerOptions): void;
  includedLayerIDs(): NSSet<any>;
  setIncludedLayerIDs(includedLayerIDs: NSSet<any>): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  shouldTrim(): boolean;
  setShouldTrim(shouldTrim: boolean): void;
  backgroundColor(): MSImmutableColor;
  setBackgroundColor(backgroundColor: MSImmutableColor): void;
  rootLayer(): MSImmutableLayer;
  setRootLayer(rootLayer: MSImmutableLayer): void;
  immutableDocument(): MSImmutableDocumentData;
  setImmutableDocument(immutableDocument: MSImmutableDocumentData): void;
  format(): NSString;
  setFormat(format: NSString | string): void;
  saveForWeb(): boolean;
  setSaveForWeb(saveForWeb: boolean): void;
  compression(): CGFloat;
  setCompression(compression: CGFloat): void;
  progressive(): boolean;
  setProgressive(progressive: boolean): void;
  interlaced(): boolean;
  setInterlaced(interlaced: boolean): void;
  includeArtboardBackground(): boolean;
  setIncludeArtboardBackground(includeArtboardBackground: boolean): void;
}

declare class MSFlashController extends NSObject {
  displayFlashMessage(message: NSString | string): any;
  displayWarningMessage_withHelpHandler(message: NSString | string, helpBlock: MSFlashControllerHelpBlock | null): any;
  displayFixedMessage_withHelpHandler(message: NSString | string, helpBlock: MSFlashControllerHelpBlock | null): any;
  removeMessage(message: any): void;
  clearFlash(): void;

  stackView(): NSStackView;
  setStackView(stackView: NSStackView): void;
}

declare class MSFlashViewController extends NSViewController {
  static flashViewControllerWithMessage_closeBlock_helpBlock(message: NSString | string, closeBlock: MSFlashViewControllerBlock | null, helpBlock: MSFlashViewControllerBlock | null): MSFlashViewController;
}

declare class MSFlattenActionValidator extends NSObject {
  static isValidForSelectedLayers(selectedLayers: MSLayerArray): boolean;
  static hasFlattenablePathInSelection(selectedLayers: MSLayerArray): boolean;
}

declare class MSForeignObjectCollector extends NSObject {
  initWithProvider<T extends MSForeignObjectCollector>(provider: any): T;
  buildCollectionWithFilter(filter: MSForeignObjectCollectionFilter | null): NSArray<any>;

  provider(): any;
  setProvider(provider: any): void;
}

declare interface IMSForeignObjectProvider {
  localObjectsForDocument(document: MSDocumentData): NSArray<any>;
  currentDocumentIsLibrary(library: MSAssetLibrary): boolean;
  masterObjectForInstance(instance: MSModelObject): MSShareableObject;
  masterIsOutOfSyncWithInstance(instance: MSModelObject): boolean;

  foreignObjects(): NSArray<any>;
  setForeignObjects(foreignObjects: NSArray<any> | any[]): void;
  currentDocument(): MSDocumentData;
  setCurrentDocument(currentDocument: MSDocumentData): void;
  libraryController(): MSAssetLibraryController;
  setLibraryController(libraryController: MSAssetLibraryController): void;
  objectType(): MSShareableObjectType;
  setObjectType(objectType: MSShareableObjectType): void;
}

declare class MSForeignObjectMenuBuilder extends MSSortableObjectMenuBuilder {
  initWithCollector_delegate<T extends MSForeignObjectMenuBuilder>(collector: MSForeignObjectCollector, delegate: any): T;
  initWithProvider_delegate<T extends MSForeignObjectMenuBuilder>(provider: any, delegate: any): T;
  buildMenuItemsForMenu_withTarget_selector(menu: NSMenu, target: any, selector: string): NSArray<any>;
  buildMenuItemsForMenu_withAction(menu: NSMenu, action: MSAction): NSArray<any>;
  gatherSymbolsForMenus(): NSArray<any>;
  menuItemForLibrary_mainMenu_target_selector(library: MSAssetLibrary | null, mainMenu: boolean, target: any | null, selector: string | null): NSMenuItem;
  static filterForReplacingSymbolInstances(layers: NSArray<any> | any[]): MSForeignObjectCollectionFilter;

  filter(): MSForeignObjectCollectionFilter;
  setFilter(filter: MSForeignObjectCollectionFilter): void;
  requiresLocalSubmenu(): boolean;
  setRequiresLocalSubmenu(requiresLocalSubmenu: boolean): void;
  collector(): MSForeignObjectCollector;
  setCollector(collector: MSForeignObjectCollector): void;
}

declare class MSGestureRecognizer extends NSObject {
  initWithTarget_action<T extends MSGestureRecognizer>(target: any | null, action: string | null): T;
  locationInLayer(layer: MSLayer | null): NSPoint;
  reset(): void;
  mouseDown_clickCount_modifierFlags(location: NSPoint, clickCount: NSUInteger, flags: NSEventModifierFlags): void;
  mouseUp_location(event: NSEvent, location: NSPoint): void;
  mouseDragged_modifierFlags(location: NSPoint, flags: NSEventModifierFlags): void;
  keyDown(event: NSEvent): void;
  keyUp_flags(c: unichar, flags: NSUInteger): void;
  flagsChanged(event: NSEvent): void;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  state(): NSGestureRecognizerState;
  setState(state: NSGestureRecognizerState): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSGestureRecognizerDelegate {
  gestureRecognizer_shouldAttemptToRecognizeAtPoint_modifierFlags(gestureRecognizer: MSGestureRecognizer, point: NSPoint, flags: NSEventModifierFlags): boolean;
}

declare class MSGridConstructor extends NSObject {
  makeGridWithLayers_options(layers: MSLayerArray, options: MSMakeGridOptions): void;
}

declare type MSMakeGridOptions = {
  numberOfRows: NSUInteger
  numberOfColumns: NSUInteger
  horizontalPadding: NSInteger
  verticalPadding: NSInteger
  hasHorizontalPadding: boolean
  hasVerticalPadding: boolean
  skipFillingHoles: boolean
}

declare interface IMSHUDClient {
  hudSetMonitor(monitor: MSRenderMonitor): void;

  hudClientName(): NSString;
  setHudClientName(hudClientName: NSString | string): void;
  hudDocumentData(): MSDocumentData;
  setHudDocumentData(hudDocumentData: MSDocumentData): void;
}

declare interface IMSHUDOwner {
  hud(): MSHUDWindowController;
  setHud(hud: MSHUDWindowController): void;
}

declare class MSHUDViewController extends NSViewController {}

declare class MSHUDWindowController extends NSWindowController implements INSWindowDelegate {
  static makeHUD(): MSHUDWindowController;
  toggle(): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;

  isVisible(): boolean;
  setIsVisible(isVisible: boolean): void;
}

declare class MSHandleDrawing extends NSObject {
  static drawRectAtPoint_ofType(aPoint: NSPoint, type: MSDotRectType): void;
  static drawBezier(bezier: NSBezierPath): void;
  static drawAtPoint_ofType_state(aPoint: NSPoint, type: MSHandleSize, state: MSHandleState): void;
  static drawGradientHandleAtPoint_color_selected(aPoint: NSPoint, aColor: NSColor | null, isSelected: boolean): void;
  static drawShadowForHover_inBlock(isHovering: boolean, block: BCVoidBlock): void;
  static drawWithTransformStruct_aroundPoint_usingBlock(tStruct: CHTransformStruct, point: NSPoint, block: Block): void;
  static zoomValue(): CGFloat;
  static setZoomValue(zoomValue: CGFloat): void;
  static resetZoomValue(): void;
}

declare enum MSHandleSize {
  MSHandleSizeSmall = 0,
  MSHandleSizeRegular = 1,
  MSHandleSizeHuge = 2,
}

declare enum MSHandleState {
  MSHandleStateNormal = 0,
  MSHandleStateHighlighted = 1 << 0,
  MSHandleStateHovering = 1 << 1,
  MSHandleStateSelected = 1 << 2,
  MSHandleStateRelatedToSelection = 1 << 4,
}

declare enum MSDotRectType {
  MSDotRectGradient,
  MSDotRectLocked,
}

declare enum MSVectorComponent {
  MSVectorComponentPoint,
  MSVectorComponentHandle1,
  MSVectorComponentHandle2,
  MSVectorComponentSegment = 5,
}

declare class MSHistory extends NSObject {
  initWithInitialMoment<T extends MSHistory>(initMoment: MSMoment): T;
  addMoment(newMoment: MSMoment): MSHistoryUpdate;
  addMomentWithTitle_documentData(title: NSString | string, documentData: MSImmutableDocumentData): MSHistoryUpdate;
  addMomentWithTitle_documentData_adaptability(newTitle: NSString | string, documentData: MSImmutableDocumentData, adaptability: MSMomentAdaptability): MSHistoryUpdate;
  revertToPreviousMoment(): boolean;
  progressToNextMoment(): boolean;
  commitCurrentMoment(): void;

  currentMoment(): MSMoment;
  setCurrentMoment(currentMoment: MSMoment): void;
  previousMoment(): MSMoment;
  setPreviousMoment(previousMoment: MSMoment): void;
  nextMoment(): MSMoment;
  setNextMoment(nextMoment: MSMoment): void;
  canRevertToPreviousMoment(): boolean;
  setCanRevertToPreviousMoment(canRevertToPreviousMoment: boolean): void;
  canProgressToNextMoment(): boolean;
  setCanProgressToNextMoment(canProgressToNextMoment: boolean): void;
  allowsCoalescingOfMomentsCloseInTime(): boolean;
  setAllowsCoalescingOfMomentsCloseInTime(allowsCoalescingOfMomentsCloseInTime: boolean): void;
  numberOfMoments(): NSUInteger;
  setNumberOfMoments(numberOfMoments: NSUInteger): void;
}

declare enum MSHistoryUpdate {
  MSHistoryUpdateNoChange = 0,
  MSHistoryUpdateAddedMoment,
  MSHistoryUpdateCoalescedMoment,
  MSHistoryUpdateAmendedMoment,
}

declare interface IMSHoverableItem {
  drawHoverWithZoom_color_cache(zoom: CGFloat, color: NSColor, cache: BCCache): void;
  canBeHoveredOnPage(page: MSPage): boolean;
  refreshOverlay(): void;

  hoveredLayer(): MSLayer;
  setHoveredLayer(hoveredLayer: MSLayer): void;
}

declare class MSImageLayerImporter extends NSObject {
  static layerWithContentsOfPath_mode(fileURL: NSURL, importPreference: MSPasteboardImagePreferMode): MSLayer;
}

declare enum MSPasteboardImagePreferMode {
  MSPasteboardImagePreferVectors,
  MSPasteboardImagePreferImages,
}

declare class MSImageSizeReducer extends NSObject {
  static reduceImageSizeOfLayers_windowForSheet_completionBlock(layers: NSArray<any> | any[], windowForSheet: NSWindow | null, completionBlock: BCVoidBlock | null): void;
  static largestSizeForImagesMapTableFromOwners(layers: NSArray<any> | any[]): NSMapTable<any, any>;
}

declare class MSImmutableColor extends _MSImmutableColor implements IMSColor {
  static colorWithNSColor(color: NSColor): MSImmutableColor;
  static colorWithRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): MSImmutableColor;
  static colorWithWhite_alpha(white: CGFloat, alpha: CGFloat): MSImmutableColor;
  static colorWithIntegerRed_green_blue(red: NSInteger, green: NSInteger, blue: NSInteger): MSImmutableColor;
  static colorWithIntegerRed_green_blue_alpha(red: NSInteger, green: NSInteger, blue: NSInteger, alpha: NSInteger): MSImmutableColor;
  static whiteColor(): MSImmutableColor;
  static blackColor(): MSImmutableColor;
  static availableRGBColorSpaces(): NSArray<any>;
  NSColorWithColorSpace(colorSpace: NSColorSpace): NSColor;
  newCGColorWithColorSpace(colorSpace: CGColorSpaceRef): CGColorRef;
  static getRed_green_blue_fromHexValue(red: CGFloat, green: CGFloat, blue: CGFloat, hexValue: NSString | string): void;
  static hexValueForRed_green_blue(red: CGFloat, green: CGFloat, blue: CGFloat): NSString;
  hexValue(): NSString;
  isWhite(): boolean;
  isBlack(): boolean;
  isGrayscale(): boolean;
  fuzzyIsEqual(other: MSImmutableColor): boolean;
  fuzzyIsEqual_precision(other: MSImmutableColor, precision: CGFloat): boolean;
  fuzzyIsEqualExcludingAlpha(other: MSImmutableColor): boolean;
  fuzzyIsEqualExcludingAlpha_precision(other: MSImmutableColor, precision: CGFloat): boolean;
  colorWithAlphaComponent(alpha: CGFloat): MSImmutableColor;
  stringValueWithAlpha(includeAlpha: boolean): NSString;
  stringValueWithAlpha_alphaMultiplication(includeAlpha: boolean, alphaMultiplication: CGFloat): NSString;
  static namedColor(name: NSString | string): MSImmutableColor;
  static colorWithSVGString(string: NSString | string): MSImmutableColor;
  svgRepresentation(): NSString;
  NSColorForContext(context: MSRenderingContext): NSColor;

  manifestComponents(): NSArray<any>;
  setManifestComponents(manifestComponents: NSArray<any> | any[]): void;
  opaque(): boolean;
  setOpaque(opaque: boolean): void;
}

declare class MSImmutableLayerGroup extends _MSImmutableLayerGroup implements IMSLayerGroup {
  influenceRectClipsToBounds(): boolean;
  includeChildrenInCalculatingStyleSize(): boolean;
  pathCombiningChildrenByApplyingBlock(block: Block): MSPath;
  constraintForLayer(layer: MSImmutableLayer): BCConstraint;
  addChildrenToElement_exporter(parentElement: NSXMLElement, exporter: SketchSVGExporter): void;

  mirrorExportScale(): CGFloat;
  setMirrorExportScale(mirrorExportScale: CGFloat): void;
  mirrorViewPortSize(): CGSize;
  setMirrorViewPortSize(mirrorViewPortSize: CGSize): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare interface IMSImporter extends NSObject {
  prepareToImportFromData(data: NSData): NSUInteger;
  prepareToImportFromURL(url: NSURL): NSUInteger;
  importIntoPage_name_progress(page: MSPage, name: NSString | string, progress: BCVoidBlock): void;
  finishImporting(): void;
  firstPhaseSubtitle(): NSString;
  secondPhaseSubtitleForValue_maximum(value: NSInteger, maximum: NSInteger): NSString;
  shouldExpandPages(): boolean;
  shouldCollapseSinglePage(): boolean;
  importAsLayer(): MSLayer;
}

declare class MSInspectorNumberFormatter extends NSNumberFormatter {
  static standardFloatFormatter(): MSInspectorNumberFormatter;
  static standardIntegerFormatter(): MSInspectorNumberFormatter;
  static standardPercentFormatter(): MSInspectorNumberFormatter;
  static standardPercentFormatterWithoutPercentSign(): MSInspectorNumberFormatter;
}

declare interface IMSInspectorSection {
  views(): NSArray<any>;
  wantsSeparatorAfterViews(): boolean;
  separatorInsets(): NSEdgeInsets;
}

declare class MSInspectorValueAdaptor extends NSObject {
  transformedValuesFromAdaptorValue_contexts_error(adaptorValue: AdaptorValueType, contextsOut: NSPointerArray, error: NSError): NSArray<any>;
  transformAdaptorValue_forModel_context_error(adaptorValue: AdaptorValueType, model: ModelType, context: any, error: NSError): ModelValueType;
  initWithModelsController_valueGetter_valueSetter_modelKeyPathsToWatch<T extends MSInspectorValueAdaptor>(modelsController: NSArrayController, valueGetter: Block, valueSetter: Block, modelKeyPathsToWatch: NSArray<any> | any[]): T;
  initWithModelsController_valueGetter_valueSetter<T extends MSInspectorValueAdaptor>(modelsController: NSArrayController, valueGetter: Block, valueSetter: Block): T;
  initWithModelsController_modelKeyPath<T extends MSInspectorValueAdaptor>(modelsController: NSArrayController, keyPath: NSString | string): T;
  valuesDidChange(): void;
  addChangeObserver(observer: any): void;
  removeChangeObserver(observer: any): void;

  modelsController(): NSArrayController;
  setModelsController(modelsController: NSArrayController): void;
  value(): AdaptorValueType;
  setValue(value: AdaptorValueType): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  showsDefaultAlerts(): boolean;
  setShowsDefaultAlerts(showsDefaultAlerts: boolean): void;
  view(): NSView;
  setView(view: NSView): void;
}

declare type ModelType = any

declare type ModelValueType = any

declare type AdaptorValueType = any

declare enum MSInspectorValueAdaptorErrorCode {
  MSInspectorValueAdaptorErrorInvalidInput = 1,
}

declare interface IMSInspectorValueAdaptorChangeObserver {
  inspectorValueAdaptorDidChangeValue(adaptor: MSInspectorValueAdaptor): void;
}

declare interface IMSInspectorValueAdaptorDelegate {
  inspectorValueAdaptor_validateValue_forModel_context(adaptor: MSInspectorValueAdaptor, value: ModelValueType, model: any, context: any): boolean;
  inspectorValueAdaptorDidChangeValue(adaptor: MSInspectorValueAdaptor): void;
  inspectorValueAdaptor_didEncounterError(adaptor: MSInspectorValueAdaptor, error: NSError): void;
}

declare class MSLayer extends _MSLayer implements IMSLayer, INSCopying, IMSRectDelegate {
  static alignLayers_withMode_toKey_pixelFit(layerArray: MSLayerArray, mode: MSLayerAlignmentMode, key: NSString | string, shouldPixelFit: boolean): void;
  hudDescription(): NSString;
  layerDidResizeFromInspector(axis: BCAxis): void;
  boundsOfParentLayer(): NSRect;
  minimumAdjustedRectForValue_axis_anchor(value: CGFloat, axis: BCAxis, anchor: BCCorner): CGRect;
  layersByConvertingToOutlines(): NSArray<any>;
  canConvertToOutlines(): boolean;
  replaceWithInstanceOfSymbol(symbol: MSSymbolMaster): MSSymbolInstance;
  snapItemClass(): any;
  canSnap_toLayer(snapType: MSSnapType, otherLayer: MSLayer): boolean;
  supportsInnerOuterBorders(): boolean;
  supportsMultipleShadows(): boolean;
  changeColor(sender: any): void;
  displayName(): NSString;
  parentForInsertingLayers(): MSLayerGroup;
  CSSAttributeString(): NSString;
  CSSAttributes(): NSArray<any>;
  resetConstraints(): void;
  replaceFonts(fontReplacements: NSDictionary<any, any> | {[key: string]: any}): void;
  layoutDirection(): NSUserInterfaceLayoutDirection;
  applyOverrides_document(overrides: NSArray<any> | any[], document: MSImmutableDocumentData): void;
  applyOverride_document(overrideValue: MSImmutableOverrideValue, document: MSImmutableDocumentData): void;
  static userVisibleRotationForRotation(r: CGFloat): CGFloat;
  applyRotation_explicitRotationCenter(rotation: CGFloat, rotationCenter: NSValue | null): void;
  applyUserVisibleRotation_explicitRotationCenter(userVisibleRotation: CGFloat, rotationCenter: NSValue | null): void;
  resetSharedStyle(): void;
  updateSharedStyleToMatchSelf(): void;
  static layerWithPath(path: MSPath): MSStyledLayer;
  initWithFrame<T extends MSLayer>(frame: NSRect): T;
  static makeLayerNamesUnique_withOptions(layers: NSArray<any> | any[], options: MSLayerRenameOptions): void;
  makeNameUniqueWithOptions(options: MSLayerRenameOptions): void;
  makeNameUniqueInRoot_withOptions(root: any, options: MSLayerRenameOptions): void;
  rootForNameUniquing(): any;
  frameForTransforms(): NSRect;
  absoluteRect(): MSAbsoluteRect;
  setWidthRespectingProportions(newWidth: CGFloat): void;
  setHeightRespectingProportions(newHeight: CGFloat): void;
  calculateProportions(): void;
  makeOriginIntegral(): void;
  makeRectIntegral(): void;
  isRectIntegral(): boolean;
  moveBySuggestedOffset(offset: CGVector): void;
  selectionCornerMaskWithZoomValue(zoomValue: CGFloat): NSUInteger;
  refreshOverlay(): void;
  refreshOverlayWithAbsoluteMargins(size: NSSize): void;
  refreshOverlayInRect(rect: NSRect): void;
  absoluteInfluenceRect(): NSRect;
  alignmentRectInCoordinateSpace_options(coordinateSpace: any, options: MSAlignmentRectOptions): NSRect;
  boundsRectForAlignment(): NSRect;
  select_byExtendingSelection(flag: boolean, expand: boolean): void;
  select_byExtendingSelection_showSelection(shouldSelect: boolean, expand: boolean, showSelection: boolean): void;
  containsSelectedItemIncludingSelf(includeSelf: boolean): boolean;
  isSelectableOnCanvasWithOptions(options: MSLayerSelectionOptions): boolean;
  isOpenForSelectionWithOptions(options: MSLayerSelectionOptions): boolean;
  limitsSelectionToBounds(): boolean;
  selectableLayersWithOptions(options: MSLayerSelectionOptions): NSArray<any>;
  parentPage(): MSPage;
  parentShape(): MSShapeGroup;
  parentArtboard(): MSArtboardGroup;
  parentSymbol(): MSSymbolMaster;
  parentRoot(): MSLayerGroup;
  removeFromParent(): void;
  ancestorsAndSelf(): NSArray<any>;
  ancestors(): NSArray<any>;
  canContainLayer(layer: MSLayer): boolean;
  selectionHitTest_options_zoomValue_resultIndex(point: NSPoint, options: MSLayerSelectionOptions, zoomValue: CGFloat, resultIndex: NSUInteger): MSLayer;
  containsPoint_options_zoomValue(point: NSPoint, options: MSLayerSelectionOptions, zoomValue: CGFloat): boolean;
  hitTestRect_options(selectionRect: NSRect, options: MSLayerSelectionOptions): boolean;
  isTooSmallForPreciseHitTestingAtZoomValue(zoomValue: CGFloat): boolean;
  shouldHitTestOnFill(path: MSPath): boolean;
  adjustmentHandleAtPoint_zoomScale_resizing(point: NSPoint, zoom: CGFloat, resizing: boolean): BCCorner;
  transform(): NSAffineTransform;
  ancestorsAndSelfTransforms(): NSArray<any>;
  concatAncestorsAndSelfTransforms(): void;
  canBeTransformed(): boolean;
  canRotate(): boolean;
  canScale(): boolean;
  hasEnabledBackgroundBlur(): boolean;
  moveInLayerTreeInBlock(block: BCVoidBlock): void;
  multiplyBy(amount: CGFloat): void;
  layerDidEndResize(): void;
  layerDidResizeFromRect_corner(rect: NSRect, corner: BCCorner): void;
  calculateMinimumSize(): NSSize;
  allSymbolInstancesInChildren(): NSSet<any>;
  isLine(): boolean;
  resetFlow(): void;
  isPartOfClippingMask(): boolean;
  hasClippingMask(): boolean;
  candidatesForMasking(): NSArray<any>;
  closestClippingLayer(): MSShapeGroup;
  followMaskChainForLayerAtIndex_usingBlock(index: NSUInteger, block: Block): void;
  addChangeObserver(observer: any): void;
  removeChangeObserver(observer: any): void;
  enumeratorWithOptions(options: MSLayerEnumeratorFlags): MSLayerEnumerator<any>;
  configureBackgroundOfRequest(request: MSExportRequest): void;
  handleDoubleClick(): boolean;
  handlerClass(): any;
  shouldRefreshOverlayForFlows(): boolean;
  inspectorSections(): NSArray<any>;
  writeBitmapImageToFile(path: NSString | string): void;
  shouldDrawSelection(): boolean;
  shouldDrawSelectionStroke(): boolean;
  cornerRectType(): MSDotRectType;
  shouldFlattenAfterRotate(): boolean;
  copyWithZone(zone: NSZone | null): any;
  rect_didChangeFromRect(rect: MSRect, oldRect: NSRect): void;

  canChangeBooleanOperation(): boolean;
  setCanChangeBooleanOperation(canChangeBooleanOperation: boolean): void;
  shareableObjectType(): MSShareableObjectType;
  setShareableObjectType(shareableObjectType: MSShareableObjectType): void;
  sharedMaster(): MSShareableObject;
  setSharedMaster(sharedMaster: MSShareableObject): void;
  hasFixedEdges(): boolean;
  setHasFixedEdges(hasFixedEdges: boolean): void;
  dataSupplierIdentifier(): NSString;
  setDataSupplierIdentifier(dataSupplierIdentifier: NSString | string): void;
  userVisibleRotation(): CGFloat;
  setUserVisibleRotation(userVisibleRotation: CGFloat): void;
  isSharedStyleOutOfSync(): boolean;
  setIsSharedStyleOutOfSync(isSharedStyleOutOfSync: boolean): void;
  sharedStyle(): MSSharedStyle;
  setSharedStyle(sharedStyle: MSSharedStyle): void;
  constrainProportions(): boolean;
  setConstrainProportions(constrainProportions: boolean): void;
  proportions(): CGFloat;
  setProportions(proportions: CGFloat): void;
  rect(): CGRect;
  setRect(rect: CGRect): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  origin(): CGPoint;
  setOrigin(origin: CGPoint): void;
  center(): CGPoint;
  setCenter(center: CGPoint): void;
  isExpanded(): boolean;
  setIsExpanded(isExpanded: boolean): void;
  absolutePosition(): NSPoint;
  setAbsolutePosition(absolutePosition: NSPoint): void;
  isSelected(): boolean;
  setIsSelected(isSelected: boolean): void;
  ancestry(): MSImmutableLayerAncestry;
  setAncestry(ancestry: MSImmutableLayerAncestry): void;
  unitCoordinateSpace(): any;
  setUnitCoordinateSpace(unitCoordinateSpace: any): void;
  rulerCoordinateSpace(): any;
  setRulerCoordinateSpace(rulerCoordinateSpace: any): void;
  hitTestAsPath(): boolean;
  setHitTestAsPath(hitTestAsPath: boolean): void;
  usedStyle(): MSStyle;
  setUsedStyle(usedStyle: MSStyle): void;
  transformStruct(): CHTransformStruct;
  setTransformStruct(transformStruct: CHTransformStruct): void;
}

declare enum MSLayerAlignmentMode {
  MSLayerAlignToLayers,
  MSLayerAlignToParentArtboard,
}

declare type MSLayerListItem = NSObject

declare class MSStyledLayer extends _MSStyledLayer implements IMSStyledLayer {
  prepareAsMask(): void;
  static layerWithImageFromPasteboard(pasteboard: NSPasteboard): MSStyledLayer;
  static layerWithImageFromFileURL(fileURL: NSURL): MSStyledLayer;
  copyStyleToPasteboard(): NSPasteboard;
  copyStyleToPasteboard(pasteboard: NSPasteboard): void;
  writeStyleToPasteboard(pasteboard: NSPasteboard): void;
  static pasteStyleFromPasteboardOnLayers_document(styledLayers: NSArray<any> | any[], document: MSDocumentData): void;
  static pasteStyleFromPasteboard_onLayers_document(pasteboard: NSPasteboard, styledLayers: NSArray<any> | any[], document: MSDocumentData): void;
  static pasteStyleDict_onLayers_document(style: NSDictionary<any, any> | {[key: string]: any}, styledLayers: NSArray<any> | any[], document: MSDocumentData): void;
  static supportedPasteboardTypesForStyleCopying(): NSArray<any>;
  layerStyleDidChange(): void;
  sharedObject(): MSSharedObject;
  setStyleByPreservingSharedObjectReference(style: MSStyle): void;
  hasMarkers(): boolean;
  applyPropertiesToBezier(bezier: NSBezierPath): void;
}

declare class MSLayerGroup extends _MSLayerGroup implements IMSLayerGroup {
  prepareAsMaskContainer(): void;
  enumerateLayersAvoidingFaultingWithOptions_passingTest_usingBlock(options: MSLayerEnumeratorFlags, predicate: MSLayerIteratorTestBlock, enumeratorBlock: MSLayerIteratorBlock): void;
  ungroup(): NSArray<any>;
  ungroupSingleChildDescendentGroups(): void;
  applyTransformsToLayers(layers: NSArray<any> | any[]): void;
  static groupWithLayer(layer: MSLayer): MSLayerGroup;
  static groupWithLayers(layers: MSLayerArray): MSLayerGroup;
  disableAutomaticScalingInBlock(block: BCVoidBlock): void;
  static groupBoundsForContainer(containter: any): NSRect;
  static groupBoundsShouldBeIntegral(): boolean;
  deselectLayerAndParent(): void;
  resizeToFitChildrenWithOption(resizeOption: MSLayerGroupResizeOption): boolean;
  insertLayer_afterLayerOrAtEnd(layer: MSLayer, after: MSLayer | null): void;
  resizeChildrenWithOldSize(oldSize: NSSize): void;
  shouldStripShadowsAndInnerShadow(): boolean;

  isAutomaticScalingEnabled(): boolean;
  setIsAutomaticScalingEnabled(isAutomaticScalingEnabled: boolean): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare class MSShapePathLayer extends _MSShapePathLayer implements IMSPathLayer {
  static layerWithPath(path: MSPath): MSShapePathLayer;
  static shapeWithRect(rect: NSRect): MSRectangleShape;
  resetPoints(): void;
  resetPointsBasedOnUserInteraction(): void;
  editable(): boolean;
  simplify(): void;
  reversePath(): void;
  adjustFrameAfterEditIntegral(makeIntegral: boolean): void;
  didEdit(): void;
  static performBatchEdits(edits: Block): void;
  isNearlyEmpty(): boolean;
  pointCenteredAfterPointIndex(pointIndex: NSUInteger): NSPoint;
  indexOfSegmentAtPoint_tolerance(point: NSPoint, tolerance: NSSize): NSUInteger;
  flatten(): void;
  flattenedLayer(): MSShapePathLayer;
  isLine(): boolean;
  pointsAroundIndex(index: NSUInteger): NSArray<any>;
  isRectangle(): boolean;
  isPolygon(): boolean;
  adjustGeometryToBoundsRect(targetBounds: NSRect): void;
  insertionCursor(): NSCursor;

  isEditing(): boolean;
  setIsEditing(isEditing: boolean): void;
  hasRoundedCorners(): boolean;
  setHasRoundedCorners(hasRoundedCorners: boolean): void;
  numberOfCurvePoints(): NSUInteger;
  setNumberOfCurvePoints(numberOfCurvePoints: NSUInteger): void;
  canFlatten(): boolean;
  setCanFlatten(canFlatten: boolean): void;
  pathInFrame(): MSPath;
  setPathInFrame(pathInFrame: MSPath): void;
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
}

declare class MSSliceLayer extends _MSSliceLayer implements IMSLayerWithMutableBackgroundColor, IMSColorConvertible {
  static sliceLayerFromLayer(layer: MSLayer): MSSliceLayer;
  convertColorsUsing(converter: any): void;

  backgroundColor(): MSColor;
  setBackgroundColor(backgroundColor: MSColor): void;
}

declare class MSHotspotLayer extends _MSHotspotLayer {
  static hotspotLayerFromLayer(layer: MSLayer): MSHotspotLayer;
}

declare class MSShapeGroup extends _MSShapeGroup implements IMSShapeGroup, IMSPathLayer {
  canProbablyFlatten(): boolean;
  canFlatten(): boolean;
  canCutSegments(): boolean;
  possiblyFixRectangleBorderBeforeCut(): void;
  cutBezierSegmentAtIndex(index: NSUInteger): void;
  changeInnerOuterBordersIfHasOpenPaths(): void;
  static layerWithPath(path: MSPath): MSShapeGroup;
  isLine(): boolean;
  isHorizontalLine(): boolean;
  isVerticalLine(): boolean;
  simplify(): void;
  flatten(): MSStyledLayer;
  moveTransformsToChildren(): void;
  setEdited(flag: boolean): void;
  makeLinePixelAligned(): void;
  adjustStyleToFitSubPaths(): void;

  pathInFrame(): MSPath;
  setPathInFrame(pathInFrame: MSPath): void;
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  isPartOfClippingMask(): boolean;
  setIsPartOfClippingMask(isPartOfClippingMask: boolean): void;
}

declare class MSSymbolMaster extends _MSSymbolMaster implements IBCSortable {
  static convertArtboardToSymbol(artboard: MSArtboardGroup): MSSymbolMaster;
  static convertSymbolToArtboard(symbol: MSSymbolMaster): MSArtboardGroup;
  newSymbolInstance(): MSSymbolInstance;
  copyWithIDMapping(idMap: NSMutableDictionary<any, any> | {[key: string]: any}): MSSymbolMaster;
  canInsertInstanceIntoGroupWithoutInfiniteRecursion(group: MSLayerGroup): boolean;
  hasInstances(): boolean;
  ensureSymbolIDUniqueInDocument(doc: MSDocumentData): boolean;
  detachAllInstances(): void;
  removeFromParentAndDetachAllInstances(): void;
  isSafeToDelete(): boolean;
  ancestorIDsForLayerNamed(layerName: NSString | string): NSArray<any>;

  availableOverrides(): NSArray<any>;
  setAvailableOverrides(availableOverrides: NSArray<any> | any[]): void;
  changeIdentifier(): NSInteger;
  setChangeIdentifier(changeIdentifier: NSInteger): void;
  isDirty(): boolean;
  setIsDirty(isDirty: boolean): void;
  allInstances(): NSArray<any>;
  setAllInstances(allInstances: NSArray<any> | any[]): void;
  allInfluencedInstances(): NSArray<any>;
  setAllInfluencedInstances(allInfluencedInstances: NSArray<any> | any[]): void;
  nestedSymbols(): NSSet<any>;
  setNestedSymbols(nestedSymbols: NSSet<any>): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare class MSImmutableLayer extends _MSImmutableLayer implements IMSLayer, IMSLayerTraits {
  absoluteRectForAncestorGroups(ancestors: NSArray<any> | any[]): NSRect;
  absoluteInfluenceRectForAncestorGroups_document(ancestors: NSArray<any> | any[], doc: MSImmutableDocumentData): NSRect;
  influenceRectForFrameInDocument(doc: MSImmutableDocumentData): NSRect;
  influenceRectForBoundsInDocument(doc: MSImmutableDocumentData): NSRect;
  influenceRectForFrameInDocument_visitedSymbols(doc: MSImmutableDocumentData | null, visitedSymbols: NSSet<any> | null): NSRect;
  influenceRectForBoundsInDocument_visitedSymbols(doc: MSImmutableDocumentData | null, visitedSymbols: NSSet<any> | null): NSRect;
  calculateInfluenceRectForBoundsInDocument_visitedSymbols(doc: MSImmutableDocumentData | null, visitedSymbols: NSSet<any> | null): NSRect;
  influenceRectForBoundsOrCalculateInBlock(creatorBlock: Block): NSRect;
  absoluteOverlayInfluenceRectForAncestorGroups(ancestors: NSArray<any> | any[]): NSRect;
  bezierBoundsInAbsoluteCoordinatesWithAncestors(ancestors: NSArray<any> | any[]): MSPath;
  transformRectToParentCoordinates(rect: NSRect): NSRect;
  canSkipAdvancedClipForStrokes(): boolean;
  descendantsToLayerWithID(objectID: NSString | string): NSArray<any>;
  defaultValueForOverridePoint_relatedOverrides_document(point: MSOverridePoint, relatedOverrides: NSArray<any> | any[], document: MSImmutableDocumentData): any;
  canOverridePoint(point: MSOverridePoint): boolean;
  overridePointsWithParent_overrides_document(parent: MSOverridePoint | null, overrides: NSArray<any> | any[], document: MSImmutableDocumentData): NSArray<any>;
  enumeratorWithOptions(options: MSLayerEnumeratorFlags): MSLayerEnumerator<any>;
  renderBitmapEffects(image: CIImage): CIImage;
  pathForRenderingInBoundsInDocument_cache(doc: MSImmutableDocumentData, cache: BCCache): MSPath;
  shouldRenderInTransparencyLayer(): boolean;
  transparencyLayerUseRectCondition(): MSTransparencyRectangleOption;
  shouldSkipDrawingInContext(context: MSRenderingContext): boolean;
  configureBackgroundOfRequest(request: MSExportRequest): void;
  requiresPathDefinition(exporter: SketchSVGExporter): boolean;
  writeSVGToElement_withExporter(element: NSXMLElement, exporter: SketchSVGExporter): void;
  addTransformAttributes_exporter(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): void;
  relativeRectWithExporter(exporter: SketchSVGExporter): NSRect;
  addPathDefinitionToDocument(exporter: SketchSVGExporter): void;
  simplifyPathElement_exporter_inset(element: NSXMLElement, exporter: SketchSVGExporter, inset: CGFloat): void;
  addGroupContentToElement_attributes_exporter(parentElement: NSXMLElement, attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): NSXMLElement;
  addDefaultFillAttributes_exporter(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): void;
  shouldIncludeInSVGExport(exporter: SketchSVGExporter): boolean;
  addSVGAttributes_exporter(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): void;
  traits(): MSTraits;

  center(): NSPoint;
  setCenter(center: NSPoint): void;
  transform(): NSAffineTransform;
  setTransform(transform: NSAffineTransform): void;
  frameForTransforms(): NSRect;
  setFrameForTransforms(frameForTransforms: NSRect): void;
  hasEnabledBackgroundBlur(): boolean;
  setHasEnabledBackgroundBlur(hasEnabledBackgroundBlur: boolean): void;
  traits(): MSTraits;
  setTraits(traits: MSTraits): void;
  isLayerExportable(): boolean;
  setIsLayerExportable(isLayerExportable: boolean): void;
  shouldBeIncludedInParentPath(): boolean;
  setShouldBeIncludedInParentPath(shouldBeIncludedInParentPath: boolean): void;
  influenceRectForFrame(): NSRect;
  setInfluenceRectForFrame(influenceRectForFrame: NSRect): void;
  influenceRectEdgePaddingsThatCascadeToContainedLayers(): BCEdgePaddings;
  setInfluenceRectEdgePaddingsThatCascadeToContainedLayers(influenceRectEdgePaddingsThatCascadeToContainedLayers: BCEdgePaddings): void;
  influenceRectEdgePaddingsThatDoNotCascade(): BCEdgePaddings;
  setInfluenceRectEdgePaddingsThatDoNotCascade(influenceRectEdgePaddingsThatDoNotCascade: BCEdgePaddings): void;
  hasClippingMask(): boolean;
  setHasClippingMask(hasClippingMask: boolean): void;
  canBreakMaskChain(): boolean;
  setCanBreakMaskChain(canBreakMaskChain: boolean): void;
  fontNames(): NSSet<any>;
  setFontNames(fontNames: NSSet<any>): void;
  unavailableFontNames(): NSSet<any>;
  setUnavailableFontNames(unavailableFontNames: NSSet<any>): void;
  dataSupplierIdentifier(): NSString;
  setDataSupplierIdentifier(dataSupplierIdentifier: NSString | string): void;
}

declare class MSImmutableStyledLayer extends _MSImmutableStyledLayer implements IMSStyledLayer {
  bezierPathForStartDecorationOnPath(bezier: MSPath): MSPath;
  bezierPathForEndDecorationOnPath(bezier: MSPath): MSPath;
  static cacheDecorations(): void;
  hasMarkers(): boolean;
  applyPropertiesToBezier(bezier: NSBezierPath): void;
  prepareDrawingInContext_inBlock(context: MSRenderingContext, block: BCVoidBlock): void;
  fillPathWithDecorations(pathInOut: MSPath): MSPath;
  fillStyleForDecoratedPath(): MSImmutableStyle;
  strokeStyleForDecoratedPath(): MSImmutableStyle;
  pathWithExporter_border(exporter: SketchSVGExporter, border: MSImmutableStyleBorder | null): MSPath;

  decoratedPathInBounds(): MSPath;
  setDecoratedPathInBounds(decoratedPathInBounds: MSPath): void;
  allowsBlur(): boolean;
  setAllowsBlur(allowsBlur: boolean): void;
  shouldRasterize(): boolean;
  setShouldRasterize(shouldRasterize: boolean): void;
}

declare class MSImmutableShapeGroup extends _MSImmutableShapeGroup implements IMSShapeGroup, IMSImmutablePathLayer {
  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  isPartOfClippingMask(): boolean;
  setIsPartOfClippingMask(isPartOfClippingMask: boolean): void;
  decoratedPathInBounds(): MSPath;
  setDecoratedPathInBounds(decoratedPathInBounds: MSPath): void;
  style(): MSImmutableStyle;
  setStyle(style: MSImmutableStyle): void;
}

declare class MSImmutableShapePathLayer extends _MSImmutableShapePathLayer implements IMSImmutablePathLayer {
  migratePropertiesFromShapeGroup(shape: MSImmutableShapeGroup): void;
  migrateByTakingStyleFrom(shape: MSImmutableShapeGroup): void;

  isEditing(): boolean;
  setIsEditing(isEditing: boolean): void;
  usedStyle(): MSImmutableStyle;
  setUsedStyle(usedStyle: MSImmutableStyle): void;
  isPolygon(): boolean;
  setIsPolygon(isPolygon: boolean): void;
  isPolyline(): boolean;
  setIsPolyline(isPolyline: boolean): void;
  isRectangle(): boolean;
  setIsRectangle(isRectangle: boolean): void;
  numberOfCurvePoints(): NSUInteger;
  setNumberOfCurvePoints(numberOfCurvePoints: NSUInteger): void;
  decoratedPathInBounds(): MSPath;
  setDecoratedPathInBounds(decoratedPathInBounds: MSPath): void;
  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  style(): MSImmutableStyle;
  setStyle(style: MSImmutableStyle): void;
}

declare class MSImmutableSliceLayer extends _MSImmutableSliceLayer implements IMSLayerWithBackgroundColor {
  immutableBackgroundColor(): MSImmutableColor;

  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
}

declare class MSImmutableHotspotLayer extends _MSImmutableHotspotLayer {}

declare interface IMSLayerPreviewability {
  selectedPreviewTemplateImage(): NSImage;
  unselectedPreviewTemplateImage(): NSImage;
  contextualMenuPreviewTemplateImage(): NSImage;

  badgeType(): MSLayerPreviewBadgeType;
  setBadgeType(badgeType: MSLayerPreviewBadgeType): void;
}

declare interface IMSImmutableLayerPreviewability {
  previewImagesRequireRefreshWithDocumentData_forOwner(documentData: MSImmutableDocumentData, owner: any): boolean;
  refreshPreviewImagesWithDocumentData_forOwner(documentData: MSImmutableDocumentData, owner: any): void;
}

declare class MSLayerArray extends NSObject implements IMSLayerContainment, INSFastEnumeration {
  addStylePartsOfType(type: MSStylePartType): NSArray<any>;
  removeUnusedStylePartsOfType(type: MSStylePartType): void;
  copyByGivingNewObjectIDs(): MSLayerArray;
  static arrayWithLayer(layer: MSLayer | null): MSLayerArray;
  static arrayWithLayers(layers: NSArray<any> | any[]): MSLayerArray;
  static emptyArray(): MSLayerArray;
  initWithLayers<T extends MSLayerArray>(layers: NSArray<any> | any[]): T;
  parentOfFirstLayer(): MSLayerGroup;
  uniqueParents(): MSLayerArray;
  effectivePage(): MSPage;
  effectiveArtboard(): MSArtboardGroup;
  layerToInsertAfter(): MSLayer;
  commonArtboard(): MSArtboardGroup;
  map(block: Block): MSLayerArray;
  filter(block: MSLayerFilterBlock): MSLayerArray;
  sortedArrayByUsingComparator(comparator: Block): MSLayerArray;
  containedLayers(): NSArray<any>;
  containedLayersCount(): NSUInteger;
  firstLayer(): any;
  lastLayer(): any;
  containsNoOrOneLayers(): boolean;
  containsLayers(): boolean;
  containsOneLayer(): boolean;
  containsMultipleLayers(): boolean;
  layerAtIndex(i: NSUInteger): any;
  indexOfLayer(aLayer: any): NSUInteger;
  enumerateLayers(block: MSLayerSimpleEnumeratorBlock): void;
  enumerateLayersWithOptions_block(options: MSLayerEnumeratorOptions, block: MSLayerEnumeratorBlock): boolean;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;
}

declare class MSLayerFlattener extends NSObject {
  flattenLayers(layers: MSLayerArray): void;
  imageFromLayers_immutablePage_immutableDoc(layers: MSLayerArray, immutablePage: MSImmutablePage, immutableDoc: MSImmutableDocumentData): NSImage;
  imageFromLayers_immutablePage_immutableDoc_includeArtboardBackground(layers: MSLayerArray, immutablePage: MSImmutablePage, immutableDoc: MSImmutableDocumentData, includeArtboardBackground: boolean): NSImage;
  trimmedRectFromLayers_immutablePage_immutableDoc(layers: MSLayerArray, immutablePage: MSImmutablePage, immutableDoc: MSImmutableDocumentData): NSRect;
  trimmedRectFromLayers_immutablePage_immutableDoc_includeArtboardBackground(layers: MSLayerArray, immutablePage: MSImmutablePage, immutableDoc: MSImmutableDocumentData, includeArtboardBackground: boolean): NSRect;
  bitmapFromRect_fromLayers_withImage(bitmapRect: NSRect, layers: MSLayerArray, image: NSImage): MSBitmapLayer;
}

declare class MSLayerListController extends MSSidebarListController implements IBCOutlineViewDataSource, IBCOutlineViewDelegate {
  dataController_childrenOfNode(dataController: BCOutlineViewDataController | null, node: any | null): NSArray<any>;
  rootObject(): any;
  dataController_isNodeSelected(dataController: BCOutlineViewDataController, node: any): boolean;
  multipleNodesSelectedForDataController(dataController: BCOutlineViewDataController): boolean;
  dataController_nodeHasSharedStyle(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_changeSelectionTo(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_isNodeExpanded(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeExpandable(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeHighlighted(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_updateNode_expandedState(dataController: BCOutlineViewDataController, node: any, expanded: BCOutlineViewNodeExpansionState): void;
  dataController_exportNodes_toFolder(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[], folder: NSURL): NSArray<any>;
  dragTypesForDataController(dataController: BCOutlineViewDataController): NSArray<any>;
  dataController_writeNodes_toPasteboard(dataController: BCOutlineViewDataController, items: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  dataController_canMoveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_canCopyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_moveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_copyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_handleBadgePressedOnNode_withAltState(dataController: BCOutlineViewDataController, node: any, alt: boolean): void;
  dataController_refreshPreviewsOnNodes(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_menuItemsForSelectedObjects(dataController: BCOutlineViewDataController, selection: NSArray<any> | any[]): NSArray<any>;
  dataController_hoverNodeDidChangeTo(dataController: BCOutlineViewDataController, node: any): void;
}

declare class MSLayerSelector extends NSObject {
  updateSelectionWithRect_page_extendSelection_options(selectionRect: NSRect, page: MSPage, extend: boolean, options: MSLayerSelectionOptions): void;

  initialSelection(): MSLayerArray;
  setInitialSelection(initialSelection: MSLayerArray): void;
}

declare class MSStyle extends _MSStyle implements IMSSharedObjectInstance, INSCopying {
  multiplyBy(size: CGFloat): void;
  enabledFills(): NSArray<any>;
  enabledBorders(): NSArray<any>;
  enabledShadows(): NSArray<any>;
  enabledInnerShadows(): NSArray<any>;
  firstEnabledBorder(): MSStyleBorder;
  firstEnabledFill(): MSStyleFill;
  firstEnabledShadow(): MSStyleShadow;
  disableAllBorders(): void;
  disableAllFills(): void;
  disableAllShadows(): void;
  disableAllInnerShadows(): void;
  hasTextStyle(): boolean;
  parentLayer(): MSStyledLayer;
  supportsAdvancedBorderSettings(): boolean;
  stylePartsOfType(type: MSStylePartType): NSArray<any>;
  addStylePartOfType(type: MSStylePartType): MSStylePart;
  type(): MSSharedStyleType;
  syncWithTemplateInstance(instance: any): void;
  copyWithZone(zone: NSZone | null): any;

  primitiveTextStyle(): MSTextStyle;
  setPrimitiveTextStyle(primitiveTextStyle: MSTextStyle): void;
  primitiveSharedObjectID(): NSString;
  setPrimitiveSharedObjectID(primitiveSharedObjectID: NSString | string): void;
  hasBlending(): boolean;
  setHasBlending(hasBlending: boolean): void;
  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  hasEnabledBackgroundBlur(): boolean;
  setHasEnabledBackgroundBlur(hasEnabledBackgroundBlur: boolean): void;
  hasEnabledBorder(): boolean;
  setHasEnabledBorder(hasEnabledBorder: boolean): void;
  hasEnabledFill(): boolean;
  setHasEnabledFill(hasEnabledFill: boolean): void;
  hasEnabledShadow(): boolean;
  setHasEnabledShadow(hasEnabledShadow: boolean): void;
  hasMoreThanOneEnabledFill(): boolean;
  setHasMoreThanOneEnabledFill(hasMoreThanOneEnabledFill: boolean): void;
  thickestInnerStroke(): CGFloat;
  setThickestInnerStroke(thickestInnerStroke: CGFloat): void;
  thickestStroke(): CGFloat;
  setThickestStroke(thickestStroke: CGFloat): void;
  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
}

declare class MSTextStyle extends _MSTextStyle {
  generatePreviewWithText_imageSize_previewSize_colorSpace_backingScale_completionBlock(text: NSString | string, imageSize: CGSize, previewSize: CGSize, colorSpace: NSColorSpace, backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): void;
  static styleWithAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): MSTextStyle;
  syncOwningTextLayerWithThisStyle(): void;
  updateAttributesWithoutSyncingOwningTextLayer(attributes: NSDictionary<any, any> | {[key: string]: any}): void;
  resetDecodedAttributes(): void;

  attributes(): NSDictionary<any, any>;
  setAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): void;
  isRequiredFontAvailable(): boolean;
  setIsRequiredFontAvailable(isRequiredFontAvailable: boolean): void;
  fontPostscriptName(): NSString;
  setFontPostscriptName(fontPostscriptName: NSString | string): void;
}

declare class MSLayoutAnchor extends NSObject {
  initWithItem_attribute<T extends MSLayoutAnchor>(item: any, attribute: MSLayoutAttribute): T;

  item(): any;
  setItem(item: any): void;
  attribute(): MSLayoutAttribute;
  setAttribute(attribute: MSLayoutAttribute): void;
  axis(): BCAxis;
  setAxis(axis: BCAxis): void;
}

declare class MSLayoutPosition extends MSLayoutAnchor {
  static positionAnchorWithLine_inLayer_attribute(line: BCOrthogonalLine, layer: MSLayer, attribute: MSLayoutAttribute): MSLayoutPosition;
  positionInLayer(layer: MSLayer | null): CGFloat;
  snappingTargetInLayer(layer: MSLayer | null): MSSnappingTarget;
  rectBySnappingToPosition_oldFrame_mayResize(position: CGFloat, oldFrame: NSRect, resize: boolean): NSRect;
  static snapPoint_toLines_onAxis_margin(point: CGPoint, lines: NSArray<any> | any[], axis: BCAxis, margin: CGFloat): CGPoint;

  snapTag(): MSSnapTag;
  setSnapTag(snapTag: MSSnapTag): void;
}

declare enum MSSnapTag {
  MSSnapAll = 0,
  MSSnapEdge = 1,
  MSSnapBaseline = 3,
}

declare class MSLayoutGrid extends _MSLayoutGrid {
  totalNumberOfGutters(): NSInteger;
  determineAppropriateColumnWidth(): void;
}

declare class MSLayoutRelationship extends NSObject {
  initWithAnchor_anchor<T extends MSLayoutRelationship>(anchor1: MSLayoutAnchor, anchor2: MSLayoutAnchor | null): T;
  static dimensionMeasurementWithItem_axis(item: any, axis: BCAxis): MSLayoutRelationship;
  static spacingMeasurementWithItem_toItem_onAxis(firstItem: any, secondItem: any, axis: BCAxis): MSLayoutRelationship;

  firstAnchor(): MSLayoutAnchor;
  setFirstAnchor(firstAnchor: MSLayoutAnchor): void;
  firstItem(): any;
  setFirstItem(firstItem: any): void;
  firstAttribute(): MSLayoutAttribute;
  setFirstAttribute(firstAttribute: MSLayoutAttribute): void;
  secondAnchor(): MSLayoutAnchor;
  setSecondAnchor(secondAnchor: MSLayoutAnchor): void;
  secondItem(): any;
  setSecondItem(secondItem: any): void;
  secondAttribute(): MSLayoutAttribute;
  setSecondAttribute(secondAttribute: MSLayoutAttribute): void;
  rect(): NSRect;
  setRect(rect: NSRect): void;
}

declare class MSLoadedImageData extends NSObject {
  static imageFromPasteboard(pasteboard: NSPasteboard): MSLoadedImageData;
  static imageFromFileURL(fileURL: NSURL): MSLoadedImageData;
  static scalingFactorForFilename(filename: NSString | string): NSUInteger;

  image(): MSImageData;
  setImage(image: MSImageData): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  intendedDPI(): NSInteger;
  setIntendedDPI(intendedDPI: NSInteger): void;
}

declare class MSLocalDataSupplier extends MSDataSupplier {
  initWithFileSystemURL_isBuiltin<T extends MSLocalDataSupplier>(fsURL: NSURL, isBuiltin: boolean): T;
  static textDataFromFileURL(fileURL: NSURL): NSArray<any>;
  static imageFileNamesFromFolderURL(folderURL: NSURL): NSArray<any>;

  dataSource(): NSURL;
  setDataSource(dataSource: NSURL): void;
  isBuiltin(): boolean;
  setIsBuiltin(isBuiltin: boolean): void;
}

declare class MSManifestMaker extends NSObject {
  initWithDocument<T extends MSManifestMaker>(documentData: MSImmutableDocumentData): T;
  createManifest(): NSDictionary<any, any>;
  static keyForFlowAnimationType(type: MSFlowAnimationType): NSString;
  metadataForRootLayer_onPage_earlierSlugs(root: MSImmutableLayerGroup, page: MSImmutablePage, slugs: NSMutableDictionary<any, any> | {[key: string]: any} | null): NSDictionary<any, any>;
  filesMetadataForRootLayer_onPage_id(root: MSImmutableLayerGroup, page: MSImmutablePage, fileID: NSString | string): NSArray<any>;

  documentData(): MSImmutableDocumentData;
  setDocumentData(documentData: MSImmutableDocumentData): void;
  cacheManager(): MSCacheManager;
  setCacheManager(cacheManager: MSCacheManager): void;
  name(): NSString;
  setName(name: NSString | string): void;
  selectiveExport(): boolean;
  setSelectiveExport(selectiveExport: boolean): void;
  usePageIfMissingArtboard(): boolean;
  setUsePageIfMissingArtboard(usePageIfMissingArtboard: boolean): void;
}

declare class MSMaskWithShape extends NSObject {
  static createMaskWithShapeForLayers(layers: MSLayerArray): MSLayer;
}

declare class MSMathInspectorValueAdaptor extends MSInspectorValueAdaptor {
  initWithModelsController_floatValueGetter_floatValueSetter_modelKeyPathsToWatch(modelsController: NSArrayController, floatValueGetter: Block, floatValueSetter: Block, modelKeyPathsToWatch: NSArray<any>): MSMathInspectorValueAdaptor;
  checkAndAdjustValues_contexts_withNumberFormatter_error(values: NSArray<any>, contexts: NSPointerArray, numberFormatter: NSNumberFormatter, error: NSError): NSArray<any>;
  effectiveNumberFormatter(): NSNumberFormatter;
  currentAdjustOptions(): MSValueAdaptorAdjustOptions;
  valueFromPrefixStrippedString_forModel_originalString_error(string: NSString, model: any, originalString: NSString, error: NSError): NSNumber;
  errorWithUnparsableString(unparsable: NSString): NSError;
  trimValueString_getMathPrefix(string: NSString, prefix: NSString): NSString;
  forceRelativeMathForBlock(block: Block): void;
  clampsValues(): boolean;
  setClampsValues(clampsValues: boolean): void;
  adjustIndividually(): boolean;
  setAdjustIndividually(adjustIndividually: boolean): void;
  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  isIncrementing(): boolean;
  setIsIncrementing(isIncrementing: boolean): void;
}

declare interface IMSIncrementDecrementDelegate {
  incrementBy(amount: CGFloat): void;
}

declare interface IMSInspectorMathValueAdaptorDelegate {
  inspectorValueAdaptorAllowFloat(adaptor: MSInspectorValueAdaptor): boolean;
}

declare enum MSValueAdaptorAdjustOptions {
  MSValueAdaptorAdjustValues = 1 << 0,
  MSValueAdaptorAdjustIgnoreMinimum = 1 << 1,
  MSValueAdaptorAdjustIgnoreMaximum = 1 << 2,
  MSValueAdaptorAdjustIndividually = 1 << 3,
}

declare class MSMathNumberFormatter extends NSNumberFormatter {}

declare class MSMoment extends NSObject {
  initWithTitle_documentData<T extends MSMoment>(newTitle: NSString | string, document: MSImmutableDocumentData): T;

  timestamp(): NSTimeInterval;
  setTimestamp(timestamp: NSTimeInterval): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  document(): MSImmutableDocumentData;
  setDocument(document: MSImmutableDocumentData): void;
  adaptability(): MSMomentAdaptability;
  setAdaptability(adaptability: MSMomentAdaptability): void;
  selectedLayerIDs(): NSSet<any>;
  setSelectedLayerIDs(selectedLayerIDs: NSSet<any>): void;
  pageID(): NSString;
  setPageID(pageID: NSString | string): void;
}

declare enum MSMomentAdaptability {
  MSMomentAdaptabilityTransient,
  MSMomentAdaptabilityCoalesces,
  MSMomentAdaptabilityAmends,
}

declare class MSNetworkHelper extends NSObject {}

declare class MSOpacityKeyboardShortcutRecognizer extends NSObject {
  initWithTarget_action<T extends MSOpacityKeyboardShortcutRecognizer>(target: any | null, action: string | null): T;
  keyDown(event: NSEvent): void;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  concatenationDuration(): NSTimeInterval;
  setConcatenationDuration(concatenationDuration: NSTimeInterval): void;
  opacity(): CGFloat;
  setOpacity(opacity: CGFloat): void;
}

declare class MSOverrideRepresentation extends MSOverrideRepresentationBase {
  static representationForOverride_inSymbolInstance(availableOverride: MSAvailableOverride, instance: MSSymbolInstance): MSOverrideRepresentation;

  availableOverride(): MSAvailableOverride;
  setAvailableOverride(availableOverride: MSAvailableOverride): void;
  pathInInstance(): CGPathRef;
  setPathInInstance(pathInInstance: CGPathRef): void;
  layerListExpandedType(): MSLayerListStatus;
  setLayerListExpandedType(layerListExpandedType: MSLayerListStatus): void;
}

declare class MSPDFImporter extends NSObject implements IMSImporter {
  static pdfImporter(): MSPDFImporter;
  static epsImporter(): MSPDFImporter;
  prepareToImportFromURL(url: NSURL): NSUInteger;
  importAsLayer(): MSLayer;
  prepareToImportFromData(data: NSData): NSUInteger;
  prepareToImportFromURL(url: NSURL): NSUInteger;
  importIntoPage_name_progress(page: MSPage, name: NSString | string, progress: BCVoidBlock): void;
  finishImporting(): void;
  firstPhaseSubtitle(): NSString;
  secondPhaseSubtitleForValue_maximum(value: NSInteger, maximum: NSInteger): NSString;
  shouldExpandPages(): boolean;
  shouldCollapseSinglePage(): boolean;
  importAsLayer(): MSLayer;
}

declare class MSPage extends _MSPage implements IMSRootLayer {
  static page(): MSPage;
  selectedLayers(): MSLayerArray;
  artboardWithID(objectID: any): MSArtboardGroup;
  isLayerSelected(layer: MSLayer): boolean;
  changeSelectionUsingBlock(block: MSSelectionModifierBlock): void;
  changeSelectionBySelectingLayers(layers: NSArray<any> | any[] | null): void;
  clearSelectionCache(): void;
  addOrRemoveLayerFromArtboardIfNecessary(layer: MSLayer): boolean;
  tryToMoveLayer_toArtboards(layer: MSLayer, artboards: NSArray<any> | any[]): boolean;
  destinationArtboardForLayers_artboards(layers: NSArray<any> | any[], artboards: NSArray<any> | any[]): MSArtboardGroup;
  moveLayersToArtboards(): void;
  originForNewArtboardWithSize(size: NSSize): NSPoint;
  layersByObjectID(): NSDictionary<any, any>;
  contentIntersectsWithRect(rect: NSRect): boolean;
  resetSelectedLayerIDs(layerIDs: NSSet<any>): void;
  adjustRulerDataToTopLeftInViewBounds(): void;
  scrollOriginToCenterContentInViewBounds(viewBounds: NSRect): NSPoint;

  currentArtboard(): MSArtboardGroup;
  setCurrentArtboard(currentArtboard: MSArtboardGroup): void;
  artboards(): NSArray<any>;
  setArtboards(artboards: NSArray<any> | any[]): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  symbols(): NSArray<any>;
  setSymbols(symbols: NSArray<any> | any[]): void;
  exportableLayers(): NSArray<any>;
  setExportableLayers(exportableLayers: NSArray<any> | any[]): void;
  currentRoot(): MSLayerGroup;
  setCurrentRoot(currentRoot: MSLayerGroup): void;
  grid(): MSSimpleGrid;
  setGrid(grid: MSSimpleGrid): void;
  layout(): MSLayoutGrid;
  setLayout(layout: MSLayoutGrid): void;
  rulerBase(): NSPoint;
  setRulerBase(rulerBase: NSPoint): void;
  contentBounds(): NSRect;
  setContentBounds(contentBounds: NSRect): void;
  rect(): CGRect;
  setRect(rect: CGRect): void;
}

declare class MSPageListController extends MSSidebarListController implements IBCOutlineViewDataSource, IBCOutlineViewDelegate {
  dataController_childrenOfNode(dataController: BCOutlineViewDataController | null, node: any | null): NSArray<any>;
  rootObject(): any;
  dataController_isNodeSelected(dataController: BCOutlineViewDataController, node: any): boolean;
  multipleNodesSelectedForDataController(dataController: BCOutlineViewDataController): boolean;
  dataController_nodeHasSharedStyle(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_changeSelectionTo(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_isNodeExpanded(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeExpandable(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_isNodeHighlighted(dataController: BCOutlineViewDataController, node: any): boolean;
  dataController_updateNode_expandedState(dataController: BCOutlineViewDataController, node: any, expanded: BCOutlineViewNodeExpansionState): void;
  dataController_exportNodes_toFolder(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[], folder: NSURL): NSArray<any>;
  dragTypesForDataController(dataController: BCOutlineViewDataController): NSArray<any>;
  dataController_writeNodes_toPasteboard(dataController: BCOutlineViewDataController, items: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  dataController_canMoveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_canCopyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_moveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_copyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_handleBadgePressedOnNode_withAltState(dataController: BCOutlineViewDataController, node: any, alt: boolean): void;
  dataController_refreshPreviewsOnNodes(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[]): void;
  dataController_menuItemsForSelectedObjects(dataController: BCOutlineViewDataController, selection: NSArray<any> | any[]): NSArray<any>;
  dataController_hoverNodeDidChangeTo(dataController: BCOutlineViewDataController, node: any): void;
}

declare class MSPasteboardFileDataProvider extends NSObject {
  static addLayers_toPasteboard(layers: NSArray<any> | any[], pboard: NSPasteboard): void;
  static exportLayers_toFolder(layers: NSArray<any> | any[], folder: NSURL): NSArray<any>;
}

declare class MSPasteboardImageProvider extends NSObject {
  static preparePasteboard_withExportRequest(pboard: NSPasteboard, request: MSExportRequest): void;
}

declare class MSPasteboardImageWriter extends NSObject implements IMSPasteboardWriter {
  canWriteDataToPasteboard(pasteboard: NSPasteboard): boolean;
  supportedPasteboardTypes(): NSArray<any>;
  writeData_toPasteboard(data: MSPasteboardLayers, pasteboard: NSPasteboard): void;
}

declare class MSPasteboardImagesReader extends NSObject implements IMSPasteboardReader {
  supportedPasteboardTypes(): NSArray<any>;
  pasteboardDataFromPasteboard_colorSpace_options_sender(pasteboard: NSPasteboard, colorSpace: NSColorSpace, options: MSPasteboardReaderOptions, sender: any | null): MSPasteboardLayers;
}

declare class MSPasteboardInternalImageReader extends MSPasteboardImagesReader {}

declare class MSPasteboardLayerListImageProvider extends NSObject {
  static addLayer_toPasteboard(layer: MSLayer, pboard: NSPasteboard): void;
}

declare class MSPasteboardPDFReader extends NSObject {}

declare class MSPasteboardPathsReader extends NSObject implements IMSPasteboardReader {
  supportedPasteboardTypes(): NSArray<any>;
  pasteboardDataFromPasteboard_colorSpace_options_sender(pasteboard: NSPasteboard, colorSpace: NSColorSpace, options: MSPasteboardReaderOptions, sender: any | null): MSPasteboardLayers;
}

declare class MSPasteboardTextReader extends NSObject implements IMSPasteboardReader {
  attributedStringFromPasteboard_options(pasteboard: NSPasteboard, options: MSPasteboardReaderOptions): NSAttributedString;
  supportedPasteboardTypes(): NSArray<any>;
  pasteboardDataFromPasteboard_colorSpace_options_sender(pasteboard: NSPasteboard, colorSpace: NSColorSpace, options: MSPasteboardReaderOptions, sender: any | null): MSPasteboardLayers;
}

declare class MSPasteboardTextWriting extends NSObject {
  static supportedTypes(): NSArray<any>;
  static writeAttributedString_toPasteboard_type_documentColorSpace(attributedString: NSAttributedString, pasteboard: NSPasteboard, type: NSString | string, colorSpace: NSColorSpace): boolean;
}

declare class MSPluginDataSupplier extends MSDataSupplier {
  static identifierWithPluginIdentifier_commandIdentifier_dynamicDataKey(pluginIdentifier: NSString | string, commandIdentifier: NSString | string, dynamicDataKey: NSString | string): NSString;
  initWithPluginIdentifier_commandIdentifier_dataName_dataTypeStringRepresentation_dynamicDataKey<T extends MSPluginDataSupplier>(identifier: NSString | string, commandIdentifier: NSString | string, dataName: NSString | string, dataType: NSString | string, dynamicDataKey: NSString | string): T;

  pluginIdentifier(): NSString;
  setPluginIdentifier(pluginIdentifier: NSString | string): void;
  commandIdentifier(): NSString;
  setCommandIdentifier(commandIdentifier: NSString | string): void;
  dynamicDataKey(): NSString;
  setDynamicDataKey(dynamicDataKey: NSString | string): void;
  registered(): boolean;
  setRegistered(registered: boolean): void;
}

declare class MSPluginDataSupplierContext extends NSObject {
  initWithLayers<T extends MSPluginDataSupplierContext>(layers: NSArray<any> | any[]): T;
  initWithOverrides<T extends MSPluginDataSupplierContext>(overrides: NSArray<any> | any[]): T;

  isSymbolInstanceOverride(): boolean;
  setIsSymbolInstanceOverride(isSymbolInstanceOverride: boolean): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  overrides(): NSArray<any>;
  setOverrides(overrides: NSArray<any> | any[]): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
  requestedCount(): NSUInteger;
  setRequestedCount(requestedCount: NSUInteger): void;
  key(): NSString;
  setKey(key: NSString | string): void;
}

declare class MSPointInsertion extends NSObject {
  static insertPointAtLocation_index_layer_options(location: NSPoint, index: NSUInteger, layer: MSShapePathLayer, options: MSPointInsertionOptions): MSCurvePoint;
  static canInsertAtProposedLocation_index_layer_options(proposedPoint: NSPoint, index: NSUInteger, layer: MSShapePathLayer, options: MSPointInsertionOptions): boolean;
}

declare enum MSPointInsertionOptions {
  MSPointInsertionStraight = 1 << 0,
  MSPointInsertionCenter = 1 << 1,
}

declare class MSPopUpToolbarItem extends NSToolbarItem {
  initWithItemIdentifier_size<T extends MSPopUpToolbarItem>(ident: NSString | string, size: NSToolbarSizeMode): T;
  menuButtonWithSize(size: NSToolbarSizeMode): any;

  menu(): NSMenu;
  setMenu(menu: NSMenu): void;
  actionObject(): any;
  setActionObject(actionObject: any): void;
}

declare interface IMSPopToolbarItemActionObject {
  toolbarItemShouldDrawWithArrow(toolbarItem: MSPopUpToolbarItem): boolean;
}

declare interface IMSPreviewGeneration {
  generatePreviewWithImageSize_previewSize_colorSpace_backingScale_completionBlock(imageSize: CGSize, previewSize: CGSize, colorSpace: NSColorSpace | null, backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): void;
}

declare class MSRectSnapItem extends MSSnapItem {
  static rectSnapItemWithLayer_rect_constrainProportions(layer: MSLayer, rect: NSRect, constrainProportions: boolean): MSRectSnapItem;
}

declare class MSRectangleShape extends _MSRectangleShape {
  static looksLikeComponentString(string: NSString | string): boolean;
  static componentStringWithValues(values: NSArray<any> | any[]): NSString;
  static validateComponentString(string: NSString | string): boolean;
  validateProposedCornerRadiusSizeWithString(radiusString: NSString | string): boolean;
  validateProposedCornerRadiusWithFloat(radius: CGFloat): boolean;
  resetPathsToRect(): void;
  resetPathsToRoundedRect(): void;

  static lastUsedCornerRadius(): CGFloat;
  static setLastUsedCornerRadius(lastUsedCornerRadius: CGFloat): void;
  static useSmoothCorners(): boolean;
  static setUseSmoothCorners(useSmoothCorners: boolean): void;
  cornerRadiusString(): NSString;
  setCornerRadiusString(cornerRadiusString: NSString | string): void;
  cornerRadiusFloat(): CGFloat;
  setCornerRadiusFloat(cornerRadiusFloat: CGFloat): void;
  normalizedExponentialCornerRadius(): CGFloat;
  setNormalizedExponentialCornerRadius(normalizedExponentialCornerRadius: CGFloat): void;
  hasSmoothCorners(): boolean;
  setHasSmoothCorners(hasSmoothCorners: boolean): void;
  smoothCornersAllowed(): boolean;
  setSmoothCornersAllowed(smoothCornersAllowed: boolean): void;
  maximumAllowedRadius(): CGFloat;
  setMaximumAllowedRadius(maximumAllowedRadius: CGFloat): void;
}

declare class MSAssetLibraryUpdatingInfo extends NSObject implements INSCoding {
  initWithDownloadURL_libraryName_imageURL_newVersionNumber_shareLink_downloadSize<T extends MSAssetLibraryUpdatingInfo>(downloadURL: NSURL, libraryName: NSString | string | null, imageURL: NSURL | null, newVersionNumber: NSString | string, shareLink: NSURL | null, downloadSize: NSUInteger): T;
  isEqual(object: any | null): boolean;
  isHigherVersionThan(otherVersion: NSString | string | null): boolean;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends MSAssetLibraryUpdatingInfo>(aDecoder: NSCoder): T;

  downloadURL(): NSURL;
  setDownloadURL(downloadURL: NSURL): void;
  versionNumberForUpdate(): NSString;
  setVersionNumberForUpdate(versionNumberForUpdate: NSString | string): void;
  downloadSize(): NSUInteger;
  setDownloadSize(downloadSize: NSUInteger): void;
  libraryName(): NSString;
  setLibraryName(libraryName: NSString | string): void;
  imageURL(): NSURL;
  setImageURL(imageURL: NSURL): void;
  folderMonitor(): MSFolderMonitor;
  setFolderMonitor(folderMonitor: MSFolderMonitor): void;
  downloadTaskIdentifier(): NSString;
  setDownloadTaskIdentifier(downloadTaskIdentifier: NSString | string): void;
  shareLink(): NSURL;
  setShareLink(shareLink: NSURL): void;
}

declare class MSRemoteAssetLibrary extends MSAssetLibrary {
  initWithName_appcastURL_version_infoText<T extends MSRemoteAssetLibrary>(libraryName: NSString | string, appcastURL: NSURL, libraryVersion: NSString | string | null, infoText: NSString | string | null): T;
  static URLForApplicationSupportLibraryNamed(name: NSString | string): NSURL;

  appcastURL(): NSURL;
  setAppcastURL(appcastURL: NSURL): void;
  libraryVersion(): NSString;
  setLibraryVersion(libraryVersion: NSString | string): void;
  originalName(): NSString;
  setOriginalName(originalName: NSString | string): void;
  infoText(): NSString;
  setInfoText(infoText: NSString | string): void;
  newUpdatingInfo(): boolean;
  setNewUpdatingInfo(newUpdatingInfo: boolean): void;
  updatingInfo(): MSAssetLibraryUpdatingInfo;
  setUpdatingInfo(updatingInfo: MSAssetLibraryUpdatingInfo): void;
  downloadAvailable(): boolean;
  setDownloadAvailable(downloadAvailable: boolean): void;
  updateAvailable(): boolean;
  setUpdateAvailable(updateAvailable: boolean): void;
  static assetLibraryFolder(): NSURL;
  static setAssetLibraryFolder(assetLibraryFolder: NSURL): void;
}

declare class MSRenderMonitor extends NSObject {
  recordEvent(event: MSRenderMonitorEvent): void;
  recordEvent_timestamp(event: MSRenderMonitorEvent, timestamp: BCTime): void;
  timestampForEvent(event: MSRenderMonitorEvent): BCTime;
  timeIntervalBetweenStartEvent_endEvent(startEvent: MSRenderMonitorEvent, endEvent: MSRenderMonitorEvent): NSTimeInterval;
  registerHook_forEvent(hook: MSRenderMonitorHook, event: MSRenderMonitorEvent): void;

  shouldRemoveWhenDone(): boolean;
  setShouldRemoveWhenDone(shouldRemoveWhenDone: boolean): void;
  shouldClearAllCaches(): boolean;
  setShouldClearAllCaches(shouldClearAllCaches: boolean): void;
  shouldForceFullRedraw(): boolean;
  setShouldForceFullRedraw(shouldForceFullRedraw: boolean): void;
}

declare enum MSRenderMonitorEvent {
  MSRenderMonitorEventQueued,
  MSRenderMonitorEventDiffStarted,
  MSRenderMonitorEventOverlayRenderStarted,
  MSRenderMonitorEventOverlayRenderFinished,
  MSRenderMonitorEventTileRenderStarted,
  MSRenderMonitorEventTileRenderFinished,
  MSRenderMonitorEventCount,
}

declare class MSResizeArtboardToFitValidator extends NSObject {
  static isValidForSelectedLayers(selectedLayers: MSLayerArray): boolean;
}

declare class MSRotatedSnapItem extends MSSnapItem {}

declare class MSRulerGuides extends NSObject {
  static findHoverGuidesOnPage_mouse_mask_zoomScale(page: MSPage, mouse: NSPoint, mask: MSAlignmentGuideMask, zoomScale: CGFloat): NSArray<any>;
  static horizontalGuidesForVerticalRulerOnPage_mask_zoomScale(page: MSPage, mask: MSAlignmentGuideMask, zoomScale: CGFloat): NSArray<any>;
  static horizontalGuidesForVerticalRulerOnPage_mask_inRect_zoomScale(page: MSPage, mask: MSAlignmentGuideMask, rect: NSRect, zoomScale: CGFloat): NSArray<any>;
  static verticalGuidesForHorizontalRulerOnPage_mask_zoomScale(page: MSPage, mask: MSAlignmentGuideMask, zoomScale: CGFloat): NSArray<any>;
  static verticalGuidesForHorizontalRulerOnPage_mask_inRect_zoomScale(page: MSPage, mask: MSAlignmentGuideMask, rect: NSRect, zoomScale: CGFloat): NSArray<any>;
}

declare enum MSAlignmentGuideMask {
  MSAlignmentGuideMaskCustom = 1 << 0,
  MSAlignmentGuideMaskGrid = 1 << 1,
}

declare class MSSVGImporter extends NSObject implements IMSImporter {
  static svgImporter(): MSSVGImporter;
  importAsLayer(): MSLayer;
  prepareToImportFromData(data: NSData): NSUInteger;
  prepareToImportFromURL(url: NSURL): NSUInteger;
  importIntoPage_name_progress(page: MSPage, name: NSString | string, progress: BCVoidBlock): void;
  finishImporting(): void;
  firstPhaseSubtitle(): NSString;
  secondPhaseSubtitleForValue_maximum(value: NSInteger, maximum: NSInteger): NSString;
  shouldExpandPages(): boolean;
  shouldCollapseSinglePage(): boolean;
  importAsLayer(): MSLayer;
}

declare class MSShapeChangeContext extends NSObject implements INSCopying {
  initWithLayers_handleIndexPaths<T extends MSShapeChangeContext>(layers: NSArray<any> | any[], indexPaths: NSArray<any> | any[] | null): T;
  enumerateCurvePointsUsingBlock(block: Block): void;
  curvePointAtIndexPath(indexPath: NSIndexPath): MSCurvePoint;
  locationOfHandleAtIndexPath_inCoordinateSpace(indexPath: NSIndexPath, coordinateSpace: any | null): NSPoint;
  copyWithZone(zone: NSZone | null): any;

  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  handleIndexPaths(): NSArray<any>;
  setHandleIndexPaths(handleIndexPaths: NSArray<any> | any[]): void;
  orderedHandleIndexPaths(): NSArray<any>;
  setOrderedHandleIndexPaths(orderedHandleIndexPaths: NSArray<any> | any[]): void;
}

declare class MSShapeChange extends NSObject {
  static moveToPoint_options(location: NSPoint, options: MSCurveMoveOptions): MSShapeChange;
  static moveByOffset_options(offset: NSSize, options: MSCurveMoveOptions): MSShapeChange;
  static moveToLocation_onAxis(location: CGFloat, axis: BCAxis): MSShapeChange;
  static moveHandle_toLocation_onAxis(indexPath: NSIndexPath, location: CGFloat, axis: BCAxis): MSShapeChange;
  static nudgeWithKey_distance_flags(key: unichar, distance: CGFloat, flags: NSEventModifierFlags): MSShapeChange;
  static changeToCurveMode(curveMode: MSCurveMode): MSShapeChange;
  static alignToKey(key: NSString | string): MSShapeChange;
  static distributeAlongAxis(axis: BCAxis): MSShapeChange;
  static deleteHandle(): MSShapeChange;
  static customActionWithBlock(block: Block): MSShapeChange;
  executeWithContext(context: MSShapeChangeContext): void;
}

declare class MSShapeEditingBehavior extends NSObject {
  initForDrawingNewShape<T extends MSShapeEditingBehavior>(drawingNewShape: boolean): T;
  isAddingPoints(context: MSShapeChangeContext): boolean;
  canInsertPoints(): boolean;
  shouldClosePathWhenMouseDownOnHandleAtIndexPath_modifierFlags_context(indexPath: NSIndexPath, flags: NSEventModifierFlags, context: MSShapeChangeContext): boolean;

  isNewShape(): boolean;
  setIsNewShape(isNewShape: boolean): void;
  allowSelectionOnly(): boolean;
  setAllowSelectionOnly(allowSelectionOnly: boolean): void;
  allowClosingPathUsingMouse(): boolean;
  setAllowClosingPathUsingMouse(allowClosingPathUsingMouse: boolean): void;
}

declare class MSShareableObjectPopUpButton extends NSPopUpButton {
  updateWithMenuBuilder_forLayers(menuBuilder: MSForeignObjectMenuBuilder, layers: NSArray<any> | any[]): void;
}

declare class MSShareableObjectReference extends NSObject implements IBCSortable, IMSSharedObjectStyling {
  static referenceForShareableObject(object: MSModelObject): MSShareableObjectReference;
  static referenceForShareableObject_inLibrary(object: MSModelObject, library: MSAssetLibrary): MSShareableObjectReference;
  foreignObjectCollectionInDocument(document: MSDocumentData): NSArray<any>;
  generatePreviewForMenuItem_withColorSpace_backingScale_completionBlock(menuItem: NSMenuItem, colorSpace: NSColorSpace, backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): NSImage;
  generatePreviewForPopup_backingScale_completionBlock(cell: NSPopUpButtonCell, backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): NSImage;
  generatePreviewForManageSheetWithBackingScale_completionBlock(backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): NSImage;
  generatePreviewForSyncSheetWithSize_backingScale_shadow_colorSpace_completionBlock(size: CGSize, backingScale: CGFloat, shadow: boolean, colorSpace: NSColorSpace, block: MSPreviewGeneratorBlock): void;
  applyStyleToMenuItem_withColorSpace(item: NSMenuItem | null, colorSpace: NSColorSpace | null): void;

  sourceLibrary(): MSAssetLibrary;
  setSourceLibrary(sourceLibrary: MSAssetLibrary): void;
  shareableObject(): MSShareableObject;
  setShareableObject(shareableObject: MSShareableObject): void;
  shareableObjectType(): MSShareableObjectType;
  setShareableObjectType(shareableObjectType: MSShareableObjectType): void;
  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
  locationPath(): NSString;
  setLocationPath(locationPath: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare type MSShareableObject = MSModelObject

declare enum MSShareableObjectType {
  MSShareableObjectTypeSymbol = 0,
  MSShareableObjectTypeLayerStyle,
  MSShareableObjectTypeTextStyle,
  MSShareableObjectTypeUnknown,
}

declare class MSShareableObjectUpdater extends NSObject {
  performCreateNewStyleAction(): void;
  performSyncAndOrUnlinkAction(): void;
  performResetAction(): void;
  performDetachAction(): void;

  selectedLayers(): MSLayerArray;
  setSelectedLayers(selectedLayers: MSLayerArray): void;
  shareableObjectType(): MSShareableObjectType;
  setShareableObjectType(shareableObjectType: MSShareableObjectType): void;
  hasOutOfSyncStyles(): boolean;
  setHasOutOfSyncStyles(hasOutOfSyncStyles: boolean): void;
  allSharedObjects(): NSSet<any>;
  setAllSharedObjects(allSharedObjects: NSSet<any>): void;
  shareableObject(): MSShareableObject;
  setShareableObject(shareableObject: MSShareableObject): void;
  selectedStyle(): MSStyle;
  setSelectedStyle(selectedStyle: MSStyle): void;
  foreignSharedObjects(): NSSet<any>;
  setForeignSharedObjects(foreignSharedObjects: NSSet<any>): void;
  menuItemTitleForCreateNewStyleAction(): NSString;
  setMenuItemTitleForCreateNewStyleAction(menuItemTitleForCreateNewStyleAction: NSString | string): void;
  menuItemTitleForSyncAction(): NSString;
  setMenuItemTitleForSyncAction(menuItemTitleForSyncAction: NSString | string): void;
  menuItemTitleForUnlinkAction(): NSString;
  setMenuItemTitleForUnlinkAction(menuItemTitleForUnlinkAction: NSString | string): void;
  menuItemTitleForUnlinkAndSyncAction(): NSString;
  setMenuItemTitleForUnlinkAndSyncAction(menuItemTitleForUnlinkAndSyncAction: NSString | string): void;
  menuItemTitleForResetStyleAction(): NSString;
  setMenuItemTitleForResetStyleAction(menuItemTitleForResetStyleAction: NSString | string): void;
  menuItemTitleForDetachAction(): NSString;
  setMenuItemTitleForDetachAction(menuItemTitleForDetachAction: NSString | string): void;
}

declare class MSSharedStyle extends _MSSharedStyle {
  resetReferencingInstances(): void;
  updateToMatch(instance: MSSharedObjectInstance): void;
  newInstance(): MSStyle;

  style(): MSStyle;
  setStyle(style: MSStyle): void;
}

declare interface IMSSharedObjectStyling {
  generatePreviewForMenuItem_withColorSpace_backingScale_completionBlock(menuItem: NSMenuItem, colorSpace: NSColorSpace, backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): NSImage;
  generatePreviewForPopup_backingScale_completionBlock(cell: NSPopUpButtonCell, backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): NSImage;
  generatePreviewForManageSheetWithBackingScale_completionBlock(backingScale: CGFloat, block: MSPreviewGeneratorBlock | null): NSImage;
  generatePreviewForSyncSheetWithSize_backingScale_shadow_colorSpace_completionBlock(size: CGSize, backingScale: CGFloat, shadow: boolean, colorSpace: NSColorSpace, block: MSPreviewGeneratorBlock): void;
  applyStyleToMenuItem_withColorSpace(item: NSMenuItem | null, colorSpace: NSColorSpace | null): void;
}

declare class MSSharedStyleReference extends MSShareableObjectReference {}

declare class MSSharedLayerReference extends MSSharedStyleReference {}

declare class MSSharedTextReference extends MSSharedStyleReference {}

declare class MSSharedStylesPopUpButtonCell extends NSPopUpButtonCell {
  localIsOutOfSync(): boolean;
  setLocalIsOutOfSync(localIsOutOfSync: boolean): void;
}

declare class MSSidebarListController extends NSObject {
  initWithDelegate<T extends MSSidebarListController>(delegate: any): T;
  readDragNodesFromPasteboard(pboard: NSPasteboard): NSArray<any>;
  layerForNode(node: any): MSLayer;
  canMoveNode_toParent_after(node: any, parent: any, previousNode: any): boolean;
  canCopyNode_toParent_after(node: any, parent: any, previousNode: any): boolean;
  moveNode_toParent_after(node: any, parent: any, previousNode: any): boolean;
  dragTypesForDataController(dataController: BCOutlineViewDataController): NSArray<any>;
  dataController_writeNodes_toPasteboard(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[], pboard: NSPasteboard): boolean;
  dataController_canMoveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_canCopyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_moveFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_copyFromPasteboard_toParent_after(dataController: BCOutlineViewDataController, pboard: NSPasteboard, parent: any, previousNode: any): boolean;
  dataController_exportNodes_toFolder(dataController: BCOutlineViewDataController, nodes: NSArray<any> | any[], folder: NSURL): NSArray<any>;

  delegate(): any;
  setDelegate(delegate: any): void;
  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
  rootObject(): any;
  setRootObject(rootObject: any): void;
}

declare class MSSimpleGrid extends _MSSimpleGrid {
  horizontalGuidesForRulerData_inRect(rulerData: MSRulerData, rect: NSRect): NSArray<any>;
  verticalGuidesForRulerData_inRect(rulerData: MSRulerData, rect: NSRect): NSArray<any>;
}

declare class MSSizeInspectorValueAdaptor extends MSCoordinateInspectorValueAdaptor {}

declare class MSSmartGuideDrawing extends NSObject {
  static smartGuideColor(): NSColor;
  static resetSmartGuideColor(): void;
}

declare class MSMeasurementDrawing extends MSSmartGuideDrawing {
  drawWithFrame_zoomScale(frame: NSRect, zoomScale: CGFloat): void;
  frameForMeasuringSizeOfRect_zoomScale(targetRect: NSRect, zoomScale: CGFloat): NSRect;

  orientation(): BCAxis;
  setOrientation(orientation: BCAxis): void;
  labelText(): NSString;
  setLabelText(labelText: NSString | string): void;
  labelTransform(): CGAffineTransform;
  setLabelTransform(labelTransform: CGAffineTransform): void;
  color(): NSColor;
  setColor(color: NSColor): void;
}

declare class MSSnapItem extends NSObject implements IMSSnappable {
  static snapItemWithLayers(layers: NSArray<any> | any[]): MSSnapItem;
  initWithLayers<T extends MSSnapItem>(layers: NSArray<any> | any[]): T;
  rotation(): CGFloat;
  snapInBlock(block: BCVoidBlock): void;
  candidateLayersForSnapping(snapType: MSSnapType): NSArray<any>;
  artboardForSnapping(): MSArtboardGroup;
  shouldDrawDistanceOnSnapTo(snapItem: any): boolean;
  boundsRect(): NSRect;
  alignmentRectInCoordinateSpace_options(coordinateSpace: any, options: MSAlignmentRectOptions): NSRect;
  enumerateAnchorsForSnappingOnAxes_usingBlock(axes: BCAxis, block: Block): void;
  anchorsForSnappingOnAxes(axes: BCAxis): NSArray<any>;
  distanceRectangleToItem_axis(other: any, axis: BCAxis): NSRect;
  refreshOverlayWithAbsoluteMargins(margins: NSSize): void;
  concatAncestorsAndSelfTransforms(): void;
  textCorrectionTransform(): CGAffineTransform;

  rectForSnapping(): NSRect;
  setRectForSnapping(rectForSnapping: NSRect): void;
  shouldConstrainProportions(): boolean;
  setShouldConstrainProportions(shouldConstrainProportions: boolean): void;
  supportsResizingForSnapping(): boolean;
  setSupportsResizingForSnapping(supportsResizingForSnapping: boolean): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  layer(): MSLayer;
  setLayer(layer: MSLayer): void;
  coordinateSpace(): MSLayer;
  setCoordinateSpace(coordinateSpace: MSLayer): void;
  leftAnchor(): MSLayoutPosition;
  setLeftAnchor(leftAnchor: MSLayoutPosition): void;
  rightAnchor(): MSLayoutPosition;
  setRightAnchor(rightAnchor: MSLayoutPosition): void;
  topAnchor(): MSLayoutPosition;
  setTopAnchor(topAnchor: MSLayoutPosition): void;
  bottomAnchor(): MSLayoutPosition;
  setBottomAnchor(bottomAnchor: MSLayoutPosition): void;
  centerXAnchor(): MSLayoutPosition;
  setCenterXAnchor(centerXAnchor: MSLayoutPosition): void;
  centerYAnchor(): MSLayoutPosition;
  setCenterYAnchor(centerYAnchor: MSLayoutPosition): void;
  widthAnchor(): MSLayoutAnchor;
  setWidthAnchor(widthAnchor: MSLayoutAnchor): void;
  heightAnchor(): MSLayoutAnchor;
  setHeightAnchor(heightAnchor: MSLayoutAnchor): void;
  baselineAnchor(): MSLayoutPosition;
  setBaselineAnchor(baselineAnchor: MSLayoutPosition): void;
  midXHeightAnchor(): MSLayoutPosition;
  setMidXHeightAnchor(midXHeightAnchor: MSLayoutPosition): void;
  snapItemForDrawing(): any;
  setSnapItemForDrawing(snapItemForDrawing: any): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare interface IMSSnappable {
  boundsRect(): NSRect;
  alignmentRectInCoordinateSpace_options(coordinateSpace: any, options: MSAlignmentRectOptions): NSRect;
  enumerateAnchorsForSnappingOnAxes_usingBlock(axes: BCAxis, block: Block): void;
  anchorsForSnappingOnAxes(axes: BCAxis): NSArray<any>;
  distanceRectangleToItem_axis(other: any, axis: BCAxis): NSRect;
  refreshOverlayWithAbsoluteMargins(margins: NSSize): void;
  concatAncestorsAndSelfTransforms(): void;
  textCorrectionTransform(): CGAffineTransform;

  rectForSnapping(): NSRect;
  setRectForSnapping(rectForSnapping: NSRect): void;
  coordinateSpace(): MSLayer;
  setCoordinateSpace(coordinateSpace: MSLayer): void;
  leftAnchor(): MSLayoutPosition;
  setLeftAnchor(leftAnchor: MSLayoutPosition): void;
  rightAnchor(): MSLayoutPosition;
  setRightAnchor(rightAnchor: MSLayoutPosition): void;
  topAnchor(): MSLayoutPosition;
  setTopAnchor(topAnchor: MSLayoutPosition): void;
  bottomAnchor(): MSLayoutPosition;
  setBottomAnchor(bottomAnchor: MSLayoutPosition): void;
  centerXAnchor(): MSLayoutPosition;
  setCenterXAnchor(centerXAnchor: MSLayoutPosition): void;
  centerYAnchor(): MSLayoutPosition;
  setCenterYAnchor(centerYAnchor: MSLayoutPosition): void;
  widthAnchor(): MSLayoutAnchor;
  setWidthAnchor(widthAnchor: MSLayoutAnchor): void;
  heightAnchor(): MSLayoutAnchor;
  setHeightAnchor(heightAnchor: MSLayoutAnchor): void;
  baselineAnchor(): MSLayoutPosition;
  setBaselineAnchor(baselineAnchor: MSLayoutPosition): void;
  midXHeightAnchor(): MSLayoutPosition;
  setMidXHeightAnchor(midXHeightAnchor: MSLayoutPosition): void;
  snapItemForDrawing(): any;
  setSnapItemForDrawing(snapItemForDrawing: any): void;
  name(): NSString;
  setName(name: NSString | string): void;
}

declare enum MSLayoutAttribute {
  MSLayoutAttributeLeft,
  MSLayoutAttributeRight,
  MSLayoutAttributeTop,
  MSLayoutAttributeBottom,
  MSLayoutAttributeWidth,
  MSLayoutAttributeHeight,
  MSLayoutAttributeCenterX,
  MSLayoutAttributeCenterY,
  MSLayoutAttributeBaseline,
  MSLayoutAttributeMidXHeight,
  MSLayoutAttributeCapHeight,
  MSLayoutAttributeGuideX,
  MSLayoutAttributeGuideY,
  MSLayoutAttributeNotAnAttribute,
}

declare enum MSSnapType {
  MSSnapGuides,
  MSSnapSpacing,
  MSSnapDimension,
}

declare class MSSnapper extends NSObject {
  snapSize_edges(snap: BCAxis, mask: NSInteger): BCAxis;
  snapSpacingOnEdges_mayResize(mask: BCEdge, resize: boolean): BCAxis;
  snapDuringSession(session: MSSnappingSession): MSSnapperData;
  snapToLines_adjustableAxes_mayResize(lines: NSArray<any> | any[], adjustableAxes: BCAxis, resize: boolean): void;

  snapperData(): MSSnapperData;
  setSnapperData(snapperData: MSSnapperData): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
}

declare class MSSnapperData extends NSObject {
  initWithSnappingSession<T extends MSSnapperData>(session: MSSnappingSession): T;
  accumulatorForAxis(axis: BCAxis): MSSnappingAccumulator;
  firstDimensionSnapForAxis(axis: BCAxis): MSLayoutRelationship;
  addDimensionSnap(snap: MSLayoutRelationship): void;
  firstSpacingSnapForAxis(axis: BCAxis): MSLayoutRelationship;
  addSpacingSnap(snap: MSLayoutRelationship): void;
  addEdgeSnap(relationship: MSLayoutRelationship): void;
  resetEdgeSnapsForAxis(axis: BCAxis): void;
  drawForGroup_zoomScale(group: MSLayerGroup, zoom: CGFloat): void;

  snappingSession(): MSSnappingSession;
  setSnappingSession(snappingSession: MSSnappingSession): void;
  item(): MSSnapItem;
  setItem(item: MSSnapItem): void;
  xAxisAccumulator(): MSSnappingAccumulator;
  setXAxisAccumulator(xAxisAccumulator: MSSnappingAccumulator): void;
  yAxisAccumulator(): MSSnappingAccumulator;
  setYAxisAccumulator(yAxisAccumulator: MSSnappingAccumulator): void;
  dimensionAxes(): BCAxis;
  setDimensionAxes(dimensionAxes: BCAxis): void;
  spacingAxes(): BCAxis;
  setSpacingAxes(spacingAxes: BCAxis): void;
  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
}

declare class MSSnappingAccumulator extends NSObject {
  initWithAxis<T extends MSSnappingAccumulator>(axis: BCAxis): T;
  removeAllEdgeSnaps(): void;
  removeAllDimensionSnaps(): void;
  removeAllSpacingSnaps(): void;

  axis(): BCAxis;
  setAxis(axis: BCAxis): void;
  edgeSnaps(): NSArray<any>;
  setEdgeSnaps(edgeSnaps: NSArray<any> | any[]): void;
  dimensionSnaps(): NSArray<any>;
  setDimensionSnaps(dimensionSnaps: NSArray<any> | any[]): void;
  spacingSnaps(): NSArray<any>;
  setSpacingSnaps(spacingSnaps: NSArray<any> | any[]): void;
}

declare class MSSnappingSession extends NSObject {
  static moveSnappingSessionWithItem(item: MSSnapItem): MSSnappingSession;
  static resizeSnappingSessionWithItem_edges(item: MSSnapItem, edges: BCEdge): MSSnappingSession;
  static keySnappingSessionWithItem(item: MSSnapItem): MSSnappingSession;

  sessionType(): MSSnappingSessionType;
  setSessionType(sessionType: MSSnappingSessionType): void;
  snapDistance(): CGFloat;
  setSnapDistance(snapDistance: CGFloat): void;
  zoomScale(): CGFloat;
  setZoomScale(zoomScale: CGFloat): void;
  effectiveSnapDistance(): CGFloat;
  setEffectiveSnapDistance(effectiveSnapDistance: CGFloat): void;
  allowedAxes(): BCAxis;
  setAllowedAxes(allowedAxes: BCAxis): void;
  item(): MSSnapItem;
  setItem(item: MSSnapItem): void;
  snappableEdges(): BCEdge;
  setSnappableEdges(snappableEdges: BCEdge): void;
  snappableAttributes(): NSIndexSet;
  setSnappableAttributes(snappableAttributes: NSIndexSet): void;
  shouldSnapToLayers(): boolean;
  setShouldSnapToLayers(shouldSnapToLayers: boolean): void;
  snappableGuidesMask(): MSAlignmentGuideMask;
  setSnappableGuidesMask(snappableGuidesMask: MSAlignmentGuideMask): void;
}

declare enum MSSnappingSessionType {
  MSSnappingSessionTypeMove,
  MSSnappingSessionTypeResize,
  MSSnappingSessionTypeKey,
}

declare class MSSnappingTarget extends NSObject implements INSCopying {
  initWithGuideLine<T extends MSSnappingTarget>(lineSegment: MSLineSegment): T;
  initWithPosition_onAxis<T extends MSSnappingTarget>(value: CGFloat, axis: BCAxis): T;
  initWithPoint_axis_wantsGuide_length<T extends MSSnappingTarget>(point: NSPoint, axis: BCAxis, showGuide: boolean, length: CGFloat): T;
  initWithPoint_directionVector_guideType<T extends MSSnappingTarget>(point: NSPoint, vector: CGVector, guideType: MSSnappingTargetGuideType): T;
  static targetsForEdgesOfRect_includeCenter(rect: NSRect, includeCenter: boolean): NSArray<any>;
  targetByApplyingTransform(transform: CGAffineTransform): MSSnappingTarget;
  copyWithZone(zone: NSZone | null): any;

  point(): NSPoint;
  setPoint(point: NSPoint): void;
  directionVector(): CGVector;
  setDirectionVector(directionVector: CGVector): void;
  line(): MSLine;
  setLine(line: MSLine): void;
  lineSegment(): MSLineSegment;
  setLineSegment(lineSegment: MSLineSegment): void;
  guideType(): MSSnappingTargetGuideType;
  setGuideType(guideType: MSSnappingTargetGuideType): void;
}

declare enum MSSnappingTargetGuideType {
  MSSnappingTargetGuideNone,
  MSSnappingTargetGuidePoint,
  MSSnappingTargetGuideSegment,
}

declare class MSSortableObjectMenuBuilder extends NSObject implements INSMenuDelegate {
  initWithDelegate<T extends MSSortableObjectMenuBuilder>(delegate: any): T;
  menuItemsForSortableObjects_selectedObjects_target_selector(objects: NSArray<any> | any[], selectedObjects: NSArray<any> | any[], target: any, action: string): NSArray<any>;
  addSortableObjects_selectedObjects_toPopUpButton_target_selector(objects: NSArray<any> | any[], selectedObjects: NSArray<any> | any[], button: NSPopUpButton, target: any, action: string): void;
  menuWillOpen(menu: NSMenu): void;
  prepareForDisplay(menuItem: NSMenuItem): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare interface IMSMenuBuilderDelegate {
  previewColorSpaceForItem(item: NSMenuItem): NSColorSpace;
}

declare class MSStyleOverridePopupButton extends NSPopUpButton {
  buildMenuForOverride_withMenuBuilder_document(primaryOverride: MSAvailableOverride, menuBuilder: MSForeignObjectMenuBuilder, document: MSDocumentData): void;
}

declare class MSStyleOverridePopupButtonCell extends NSPopUpButtonCell {}

declare class MSStylePart extends _MSStylePart implements INSCopying, IMSStylePart {
  previewImageForSize_colorSpace(size: NSSize, colorSpace: NSColorSpace): NSImage;
  hasEqualAppearance(other: MSStylePart): boolean;
  static stylesHaveEqualAppearance(styles: NSArray<any> | any[]): boolean;
  multiplyBy(amount: CGFloat): void;
  parentStyle(): MSStyle;
  parentLayer(): MSStyledLayer;
  static defaultStylePartForStyle(style: MSStyle): MSStylePart;
  blendingViewForColorInspector(blendingViews: NSDictionary<any, any> | {[key: string]: any}): NSView;
  topViewForColorInspector(topViews: NSDictionary<any, any> | {[key: string]: any}): NSView;
  copyWithZone(zone: NSZone | null): any;

  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class MSStylePartInspectorValueAdaptor extends MSInspectorValueAdaptor {}

declare class MSSymbolCreator extends NSObject {
  static canCreateSymbolFromLayers(layers: MSLayerArray): boolean;
  static createSymbolFromLayers_withName_onSymbolsPage(layers: MSLayerArray, name: NSString | string, useSymbolsPage: boolean): MSSymbolInstance;
}

declare class MSSymbolMasterReference extends MSShareableObjectReference {
  symbolMaster(): MSSymbolMaster;
  setSymbolMaster(symbolMaster: MSSymbolMaster): void;
  descriptor(): MSSymbolMasterReferenceDescriptor;
  setDescriptor(descriptor: MSSymbolMasterReferenceDescriptor): void;
}

declare class MSSymbolMasterReferenceDescriptor extends NSObject implements INSPasteboardWriting, INSPasteboardReading {
  static pasteboardType(): NSString;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;
  static readableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  static readingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardReadingOptions;
  initWithPasteboardPropertyList_ofType<T extends MSSymbolMasterReferenceDescriptor>(propertyList: any, type: NSPasteboardType): T;

  libraryLocation(): NSURL;
  setLibraryLocation(libraryLocation: NSURL): void;
  symbolID(): NSString;
  setSymbolID(symbolID: NSString | string): void;
}

declare class MSSymbolPreviewGenerator extends NSObject {
  static imageForSymbolAncestry_withSize_colorSpace_trimmed(ancestry: MSImmutableLayerAncestry, size: NSSize, colorSpace: NSColorSpace, trimmed: boolean): NSImage;
}

declare class MSTextLayer extends _MSTextLayer implements IMSFirstLineTypesetterDelegate, IMSColorConvertible {
  layersByConvertingToOutlines(): NSArray<any>;
  static canSetTextAlignmentForLayers(layers: MSLayerArray): boolean;
  static setTextAlignment_forLayers(alignment: NSTextAlignment, layers: MSLayerArray): void;
  static menuItemStateForAlignment_forLayers(alignment: NSTextAlignment, layers: MSLayerArray): NSInteger;
  static canSetTextVerticalAlignmentForLayers(layers: MSLayerArray): boolean;
  static setTextVerticalAlignment_forLayers(alignment: MSTextStyleVerticalAlignment, layers: MSLayerArray): void;
  static menuItemStateForTextVerticalAlignment_forLayers(alignment: MSTextStyleVerticalAlignment, layers: MSLayerArray): NSInteger;
  static maintainTextLayerBaselinesForLayers_inBlock(textLayers: NSArray<any> | any[], block: BCVoidBlock): void;
  initWithAttributedString_documentColorSpace_maxWidth<T extends MSTextLayer>(attributedString: NSAttributedString | null, colorSpace: NSColorSpace, maxWidth: CGFloat): T;
  initWithFrame_attributes_documentColorSpace_type<T extends MSTextLayer>(aRect: NSRect, attributes: NSDictionary<any, any> | {[key: string]: any} | null, colorSpace: NSColorSpace, behaviourType: BCTextBehaviourType): T;
  changeFont(sender: any | null): void;
  font(): NSFont;
  shapeToUseForTextOnPath(): MSStyledLayer;
  bezierPathFromGlyphsInBounds(): NSBezierPath;
  isEmpty(): boolean;
  finishEditing(): void;
  updateNameFromStorage(): void;
  replaceMissingFontsIfNecessary(): void;
  adjustFrameToFit(): void;
  ignoreDelegateNotificationsInBlock(block: BCVoidBlock): void;
  addAttribute_value_forRange(attributeName: NSString | string, value: any | null, range: NSRange): void;
  setAttributes_forRange(attributes: NSDictionary<any, any> | {[key: string]: any} | null, range: NSRange): void;
  makeUppercase(sender: any | null): IBAction;
  makeLowercase(sender: any | null): IBAction;
  setTextTransform_range(textTransform: MSAttributedStringTextTransform, range: NSRange): void;
  changeListType(textList: NSTextList | null): void;
  syncTextStyleAttributes(): void;
  checkTextBehaviourAndClippingAfterResizeFromCorner_mayClip(corner: BCCorner, mayClip: boolean): void;
  shouldStorePDFPreviews(): boolean;
  PDFPreview(): MSImageData;
  baselineAdjustmentForLayoutManager(layoutManager: NSLayoutManager): CGFloat;
  convertColorsUsing(converter: any): void;

  supportsVerticalAlignment(): boolean;
  setSupportsVerticalAlignment(supportsVerticalAlignment: boolean): void;
  previousRectCache(): NSRect;
  setPreviousRectCache(previousRectCache: NSRect): void;
  isEditingText(): boolean;
  setIsEditingText(isEditingText: boolean): void;
  textAlignment(): NSTextAlignment;
  setTextAlignment(textAlignment: NSTextAlignment): void;
  verticalAlignment(): MSTextStyleVerticalAlignment;
  setVerticalAlignment(verticalAlignment: MSTextStyleVerticalAlignment): void;
  characterSpacing(): NSNumber;
  setCharacterSpacing(characterSpacing: NSNumber | number): void;
  fontPostscriptName(): NSString;
  setFontPostscriptName(fontPostscriptName: NSString | string): void;
  styleAttributes(): NSDictionary<any, any>;
  setStyleAttributes(styleAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  attributedStringValue(): NSAttributedString;
  setAttributedStringValue(attributedStringValue: NSAttributedString): void;
  transientGlyphBoundsValue(): NSValue;
  setTransientGlyphBoundsValue(transientGlyphBoundsValue: NSValue): void;
  textColor(): MSColor;
  setTextColor(textColor: MSColor): void;
  editingDelegate(): any;
  setEditingDelegate(editingDelegate: any): void;
}

declare class MSTextSnapItem extends MSSnapItem {}

declare class MSTextStyleMenuPreview extends NSObject {
  static applyTextStylesToMenuItem_colorSpace(item: NSMenuItem, colorSpace: NSColorSpace): void;
  static attributedTitleForTextStyle_colorSpace(sharedStyle: MSSharedStyle, colorSpace: NSColorSpace): NSAttributedString;
}

declare class MSToggleHUDAction extends MSAction {
  toggleHUD(sender: any): IBAction;
}

declare class MSUserAssetLibrary extends MSAssetLibrary {}

declare class MSVectorHandleStateDecider extends NSObject {
  reset(): void;
  isHandleAtIndexPathSelected(indexPath: NSIndexPath): boolean;
  isHandleAtIndexPathVisible(indexPath: NSIndexPath): boolean;
  stateOfCurvePointAtIndexPath_curveToState_curveFromState(indexPath: NSIndexPath, curveToState: MSHandleState, curveFromState: MSHandleState): MSHandleState;
  indexPathOfHandleAtPoint_tolerance(point: NSPoint, tolerance: CGFloat): NSIndexPath;

  visibilityAroundSelectedHandles(): MSCurveAdjustmentHandleVisibility;
  setVisibilityAroundSelectedHandles(visibilityAroundSelectedHandles: MSCurveAdjustmentHandleVisibility): void;
  visibilityAroundHighlight(): MSCurveAdjustmentHandleVisibility;
  setVisibilityAroundHighlight(visibilityAroundHighlight: MSCurveAdjustmentHandleVisibility): void;
  selectionContext(): MSShapeChangeContext;
  setSelectionContext(selectionContext: MSShapeChangeContext): void;
  indexPathForHighlightedComponent(): NSIndexPath;
  setIndexPathForHighlightedComponent(indexPathForHighlightedComponent: NSIndexPath): void;
}

declare enum MSCurveAdjustmentHandleVisibility {
  MSCurveAdjustmentHandleVisibilityDirect,
  MSCurveAdjustmentHandleVisibilityAdjacent,
  MSCurveAdjustmentHandleVisibilityExtended,
  MSCurveAdjustmentHandleVisibilityAll,
}

declare class MSVectorRounding extends NSObject {
  static precision(): MSVectorPrecision;
  static roundPoint_layer(p: NSPoint, layer: MSLayer): NSPoint;
  static roundPoint(p: NSPoint): NSPoint;
}

declare enum MSVectorPrecision {
  MSVectorPrecisionFreeForm,
  MSVectorPrecisionHalfPixel,
  MSVectorPrecisionPixel,
}

declare class MSViewPort extends NSObject {
  static viewPortWithScrollOrigin_zoom(origin: NSPoint, zoom: CGFloat): MSViewPort;
  static cappedZoom(zoom: CGFloat): CGFloat;
  static minimumZoomValue(): CGFloat;
  static maximumZoomValue(): CGFloat;

  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
}

declare enum MSWebExportLayerBehavior {
  MSWebExportLayerBehaviorDefault = 0,
  MSWebExportLayerBehaviorScrollable = 1 << 0,
  MSWebExportLayerBehaviorFixedToTop = 1 << 1,
  MSWebExportLayerBehaviorFixedToBottom = 1 << 2,
  MSWebExportLayerBehaviorFixed,
}

declare class MSWebExportRequest extends MSExportRequest {
  static webExportRequestForRootLayer_inDocument_atScale(rootLayer: MSImmutableLayer, documentData: MSImmutableDocumentData, scale: CGFloat): MSWebExportRequest;

  rootLayer(): MSImmutableLayer;
  setRootLayer(rootLayer: MSImmutableLayer): void;
  layerBehavior(): MSWebExportLayerBehavior;
  setLayerBehavior(layerBehavior: MSWebExportLayerBehavior): void;
}

declare class MSImmutableArtboardGroup extends _MSImmutableArtboardGroup implements IMSLayerWithBackgroundColor, IMSArtboardGroup, IMSImmutableRootLayer {
  shouldDrawBackgroundInContext(context: MSRenderingContext): boolean;
  immutableBackgroundColor(): MSImmutableColor;
  contentBoundsForDocument(doc: MSImmutableDocumentData): NSRect;

  unscaledNameSize(): NSSize;
  setUnscaledNameSize(unscaledNameSize: NSSize): void;
  preset(): MSArtboardPreset;
  setPreset(preset: MSArtboardPreset): void;
  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
  grid(): MSImmutableSimpleGrid;
  setGrid(grid: MSImmutableSimpleGrid): void;
  layout(): MSImmutableLayoutGrid;
  setLayout(layout: MSImmutableLayoutGrid): void;
}

declare class MSImmutablePage extends _MSImmutablePage implements IMSImmutableRootLayer {
  contentBoundsForDocument(doc: MSImmutableDocumentData): NSRect;
  contentBoundsForDocument(doc: MSImmutableDocumentData): NSRect;

  selectedLayerIDs(): NSSet<any>;
  setSelectedLayerIDs(selectedLayerIDs: NSSet<any>): void;
  artboards(): NSArray<any>;
  setArtboards(artboards: NSArray<any> | any[]): void;
  hasArtboards(): boolean;
  setHasArtboards(hasArtboards: boolean): void;
  symbols(): NSArray<any>;
  setSymbols(symbols: NSArray<any> | any[]): void;
  grid(): MSImmutableSimpleGrid;
  setGrid(grid: MSImmutableSimpleGrid): void;
  layout(): MSImmutableLayoutGrid;
  setLayout(layout: MSImmutableLayoutGrid): void;
}

declare class MSSubtreeRoot extends NSObject {
  contentDirtyDiffRect(): NSRect;
  overlayInfluenceRect(): NSRect;

  webExportableRootLayer(): MSImmutableLayerGroup;
  setWebExportableRootLayer(webExportableRootLayer: MSImmutableLayerGroup): void;
  object(): MSImmutableModelObject;
  setObject(object: MSImmutableModelObject): void;
  ancestorsOfObject(): NSArray<any>;
  setAncestorsOfObject(ancestorsOfObject: NSArray<any> | any[]): void;
  document(): MSImmutableDocumentData;
  setDocument(document: MSImmutableDocumentData): void;
}

declare interface IMSWebExportableRootLayer {
  webExportLayerBehaviorWithRect_fromLayer(rect: CGRect, layer: MSImmutableLayer): MSWebExportLayerBehavior;
  rectInFixedViewportWithRect_fromFixingLayer(rect: CGRect, layer: MSImmutableLayer): CGRect;

  webExporterBackgoundColor(): MSImmutableColor;
  setWebExporterBackgoundColor(webExporterBackgoundColor: MSImmutableColor): void;
  webExporterShouldIncludeBackgroundColor(): boolean;
  setWebExporterShouldIncludeBackgroundColor(webExporterShouldIncludeBackgroundColor: boolean): void;
  isFlowHome(): boolean;
  setIsFlowHome(isFlowHome: boolean): void;
  preset(): MSArtboardPreset;
  setPreset(preset: MSArtboardPreset): void;
  containsFixedLayers(): boolean;
  setContainsFixedLayers(containsFixedLayers: boolean): void;
}

declare class MSWebExporter extends NSObject {
  initWithDocument_name_localURL<T extends MSWebExporter>(doc: MSDocumentData, name: NSString | string, localURL: NSURL): T;
  static exportArtboardsOfDocument_withName_toLocalURL_completionBlock(doc: MSDocumentData, name: NSString | string, localURL: NSURL, completionBlock: MSWebExporterCompletionBlock): void;
  static exportSelectedArtboardsOfDocument_withName_toLocalURL_completionBlock(doc: MSDocumentData, name: NSString | string, localURL: NSURL, completionBlock: MSWebExporterCompletionBlock): void;
  static exportBitmapImageForRequest(request: MSWebExportRequest): NSBitmapImageRep;
  exportArtboardsWithCompletionBlock(completionBlock: MSWebExporterCompletionBlock): void;
  exportDocumentWithUIMetadata_completionBlock(UIMetadata: NSDictionary<any, any> | {[key: string]: any}, completionBlock: MSWebExporterCompletionBlock): void;
  cancel(): void;
  static imageURLWithHash_inDirectory(dataHash: NSString | string, directory: NSURL): NSURL;
  static documentURLInDirectory(directory: NSURL): NSURL;

  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
  destinationURL(): NSURL;
  setDestinationURL(destinationURL: NSURL): void;
  name(): NSString;
  setName(name: NSString | string): void;
  cacheManager(): MSCacheManager;
  setCacheManager(cacheManager: MSCacheManager): void;
  selectiveExport(): boolean;
  setSelectiveExport(selectiveExport: boolean): void;
}

declare interface IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class BCSketchFileMigratorClient extends NSObject {
  validateDocumentAtURL_options_withReply(atURL: NSURL, options: BCSketchFileMigratorOptions, reply: Block): void;
  migrateDocumentAtURL_intoFolderAtURL_options_withReply(atURL: NSURL, intoURL: NSURL, options: BCSketchFileMigratorOptions, reply: Block): void;
  migrateResourcesWithNames_atURL_options_withReply(names: NSArray<any> | any[], url: NSURL, options: BCSketchFileMigratorOptions, reply: Block): void;
}

declare enum BCSketchFileMigratorOptions {
  BCSketchFileMigrateAsynchronous = 0x00,
  BCSketchFileMigrateSynchronous = 0x01,
  BCSketchFileMigratePartOfChain = 0x02,
  BCSketchFileMigrateBadParameters = 0x04,
}

declare class BCSketchFileMigratorError extends NSError {
  static errorWithCode(code: BCSketchFileMigratorErrorCode): BCSketchFileMigratorError;
  static errorWithCode_underlyingCode_missingFonts(code: BCSketchFileMigratorErrorCode, underlyingCode: MSDocumentErrorCode, missingFonts: NSArray<any> | any[]): BCSketchFileMigratorError;
}

declare enum BCSketchFileMigratorErrorCode {
  BCSketchFileMigratorNoError,
  BCSketchFileMigratorGenericError,
  BCSketchFileMigratorBadFromURL,
  BCSketchFileMigratorBadToURL,
  BCSketchFileMigratorFileAlreadyMigrated,
  BCSketchFileMigratorFileTooNew,
  BCSketchFileMigratorFailedToValidateInputFile,
  BCSketchFileMigratorFailedToReadInputFile,
  BCSketchFileMigratorFailedToWriteOutputFile,
  BCSketchFileMigratorXPCInterrupted,
}

declare interface IBCSketchFileMigrator {
  validateDocumentAtBookmark_withReply(bookmark: NSData, reply: Block): void;
  migrateDocumentAtBookmark_intoFolderAtBookmark_withReply(fromBookmark: NSData, toBookmark: NSData, reply: Block): void;
  migrateResourcesNamed_inFolderAtBookmark_withReply(names: NSArray<any> | any[], bookmark: NSData, reply: Block): void;
}

declare class SMKArtboardRequest extends NSObject {
  initWithArtboardID_rect_additive_constrainedToSize_scale_type<T extends SMKArtboardRequest>(artboardID: SCKObjectID, rect: CGRect, additive: boolean, constrainingSize: CGSize, scale: CGFloat, type: SCKFileImageType): T;
  static requestForArtboardID_atScale_type(artboardID: SCKObjectID, scale: CGFloat, type: SCKFileImageType): SMKArtboardRequest;
  static requestForArtboardID_atScale_constrainedToSize_type(artboardID: SCKObjectID, scale: CGFloat, size: CGSize, type: SCKFileImageType): SMKArtboardRequest;
  static requestForArtboardID_atScale_constrainedToSize_inRect_type(artboardID: SCKObjectID, scale: CGFloat, size: CGSize, rect: CGRect, type: SCKFileImageType): SMKArtboardRequest;
  static requestForArtboardID_atScale_additiveInRect_type(artboardID: SCKObjectID, scale: CGFloat, rect: CGRect, type: SCKFileImageType): SMKArtboardRequest;
  squashableWithRequest(request: SMKArtboardRequest): boolean;
  squashedWithRequest(request: SMKArtboardRequest): SMKArtboardRequest;
  urlWithHost_port_token(host: NSString | string, port: NSUInteger, token: NSString | string): NSURL;

  artboardID(): SCKObjectID;
  setArtboardID(artboardID: SCKObjectID): void;
  rect(): CGRect;
  setRect(rect: CGRect): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  constrainingSize(): CGSize;
  setConstrainingSize(constrainingSize: CGSize): void;
  isConstrained(): boolean;
  setIsConstrained(isConstrained: boolean): void;
  isAdditive(): boolean;
  setIsAdditive(isAdditive: boolean): void;
  type(): SCKFileImageType;
  setType(type: SCKFileImageType): void;
}

declare class SMKMirrorController extends NSObject {
  disconnect(): void;
  performArtboardRequest_handler(request: SMKArtboardRequest, handler: Block): void;
  performURLRequest_completionHandler(request: NSURLRequest, completionHandler: Block): void;
  connect(client: SMKMirrorClient): void;
  disconnect(client: SMKMirrorClient): void;
  continueUserActivity(userActivity: NSUserActivity): void;
  whitelistClientAdvertisementID(advertisementID: NSUUID): void;
  isClientWhitelisted(client: SMKMirrorClient): boolean;
  invalidateContent(): void;
  invalidateCurrentArtboard(): void;
  invalidateImageForArtboardIdentifier_inRect(identifier: NSString | string, rect: CGRect): void;

  connectionStatus(): SMKConnectionStatus;
  setConnectionStatus(connectionStatus: SMKConnectionStatus): void;
  connectionType(): SMKConnectionType;
  setConnectionType(connectionType: SMKConnectionType): void;
  serverName(): NSString;
  setServerName(serverName: NSString | string): void;
  canDisconnect(): boolean;
  setCanDisconnect(canDisconnect: boolean): void;
  document(): SCKDocument;
  setDocument(document: SCKDocument): void;
  currentArtboardID(): SCKObjectID;
  setCurrentArtboardID(currentArtboardID: SCKObjectID): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  usbEnabled(): boolean;
  setUsbEnabled(usbEnabled: boolean): void;
  webEnabled(): boolean;
  setWebEnabled(webEnabled: boolean): void;
  netserviceEnabled(): boolean;
  setNetserviceEnabled(netserviceEnabled: boolean): void;
  clients(): NSArray<any>;
  setClients(clients: NSArray<any> | any[]): void;
  hasConnectedClients(): boolean;
  setHasConnectedClients(hasConnectedClients: boolean): void;
  webURL(): NSURL;
  setWebURL(webURL: NSURL): void;
  dataSource(): any;
  setDataSource(dataSource: any): void;
}

declare class SMKUSBConnection extends SMKConnection {}

declare class SMKWebConnection extends SMKConnection {
  initWithAdvertisement<T extends SMKWebConnection>(advertisement: NSDictionary<any, any> | {[key: string]: any}): T;
  destroy(): void;

  advertisement(): NSDictionary<any, any>;
  setAdvertisement(advertisement: NSDictionary<any, any> | {[key: string]: any}): void;
  advertising(): boolean;
  setAdvertising(advertising: boolean): void;
}

declare interface ISMKCommunicationInterface {
  startUsingOptions_webPort(options: SMKCommunicationOptions, port: NSUInteger): void;
  connectionInfoWithReply(reply: Block): void;
  connect(connectionID: NSUUID): void;
  disconnect(connectionID: NSUUID): void;
  broadcastData(data: NSData): void;
  sendData_to(data: NSData, connectionID: NSUUID): void;
}

declare enum SMKCommunicationOptions {
  SMKCommunicationOptionsNone = 0,
  SMKCommunicationOptionsDisableUSB = 1 << 0,
  SMKCommunicationOptionsDisableWeb = 1 << 1,
  SMKCommunicationOptionsDisableNetService = 1 << 2,
}

declare class SMKServerController extends NSObject {
  connections(): NSArray<any>;
  setConnections(connections: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface ISMKServerControllerDelegate {
  serverController_connectionsDidChange(controller: SMKServerController, connections: NSArray<any> | any[]): void;
}

declare class SMKUSBServerConnection extends SMKConnection {
  initWithDeviceID<T extends SMKUSBServerConnection>(deviceID: NSNumber | number): T;

  deviceID(): NSNumber;
  setDeviceID(deviceID: NSNumber | number): void;
}

declare class SMKUSBServerController extends SMKServerController {}

declare class SMKWebServerController extends SMKServerController {
  initWithServerPort<T extends SMKWebServerController>(port: NSUInteger): T;
}

declare interface ISMKCommunicationResponseInterface {
  connectionInfoDidChange(info: NSArray<any> | any[]): void;
  connectionStatusDidChange(info: SMKConnectionInfo): void;
  connectionAdvertisementDidChange(info: SMKConnectionInfo): void;
  connectionInfo_didReceiveData(info: SMKConnectionInfo, data: NSData): void;
}

declare class SMKMirrorClient extends NSObject {
  static clientWithConnectionInfo(connectionInfo: SMKConnectionInfo): SMKMirrorClient;

  connectionID(): NSUUID;
  setConnectionID(connectionID: NSUUID): void;
  advertisement(): SMKAdvertisement;
  setAdvertisement(advertisement: SMKAdvertisement): void;
  status(): SMKConnectionStatus;
  setStatus(status: SMKConnectionStatus): void;
  type(): SMKConnectionType;
  setType(type: SMKConnectionType): void;
}

declare interface ISMKMirrorControllerDelegate {
  mirrorController_didChangeClients(controller: SMKMirrorController, clients: NSArray<any> | any[] | null): void;
  mirrorController_didChangeWebURL(controller: SMKMirrorController, url: NSURL | null): void;
}

declare interface ISMKMirrorDataSource {
  currentArtboardID(): NSString;
  setCurrentArtboardID(currentArtboardID: NSString | string): void;
  manifestContent(): NSDictionary<any, any>;
  setManifestContent(manifestContent: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SMKWebServer extends NSObject {
  start(): void;
  stop(): void;
  authorizeAdvertisementID(connectionID: NSUUID): NSString;
  tokenForAdvertisementID(connectionID: NSUUID): NSString;
  deauthorizeAdvertisementID(connectionID: NSUUID): void;
  invalidateArtboardID(artboardID: NSString | string): void;
  invalidateAllArtboards(): void;
  dataForExportRequest(requestURL: NSURL): NSData;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  dataSource(): any;
  setDataSource(dataSource: any): void;
  port(): NSUInteger;
  setPort(port: NSUInteger): void;
}

declare interface ISMKWebServerDataSource {
  renderExportForRequest_handler(requestURL: NSURL, handler: Block): void;
}

declare class SMKAdvertisement extends NSObject implements INSCopying, INSSecureCoding {
  initWithDictionary<T extends SMKAdvertisement>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  copyWithZone(zone: NSZone | null): any;

  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
  identifier(): NSUUID;
  setIdentifier(identifier: NSUUID): void;
  name(): NSString;
  setName(name: NSString | string): void;
  modelName(): NSString;
  setModelName(modelName: NSString | string): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class SMKConnection extends NSObject {
  connect(): void;
  close(): void;
  sendData(data: NSData): void;
  didReceiveData(data: NSData): void;

  UUID(): NSUUID;
  setUUID(UUID: NSUUID): void;
  error(): NSError;
  setError(error: NSError): void;
  queue(): dispatch_queue_t;
  setQueue(queue: dispatch_queue_t): void;
  advertisement(): NSDictionary<any, any>;
  setAdvertisement(advertisement: NSDictionary<any, any> | {[key: string]: any}): void;
  status(): NSUInteger;
  setStatus(status: NSUInteger): void;
  connectionInfo(): SMKConnectionInfo;
  setConnectionInfo(connectionInfo: SMKConnectionInfo): void;
  connectionType(): NSUInteger;
  setConnectionType(connectionType: NSUInteger): void;
  resourceHost(): NSString;
  setResourceHost(resourceHost: NSString | string): void;
}

declare class SMKConnectionInfo extends NSObject implements INSSecureCoding {
  compareConnectionInfo(info: SMKConnectionInfo): NSComparisonResult;

  UUID(): NSUUID;
  setUUID(UUID: NSUUID): void;
  status(): SMKConnectionStatus;
  setStatus(status: SMKConnectionStatus): void;
  type(): SMKConnectionType;
  setType(type: SMKConnectionType): void;
  advertisement(): NSDictionary<any, any>;
  setAdvertisement(advertisement: NSDictionary<any, any> | {[key: string]: any}): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare enum SMKConnectionStatus {
  SMKConnectionStatusDestroyed,
  SMKConnectionStatusClosed,
  SMKConnectionStatusOpening,
  SMKConnectionStatusOpen,
}

declare enum SMKConnectionType {
  SMKConnectionTypeUSB,
  SMKConnectionTypeBonjour,
  SMKConnectionTypeWeb,
}

declare enum SMKErrorCode {
  SMKConnectionNotEstablishedErrorCode = 2000,
  SMKConnectionDidBecomeCorruptErrorCode = 2001,
  SMKConnectionDidReceiveInvalidDataErrorCode = 2002,
  SMKConnectionCouldNotArchiveObjectErrorCode = 2003,
  SMKConnectionDidTimeoutErrorCode = 2004,
  SMKImageUpdateDataNotAvailableErrorCode = 2005,
}

declare class SMKMessage extends NSObject implements ISMKMessageCoding {
  initWithType<T extends SMKMessage>(type: NSString | string): T;
  static messageFromData(data: NSData): SMKMessage;
  initWithDictionary<T extends SMKMessage>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  type(): NSString;
  setType(type: NSString | string): void;
  contentClass(): any;
  setContentClass(contentClass: any): void;
  content(): any;
  setContent(content: any): void;
  messageData(): NSData;
  setMessageData(messageData: NSData): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SMKManifestMessageContent extends NSObject implements ISMKMessageCoding {
  initWithDictionary<T extends SMKManifestMessageContent>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  manifest(): NSDictionary<any, any>;
  setManifest(manifest: NSDictionary<any, any> | {[key: string]: any}): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SMKArtboardMessageContent extends NSObject implements ISMKMessageCoding {
  initWithDictionary<T extends SMKArtboardMessageContent>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  rect(): CGRect;
  setRect(rect: CGRect): void;
  constrainingSize(): CGSize;
  setConstrainingSize(constrainingSize: CGSize): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SMKConnectionMessageContent extends NSObject implements ISMKMessageCoding {
  initWithDictionary<T extends SMKConnectionMessageContent>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  token(): NSString;
  setToken(token: NSString | string): void;
  device(): NSString;
  setDevice(device: NSString | string): void;
  serverPort(): NSUInteger;
  setServerPort(serverPort: NSUInteger): void;
  serverName(): NSString;
  setServerName(serverName: NSString | string): void;
  supportsURLRequests(): boolean;
  setSupportsURLRequests(supportsURLRequests: boolean): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SMKAdvertisementMessageContent extends NSObject implements ISMKMessageCoding {
  initWithDictionary<T extends SMKAdvertisementMessageContent>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  advertisement(): SMKAdvertisement;
  setAdvertisement(advertisement: SMKAdvertisement): void;
  challenge(): NSString;
  setChallenge(challenge: NSString | string): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare interface ISMKMessageCoding {
  // initWithDictionary<T extends ISMKMessageCoding>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SMKURLResponse extends NSObject implements INSSecureCoding {
  request(): NSURLRequest;
  setRequest(request: NSURLRequest): void;
  response(): NSURLResponse;
  setResponse(response: NSURLResponse): void;
  data(): NSData;
  setData(data: NSData): void;
  error(): NSError;
  setError(error: NSError): void;
  static supportsSecureCoding(): boolean;
  static setSupportsSecureCoding(supportsSecureCoding: boolean): void;
}

declare class SMKUSBHTTPResponse extends SMKURLResponse {}

declare class BCStructuredFile extends NSObject {
  initWithURL_error<T extends BCStructuredFile>(url: NSURL, error: NSError): T;
  metadata(): NSDictionary<any, any>;
  metaDataWithKey(key: NSString | string): any;
  dataWithKey_error(key: NSString | string, error: NSError): NSData;
  close(error: NSError): boolean;
}

declare enum BCStructuredFileErrorCode {
  BCStructuredFileUnknownError,
  BCStructuredFileInvalidURL,
  BCStructuredFileErrorClosed,
}

declare enum BCTextBehaviourType {
  BCTextBehaviourFlexibleWidth,
  BCTextBehaviourFixedWidth,
  BCTextBehaviourFixedWidthAndHeight,
}

declare enum BCTextLineSpacingBehaviourType {
  BCTextLineSpacingBehaviourUnknown = -1,
  BCTextLineSpacingBehaviourV1 = 0,
  BCTextLineSpacingBehaviourV2 = 1,
  BCTextLineSpacingBehaviourV3 = 2,
  BCTextLineSpacingBehaviourCurrent,
  BCTextLineSpacingBehaviourDefault,
}

declare enum MSTextStyleVerticalAlignment {
  MSTextStyleVerticalAlignmentTop = 0,
  MSTextStyleVerticalAlignmentMiddle = 1,
  MSTextStyleVerticalAlignmentBottom = 2,
  MSTextStyleVerticalAlignmentDefault,
}

declare class _MSArtboardGroup extends MSLayerGroup {
  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
  includeBackgroundColorInExport(): boolean;
  setIncludeBackgroundColorInExport(includeBackgroundColorInExport: boolean): void;
  includeInCloudUpload(): boolean;
  setIncludeInCloudUpload(includeInCloudUpload: boolean): void;
  isFlowHome(): boolean;
  setIsFlowHome(isFlowHome: boolean): void;
  presetDictionary(): NSDictionary<any, any>;
  setPresetDictionary(presetDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  resizesContent(): boolean;
  setResizesContent(resizesContent: boolean): void;
  backgroundColor(): MSColor;
  setBackgroundColor(backgroundColor: MSColor): void;
  grid(): MSSimpleGrid;
  setGrid(grid: MSSimpleGrid): void;
  horizontalRulerData(): MSRulerData;
  setHorizontalRulerData(horizontalRulerData: MSRulerData): void;
  layout(): MSLayoutGrid;
  setLayout(layout: MSLayoutGrid): void;
  verticalRulerData(): MSRulerData;
  setVerticalRulerData(verticalRulerData: MSRulerData): void;
}

declare class _MSAssetCollection extends MSModelObject {
  addColor(value: MSColor): void;
  addColors(colors: NSArray<any> | any[]): void;
  insertColor_atIndex(value: MSColor, index: NSUInteger): void;
  insertColor_beforeColor(value: MSColor, after: MSColor | null): void;
  insertColors_beforeColor(values: NSArray<any> | any[], before: MSColor | null): void;
  insertColor_afterColor(value: MSColor, after: MSColor | null): void;
  insertColors_afterColor(values: NSArray<any> | any[], after: MSColor | null): void;
  removeColor(value: MSColor): void;
  removeColorAtIndex(index: NSUInteger): void;
  removeColorsAtIndexes(indexes: NSIndexSet): void;
  removeAllColors(): void;
  moveColorIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addExportPreset(value: MSExportPreset): void;
  addExportPresets(exportPresets: NSArray<any> | any[]): void;
  insertExportPreset_atIndex(value: MSExportPreset, index: NSUInteger): void;
  insertExportPreset_beforeExportPreset(value: MSExportPreset, after: MSExportPreset | null): void;
  insertExportPresets_beforeExportPreset(values: NSArray<any> | any[], before: MSExportPreset | null): void;
  insertExportPreset_afterExportPreset(value: MSExportPreset, after: MSExportPreset | null): void;
  insertExportPresets_afterExportPreset(values: NSArray<any> | any[], after: MSExportPreset | null): void;
  removeExportPreset(value: MSExportPreset): void;
  removeExportPresetAtIndex(index: NSUInteger): void;
  removeExportPresetsAtIndexes(indexes: NSIndexSet): void;
  removeAllExportPresets(): void;
  moveExportPresetIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addGradient(value: MSGradient): void;
  addGradients(gradients: NSArray<any> | any[]): void;
  insertGradient_atIndex(value: MSGradient, index: NSUInteger): void;
  insertGradient_beforeGradient(value: MSGradient, after: MSGradient | null): void;
  insertGradients_beforeGradient(values: NSArray<any> | any[], before: MSGradient | null): void;
  insertGradient_afterGradient(value: MSGradient, after: MSGradient | null): void;
  insertGradients_afterGradient(values: NSArray<any> | any[], after: MSGradient | null): void;
  removeGradient(value: MSGradient): void;
  removeGradientAtIndex(index: NSUInteger): void;
  removeGradientsAtIndexes(indexes: NSIndexSet): void;
  removeAllGradients(): void;
  moveGradientIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  images(): NSArray<any>;
  setImages(images: NSArray<any> | any[]): void;
  colors(): NSArray<any>;
  setColors(colors: NSArray<any> | any[]): void;
  exportPresets(): NSArray<any>;
  setExportPresets(exportPresets: NSArray<any> | any[]): void;
  gradients(): NSArray<any>;
  setGradients(gradients: NSArray<any> | any[]): void;
  imageCollection(): MSImageCollection;
  setImageCollection(imageCollection: MSImageCollection): void;
}

declare class _MSBaseGrid extends MSModelObject {
  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class _MSBitmapLayer extends MSStyledLayer {
  clippingMask(): NSRect;
  setClippingMask(clippingMask: NSRect): void;
  fillReplacesImage(): boolean;
  setFillReplacesImage(fillReplacesImage: boolean): void;
  image(): MSImageData;
  setImage(image: MSImageData): void;
  intendedDPI(): NSInteger;
  setIntendedDPI(intendedDPI: NSInteger): void;
}

declare class _MSColor extends MSModelObject {
  alpha(): CGFloat;
  setAlpha(alpha: CGFloat): void;
  blue(): CGFloat;
  setBlue(blue: CGFloat): void;
  green(): CGFloat;
  setGreen(green: CGFloat): void;
  red(): CGFloat;
  setRed(red: CGFloat): void;
}

declare class _MSCurvePoint extends MSModelObject {
  cornerRadius(): CGFloat;
  setCornerRadius(cornerRadius: CGFloat): void;
  curveFrom(): NSPoint;
  setCurveFrom(curveFrom: NSPoint): void;
  curveMode(): MSCurveMode;
  setCurveMode(curveMode: MSCurveMode): void;
  curveTo(): NSPoint;
  setCurveTo(curveTo: NSPoint): void;
  hasCurveFrom(): boolean;
  setHasCurveFrom(hasCurveFrom: boolean): void;
  hasCurveTo(): boolean;
  setHasCurveTo(hasCurveTo: boolean): void;
  point(): NSPoint;
  setPoint(point: NSPoint): void;
}

declare class _MSDocumentData extends MSModelObject {
  addForeignLayerStyle(value: MSForeignLayerStyle): void;
  addForeignLayerStyles(foreignLayerStyles: NSArray<any> | any[]): void;
  insertForeignLayerStyle_atIndex(value: MSForeignLayerStyle, index: NSUInteger): void;
  insertForeignLayerStyle_beforeForeignLayerStyle(value: MSForeignLayerStyle, after: MSForeignLayerStyle | null): void;
  insertForeignLayerStyles_beforeForeignLayerStyle(values: NSArray<any> | any[], before: MSForeignLayerStyle | null): void;
  insertForeignLayerStyle_afterForeignLayerStyle(value: MSForeignLayerStyle, after: MSForeignLayerStyle | null): void;
  insertForeignLayerStyles_afterForeignLayerStyle(values: NSArray<any> | any[], after: MSForeignLayerStyle | null): void;
  removeForeignLayerStyle(value: MSForeignLayerStyle): void;
  removeForeignLayerStyleAtIndex(index: NSUInteger): void;
  removeForeignLayerStylesAtIndexes(indexes: NSIndexSet): void;
  removeAllForeignLayerStyles(): void;
  moveForeignLayerStyleIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addForeignSymbol(value: MSForeignSymbol): void;
  addForeignSymbols(foreignSymbols: NSArray<any> | any[]): void;
  insertForeignSymbol_atIndex(value: MSForeignSymbol, index: NSUInteger): void;
  insertForeignSymbol_beforeForeignSymbol(value: MSForeignSymbol, after: MSForeignSymbol | null): void;
  insertForeignSymbols_beforeForeignSymbol(values: NSArray<any> | any[], before: MSForeignSymbol | null): void;
  insertForeignSymbol_afterForeignSymbol(value: MSForeignSymbol, after: MSForeignSymbol | null): void;
  insertForeignSymbols_afterForeignSymbol(values: NSArray<any> | any[], after: MSForeignSymbol | null): void;
  removeForeignSymbol(value: MSForeignSymbol): void;
  removeForeignSymbolAtIndex(index: NSUInteger): void;
  removeForeignSymbolsAtIndexes(indexes: NSIndexSet): void;
  removeAllForeignSymbols(): void;
  moveForeignSymbolIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addForeignTextStyle(value: MSForeignTextStyle): void;
  addForeignTextStyles(foreignTextStyles: NSArray<any> | any[]): void;
  insertForeignTextStyle_atIndex(value: MSForeignTextStyle, index: NSUInteger): void;
  insertForeignTextStyle_beforeForeignTextStyle(value: MSForeignTextStyle, after: MSForeignTextStyle | null): void;
  insertForeignTextStyles_beforeForeignTextStyle(values: NSArray<any> | any[], before: MSForeignTextStyle | null): void;
  insertForeignTextStyle_afterForeignTextStyle(value: MSForeignTextStyle, after: MSForeignTextStyle | null): void;
  insertForeignTextStyles_afterForeignTextStyle(values: NSArray<any> | any[], after: MSForeignTextStyle | null): void;
  removeForeignTextStyle(value: MSForeignTextStyle): void;
  removeForeignTextStyleAtIndex(index: NSUInteger): void;
  removeForeignTextStylesAtIndexes(indexes: NSIndexSet): void;
  removeAllForeignTextStyles(): void;
  moveForeignTextStyleIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addPage(value: MSPage): void;
  addPages(pages: NSArray<any> | any[]): void;
  insertPage_atIndex(value: MSPage, index: NSUInteger): void;
  insertPage_beforePage(value: MSPage, after: MSPage | null): void;
  insertPages_beforePage(values: NSArray<any> | any[], before: MSPage | null): void;
  insertPage_afterPage(value: MSPage, after: MSPage | null): void;
  insertPages_afterPage(values: NSArray<any> | any[], after: MSPage | null): void;
  removePage(value: MSPage): void;
  removePageAtIndex(index: NSUInteger): void;
  removePagesAtIndexes(indexes: NSIndexSet): void;
  removeAllPages(): void;
  movePageIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  colorSpace(): MSColorSpace;
  setColorSpace(colorSpace: MSColorSpace): void;
  currentPageIndex(): NSUInteger;
  setCurrentPageIndex(currentPageIndex: NSUInteger): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  assets(): MSAssetCollection;
  setAssets(assets: MSAssetCollection): void;
  foreignLayerStyles(): NSArray<any>;
  setForeignLayerStyles(foreignLayerStyles: NSArray<any> | any[]): void;
  foreignSymbols(): NSArray<any>;
  setForeignSymbols(foreignSymbols: NSArray<any> | any[]): void;
  foreignTextStyles(): NSArray<any>;
  setForeignTextStyles(foreignTextStyles: NSArray<any> | any[]): void;
  layerStyles(): MSSharedStyleContainer;
  setLayerStyles(layerStyles: MSSharedStyleContainer): void;
  layerSymbols(): MSSymbolContainer;
  setLayerSymbols(layerSymbols: MSSymbolContainer): void;
  layerTextStyles(): MSSharedTextStyleContainer;
  setLayerTextStyles(layerTextStyles: MSSharedTextStyleContainer): void;
  pages(): NSArray<any>;
  setPages(pages: NSArray<any> | any[]): void;
}

declare class _MSExportFormat extends MSModelObject {
  absoluteSize(): CGFloat;
  setAbsoluteSize(absoluteSize: CGFloat): void;
  fileFormat(): NSString;
  setFileFormat(fileFormat: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
  namingScheme(): MSExportFormatNamingScheme;
  setNamingScheme(namingScheme: MSExportFormatNamingScheme): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  visibleScaleType(): MSUserVisibleScaleType;
  setVisibleScaleType(visibleScaleType: MSUserVisibleScaleType): void;
}

declare class _MSExportOptions extends MSModelObject {
  addExportFormat(value: MSExportFormat): void;
  addExportFormats(exportFormats: NSArray<any> | any[]): void;
  insertExportFormat_atIndex(value: MSExportFormat, index: NSUInteger): void;
  insertExportFormat_beforeExportFormat(value: MSExportFormat, after: MSExportFormat | null): void;
  insertExportFormats_beforeExportFormat(values: NSArray<any> | any[], before: MSExportFormat | null): void;
  insertExportFormat_afterExportFormat(value: MSExportFormat, after: MSExportFormat | null): void;
  insertExportFormats_afterExportFormat(values: NSArray<any> | any[], after: MSExportFormat | null): void;
  removeExportFormat(value: MSExportFormat): void;
  removeExportFormatAtIndex(index: NSUInteger): void;
  removeExportFormatsAtIndexes(indexes: NSIndexSet): void;
  removeAllExportFormats(): void;
  moveExportFormatIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  includedLayerIds(): NSArray<any>;
  setIncludedLayerIds(includedLayerIds: NSArray<any> | any[]): void;
  layerOptions(): MSExportLayerOptions;
  setLayerOptions(layerOptions: MSExportLayerOptions): void;
  shouldTrim(): boolean;
  setShouldTrim(shouldTrim: boolean): void;
  exportFormats(): NSArray<any>;
  setExportFormats(exportFormats: NSArray<any> | any[]): void;
}

declare class _MSExportPreset extends MSModelObject {
  addExportFormat(value: MSExportFormat): void;
  addExportFormats(exportFormats: NSArray<any> | any[]): void;
  insertExportFormat_atIndex(value: MSExportFormat, index: NSUInteger): void;
  insertExportFormat_beforeExportFormat(value: MSExportFormat, after: MSExportFormat | null): void;
  insertExportFormats_beforeExportFormat(values: NSArray<any> | any[], before: MSExportFormat | null): void;
  insertExportFormat_afterExportFormat(value: MSExportFormat, after: MSExportFormat | null): void;
  insertExportFormats_afterExportFormat(values: NSArray<any> | any[], after: MSExportFormat | null): void;
  removeExportFormat(value: MSExportFormat): void;
  removeExportFormatAtIndex(index: NSUInteger): void;
  removeExportFormatsAtIndexes(indexes: NSIndexSet): void;
  removeAllExportFormats(): void;
  moveExportFormatIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  name(): NSString;
  setName(name: NSString | string): void;
  shouldApplyAutomatically(): boolean;
  setShouldApplyAutomatically(shouldApplyAutomatically: boolean): void;
  exportFormats(): NSArray<any>;
  setExportFormats(exportFormats: NSArray<any> | any[]): void;
}

declare class _MSFlowConnection extends MSModelObject {
  animationType(): NSInteger;
  setAnimationType(animationType: NSInteger): void;
  destinationArtboardID(): NSString;
  setDestinationArtboardID(destinationArtboardID: NSString | string): void;
}

declare class _MSForeignLayerStyle extends MSForeignStyle {}

declare class _MSForeignObject extends MSModelObject {
  libraryID(): NSString;
  setLibraryID(libraryID: NSString | string): void;
  sourceLibraryName(): NSString;
  setSourceLibraryName(sourceLibraryName: NSString | string): void;
}

declare class _MSForeignStyle extends MSForeignObject {
  remoteStyleID(): NSString;
  setRemoteStyleID(remoteStyleID: NSString | string): void;
  localSharedStyle(): MSSharedStyle;
  setLocalSharedStyle(localSharedStyle: MSSharedStyle): void;
}

declare class _MSForeignSymbol extends MSForeignObject {
  originalMaster(): MSSymbolMaster;
  setOriginalMaster(originalMaster: MSSymbolMaster): void;
  symbolMaster(): MSSymbolMaster;
  setSymbolMaster(symbolMaster: MSSymbolMaster): void;
}

declare class _MSForeignTextStyle extends MSForeignStyle {}

declare class _MSGradient extends MSModelObject {
  addGradientStop(value: MSGradientStop): void;
  addGradientStops(stops: NSArray<any> | any[]): void;
  insertGradientStop_atIndex(value: MSGradientStop, index: NSUInteger): void;
  insertGradientStop_beforeGradientStop(value: MSGradientStop, after: MSGradientStop | null): void;
  insertGradientStops_beforeGradientStop(values: NSArray<any> | any[], before: MSGradientStop | null): void;
  insertGradientStop_afterGradientStop(value: MSGradientStop, after: MSGradientStop | null): void;
  insertGradientStops_afterGradientStop(values: NSArray<any> | any[], after: MSGradientStop | null): void;
  removeGradientStop(value: MSGradientStop): void;
  removeGradientStopAtIndex(index: NSUInteger): void;
  removeGradientStopsAtIndexes(indexes: NSIndexSet): void;
  removeAllGradientStops(): void;
  moveGradientStopIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  elipseLength(): CGFloat;
  setElipseLength(elipseLength: CGFloat): void;
  from(): NSPoint;
  setFrom(from: NSPoint): void;
  gradientType(): MSGradientType;
  setGradientType(gradientType: MSGradientType): void;
  to(): NSPoint;
  setTo(to: NSPoint): void;
  stops(): NSArray<any>;
  setStops(stops: NSArray<any> | any[]): void;
}

declare class _MSGradientStop extends MSModelObject {
  position(): CGFloat;
  setPosition(position: CGFloat): void;
  color(): MSColor;
  setColor(color: MSColor): void;
}

declare class _MSGraphicsContextSettings extends MSModelObject {
  blendMode(): MSBlendMode;
  setBlendMode(blendMode: MSBlendMode): void;
  opacity(): CGFloat;
  setOpacity(opacity: CGFloat): void;
}

declare class _MSHotspotLayer extends MSLayer {}

declare class _MSImageCollection extends MSModelObject {
  images(): NSDictionary<any, any>;
  setImages(images: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class _MSImmutableArtboardGroup extends MSImmutableLayerGroup {
  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
  includeBackgroundColorInExport(): boolean;
  setIncludeBackgroundColorInExport(includeBackgroundColorInExport: boolean): void;
  includeInCloudUpload(): boolean;
  setIncludeInCloudUpload(includeInCloudUpload: boolean): void;
  isFlowHome(): boolean;
  setIsFlowHome(isFlowHome: boolean): void;
  presetDictionary(): NSDictionary<any, any>;
  setPresetDictionary(presetDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  resizesContent(): boolean;
  setResizesContent(resizesContent: boolean): void;
  backgroundColor(): MSImmutableColor;
  setBackgroundColor(backgroundColor: MSImmutableColor): void;
  grid(): MSImmutableSimpleGrid;
  setGrid(grid: MSImmutableSimpleGrid): void;
  horizontalRulerData(): MSImmutableRulerData;
  setHorizontalRulerData(horizontalRulerData: MSImmutableRulerData): void;
  layout(): MSImmutableLayoutGrid;
  setLayout(layout: MSImmutableLayoutGrid): void;
  verticalRulerData(): MSImmutableRulerData;
  setVerticalRulerData(verticalRulerData: MSImmutableRulerData): void;
}

declare class _MSImmutableAssetCollection extends MSImmutableModelObject {
  images(): NSArray<any>;
  setImages(images: NSArray<any> | any[]): void;
  colors(): NSArray<any>;
  setColors(colors: NSArray<any> | any[]): void;
  exportPresets(): NSArray<any>;
  setExportPresets(exportPresets: NSArray<any> | any[]): void;
  gradients(): NSArray<any>;
  setGradients(gradients: NSArray<any> | any[]): void;
  imageCollection(): MSImmutableImageCollection;
  setImageCollection(imageCollection: MSImmutableImageCollection): void;
}

declare class _MSImmutableBaseGrid extends MSImmutableModelObject {
  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class _MSImmutableBitmapLayer extends MSImmutableStyledLayer {
  clippingMask(): NSRect;
  setClippingMask(clippingMask: NSRect): void;
  fillReplacesImage(): boolean;
  setFillReplacesImage(fillReplacesImage: boolean): void;
  image(): MSImageData;
  setImage(image: MSImageData): void;
  intendedDPI(): NSInteger;
  setIntendedDPI(intendedDPI: NSInteger): void;
}

declare class _MSImmutableColor extends MSImmutableModelObject {
  alpha(): CGFloat;
  setAlpha(alpha: CGFloat): void;
  blue(): CGFloat;
  setBlue(blue: CGFloat): void;
  green(): CGFloat;
  setGreen(green: CGFloat): void;
  red(): CGFloat;
  setRed(red: CGFloat): void;
}

declare class _MSImmutableCurvePoint extends MSImmutableModelObject {
  cornerRadius(): CGFloat;
  setCornerRadius(cornerRadius: CGFloat): void;
  curveFrom(): NSPoint;
  setCurveFrom(curveFrom: NSPoint): void;
  curveMode(): MSCurveMode;
  setCurveMode(curveMode: MSCurveMode): void;
  curveTo(): NSPoint;
  setCurveTo(curveTo: NSPoint): void;
  hasCurveFrom(): boolean;
  setHasCurveFrom(hasCurveFrom: boolean): void;
  hasCurveTo(): boolean;
  setHasCurveTo(hasCurveTo: boolean): void;
  point(): NSPoint;
  setPoint(point: NSPoint): void;
}

declare class _MSImmutableDocumentData extends MSImmutableModelObject {
  colorSpace(): MSColorSpace;
  setColorSpace(colorSpace: MSColorSpace): void;
  currentPageIndex(): NSUInteger;
  setCurrentPageIndex(currentPageIndex: NSUInteger): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  assets(): MSImmutableAssetCollection;
  setAssets(assets: MSImmutableAssetCollection): void;
  foreignLayerStyles(): NSArray<any>;
  setForeignLayerStyles(foreignLayerStyles: NSArray<any> | any[]): void;
  foreignSymbols(): NSArray<any>;
  setForeignSymbols(foreignSymbols: NSArray<any> | any[]): void;
  foreignTextStyles(): NSArray<any>;
  setForeignTextStyles(foreignTextStyles: NSArray<any> | any[]): void;
  layerStyles(): MSImmutableSharedStyleContainer;
  setLayerStyles(layerStyles: MSImmutableSharedStyleContainer): void;
  layerSymbols(): MSImmutableSymbolContainer;
  setLayerSymbols(layerSymbols: MSImmutableSymbolContainer): void;
  layerTextStyles(): MSImmutableSharedTextStyleContainer;
  setLayerTextStyles(layerTextStyles: MSImmutableSharedTextStyleContainer): void;
  pages(): NSArray<any>;
  setPages(pages: NSArray<any> | any[]): void;
}

declare class _MSImmutableExportFormat extends MSImmutableModelObject {
  absoluteSize(): CGFloat;
  setAbsoluteSize(absoluteSize: CGFloat): void;
  fileFormat(): NSString;
  setFileFormat(fileFormat: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
  namingScheme(): MSExportFormatNamingScheme;
  setNamingScheme(namingScheme: MSExportFormatNamingScheme): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  visibleScaleType(): MSUserVisibleScaleType;
  setVisibleScaleType(visibleScaleType: MSUserVisibleScaleType): void;
}

declare class _MSImmutableExportOptions extends MSImmutableModelObject {
  includedLayerIds(): NSArray<any>;
  setIncludedLayerIds(includedLayerIds: NSArray<any> | any[]): void;
  layerOptions(): MSExportLayerOptions;
  setLayerOptions(layerOptions: MSExportLayerOptions): void;
  shouldTrim(): boolean;
  setShouldTrim(shouldTrim: boolean): void;
  exportFormats(): NSArray<any>;
  setExportFormats(exportFormats: NSArray<any> | any[]): void;
}

declare class _MSImmutableExportPreset extends MSImmutableModelObject {
  name(): NSString;
  setName(name: NSString | string): void;
  shouldApplyAutomatically(): boolean;
  setShouldApplyAutomatically(shouldApplyAutomatically: boolean): void;
  exportFormats(): NSArray<any>;
  setExportFormats(exportFormats: NSArray<any> | any[]): void;
}

declare class _MSImmutableFlowConnection extends MSImmutableModelObject {
  animationType(): NSInteger;
  setAnimationType(animationType: NSInteger): void;
  destinationArtboardID(): NSString;
  setDestinationArtboardID(destinationArtboardID: NSString | string): void;
}

declare class _MSImmutableForeignLayerStyle extends MSImmutableForeignStyle {}

declare class _MSImmutableForeignObject extends MSImmutableModelObject {
  libraryID(): NSString;
  setLibraryID(libraryID: NSString | string): void;
  sourceLibraryName(): NSString;
  setSourceLibraryName(sourceLibraryName: NSString | string): void;
}

declare class _MSImmutableForeignStyle extends MSImmutableForeignObject {
  remoteStyleID(): NSString;
  setRemoteStyleID(remoteStyleID: NSString | string): void;
  localSharedStyle(): MSImmutableSharedStyle;
  setLocalSharedStyle(localSharedStyle: MSImmutableSharedStyle): void;
}

declare class _MSImmutableForeignSymbol extends MSImmutableForeignObject {
  originalMaster(): MSImmutableSymbolMaster;
  setOriginalMaster(originalMaster: MSImmutableSymbolMaster): void;
  symbolMaster(): MSImmutableSymbolMaster;
  setSymbolMaster(symbolMaster: MSImmutableSymbolMaster): void;
}

declare class _MSImmutableForeignTextStyle extends MSImmutableForeignStyle {}

declare class _MSImmutableGradient extends MSImmutableModelObject {
  elipseLength(): CGFloat;
  setElipseLength(elipseLength: CGFloat): void;
  from(): NSPoint;
  setFrom(from: NSPoint): void;
  gradientType(): MSGradientType;
  setGradientType(gradientType: MSGradientType): void;
  to(): NSPoint;
  setTo(to: NSPoint): void;
  stops(): NSArray<any>;
  setStops(stops: NSArray<any> | any[]): void;
}

declare class _MSImmutableGradientStop extends MSImmutableModelObject {
  position(): CGFloat;
  setPosition(position: CGFloat): void;
  color(): MSImmutableColor;
  setColor(color: MSImmutableColor): void;
}

declare class _MSImmutableGraphicsContextSettings extends MSImmutableModelObject {
  blendMode(): MSBlendMode;
  setBlendMode(blendMode: MSBlendMode): void;
  opacity(): CGFloat;
  setOpacity(opacity: CGFloat): void;
}

declare class _MSImmutableHotspotLayer extends MSImmutableLayer {}

declare class _MSImmutableImageCollection extends MSImmutableModelObject {
  images(): NSDictionary<any, any>;
  setImages(images: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class _MSImmutableLayer extends MSImmutableModelObject {
  booleanOperation(): MSBooleanOperation;
  setBooleanOperation(booleanOperation: MSBooleanOperation): void;
  isFixedToViewport(): boolean;
  setIsFixedToViewport(isFixedToViewport: boolean): void;
  isFlippedHorizontal(): boolean;
  setIsFlippedHorizontal(isFlippedHorizontal: boolean): void;
  isFlippedVertical(): boolean;
  setIsFlippedVertical(isFlippedVertical: boolean): void;
  isLocked(): boolean;
  setIsLocked(isLocked: boolean): void;
  isVisible(): boolean;
  setIsVisible(isVisible: boolean): void;
  layerListExpandedType(): MSLayerListStatus;
  setLayerListExpandedType(layerListExpandedType: MSLayerListStatus): void;
  name(): NSString;
  setName(name: NSString | string): void;
  nameIsFixed(): boolean;
  setNameIsFixed(nameIsFixed: boolean): void;
  originalObjectID(): NSString;
  setOriginalObjectID(originalObjectID: NSString | string): void;
  pathInBounds(): MSPath;
  setPathInBounds(pathInBounds: MSPath): void;
  resizingConstraint(): BCConstraint;
  setResizingConstraint(resizingConstraint: BCConstraint): void;
  resizingType(): MSLayerResizingType;
  setResizingType(resizingType: MSLayerResizingType): void;
  rotation(): CGFloat;
  setRotation(rotation: CGFloat): void;
  shouldBreakMaskChain(): boolean;
  setShouldBreakMaskChain(shouldBreakMaskChain: boolean): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  exportOptions(): MSImmutableExportOptions;
  setExportOptions(exportOptions: MSImmutableExportOptions): void;
  flow(): MSImmutableFlowConnection;
  setFlow(flow: MSImmutableFlowConnection): void;
  frame(): MSImmutableRect;
  setFrame(frame: MSImmutableRect): void;
}

declare class _MSImmutableLayerGroup extends MSImmutableStyledLayer {
  hasClickThrough(): boolean;
  setHasClickThrough(hasClickThrough: boolean): void;
  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare class _MSImmutableLayoutGrid extends MSImmutableBaseGrid {
  columnWidth(): CGFloat;
  setColumnWidth(columnWidth: CGFloat): void;
  drawHorizontal(): boolean;
  setDrawHorizontal(drawHorizontal: boolean): void;
  drawHorizontalLines(): boolean;
  setDrawHorizontalLines(drawHorizontalLines: boolean): void;
  drawVertical(): boolean;
  setDrawVertical(drawVertical: boolean): void;
  gutterHeight(): CGFloat;
  setGutterHeight(gutterHeight: CGFloat): void;
  gutterWidth(): CGFloat;
  setGutterWidth(gutterWidth: CGFloat): void;
  guttersOutside(): boolean;
  setGuttersOutside(guttersOutside: boolean): void;
  horizontalOffset(): CGFloat;
  setHorizontalOffset(horizontalOffset: CGFloat): void;
  numberOfColumns(): CGFloat;
  setNumberOfColumns(numberOfColumns: CGFloat): void;
  rowHeightMultiplication(): CGFloat;
  setRowHeightMultiplication(rowHeightMultiplication: CGFloat): void;
  totalWidth(): CGFloat;
  setTotalWidth(totalWidth: CGFloat): void;
}

declare class _MSImmutableOvalShape extends MSImmutableShapePathLayer {}

declare class _MSImmutableOverrideValue extends MSImmutableModelObject {
  overrideName(): NSString;
  setOverrideName(overrideName: NSString | string): void;
  value(): NSObject;
  setValue(value: NSObject): void;
}

declare class _MSImmutablePage extends MSImmutableLayerGroup {
  includeInCloudUpload(): boolean;
  setIncludeInCloudUpload(includeInCloudUpload: boolean): void;
  grid(): MSImmutableSimpleGrid;
  setGrid(grid: MSImmutableSimpleGrid): void;
  horizontalRulerData(): MSImmutableRulerData;
  setHorizontalRulerData(horizontalRulerData: MSImmutableRulerData): void;
  layout(): MSImmutableLayoutGrid;
  setLayout(layout: MSImmutableLayoutGrid): void;
  verticalRulerData(): MSImmutableRulerData;
  setVerticalRulerData(verticalRulerData: MSImmutableRulerData): void;
}

declare class _MSImmutablePolygonShape extends MSImmutableShapePathLayer {
  numberOfPoints(): NSInteger;
  setNumberOfPoints(numberOfPoints: NSInteger): void;
}

declare class _MSImmutableRect extends MSImmutableModelObject {
  constrainProportions(): boolean;
  setConstrainProportions(constrainProportions: boolean): void;
  height(): CGFloat;
  setHeight(height: CGFloat): void;
  width(): CGFloat;
  setWidth(width: CGFloat): void;
  x(): CGFloat;
  setX(x: CGFloat): void;
  y(): CGFloat;
  setY(y: CGFloat): void;
}

declare class _MSImmutableRectangleShape extends MSImmutableShapePathLayer {
  fixedRadius(): CGFloat;
  setFixedRadius(fixedRadius: CGFloat): void;
  hasConvertedToNewRoundCorners(): boolean;
  setHasConvertedToNewRoundCorners(hasConvertedToNewRoundCorners: boolean): void;
}

declare class _MSImmutableRulerData extends MSImmutableModelObject {
  base(): NSInteger;
  setBase(base: NSInteger): void;
  guides(): NSArray<any>;
  setGuides(guides: NSArray<any> | any[]): void;
}

declare class _MSImmutableShapeGroup extends MSImmutableLayerGroup {}

declare class _MSImmutableShapePath extends MSImmutableModelObject {
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  pointRadiusBehaviour(): MSPointRadiusBehaviour;
  setPointRadiusBehaviour(pointRadiusBehaviour: MSPointRadiusBehaviour): void;
  points(): NSArray<any>;
  setPoints(points: NSArray<any> | any[]): void;
}

declare class _MSImmutableShapePathLayer extends MSImmutableStyledLayer {
  edited(): boolean;
  setEdited(edited: boolean): void;
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  pointRadiusBehaviour(): MSPointRadiusBehaviour;
  setPointRadiusBehaviour(pointRadiusBehaviour: MSPointRadiusBehaviour): void;
  points(): NSArray<any>;
  setPoints(points: NSArray<any> | any[]): void;
}

declare class _MSImmutableSharedObject extends MSImmutableModelObject {
  name(): NSString;
  setName(name: NSString | string): void;
  value(): MSImmutableModelObject;
  setValue(value: MSImmutableModelObject): void;
}

declare class _MSImmutableSharedObjectContainer extends MSImmutableModelObject {
  objects(): NSArray<any>;
  setObjects(objects: NSArray<any> | any[]): void;
}

declare class _MSImmutableSharedStyle extends MSImmutableSharedObject {}

declare class _MSImmutableSharedStyleContainer extends MSImmutableSharedObjectContainer {}

declare class _MSImmutableSharedTextStyleContainer extends MSImmutableSharedStyleContainer {}

declare class _MSImmutableSimpleGrid extends MSImmutableBaseGrid {
  gridSize(): NSInteger;
  setGridSize(gridSize: NSInteger): void;
  thickGridTimes(): NSInteger;
  setThickGridTimes(thickGridTimes: NSInteger): void;
}

declare class _MSImmutableSliceLayer extends MSImmutableLayer {
  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
  backgroundColor(): MSImmutableColor;
  setBackgroundColor(backgroundColor: MSImmutableColor): void;
}

declare class _MSImmutableStarShape extends MSImmutableShapePathLayer {
  numberOfPoints(): NSInteger;
  setNumberOfPoints(numberOfPoints: NSInteger): void;
  radius(): CGFloat;
  setRadius(radius: CGFloat): void;
}

declare class _MSImmutableStyle extends MSImmutableModelObject {
  endMarkerType(): MSMarkerType;
  setEndMarkerType(endMarkerType: MSMarkerType): void;
  miterLimit(): NSInteger;
  setMiterLimit(miterLimit: NSInteger): void;
  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
  startMarkerType(): MSMarkerType;
  setStartMarkerType(startMarkerType: MSMarkerType): void;
  windingRule(): NSWindingRule;
  setWindingRule(windingRule: NSWindingRule): void;
  blur(): MSImmutableStyleBlur;
  setBlur(blur: MSImmutableStyleBlur): void;
  borderOptions(): MSImmutableStyleBorderOptions;
  setBorderOptions(borderOptions: MSImmutableStyleBorderOptions): void;
  borders(): NSArray<any>;
  setBorders(borders: NSArray<any> | any[]): void;
  colorControls(): MSImmutableStyleColorControls;
  setColorControls(colorControls: MSImmutableStyleColorControls): void;
  contextSettings(): MSImmutableGraphicsContextSettings;
  setContextSettings(contextSettings: MSImmutableGraphicsContextSettings): void;
  fills(): NSArray<any>;
  setFills(fills: NSArray<any> | any[]): void;
  innerShadows(): NSArray<any>;
  setInnerShadows(innerShadows: NSArray<any> | any[]): void;
  shadows(): NSArray<any>;
  setShadows(shadows: NSArray<any> | any[]): void;
  textStyle(): MSImmutableTextStyle;
  setTextStyle(textStyle: MSImmutableTextStyle): void;
}

declare class _MSImmutableStyleBasicFill extends MSImmutableStylePart {
  fillType(): BCFillType;
  setFillType(fillType: BCFillType): void;
  color(): MSImmutableColor;
  setColor(color: MSImmutableColor): void;
  contextSettings(): MSImmutableGraphicsContextSettings;
  setContextSettings(contextSettings: MSImmutableGraphicsContextSettings): void;
  gradient(): MSImmutableGradient;
  setGradient(gradient: MSImmutableGradient): void;
}

declare class _MSImmutableStyleBlur extends MSImmutableStylePart {
  center(): NSPoint;
  setCenter(center: NSPoint): void;
  motionAngle(): CGFloat;
  setMotionAngle(motionAngle: CGFloat): void;
  radius(): CGFloat;
  setRadius(radius: CGFloat): void;
  saturation(): CGFloat;
  setSaturation(saturation: CGFloat): void;
  type(): MSStyleBlurType;
  setType(type: MSStyleBlurType): void;
}

declare class _MSImmutableStyleBorder extends MSImmutableStyleBasicFill {
  position(): MSBorderPositionType;
  setPosition(position: MSBorderPositionType): void;
  thickness(): CGFloat;
  setThickness(thickness: CGFloat): void;
}

declare class _MSImmutableStyleBorderOptions extends MSImmutableStylePart {
  dashPattern(): NSArray<any>;
  setDashPattern(dashPattern: NSArray<any> | any[]): void;
  lineCapStyle(): NSLineCapStyle;
  setLineCapStyle(lineCapStyle: NSLineCapStyle): void;
  lineJoinStyle(): NSLineJoinStyle;
  setLineJoinStyle(lineJoinStyle: NSLineJoinStyle): void;
}

declare class _MSImmutableStyleColorControls extends MSImmutableStylePart {
  brightness(): CGFloat;
  setBrightness(brightness: CGFloat): void;
  contrast(): CGFloat;
  setContrast(contrast: CGFloat): void;
  hue(): CGFloat;
  setHue(hue: CGFloat): void;
  saturation(): CGFloat;
  setSaturation(saturation: CGFloat): void;
}

declare class _MSImmutableStyleFill extends MSImmutableStyleBasicFill {
  image(): MSImageData;
  setImage(image: MSImageData): void;
  noiseIndex(): NSInteger;
  setNoiseIndex(noiseIndex: NSInteger): void;
  noiseIntensity(): CGFloat;
  setNoiseIntensity(noiseIntensity: CGFloat): void;
  patternFillType(): MSPatternFillType;
  setPatternFillType(patternFillType: MSPatternFillType): void;
  patternTileScale(): CGFloat;
  setPatternTileScale(patternTileScale: CGFloat): void;
}

declare class _MSImmutableStyleInnerShadow extends MSImmutableStyleShadow {}

declare class _MSImmutableStylePart extends MSImmutableModelObject {
  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class _MSImmutableStyleReflection extends MSImmutableStylePart {
  distance(): CGFloat;
  setDistance(distance: CGFloat): void;
  strength(): CGFloat;
  setStrength(strength: CGFloat): void;
}

declare class _MSImmutableStyleShadow extends MSImmutableStylePart {
  blurRadius(): CGFloat;
  setBlurRadius(blurRadius: CGFloat): void;
  offsetX(): CGFloat;
  setOffsetX(offsetX: CGFloat): void;
  offsetY(): CGFloat;
  setOffsetY(offsetY: CGFloat): void;
  spread(): CGFloat;
  setSpread(spread: CGFloat): void;
  color(): MSImmutableColor;
  setColor(color: MSImmutableColor): void;
  contextSettings(): MSImmutableGraphicsContextSettings;
  setContextSettings(contextSettings: MSImmutableGraphicsContextSettings): void;
}

declare class _MSImmutableStyledLayer extends MSImmutableLayer {
  clippingMaskMode(): NSInteger;
  setClippingMaskMode(clippingMaskMode: NSInteger): void;
  hasClippingMask(): boolean;
  setHasClippingMask(hasClippingMask: boolean): void;
  style(): MSImmutableStyle;
  setStyle(style: MSImmutableStyle): void;
}

declare class _MSImmutableSymbol extends MSImmutableSharedObject {}

declare class _MSImmutableSymbolContainer extends MSImmutableSharedObjectContainer {}

declare class _MSImmutableSymbolInstance extends MSImmutableStyledLayer {
  horizontalSpacing(): CGFloat;
  setHorizontalSpacing(horizontalSpacing: CGFloat): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  symbolID(): NSString;
  setSymbolID(symbolID: NSString | string): void;
  verticalSpacing(): CGFloat;
  setVerticalSpacing(verticalSpacing: CGFloat): void;
  overrideValues(): NSArray<any>;
  setOverrideValues(overrideValues: NSArray<any> | any[]): void;
}

declare class _MSImmutableSymbolMaster extends MSImmutableArtboardGroup {
  includeBackgroundColorInInstance(): boolean;
  setIncludeBackgroundColorInInstance(includeBackgroundColorInInstance: boolean): void;
  symbolID(): NSString;
  setSymbolID(symbolID: NSString | string): void;
}

declare class _MSImmutableTextLayer extends MSImmutableStyledLayer {
  attributedString(): MSAttributedString;
  setAttributedString(attributedString: MSAttributedString): void;
  automaticallyDrawOnUnderlyingPath(): boolean;
  setAutomaticallyDrawOnUnderlyingPath(automaticallyDrawOnUnderlyingPath: boolean): void;
  dontSynchroniseWithSymbol(): boolean;
  setDontSynchroniseWithSymbol(dontSynchroniseWithSymbol: boolean): void;
  glyphBounds(): NSRect;
  setGlyphBounds(glyphBounds: NSRect): void;
  lineSpacingBehaviour(): BCTextLineSpacingBehaviourType;
  setLineSpacingBehaviour(lineSpacingBehaviour: BCTextLineSpacingBehaviourType): void;
  preview(): MSImageData;
  setPreview(preview: MSImageData): void;
  textBehaviour(): BCTextBehaviourType;
  setTextBehaviour(textBehaviour: BCTextBehaviourType): void;
}

declare class _MSImmutableTextStyle extends MSImmutableModelObject {
  encodedAttributes(): NSDictionary<any, any>;
  setEncodedAttributes(encodedAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  verticalAlignment(): MSTextStyleVerticalAlignment;
  setVerticalAlignment(verticalAlignment: MSTextStyleVerticalAlignment): void;
}

declare class _MSImmutableTriangleShape extends MSImmutableShapePathLayer {
  isEquilateral(): boolean;
  setIsEquilateral(isEquilateral: boolean): void;
}

declare class _MSLayer extends MSModelObject {
  booleanOperation(): MSBooleanOperation;
  setBooleanOperation(booleanOperation: MSBooleanOperation): void;
  isFixedToViewport(): boolean;
  setIsFixedToViewport(isFixedToViewport: boolean): void;
  isFlippedHorizontal(): boolean;
  setIsFlippedHorizontal(isFlippedHorizontal: boolean): void;
  isFlippedVertical(): boolean;
  setIsFlippedVertical(isFlippedVertical: boolean): void;
  isLocked(): boolean;
  setIsLocked(isLocked: boolean): void;
  isVisible(): boolean;
  setIsVisible(isVisible: boolean): void;
  layerListExpandedType(): MSLayerListStatus;
  setLayerListExpandedType(layerListExpandedType: MSLayerListStatus): void;
  name(): NSString;
  setName(name: NSString | string): void;
  nameIsFixed(): boolean;
  setNameIsFixed(nameIsFixed: boolean): void;
  originalObjectID(): NSString;
  setOriginalObjectID(originalObjectID: NSString | string): void;
  pathInBounds(): MSPath;
  setPathInBounds(pathInBounds: MSPath): void;
  resizingConstraint(): BCConstraint;
  setResizingConstraint(resizingConstraint: BCConstraint): void;
  resizingType(): MSLayerResizingType;
  setResizingType(resizingType: MSLayerResizingType): void;
  rotation(): CGFloat;
  setRotation(rotation: CGFloat): void;
  shouldBreakMaskChain(): boolean;
  setShouldBreakMaskChain(shouldBreakMaskChain: boolean): void;
  userInfo(): NSDictionary<any, any>;
  setUserInfo(userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  exportOptions(): MSExportOptions;
  setExportOptions(exportOptions: MSExportOptions): void;
  flow(): MSFlowConnection;
  setFlow(flow: MSFlowConnection): void;
  frame(): MSRect;
  setFrame(frame: MSRect): void;
}

declare class _MSLayerGroup extends MSStyledLayer {
  addLayer(value: MSLayer): void;
  addLayers(layers: NSArray<any> | any[]): void;
  insertLayer_atIndex(value: MSLayer, index: NSUInteger): void;
  insertLayer_beforeLayer(value: MSLayer, after: MSLayer | null): void;
  insertLayers_beforeLayer(values: NSArray<any> | any[], before: MSLayer | null): void;
  insertLayer_afterLayer(value: MSLayer, after: MSLayer | null): void;
  insertLayers_afterLayer(values: NSArray<any> | any[], after: MSLayer | null): void;
  removeLayer(value: MSLayer): void;
  removeLayerAtIndex(index: NSUInteger): void;
  removeLayersAtIndexes(indexes: NSIndexSet): void;
  removeAllLayers(): void;
  moveLayerIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  hasClickThrough(): boolean;
  setHasClickThrough(hasClickThrough: boolean): void;
  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare class _MSLayoutGrid extends MSBaseGrid {
  columnWidth(): CGFloat;
  setColumnWidth(columnWidth: CGFloat): void;
  drawHorizontal(): boolean;
  setDrawHorizontal(drawHorizontal: boolean): void;
  drawHorizontalLines(): boolean;
  setDrawHorizontalLines(drawHorizontalLines: boolean): void;
  drawVertical(): boolean;
  setDrawVertical(drawVertical: boolean): void;
  gutterHeight(): CGFloat;
  setGutterHeight(gutterHeight: CGFloat): void;
  gutterWidth(): CGFloat;
  setGutterWidth(gutterWidth: CGFloat): void;
  guttersOutside(): boolean;
  setGuttersOutside(guttersOutside: boolean): void;
  horizontalOffset(): CGFloat;
  setHorizontalOffset(horizontalOffset: CGFloat): void;
  numberOfColumns(): CGFloat;
  setNumberOfColumns(numberOfColumns: CGFloat): void;
  rowHeightMultiplication(): CGFloat;
  setRowHeightMultiplication(rowHeightMultiplication: CGFloat): void;
  totalWidth(): CGFloat;
  setTotalWidth(totalWidth: CGFloat): void;
}

declare class _MSOvalShape extends MSShapePathLayer {}

declare class _MSOverrideValue extends MSModelObject {
  overrideName(): NSString;
  setOverrideName(overrideName: NSString | string): void;
  value(): NSObject;
  setValue(value: NSObject): void;
}

declare class _MSPage extends MSLayerGroup {
  includeInCloudUpload(): boolean;
  setIncludeInCloudUpload(includeInCloudUpload: boolean): void;
  grid(): MSSimpleGrid;
  setGrid(grid: MSSimpleGrid): void;
  horizontalRulerData(): MSRulerData;
  setHorizontalRulerData(horizontalRulerData: MSRulerData): void;
  layout(): MSLayoutGrid;
  setLayout(layout: MSLayoutGrid): void;
  verticalRulerData(): MSRulerData;
  setVerticalRulerData(verticalRulerData: MSRulerData): void;
}

declare class _MSPolygonShape extends MSShapePathLayer {
  numberOfPoints(): NSInteger;
  setNumberOfPoints(numberOfPoints: NSInteger): void;
}

declare class _MSRect extends MSModelObject {
  constrainProportions(): boolean;
  setConstrainProportions(constrainProportions: boolean): void;
  height(): CGFloat;
  setHeight(height: CGFloat): void;
  width(): CGFloat;
  setWidth(width: CGFloat): void;
  x(): CGFloat;
  setX(x: CGFloat): void;
  y(): CGFloat;
  setY(y: CGFloat): void;
}

declare class _MSRectangleShape extends MSShapePathLayer {
  fixedRadius(): CGFloat;
  setFixedRadius(fixedRadius: CGFloat): void;
  hasConvertedToNewRoundCorners(): boolean;
  setHasConvertedToNewRoundCorners(hasConvertedToNewRoundCorners: boolean): void;
}

declare class _MSRulerData extends MSModelObject {
  base(): NSInteger;
  setBase(base: NSInteger): void;
  guides(): NSArray<any>;
  setGuides(guides: NSArray<any> | any[]): void;
}

declare class _MSShapeGroup extends MSLayerGroup {}

declare class _MSShapePath extends MSModelObject {
  addCurvePoint(value: MSCurvePoint): void;
  addCurvePoints(points: NSArray<any> | any[]): void;
  insertCurvePoint_atIndex(value: MSCurvePoint, index: NSUInteger): void;
  insertCurvePoint_beforeCurvePoint(value: MSCurvePoint, after: MSCurvePoint | null): void;
  insertCurvePoints_beforeCurvePoint(values: NSArray<any> | any[], before: MSCurvePoint | null): void;
  insertCurvePoint_afterCurvePoint(value: MSCurvePoint, after: MSCurvePoint | null): void;
  insertCurvePoints_afterCurvePoint(values: NSArray<any> | any[], after: MSCurvePoint | null): void;
  removeCurvePoint(value: MSCurvePoint): void;
  removeCurvePointAtIndex(index: NSUInteger): void;
  removeCurvePointsAtIndexes(indexes: NSIndexSet): void;
  removeAllCurvePoints(): void;
  moveCurvePointIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  pointRadiusBehaviour(): MSPointRadiusBehaviour;
  setPointRadiusBehaviour(pointRadiusBehaviour: MSPointRadiusBehaviour): void;
  points(): NSArray<any>;
  setPoints(points: NSArray<any> | any[]): void;
}

declare class _MSShapePathLayer extends MSStyledLayer {
  addCurvePoint(value: MSCurvePoint): void;
  addCurvePoints(points: NSArray<any> | any[]): void;
  insertCurvePoint_atIndex(value: MSCurvePoint, index: NSUInteger): void;
  insertCurvePoint_beforeCurvePoint(value: MSCurvePoint, after: MSCurvePoint | null): void;
  insertCurvePoints_beforeCurvePoint(values: NSArray<any> | any[], before: MSCurvePoint | null): void;
  insertCurvePoint_afterCurvePoint(value: MSCurvePoint, after: MSCurvePoint | null): void;
  insertCurvePoints_afterCurvePoint(values: NSArray<any> | any[], after: MSCurvePoint | null): void;
  removeCurvePoint(value: MSCurvePoint): void;
  removeCurvePointAtIndex(index: NSUInteger): void;
  removeCurvePointsAtIndexes(indexes: NSIndexSet): void;
  removeAllCurvePoints(): void;
  moveCurvePointIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  edited(): boolean;
  setEdited(edited: boolean): void;
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  pointRadiusBehaviour(): MSPointRadiusBehaviour;
  setPointRadiusBehaviour(pointRadiusBehaviour: MSPointRadiusBehaviour): void;
  points(): NSArray<any>;
  setPoints(points: NSArray<any> | any[]): void;
}

declare class _MSSharedObject extends MSModelObject {
  name(): NSString;
  setName(name: NSString | string): void;
  value(): MSModelObjectCommon;
  setValue(value: MSModelObjectCommon): void;
}

declare class _MSSharedObjectContainer extends MSModelObject {
  addSharedObject(value: MSSharedObject): void;
  addSharedObjects(objects: NSArray<any> | any[]): void;
  insertSharedObject_atIndex(value: MSSharedObject, index: NSUInteger): void;
  insertSharedObject_beforeSharedObject(value: MSSharedObject, after: MSSharedObject | null): void;
  insertSharedObjects_beforeSharedObject(values: NSArray<any> | any[], before: MSSharedObject | null): void;
  insertSharedObject_afterSharedObject(value: MSSharedObject, after: MSSharedObject | null): void;
  insertSharedObjects_afterSharedObject(values: NSArray<any> | any[], after: MSSharedObject | null): void;
  removeSharedObject(value: MSSharedObject): void;
  removeSharedObjectAtIndex(index: NSUInteger): void;
  removeSharedObjectsAtIndexes(indexes: NSIndexSet): void;
  removeAllSharedObjects(): void;
  moveSharedObjectIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  objects(): NSArray<any>;
  setObjects(objects: NSArray<any> | any[]): void;
}

declare class _MSSharedStyle extends MSSharedObject {}

declare class _MSSharedStyleContainer extends MSSharedObjectContainer {}

declare class _MSSharedTextStyleContainer extends MSSharedStyleContainer {}

declare class _MSSimpleGrid extends MSBaseGrid {
  gridSize(): NSInteger;
  setGridSize(gridSize: NSInteger): void;
  thickGridTimes(): NSInteger;
  setThickGridTimes(thickGridTimes: NSInteger): void;
}

declare class _MSSliceLayer extends MSLayer {
  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
  backgroundColor(): MSColor;
  setBackgroundColor(backgroundColor: MSColor): void;
}

declare class _MSStarShape extends MSShapePathLayer {
  numberOfPoints(): NSInteger;
  setNumberOfPoints(numberOfPoints: NSInteger): void;
  radius(): CGFloat;
  setRadius(radius: CGFloat): void;
}

declare class _MSStyle extends MSModelObject {
  addStyleBorder(value: MSStyleBorder): void;
  addStyleBorders(borders: NSArray<any> | any[]): void;
  insertStyleBorder_atIndex(value: MSStyleBorder, index: NSUInteger): void;
  insertStyleBorder_beforeStyleBorder(value: MSStyleBorder, after: MSStyleBorder | null): void;
  insertStyleBorders_beforeStyleBorder(values: NSArray<any> | any[], before: MSStyleBorder | null): void;
  insertStyleBorder_afterStyleBorder(value: MSStyleBorder, after: MSStyleBorder | null): void;
  insertStyleBorders_afterStyleBorder(values: NSArray<any> | any[], after: MSStyleBorder | null): void;
  removeStyleBorder(value: MSStyleBorder): void;
  removeStyleBorderAtIndex(index: NSUInteger): void;
  removeStyleBordersAtIndexes(indexes: NSIndexSet): void;
  removeAllStyleBorders(): void;
  moveStyleBorderIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addStyleFill(value: MSStyleFill): void;
  addStyleFills(fills: NSArray<any> | any[]): void;
  insertStyleFill_atIndex(value: MSStyleFill, index: NSUInteger): void;
  insertStyleFill_beforeStyleFill(value: MSStyleFill, after: MSStyleFill | null): void;
  insertStyleFills_beforeStyleFill(values: NSArray<any> | any[], before: MSStyleFill | null): void;
  insertStyleFill_afterStyleFill(value: MSStyleFill, after: MSStyleFill | null): void;
  insertStyleFills_afterStyleFill(values: NSArray<any> | any[], after: MSStyleFill | null): void;
  removeStyleFill(value: MSStyleFill): void;
  removeStyleFillAtIndex(index: NSUInteger): void;
  removeStyleFillsAtIndexes(indexes: NSIndexSet): void;
  removeAllStyleFills(): void;
  moveStyleFillIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addStyleInnerShadow(value: MSStyleInnerShadow): void;
  addStyleInnerShadows(innerShadows: NSArray<any> | any[]): void;
  insertStyleInnerShadow_atIndex(value: MSStyleInnerShadow, index: NSUInteger): void;
  insertStyleInnerShadow_beforeStyleInnerShadow(value: MSStyleInnerShadow, after: MSStyleInnerShadow | null): void;
  insertStyleInnerShadows_beforeStyleInnerShadow(values: NSArray<any> | any[], before: MSStyleInnerShadow | null): void;
  insertStyleInnerShadow_afterStyleInnerShadow(value: MSStyleInnerShadow, after: MSStyleInnerShadow | null): void;
  insertStyleInnerShadows_afterStyleInnerShadow(values: NSArray<any> | any[], after: MSStyleInnerShadow | null): void;
  removeStyleInnerShadow(value: MSStyleInnerShadow): void;
  removeStyleInnerShadowAtIndex(index: NSUInteger): void;
  removeStyleInnerShadowsAtIndexes(indexes: NSIndexSet): void;
  removeAllStyleInnerShadows(): void;
  moveStyleInnerShadowIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;
  addStyleShadow(value: MSStyleShadow): void;
  addStyleShadows(shadows: NSArray<any> | any[]): void;
  insertStyleShadow_atIndex(value: MSStyleShadow, index: NSUInteger): void;
  insertStyleShadow_beforeStyleShadow(value: MSStyleShadow, after: MSStyleShadow | null): void;
  insertStyleShadows_beforeStyleShadow(values: NSArray<any> | any[], before: MSStyleShadow | null): void;
  insertStyleShadow_afterStyleShadow(value: MSStyleShadow, after: MSStyleShadow | null): void;
  insertStyleShadows_afterStyleShadow(values: NSArray<any> | any[], after: MSStyleShadow | null): void;
  removeStyleShadow(value: MSStyleShadow): void;
  removeStyleShadowAtIndex(index: NSUInteger): void;
  removeStyleShadowsAtIndexes(indexes: NSIndexSet): void;
  removeAllStyleShadows(): void;
  moveStyleShadowIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  endMarkerType(): MSMarkerType;
  setEndMarkerType(endMarkerType: MSMarkerType): void;
  miterLimit(): NSInteger;
  setMiterLimit(miterLimit: NSInteger): void;
  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
  startMarkerType(): MSMarkerType;
  setStartMarkerType(startMarkerType: MSMarkerType): void;
  windingRule(): NSWindingRule;
  setWindingRule(windingRule: NSWindingRule): void;
  blur(): MSStyleBlur;
  setBlur(blur: MSStyleBlur): void;
  borderOptions(): MSStyleBorderOptions;
  setBorderOptions(borderOptions: MSStyleBorderOptions): void;
  borders(): NSArray<any>;
  setBorders(borders: NSArray<any> | any[]): void;
  colorControls(): MSStyleColorControls;
  setColorControls(colorControls: MSStyleColorControls): void;
  contextSettings(): MSGraphicsContextSettings;
  setContextSettings(contextSettings: MSGraphicsContextSettings): void;
  fills(): NSArray<any>;
  setFills(fills: NSArray<any> | any[]): void;
  innerShadows(): NSArray<any>;
  setInnerShadows(innerShadows: NSArray<any> | any[]): void;
  shadows(): NSArray<any>;
  setShadows(shadows: NSArray<any> | any[]): void;
  textStyle(): MSTextStyle;
  setTextStyle(textStyle: MSTextStyle): void;
}

declare class _MSStyleBasicFill extends MSStylePart {
  fillType(): BCFillType;
  setFillType(fillType: BCFillType): void;
  color(): MSColor;
  setColor(color: MSColor): void;
  contextSettings(): MSGraphicsContextSettings;
  setContextSettings(contextSettings: MSGraphicsContextSettings): void;
  gradient(): MSGradient;
  setGradient(gradient: MSGradient): void;
}

declare class _MSStyleBlur extends MSStylePart {
  center(): NSPoint;
  setCenter(center: NSPoint): void;
  motionAngle(): CGFloat;
  setMotionAngle(motionAngle: CGFloat): void;
  radius(): CGFloat;
  setRadius(radius: CGFloat): void;
  saturation(): CGFloat;
  setSaturation(saturation: CGFloat): void;
  type(): MSStyleBlurType;
  setType(type: MSStyleBlurType): void;
}

declare class _MSStyleBorder extends MSStyleBasicFill {
  position(): MSBorderPositionType;
  setPosition(position: MSBorderPositionType): void;
  thickness(): CGFloat;
  setThickness(thickness: CGFloat): void;
}

declare class _MSStyleBorderOptions extends MSStylePart {
  dashPattern(): NSArray<any>;
  setDashPattern(dashPattern: NSArray<any> | any[]): void;
  lineCapStyle(): NSLineCapStyle;
  setLineCapStyle(lineCapStyle: NSLineCapStyle): void;
  lineJoinStyle(): NSLineJoinStyle;
  setLineJoinStyle(lineJoinStyle: NSLineJoinStyle): void;
}

declare class _MSStyleColorControls extends MSStylePart {
  brightness(): CGFloat;
  setBrightness(brightness: CGFloat): void;
  contrast(): CGFloat;
  setContrast(contrast: CGFloat): void;
  hue(): CGFloat;
  setHue(hue: CGFloat): void;
  saturation(): CGFloat;
  setSaturation(saturation: CGFloat): void;
}

declare class _MSStyleFill extends MSStyleBasicFill {
  image(): MSImageData;
  setImage(image: MSImageData): void;
  noiseIndex(): NSInteger;
  setNoiseIndex(noiseIndex: NSInteger): void;
  noiseIntensity(): CGFloat;
  setNoiseIntensity(noiseIntensity: CGFloat): void;
  patternFillType(): MSPatternFillType;
  setPatternFillType(patternFillType: MSPatternFillType): void;
  patternTileScale(): CGFloat;
  setPatternTileScale(patternTileScale: CGFloat): void;
}

declare class _MSStyleInnerShadow extends MSStyleShadow {}

declare class _MSStylePart extends MSModelObject {
  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class _MSStyleReflection extends MSStylePart {
  distance(): CGFloat;
  setDistance(distance: CGFloat): void;
  strength(): CGFloat;
  setStrength(strength: CGFloat): void;
}

declare class _MSStyleShadow extends MSStylePart {
  blurRadius(): CGFloat;
  setBlurRadius(blurRadius: CGFloat): void;
  offsetX(): CGFloat;
  setOffsetX(offsetX: CGFloat): void;
  offsetY(): CGFloat;
  setOffsetY(offsetY: CGFloat): void;
  spread(): CGFloat;
  setSpread(spread: CGFloat): void;
  color(): MSColor;
  setColor(color: MSColor): void;
  contextSettings(): MSGraphicsContextSettings;
  setContextSettings(contextSettings: MSGraphicsContextSettings): void;
}

declare class _MSStyledLayer extends MSLayer {
  clippingMaskMode(): NSInteger;
  setClippingMaskMode(clippingMaskMode: NSInteger): void;
  hasClippingMask(): boolean;
  setHasClippingMask(hasClippingMask: boolean): void;
  style(): MSStyle;
  setStyle(style: MSStyle): void;
}

declare class _MSSymbol extends MSSharedObject {}

declare class _MSSymbolContainer extends MSSharedObjectContainer {}

declare class _MSSymbolInstance extends MSStyledLayer {
  addOverrideValue(value: MSOverrideValue): void;
  addOverrideValues(overrideValues: NSArray<any> | any[]): void;
  insertOverrideValue_atIndex(value: MSOverrideValue, index: NSUInteger): void;
  insertOverrideValue_beforeOverrideValue(value: MSOverrideValue, after: MSOverrideValue | null): void;
  insertOverrideValues_beforeOverrideValue(values: NSArray<any> | any[], before: MSOverrideValue | null): void;
  insertOverrideValue_afterOverrideValue(value: MSOverrideValue, after: MSOverrideValue | null): void;
  insertOverrideValues_afterOverrideValue(values: NSArray<any> | any[], after: MSOverrideValue | null): void;
  removeOverrideValue(value: MSOverrideValue): void;
  removeOverrideValueAtIndex(index: NSUInteger): void;
  removeOverrideValuesAtIndexes(indexes: NSIndexSet): void;
  removeAllOverrideValues(): void;
  moveOverrideValueIndex_toIndex(fromIndex: NSUInteger, toIndex: NSUInteger): void;

  horizontalSpacing(): CGFloat;
  setHorizontalSpacing(horizontalSpacing: CGFloat): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  symbolID(): NSString;
  setSymbolID(symbolID: NSString | string): void;
  verticalSpacing(): CGFloat;
  setVerticalSpacing(verticalSpacing: CGFloat): void;
  overrideValues(): NSArray<any>;
  setOverrideValues(overrideValues: NSArray<any> | any[]): void;
}

declare class _MSSymbolMaster extends MSArtboardGroup {
  includeBackgroundColorInInstance(): boolean;
  setIncludeBackgroundColorInInstance(includeBackgroundColorInInstance: boolean): void;
  symbolID(): NSString;
  setSymbolID(symbolID: NSString | string): void;
}

declare class _MSTextLayer extends MSStyledLayer {
  attributedString(): MSAttributedString;
  setAttributedString(attributedString: MSAttributedString): void;
  automaticallyDrawOnUnderlyingPath(): boolean;
  setAutomaticallyDrawOnUnderlyingPath(automaticallyDrawOnUnderlyingPath: boolean): void;
  dontSynchroniseWithSymbol(): boolean;
  setDontSynchroniseWithSymbol(dontSynchroniseWithSymbol: boolean): void;
  glyphBounds(): NSRect;
  setGlyphBounds(glyphBounds: NSRect): void;
  lineSpacingBehaviour(): BCTextLineSpacingBehaviourType;
  setLineSpacingBehaviour(lineSpacingBehaviour: BCTextLineSpacingBehaviourType): void;
  preview(): MSImageData;
  setPreview(preview: MSImageData): void;
  textBehaviour(): BCTextBehaviourType;
  setTextBehaviour(textBehaviour: BCTextBehaviourType): void;
}

declare class _MSTextStyle extends MSModelObject {
  encodedAttributes(): NSDictionary<any, any>;
  setEncodedAttributes(encodedAttributes: NSDictionary<any, any> | {[key: string]: any}): void;
  verticalAlignment(): MSTextStyleVerticalAlignment;
  setVerticalAlignment(verticalAlignment: MSTextStyleVerticalAlignment): void;
}

declare class _MSTriangleShape extends MSShapePathLayer {
  isEquilateral(): boolean;
  setIsEquilateral(isEquilateral: boolean): void;
}

declare class MSImmutableArray extends MSImmutableModelObject {}

declare class MSImmutableAssetCollection extends _MSImmutableAssetCollection {}

declare class MSImmutableBaseGrid extends _MSImmutableBaseGrid {
  shouldDrawAtZoom(zoom: CGFloat): boolean;
  static displayableAtZoom(zoom: CGFloat): boolean;
}

declare class MSImmutableBitmapLayer extends _MSImmutableBitmapLayer {
  NSImage(): NSImage;

  fillReplacesImage(): boolean;
  setFillReplacesImage(fillReplacesImage: boolean): void;
  image(): MSImageData;
  setImage(image: MSImageData): void;
}

declare class MSImmutableCurvePoint extends _MSImmutableCurvePoint implements IMSCurvePoint {
  isStraight(): boolean;
  setIsStraight(isStraight: boolean): void;
  isRounded(): boolean;
  setIsRounded(isRounded: boolean): void;
}

declare class MSImmutableDocumentData extends _MSImmutableDocumentData implements IMSDocumentData {
  static loadDocumentDataWithMetadata_loadBlock(metadata: NSDictionary<any, any> | {[key: string]: any}, loadBlock: Block): MSImmutableDocumentData;
  defaultPagesArray(): NSArray<any>;
  usedFontNames(): NSSet<any>;
  pageWithID(pageID: NSString | string): MSImmutablePage;
  symbolWithID(objectID: NSString | string): MSImmutableSymbolMaster;
  artboardWithID(objectID: NSString | string | null): MSImmutableArtboardGroup;
  textStyleWithID(sharedStyleID: NSString | string | null): MSImmutableSharedStyle;
  layerStyleWithID(sharedStyleID: NSString | string | null): MSImmutableSharedStyle;
  artboardWithID_page(objectID: NSString | string, pageOut: MSImmutablePage): MSImmutableArtboardGroup;
  wasSavedByOldVersion(): boolean;
  wasSavedByTestVersion(): boolean;
  allArtboards(): NSArray<any>;
  allSymbols(): NSArray<any>;
  pagesAndArtboardsMetadata(): NSDictionary<any, any>;
  findFrequentColorsForUse_maximumColorCount_ignoreAlpha_excludeForeignSymbols_completionHandler(colorUse: MSColorUse, maxCount: NSUInteger, ignoreAlpha: boolean, excludeForeignSymbols: boolean, block: MSColorFinderCompletionBlock): void;
  trackColors_excludeForeignSymbols(tracker: MSFrequentColorTracker, excludeForeignSymbols: boolean): void;
  symbolsChangedSincePreviousDocument(lastImmutable: MSImmutableDocumentData): boolean;

  metadata(): NSDictionary<any, any>;
  setMetadata(metadata: NSDictionary<any, any> | {[key: string]: any}): void;
  currentPage(): MSImmutablePage;
  setCurrentPage(currentPage: MSImmutablePage): void;
  fontNames(): NSSet<any>;
  setFontNames(fontNames: NSSet<any>): void;
  unavailableFontNames(): NSSet<any>;
  setUnavailableFontNames(unavailableFontNames: NSSet<any>): void;
  containsUnavailableFontNames(): boolean;
  setContainsUnavailableFontNames(containsUnavailableFontNames: boolean): void;
  pages(): NSArray<any>;
  setPages(pages: NSArray<any> | any[]): void;
}

declare class MSImmutableExportFormat extends _MSImmutableExportFormat {
  static defaultNameForScale(scale: CGFloat): NSString;
  exportScaleInRect(rect: NSRect): CGFloat;
  isVectorExport(): boolean;
}

declare class MSImmutableExportOptions extends _MSImmutableExportOptions {
  firstFormat(): NSString;
}

declare class MSImmutableExportPreset extends _MSImmutableExportPreset {}

declare class MSImmutableFlowConnection extends _MSImmutableFlowConnection {
  flowTypeForTransitionFromParentLayer_toArtboard(layer: MSImmutableLayerAncestry, artboard: MSImmutableLayerAncestry): MSFlowType;
  bezierPathForRenderingFlowFromParentLayer_toArtboard_zoomLevel(layer: MSImmutableLayerAncestry, destinationArtboard: MSImmutableLayerAncestry, zoomLevel: CGFloat): NSBezierPath;
  isValidFlowConnectionInDocumentData(documentData: MSImmutableDocumentData): boolean;

  isBackAction(): boolean;
  setIsBackAction(isBackAction: boolean): void;
}

declare class MSImmutableForeignLayerStyle extends _MSImmutableForeignLayerStyle {}

declare class MSImmutableForeignObject extends _MSImmutableForeignObject {}

declare class MSImmutableForeignStyle extends _MSImmutableForeignStyle {}

declare class MSImmutableForeignSymbol extends _MSImmutableForeignSymbol {}

declare class MSImmutableForeignTextStyle extends _MSImmutableForeignTextStyle {}

declare class MSImmutableGradient extends _MSImmutableGradient {
  static defaultGradientStops(): NSArray<any>;
  defaultStopsArray(): NSArray<any>;
  conditionedEllipseLength(): CGFloat;
  pointAtIndex(index: NSUInteger): NSPoint;
  newCGGradientForColorSpace(colorSpace: CGColorSpaceRef): CGGradientRef;
  newCGGradientForColorSpace_colorConverter(colorSpace: CGColorSpaceRef, colorConverter: Block): CGGradientRef;
  NSGradientWithColorSpace(colorSpace: NSColorSpace): NSGradient;
  ellipseTransformInRect(aRect: NSRect): CGAffineTransform;
  angularGradientImageInRect_colorSpace(rect: CGRect, colorSpace: NSColorSpace): NSBitmapImageRep;
  drawFillInRect_forBorderThickness_context_cacheKey(rect: NSRect, thickness: CGFloat, context: MSRenderingContext, cacheKey: MSModelObjectCacheGeneration): void;

  hasOpacity(): boolean;
  setHasOpacity(hasOpacity: boolean): void;
}

declare class MSImmutableGradientStop extends _MSImmutableGradientStop {
  initWithPosition_color<T extends MSImmutableGradientStop>(position: CGFloat, color: MSImmutableColor): T;
}

declare class MSImmutableGraphicsContextSettings extends _MSImmutableGraphicsContextSettings {
  shouldChangeGraphicsContext(): boolean;
  CGBlendMode(): CGBlendMode;
}

declare class MSImmutableImageCollection extends _MSImmutableImageCollection {
  imageWithSHA1(sha1: NSData): MSImageData;
}

declare class MSImmutableSymbolInstance extends _MSImmutableSymbolInstance {
  initWithGroupForMigration<T extends MSImmutableSymbolInstance>(group: MSImmutableLayerGroup): T;
  isScaled(): boolean;
  availableOverridesWithDocument(document: MSImmutableDocumentData): NSArray<any>;
  cachedModifiedSymbolForMaster_document_cache(originalSymbol: MSImmutableSymbolMaster, doc: MSImmutableDocumentData, cache: BCCache): MSImmutableSymbolMaster;
  updateOverridesWithObjectIDMapping_afterChangingSymbolMasterWithID(objectIDMapping: NSDictionary<any, any> | {[key: string]: any}, symbolID: NSString | string): void;
  overridesWithGridIndexRemoved(overrides: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  overridePointsInDocument(document: MSImmutableDocumentData): NSArray<any>;
  calculateAvailableOverridesWithDocument(document: MSImmutableDocumentData): NSArray<any>;
  cachedModifiedSymbolForMaster_inContext(originalSymbol: MSImmutableSymbolMaster, context: MSRenderingContext): MSImmutableSymbolMaster;

  modifiedMasterCacheKey(): any;
  setModifiedMasterCacheKey(modifiedMasterCacheKey: any): void;
  masterRefreshCounter(): NSUInteger;
  setMasterRefreshCounter(masterRefreshCounter: NSUInteger): void;
  overrides(): NSDictionary<any, any>;
  setOverrides(overrides: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare interface IMSFlowContainmentCheck {
  firstFlowWithSymbolsFromDocument(document: MSImmutableDocumentData): MSImmutableFlowConnection;
  containsFlowWithSymbolsFromDocument(document: MSImmutableDocumentData): boolean;
}

declare class MSImmutableLayoutGrid extends _MSImmutableLayoutGrid {}

declare class MSImmutableModelObject extends MSModelObjectCommon implements IMSModelObject, IMSCoding {
  differsFromObject(object: MSImmutableModelObject): boolean;
  shouldDiffSubObjectsForDifferingObject(objet: MSImmutableModelObject): boolean;
  initWithMutableModelObject<T extends MSImmutableModelObject>(object: MSModelObject): T;
  newMutableCounterpart(): any;
  static mutableClass(): any;
  isEqualForDiffToObject(otherObject: any): boolean;
  keysDifferingFromObject(object: MSImmutableModelObject): NSSet<any>;
  static traitsForPropertyName(name: NSString | string): MSPropertyTraits;
  encodePropertiesWithCoder(coder: MSBaseArchiver): void;
  decodePropertiesWithUnarchiver(coder: MSBaseUnarchiver): void;
  performInitWithMutableModelObject(object: MSModelObject): void;
  performInitWithUnarchiver(coder: MSBaseUnarchiver): void;
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  initWithUnarchiver<T extends MSImmutableModelObject>(unarchiver: MSBaseUnarchiver): T;
  // initWithUnarchiver_migratingFrom_toVersion<T extends MSImmutableModelObject>(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): T;

  subObjectsForTreeDiff(): NSArray<any>;
  setSubObjectsForTreeDiff(subObjectsForTreeDiff: NSArray<any> | any[]): void;
  archiveReferenceIdentifier_bc(): NSString;
  setArchiveReferenceIdentifier_bc(archiveReferenceIdentifier_bc: NSString | string): void;
}

declare enum MSPropertyTraits {
  MSPropertyTraitNone = 0,
  MSPropertyTraitInfluencesContentRender = 1<<1,
  MSPropertyTraitInfluencesOverlayRender = 1<<2,
  MSPropertyTraitChangesHistory = 1<<3,
  MSPropertyTraitAmendsHistory = 1<<4,
  MSPropertyTraitInfluencesLayerStructure = 1<<5,
  MSPropertyTraitInfluencesMirror = 1<<6,
  MSPropertyTraitRequiresFullContentRefresh = 1<<7,
  MSPropertyTraitInfluencesLayerListPreview = 1<<8,
}

declare class MSImmutableOvalShape extends _MSImmutableOvalShape {}

declare class MSImmutableOverrideValue extends _MSImmutableOverrideValue {
  initWithName_value<T extends MSImmutableOverrideValue>(name: NSString | string, value: NSObject): T;
  static overrideValuesFromDictionary(dict: NSDictionary<any, any> | {[key: string]: any} | null): NSArray<any>;
  static dictionaryFromOverrideValues(overrideValues: NSArray<any> | any[] | null): NSDictionary<any, any>;

  attributeName(): NSString;
  setAttributeName(attributeName: NSString | string): void;
  path(): NSString;
  setPath(path: NSString | string): void;
}

declare class MSImmutablePersistentAssetCollection extends MSImmutableAssetCollection {}

declare class MSImmutablePolygonShape extends _MSImmutablePolygonShape {}

declare class MSImmutableRect extends _MSImmutableRect implements IMSRect {
  initWithRect<T extends MSImmutableRect>(aRect: NSRect): T;
  initWithRect_constrainProportions<T extends MSImmutableRect>(aRect: NSRect, constraintProportions: boolean): T;

  rect(): NSRect;
  setRect(rect: NSRect): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  origin(): NSPoint;
  setOrigin(origin: NSPoint): void;
}

declare class MSImmutableRectangleShape extends _MSImmutableRectangleShape {}

declare class MSImmutableRulerData extends _MSImmutableRulerData {}

declare class MSImmutableShapePath extends _MSImmutableShapePath {}

declare class MSImmutableSharedObject extends _MSImmutableSharedObject {}

declare class MSImmutableSharedObjectContainer extends _MSImmutableSharedObjectContainer {}

declare class MSImmutableSharedStyle extends _MSImmutableSharedStyle {}

declare class MSImmutableSharedStyleContainer extends _MSImmutableSharedStyleContainer {}

declare class MSImmutableSharedTextStyleContainer extends _MSImmutableSharedTextStyleContainer {}

declare class MSImmutableSimpleGrid extends _MSImmutableSimpleGrid {}

declare class MSImmutableStarShape extends _MSImmutableStarShape {}

declare class MSImmutableStyle extends _MSImmutableStyle {
  clearTextStyle(): void;
  boundingBoxForBiggestShadowSpreadForLayer(layer: MSImmutableLayer): NSRect;
  renderBitmapEffects(image: CIImage): CIImage;
  requiresPathDefinition(exporter: SketchSVGExporter): boolean;
  numberOfElementsWithExporter(exporter: SketchSVGExporter): NSUInteger;
  addSVGAttributes_exporter_elementPosition(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter, position: NSUInteger): void;
  borderAtElementPosition_exporter(position: NSInteger, exporter: SketchSVGExporter): MSImmutableStyleBorder;
  fillAtElementPosition_exporter(position: NSInteger, exporter: SketchSVGExporter): MSImmutableStyleFill;

  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  hasMoreThanOneEnabledFill(): boolean;
  setHasMoreThanOneEnabledFill(hasMoreThanOneEnabledFill: boolean): void;
  hasEnabledShadow(): boolean;
  setHasEnabledShadow(hasEnabledShadow: boolean): void;
  hasEnabledInnerShadow(): boolean;
  setHasEnabledInnerShadow(hasEnabledInnerShadow: boolean): void;
  hasEnabledBorder(): boolean;
  setHasEnabledBorder(hasEnabledBorder: boolean): void;
  hasEnabledFill(): boolean;
  setHasEnabledFill(hasEnabledFill: boolean): void;
  hasBlending(): boolean;
  setHasBlending(hasBlending: boolean): void;
  thickestStroke(): CGFloat;
  setThickestStroke(thickestStroke: CGFloat): void;
  thickestInnerStroke(): CGFloat;
  setThickestInnerStroke(thickestInnerStroke: CGFloat): void;
  outerPaddingForBiggestStroke(): CGFloat;
  setOuterPaddingForBiggestStroke(outerPaddingForBiggestStroke: CGFloat): void;
  outerPaddingForBiggestShadowSpread(): CGFloat;
  setOuterPaddingForBiggestShadowSpread(outerPaddingForBiggestShadowSpread: CGFloat): void;
  hasEnabledBackgroundBlur(): boolean;
  setHasEnabledBackgroundBlur(hasEnabledBackgroundBlur: boolean): void;
  firstEnabledShadow(): MSImmutableStyleShadow;
  setFirstEnabledShadow(firstEnabledShadow: MSImmutableStyleShadow): void;
  firstEnabledInnerShadow(): MSImmutableStyleInnerShadow;
  setFirstEnabledInnerShadow(firstEnabledInnerShadow: MSImmutableStyleInnerShadow): void;
  firstEnabledFill(): MSImmutableStyleFill;
  setFirstEnabledFill(firstEnabledFill: MSImmutableStyleFill): void;
  firstEnabledBorder(): MSImmutableStyleBorder;
  setFirstEnabledBorder(firstEnabledBorder: MSImmutableStyleBorder): void;
  enabledFills(): NSArray<any>;
  setEnabledFills(enabledFills: NSArray<any> | any[]): void;
  enabledBorders(): NSArray<any>;
  setEnabledBorders(enabledBorders: NSArray<any> | any[]): void;
  enabledShadows(): NSArray<any>;
  setEnabledShadows(enabledShadows: NSArray<any> | any[]): void;
  enabledInnerShadows(): NSArray<any>;
  setEnabledInnerShadows(enabledInnerShadows: NSArray<any> | any[]): void;
  hasEnabledOpaqueFill(): boolean;
  setHasEnabledOpaqueFill(hasEnabledOpaqueFill: boolean): void;
  renderableFills(): NSArray<any>;
  setRenderableFills(renderableFills: NSArray<any> | any[]): void;
}

declare class MSImmutableStyleBasicFill extends _MSImmutableStyleBasicFill {
  hasOpacity(): boolean;
  setHasOpacity(hasOpacity: boolean): void;
}

declare class MSImmutableStyleBlur extends _MSImmutableStyleBlur {
  cropRadius(): CGFloat;
  renderBitmapEffects(image: CIImage): CIImage;
  shouldUseCoreImageForEffect(): boolean;
  addFilterWithExporter(exporter: SketchSVGExporter): void;
}

declare class MSImmutableStyleBorder extends _MSImmutableStyleBorder {
  drawBorder_advancedOptions_context(path: MSPath, advanced: MSImmutableStyleBorderOptions, context: MSRenderingContext): void;
  drawGradientBorder_advancedOptions_originalPath_isArtistic_frame_context(path: MSPath, advanced: MSImmutableStyleBorderOptions, original: MSPath, isArtistic: boolean, rect: NSRect, context: MSRenderingContext): void;
  pathWithExporter(exporter: SketchSVGExporter): MSPath;
  requiresMask(borderOptions: MSImmutableStyleBorderOptions): boolean;
  needsOutlinePath(borderOptions: MSImmutableStyleBorderOptions): boolean;
  addSVGAttributes_exporter(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): void;

  borderInset(): CGFloat;
  setBorderInset(borderInset: CGFloat): void;
}

declare class MSImmutableStyleBorderOptions extends _MSImmutableStyleBorderOptions {
  addSVGAttributes_exporter(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): void;

  CGLineJoin(): CGLineJoin;
  setCGLineJoin(CGLineJoin: CGLineJoin): void;
  CGLineCap(): CGLineCap;
  setCGLineCap(CGLineCap: CGLineCap): void;
  hasDashPattern(): boolean;
  setHasDashPattern(hasDashPattern: boolean): void;
}

declare class MSImmutableStyleColorControls extends _MSImmutableStyleColorControls {
  renderBitmapEffects(image: CIImage): CIImage;
}

declare class MSImmutableStyleFill extends _MSImmutableStyleFill {
  NSImage(): NSImage;
  addSVGAttributes_exporter(attributes: NSMutableArray<any> | any[], exporter: SketchSVGExporter): void;

  hasOpacity(): boolean;
  setHasOpacity(hasOpacity: boolean): void;
}

declare class MSImmutableStyleInnerShadow extends _MSImmutableStyleInnerShadow {}

declare class MSImmutableStylePart extends _MSImmutableStylePart implements IMSStylePart {
  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class MSImmutableStyleShadow extends _MSImmutableStyleShadow {
  shadowInsetForStrokeType_lineWidth(strokeType: MSShadowBorderType, width: CGFloat): CGFloat;
  addSpread_withInput_output_filter(spread: CGFloat, input: NSString | string, output: NSString | string, filter: MSSVGFilter): MSSVGMorphology;
  addBlurWithRadius_input_output_filter(radius: CGFloat, input: NSString | string, output: NSString | string, filter: MSSVGFilter): MSSVGGaussianBlur;
  addCompositeMask_mask_output_filter(src: NSString | string, mask: NSString | string, output: NSString | string, filter: MSSVGFilter): MSSVGComposite;
  addOffsetTo_dx_dy_output_filter(input: NSString | string, dx: CGFloat, dy: CGFloat, output: NSString | string, filter: MSSVGFilter): MSSVGOffset;
  addColorMatrix_color_output_filter(input: NSString | string, color: MSImmutableColor, output: NSString | string, filter: MSSVGFilter): MSSVGColorMatrix;
  addSVGFilterWithParent_exporter_index(parent: MSImmutableStyle, exporter: SketchSVGExporter, index: NSUInteger): void;
}

declare enum MSShadowType {
  MSShadowFill = 1 << 0,
  MSShadowStroke = 1 << 1,
}

declare enum MSShadowBorderType {
  MSShadowBorderCenter = 0,
  MSShadowBorderInside = 1,
  MSShadowBorderOutside = 2,
}

declare class MSImmutableSymbol extends _MSImmutableSymbol {
  masterInstance(): MSImmutableLayerGroup;
}

declare class MSImmutableSymbolContainer extends _MSImmutableSymbolContainer {}

declare class MSImmutableSymbolMaster extends _MSImmutableSymbolMaster {
  modifiedMasterByApplyingInstance_inDocument(instance: MSImmutableSymbolInstance, document: MSImmutableDocumentData): MSImmutableSymbolMaster;
  influenceRectPaddingForInstancesInDocument_visitedSymbols(doc: MSImmutableDocumentData, visitedSymbols: NSSet<any>): BCEdgePaddings;
  availableOverridesWithDocument(document: MSImmutableDocumentData): NSArray<any>;
  calculateAvailableOverridesWithDocument(document: MSImmutableDocumentData): NSArray<any>;

  changeIdentifier(): NSInteger;
  setChangeIdentifier(changeIdentifier: NSInteger): void;
}

declare class MSImmutableTextLayer extends _MSImmutableTextLayer implements IMSFirstLineTypesetterDelegate {
  defaultLineHeight(layoutManager: NSLayoutManager): CGFloat;
  startingPositionOnPath(shape: NSBezierPath): CGFloat;
  textContainerSize(): NSSize;
  shapeToUseForTextOnPathWithParentGroup(parentGroup: MSImmutableLayerGroup): MSImmutableStyledLayer;
  firstUnderlyingShapePathWithParentGroup(parentGroup: MSImmutableLayerGroup): NSBezierPath;
  bezierPathFromGlyphsInBoundsWithParentGroup_layoutManager(parentGroup: MSImmutableLayerGroup | null, layoutManager: NSLayoutManager): NSBezierPath;
  usedFontNames(): NSSet<any>;
  drawingPointForText(): NSPoint;
  createTextStorage(): NSTextStorage;
  textStoragePoolInCache(cache: BCCache): MSTextStoragePool;
  baselineAdjustmentForLayoutManager(layoutManager: NSLayoutManager): CGFloat;

  fontSize(): CGFloat;
  setFontSize(fontSize: CGFloat): void;
  stringValue(): NSString;
  setStringValue(stringValue: NSString | string): void;
  attributedStringValue(): NSAttributedString;
  setAttributedStringValue(attributedStringValue: NSAttributedString): void;
  textAlignment(): NSTextAlignment;
  setTextAlignment(textAlignment: NSTextAlignment): void;
  drawingPointForText(): NSPoint;
  setDrawingPointForText(drawingPointForText: NSPoint): void;
  textLayout(): MSTextLayout;
  setTextLayout(textLayout: MSTextLayout): void;
  transientGlyphBoundsValue(): NSValue;
  setTransientGlyphBoundsValue(transientGlyphBoundsValue: NSValue): void;
  capHeightBounds(): CGRect;
  setCapHeightBounds(capHeightBounds: CGRect): void;
  shouldUseBezierRepresentationForRendering(): boolean;
  setShouldUseBezierRepresentationForRendering(shouldUseBezierRepresentationForRendering: boolean): void;
  isEditingText(): boolean;
  setIsEditingText(isEditingText: boolean): void;
}

declare class MSImmutableTextStyle extends _MSImmutableTextStyle {
  attributes(): NSDictionary<any, any>;
  setAttributes(attributes: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSImmutableTriangleShape extends _MSImmutableTriangleShape {}

declare class MSAbsoluteRect extends BCRect {
  initWithLayer<T extends MSAbsoluteRect>(layer: MSLayer): T;
  boundsContainsPoint(mouse: NSPoint): boolean;

  rulerOrigin(): CGPoint;
  setRulerOrigin(rulerOrigin: CGPoint): void;
}

declare class MSAdaptableColor extends NSColor {}

declare class MSApplicationMetadata extends NSObject {
  static metadata(): NSDictionary<any, any>;
  static applicationKeys(): NSArray<any>;
}

declare class MSArchiveHeader extends NSObject implements IMSCoding {
  static metadataForNewHeader(): NSDictionary<any, any>;
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  initWithUnarchiver<T extends MSArchiveHeader>(unarchiver: MSBaseUnarchiver): T;
  // initWithUnarchiver_migratingFrom_toVersion<T extends MSArchiveHeader>(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): T;

  version(): NSInteger;
  setVersion(version: NSInteger): void;
  compatibilityVersion(): NSInteger;
  setCompatibilityVersion(compatibilityVersion: NSInteger): void;
  metadata(): NSDictionary<any, any>;
  setMetadata(metadata: NSDictionary<any, any> | {[key: string]: any}): void;
  root(): any;
  setRoot(root: any): void;
  archiveReferenceIdentifier_bc(): NSString;
  setArchiveReferenceIdentifier_bc(archiveReferenceIdentifier_bc: NSString | string): void;
}

declare interface IMSArtboardGroup {}

declare class MSArtboardPreset extends NSObject implements INSCopying {
  initWithName_size_imageName<T extends MSArtboardPreset>(name: NSString | string, size: NSSize, imageName: NSString | string | null): T;
  initWithDictionaryRepresentation<T extends MSArtboardPreset>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  static sizeToFitPresetWithName_size(name: NSString | string, size: NSSize): MSArtboardPreset;
  oppositeOrientationPreset(): MSArtboardPreset;
  copyWithZone(zone: NSZone | null): any;

  name(): NSString;
  setName(name: NSString | string): void;
  layerName(): NSString;
  setLayerName(layerName: NSString | string): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  sizeDescription(): NSString;
  setSizeDescription(sizeDescription: NSString | string): void;
  offersLandscapeVariant(): boolean;
  setOffersLandscapeVariant(offersLandscapeVariant: boolean): void;
  allowResizedMatching(): boolean;
  setAllowResizedMatching(allowResizedMatching: boolean): void;
  imageName(): NSString;
  setImageName(imageName: NSString | string): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  tooltip(): NSString;
  setTooltip(tooltip: NSString | string): void;
  isSizeToFit(): boolean;
  setIsSizeToFit(isSizeToFit: boolean): void;
  isNew(): boolean;
  setIsNew(isNew: boolean): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSArtboardPresetStore extends NSObject {
  presetWithSize_preferredCategory(size: NSSize, preferredCategory: MSArtboardPresetsCategory | null): MSArtboardPreset;
  resizablePresetMatchingSize_preferredCategory(size: NSSize, preferredCategory: MSArtboardPresetsCategory | null): MSArtboardPreset;
  savePreset_error(newPreset: MSArtboardPreset, error: NSError): boolean;
  removePreset_error(aPreset: MSArtboardPreset, error: NSError): boolean;
  suggestedNameForUserPreset(): NSString;
  systemCategories(): NSArray<any>;

  categories(): NSArray<any>;
  setCategories(categories: NSArray<any> | any[]): void;
  customPresetsCategory(): MSArtboardPresetsCategory;
  setCustomPresetsCategory(customPresetsCategory: MSArtboardPresetsCategory): void;
  static indexOfLastSelectedCategory(): NSUInteger;
  static setIndexOfLastSelectedCategory(indexOfLastSelectedCategory: NSUInteger): void;
}

declare class MSArtboardPresetsCategory extends NSObject {
  static categoriesWithContentsOfURL(url: NSURL): NSArray<any>;
  initWithName_sections<T extends MSArtboardPresetsCategory>(name: NSString | string, sections: NSArray<any> | any[]): T;
  initWithDictionaryRepresentation<T extends MSArtboardPresetsCategory>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;

  name(): NSString;
  setName(name: NSString | string): void;
  sections(): NSArray<any>;
  setSections(sections: NSArray<any> | any[]): void;
}

declare class MSArtboardPresetsSection extends NSObject {
  initWithName_presets<T extends MSArtboardPresetsSection>(name: NSString | string | null, presets: NSArray<any> | any[]): T;
  initWithDictionaryRepresentation<T extends MSArtboardPresetsSection>(dictionary: NSDictionary<any, any> | {[key: string]: any}): T;
  static sectionsWithContentsOfURL(url: NSURL): NSArray<any>;
  static writeSections_toURL_error(collections: NSArray<any> | any[], url: NSURL, error: NSError): boolean;

  name(): NSString;
  setName(name: NSString | string): void;
  presets(): NSArray<any>;
  setPresets(presets: NSArray<any> | any[]): void;
  dictionaryRepresentation(): NSDictionary<any, any>;
  setDictionaryRepresentation(dictionaryRepresentation: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSAssetCollection extends _MSAssetCollection {
  numberOfAssetsOfType(type: MSAsset): NSUInteger;
  addAsset(asset: any): void;
  assetAtIndex_ofType(index: NSUInteger, type: MSAsset): any;
  removeAssetAtIndex_ofType(index: NSUInteger, type: MSAsset): void;
  indexesOfAsset(asset: any): NSIndexSet;
  moveAssetAtIndex_beforeObjectAtIndex_ofType(fromIndex: NSUInteger, toIndex: NSUInteger, type: MSAsset): boolean;
}

declare class MSColor extends _MSColor implements IMSColor {
  static colorWithRGBADictionary(dict: NSDictionary<any, any> | {[key: string]: any}): any;
  RGBADictionary(): NSDictionary<any, any>;
  scaledColor(scale: CGFloat): MSColor;
  initWithImmutableObject<T extends MSColor>(immutableColor: MSImmutableColor): T;
  static colorWithRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): MSColor;
  static colorWithHue_saturation_brightness_alpha(hue: CGFloat, saturation: CGFloat, brightness: CGFloat, alpha: CGFloat): MSColor;
  static colorWithNSColor(color: NSColor): MSColor;
  static whiteColor(): MSColor;
  static blackColor(): MSColor;
  colorWithAlphaComponent(alpha: CGFloat): MSColor;
  NSColorWithColorSpace(space: NSColorSpace): NSColor;
  fuzzyIsEqual(other: MSColor): boolean;
  fuzzyIsEqual_precision(other: MSColor, precision: CGFloat): boolean;
  fuzzyIsEqualExcludingAlpha(other: MSColor): boolean;
  fuzzyIsEqualExcludingAlpha_precision(other: MSColor, precision: CGFloat): boolean;
}

declare class MSGradient extends _MSGradient {
  NSGradientWithColorSpace(colorSpace: NSColorSpace): NSGradient;
  initBlankGradient<T extends MSGradient>(): T;
  initWithNSGradient<T extends MSGradient>(nsGradient: NSGradient): T;
  conditionedEllipseLength(): CGFloat;
  pointAtIndex(index: NSUInteger): NSPoint;
  setPoint_atIndex(point: NSPoint, index: NSUInteger): void;
  colorAtIndex(index: NSUInteger): MSColor;
  setColor_atIndex(color: MSColor, index: NSUInteger): void;
  addStopAtPosition(relativePoint: NSPoint): NSInteger;
  addStopAtLength(position: CGFloat): NSUInteger;
  removeStopAtIndex(index: NSUInteger): void;
  convertPointToPosition(p: NSPoint): CGFloat;
  stopAtIndex(index: NSUInteger): MSGradientStop;
  invert(): void;
  rotatePointsBy(degrees: CGFloat): void;
  hasOpacity(): boolean;
  CSSAttributeStringWithMasterAlpha(masterAlpha: CGFloat): NSString;

  svgPositionIsAbsolute(): boolean;
  setSvgPositionIsAbsolute(svgPositionIsAbsolute: boolean): void;
}

declare class MSImageData extends NSObject implements INSCopying, IMSCoding, IMSJSONArchiverAlternativeFileReference {
  CGImageSuitableForDrawingWithSize(size: CGSize): CGImageRef;
  initWithImage<T extends MSImageData>(image: NSImage): T;
  initWithData_sha<T extends MSImageData>(data: NSData, sha1: NSData | null): T;
  initWithLegacyHash<T extends MSImageData>(sha1: NSData): T;
  isLegacy(): boolean;
  correctInvalidGamma(): void;
  copyWithZone(zone: NSZone | null): any;
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  initWithUnarchiver<T extends MSImageData>(unarchiver: MSBaseUnarchiver): T;
  // initWithUnarchiver_migratingFrom_toVersion<T extends MSImageData>(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): T;
  encodeReferenceInJSONZipArchive(encoder: BCJSONZippedEncoder): void;
  static decodeReferenceFromJSONZipArchive_withReference(decoder: BCJSONZippedDecoder, referenceID: NSString | string): any;

  data(): NSData;
  setData(data: NSData): void;
  sha1(): NSData;
  setSha1(sha1: NSData): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  cgImage(): CGImageRef;
  setCgImage(cgImage: CGImageRef): void;
  archiveReferenceIdentifier_bc(): NSString;
  setArchiveReferenceIdentifier_bc(archiveReferenceIdentifier_bc: NSString | string): void;
}

declare class MSExportPreset extends _MSExportPreset implements IMSExportFormatContainer {
  initWithName_formats<T extends MSExportPreset>(name: NSString | string, formats: NSArray<any> | any[]): T;
  containingLayer(): MSLayer;
  exportFormats(): NSArray<any>;
  removeExportFormat(exportFormat: MSExportFormat): void;
}

declare interface IMSAsset {
  assetType(): MSAsset;
  isAssetEqual(object: any): boolean;
}

declare enum MSAsset {
  MSAssetColor,
  MSAssetGradient,
  MSAssetImage,
  MSAssetSymbol,
  MSAssetExportPreset,
}

declare class MSAttributedString extends NSObject implements IMSCoding, INSCopying {
  static encodeAttributesInDictionary(attrs: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  static decodeAttributesInDictionary(attrs: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  static isRequiredFontAvailableInDictionary(attributes: NSDictionary<any, any> | {[key: string]: any}): boolean;
  static fontDescriptorInDictionary(attributes: NSDictionary<any, any> | {[key: string]: any}): NSFontDescriptor;
  initWithAttributedString_colorSpace_convert<T extends MSAttributedString>(attributedString: NSAttributedString, colorSpace: NSColorSpace, convert: boolean): T;
  initWithAttributedString_documentColorSpace<T extends MSAttributedString>(attributedString: NSAttributedString, colorSpace: NSColorSpace): T;
  attributedStringByReplacingFontNames(fontNames: NSDictionary<any, any> | {[key: string]: any}): MSAttributedString;
  resetComputedProperties(): void;
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  initWithUnarchiver<T extends MSAttributedString>(unarchiver: MSBaseUnarchiver): T;
  // initWithUnarchiver_migratingFrom_toVersion<T extends MSAttributedString>(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): T;
  copyWithZone(zone: NSZone | null): any;

  attributedString(): NSAttributedString;
  setAttributedString(attributedString: NSAttributedString): void;
  transformedAttributedString(): NSAttributedString;
  setTransformedAttributedString(transformedAttributedString: NSAttributedString): void;
  fontDescriptors(): NSSet<any>;
  setFontDescriptors(fontDescriptors: NSSet<any>): void;
  fontNames(): NSSet<any>;
  setFontNames(fontNames: NSSet<any>): void;
  unavailableFontNames(): NSSet<any>;
  setUnavailableFontNames(unavailableFontNames: NSSet<any>): void;
  areRequiredFontsAvailable(): boolean;
  setAreRequiredFontsAvailable(areRequiredFontsAvailable: boolean): void;
  string(): NSString;
  setString(string: NSString | string): void;
  archiveReferenceIdentifier_bc(): NSString;
  setArchiveReferenceIdentifier_bc(archiveReferenceIdentifier_bc: NSString | string): void;
}

declare enum MSAttributedStringTextTransform {
  MSAttributedStringTextTransformNone = 0,
  MSAttributedStringTextTransformUppercase,
  MSAttributedStringTextTransformLowercase,
}

declare class MSAttributedStringAttribute extends NSObject implements IBCJSONEncoding {
  encodeAsJSON(coder: BCJSONEncoder): void;
  initWithJSONDecoder<T extends MSAttributedStringAttribute>(decoder: BCJSONDecoder): T;
  replacementObjectForJSONEncoder(coder: BCJSONEncoder): NSObject;

  range(): NSRange;
  setRange(range: NSRange): void;
  attributeDictionary(): NSDictionary<any, any>;
  setAttributeDictionary(attributeDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSAvailableOverride extends NSObject {
  static availableOverrideWithOverridePoint_master_overrideValue_otherOverrides_inParent_document(overridePoint: MSOverridePoint, master: MSImmutableSymbolMaster, overrideValue: MSOverrideValue | null, otherOverrides: NSArray<any> | any[], parent: MSAvailableOverride | null, document: MSImmutableDocumentData): MSAvailableOverride;
  static enumerateOverrides_withBlock(overrides: NSArray<any> | any[], block: Block): void;
  static flattenAvailableOverrides(overrides: NSArray<any> | any[]): NSArray<any>;
  createOverrideViewController(): MSOverrideInspectorItem;

  parent(): MSAvailableOverride;
  setParent(parent: MSAvailableOverride): void;
  master(): MSImmutableSymbolMaster;
  setMaster(master: MSImmutableSymbolMaster): void;
  affectedLayer(): MSImmutableLayer;
  setAffectedLayer(affectedLayer: MSImmutableLayer): void;
  overridePoint(): MSOverridePoint;
  setOverridePoint(overridePoint: MSOverridePoint): void;
  children(): NSArray<any>;
  setChildren(children: NSArray<any> | any[]): void;
  overrideValue(): any;
  setOverrideValue(overrideValue: any): void;
  currentValue(): any;
  setCurrentValue(currentValue: any): void;
  defaultValue(): any;
  setDefaultValue(defaultValue: any): void;
  hasOverride(): boolean;
  setHasOverride(hasOverride: boolean): void;
  isAffectedLayerOrParentLocked(): boolean;
  setIsAffectedLayerOrParentLocked(isAffectedLayerOrParentLocked: boolean): void;
  isAffectedLayerOrParentHidden(): boolean;
  setIsAffectedLayerOrParentHidden(isAffectedLayerOrParentHidden: boolean): void;
}

declare class MSBaseArchiver extends NSObject {
  archiveRootObject(root: NSObject): void;
  shouldEncodeAsReference(object: NSObject | null): boolean;
  referenceObjectForObject(object: NSObject): NSObject;
  archivedDataWithRootObject_error(root: NSObject, error: NSError): NSData;
  static archivedDataWithHeaderAndRootObject(root: NSObject): NSData;
  encodeObject_forKey(object: NSObject | null, key: NSString | string): void;
  encodeDouble_forKey(value: number, key: NSString | string): void;
  encodeBool_forKey(value: boolean, key: NSString | string): void;
  encodeRect_forKey(rect: CGRect, key: NSString | string): void;
  encodePoint_forKey(point: CGPoint, key: NSString | string): void;
  encodeInteger_forKey(value: NSInteger, key: NSString | string): void;
  encodeSize_forKey(size: NSSize, key: NSString | string): void;

  archiveObjectIDs(): boolean;
  setArchiveObjectIDs(archiveObjectIDs: boolean): void;
}

declare class MSBaseUnarchiver extends NSObject {
  static unarchiveObjectWithData(data: NSData): any;
  static unarchiveObjectWithData_actualVersion_error(data: NSData, actualVersion: MSDocumentVersion | null, error: NSError): any;
  static unarchiveObjectWithData_asVersion_corruptionDetected_error(data: NSData, version: MSDocumentVersion, corruption: boolean | null, error: NSError): any;
  unarchiveObjectAsVersion_corruptionDetected_error(version: MSDocumentVersion, corruption: boolean | null, error: NSError): any;
  decodeObjectOfClass_forKey(className: any, key: NSString | string): any;
  decodeObjectOfClasses_forKey(classes: NSSet<any> | null, key: NSString | string): any;
  instanciateObject(object: NSObject): any;
  containsValueForKey(key: NSString | string): boolean;
  decodeObjectForKey(key: NSString | string): any;
  decodeDoubleForKey_withDefault(key: NSString | string, defaultValue: number): number;
  decodeBoolForKey_withDefault(key: NSString | string, defaultValue: boolean): boolean;
  decodeRectForKey_withDefault(key: NSString | string, defaultValue: CGRect): CGRect;
  decodePointForKey_withDefault(key: NSString | string, defaultValue: CGPoint): CGPoint;
  decodeIntegerForKey_withDefault(key: NSString | string, defaultValue: NSInteger): NSInteger;
  decodeSizeForKey_withDefault(key: NSString | string, defaultValue: CGSize): CGSize;

  currentVersion(): NSInteger;
  setCurrentVersion(currentVersion: NSInteger): void;
  archiveVersion(): NSInteger;
  setArchiveVersion(archiveVersion: NSInteger): void;
  corruptionDetected(): boolean;
  setCorruptionDetected(corruptionDetected: boolean): void;
  actualSymbolIDs(): NSArray<any>;
  setActualSymbolIDs(actualSymbolIDs: NSArray<any> | any[]): void;
}

declare class MSBezierBuilder extends NSObject {
  initWithPointRadiusBehavior<T extends MSBezierBuilder>(pointRadiusBehaviour: MSPointRadiusBehaviour): T;
  bezierPath(): NSBezierPath;
  path(): MSPath;
  _bezierPath(): NSBezierPath;
  static bezierPathWithPoints_inRect_shouldClose_pointRadiusBehaviour(points: NSArray<any> | any[], rect: NSRect, shouldClose: boolean, pointRadiusBehaviour: MSPointRadiusBehaviour): NSBezierPath;
  static pathWithPoints_inRect_shouldClose_pointRadiusBehaviour(points: NSArray<any> | any[], rect: NSRect, shouldClose: boolean, pointRadiusBehaviour: MSPointRadiusBehaviour): MSPath;
  static bezierPathForSegmentAtIndex_inPath_inRect(index: NSUInteger, shapePath: MSShapePathLayer, rect: NSRect): NSBezierPath;

  pointRadiusBehaviour(): MSPointRadiusBehaviour;
  setPointRadiusBehaviour(pointRadiusBehaviour: MSPointRadiusBehaviour): void;
}

declare class MSBezierContour extends NSObject {
  static contourWithRect(rect: CGRect): MSBezierContour;
  static contourWithPolygonAtPoint_radius_sides(center: CGPoint, radius: CGFloat, sides: NSUInteger): MSBezierContour;
  initWithSegments_closed<T extends MSBezierContour>(segments: NSArray<any> | any[], isClosed: boolean): T;
  reversedContour(): MSBezierContour;
  closedContour(): MSBezierContour;
  contourWithInset(inset: CGFloat): MSBezierContour;
  contourWithInset_joinStrategy(inset: CGFloat, strategy: MSBezierJoinStrategy): MSBezierContour;
  segmentBefore(segment: MSBezierSegment): MSBezierSegment;
  segmentAfter(segment: MSBezierSegment): MSBezierSegment;
  intersectionsWithSegment(segment: MSBezierSegment): NSSet<any>;

  closed(): boolean;
  setClosed(closed: boolean): void;
  clockwise(): boolean;
  setClockwise(clockwise: boolean): void;
  segments(): NSArray<any>;
  setSegments(segments: NSArray<any> | any[]): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  path(): MSPath;
  setPath(path: MSPath): void;
  isRectangular(): boolean;
  setIsRectangular(isRectangular: boolean): void;
}

declare class MSBezierCurveCurveJoin extends MSBezierLineCurveJoin {}

declare class MSBezierFillet extends NSObject {
  static bezierFilletWithSegment1_segment2_segment1Offset(segment1: MSBezierSegment, segment2: MSBezierSegment, segment1Offset: CGFloat): MSBezierFillet;
  static bezierFilletWithSegment1_segment2_filletRadius(segment1: MSBezierSegment, segment2: MSBezierSegment, filletRadius: CGFloat): MSBezierFillet;
  static zeroRadiusFilletWithSegment1_segment2(segment1: MSBezierSegment, segment2: MSBezierSegment): MSBezierFillet;
  initWithSegment1_segment2_segment1Offset_segment2Offset_arcEndPoint1_arcEndPoint2_arcCenter_arcRadius<T extends MSBezierFillet>(segment1: MSBezierSegment, segment2: MSBezierSegment, segment1Offset: CGFloat, segment2Offset: CGFloat, arcEndPoint1: CGPoint, arcEndPoint2: CGPoint, arcCenter: CGPoint, arcRadius: CGFloat): T;
  reversedFillet(): MSBezierFillet;
  arcSegments(): NSArray<any>;
  addArcToBezierPath_orCGPath(bezierPath: NSBezierPath, pathRef: CGMutablePathRef): void;

  segment1(): MSBezierSegment;
  setSegment1(segment1: MSBezierSegment): void;
  segment2(): MSBezierSegment;
  setSegment2(segment2: MSBezierSegment): void;
  segment1Offset(): CGFloat;
  setSegment1Offset(segment1Offset: CGFloat): void;
  segment2Offset(): CGFloat;
  setSegment2Offset(segment2Offset: CGFloat): void;
  arcRadius(): CGFloat;
  setArcRadius(arcRadius: CGFloat): void;
  arcEndPoint1(): CGPoint;
  setArcEndPoint1(arcEndPoint1: CGPoint): void;
  arcEndPoint2(): CGPoint;
  setArcEndPoint2(arcEndPoint2: CGPoint): void;
  arcCenter(): CGPoint;
  setArcCenter(arcCenter: CGPoint): void;
  startAngle(): CGFloat;
  setStartAngle(startAngle: CGFloat): void;
  endAngle(): CGFloat;
  setEndAngle(endAngle: CGFloat): void;
  clockwise(): boolean;
  setClockwise(clockwise: boolean): void;
}

declare class MSBezierInterpreter extends NSObject {
  static pointsFromBezierPath_inRect(bezierPath: NSBezierPath, rect: NSRect): NSArray<any>;
  points(): NSArray<any>;

  bezierPath(): NSBezierPath;
  setBezierPath(bezierPath: NSBezierPath): void;
  rect(): NSRect;
  setRect(rect: NSRect): void;
}

declare class MSBezierIntersection extends NSObject {
  static intersectionWithSegment1_segment2_segment1Offset_segment2Offset(segment1: MSBezierSegment, segment2: MSBezierSegment, segment1Offset: CGFloat, segment2Offset: CGFloat): MSBezierIntersection;
  initWithSegment1_segment2_segment1Offset_segment2Offset<T extends MSBezierIntersection>(segment1: MSBezierSegment, segment2: MSBezierSegment, segment1Offset: CGFloat, segment2Offset: CGFloat): T;

  segment1(): MSBezierSegment;
  setSegment1(segment1: MSBezierSegment): void;
  segment2(): MSBezierSegment;
  setSegment2(segment2: MSBezierSegment): void;
  segment1Offset(): CGFloat;
  setSegment1Offset(segment1Offset: CGFloat): void;
  segment2Offset(): CGFloat;
  setSegment2Offset(segment2Offset: CGFloat): void;
}

declare class MSBezierJoin extends NSObject {
  static joinWithSegment1_segment2(segment1: MSBezierSegment, segment2: MSBezierSegment): MSBezierJoin;
  static joinWithSegment1_segment2_strategy(segment1: MSBezierSegment, segment2: MSBezierSegment, strategy: MSBezierJoinStrategy): MSBezierJoin;
  initWithSegment1_segment2_joinedSegments<T extends MSBezierJoin>(segment1: MSBezierSegment, segment2: MSBezierSegment, joinedSegments: NSArray<any> | any[] | null): T;
  static segmentsByJoiningSegment1_segment2(segment1: MSBezierSegment, segment2: MSBezierSegment): NSArray<any>;

  segment1(): MSBezierSegment;
  setSegment1(segment1: MSBezierSegment): void;
  segment2(): MSBezierSegment;
  setSegment2(segment2: MSBezierSegment): void;
  joinedSegments(): NSArray<any>;
  setJoinedSegments(joinedSegments: NSArray<any> | any[]): void;
}

declare enum MSBezierJoinStrategy {
  MSBezierJoinStrategyNone = 1<<0,
  MSBezierJoinStrategyConnectEndpoints = 1<<1,
  MSBezierJoinStrategyIntersect = 1<<2,
  MSBezierJoinStrategyExtend = 1<<3,
  MSBezierJoinStrategyMirror = 1<<4,
  MSBezierJoinStrategyExtendTangent = 1<<5,
  MSBezierJoinStrategyArc = 1<<6,
  MSBezierJoinStrategyAny,
  MSBezierJoinStrategyDefault,
}

declare class MSBezierLineCurveJoin extends MSBezierJoin {}

declare class MSBezierLineLineJoin extends MSBezierJoin {}

declare class MSBezierSegment extends NSObject {
  static lineSegmentWithEndPoint1_endPoint2(endPoint1: CGPoint, endPoint2: CGPoint): MSBezierSegment;
  static quadraticSegmentWithEndPoint1_endPoint2_controlPoint(endPoint1: CGPoint, endPoint2: CGPoint, controlPoint: CGPoint): MSBezierSegment;
  static cubicSegmentWithEndPoint1_endPoint2_controlPoint1_controlPoint2(endPoint1: CGPoint, endPoint2: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): MSBezierSegment;
  initWithEndPoint1_endPoint2<T extends MSBezierSegment>(endPoint1: CGPoint, endPoint2: CGPoint): T;
  initWithEndPoint1_endPoint2_controlPoint<T extends MSBezierSegment>(endPoint1: CGPoint, endPoint2: CGPoint, controlPoint: CGPoint): T;
  initWithEndPoint1_endPoint2_controlPoint1_controlPoint2<T extends MSBezierSegment>(endPoint1: CGPoint, endPoint2: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): T;
  segmentWithEndPoint1(endPoint1: CGPoint): MSBezierSegment;
  segmentWithEndPoint2(endPoint2: CGPoint): MSBezierSegment;
  segmentMirroredAtOffset(offset: CGFloat): MSBezierSegment;
  tanget_andPoint_atOffset(tangent: MSLine, point: CGPoint, offset: CGFloat): void;
  tangentAtOffset(offset: CGFloat): MSLine;
  pointAtOffset(offset: CGFloat): CGPoint;
  curvatureAtOffset(offset: CGFloat): CGFloat;
  segmentToOffset(offset: CGFloat): MSBezierSegment;
  segmentFromOffset(offset: CGFloat): MSBezierSegment;
  segmentByMovingPointAtOffset_toLocation(offset: CGFloat, location: CGPoint): MSBezierSegment;
  segmentWithTransform(transform: CGAffineTransform): MSBezierSegment;
  segmentWithInset(inset: CGFloat): MSBezierSegment;
  segmentsWithFlatness(flatness: CGFloat): NSArray<any>;
  offsetForNormalToPoint(point: CGPoint): CGFloat;
  offsetsOfIntersectionsWithTangent(tangent: MSLine): NSSet<any>;
  intersectionsWithSegment(segment: MSBezierSegment): NSSet<any>;
  lineRepresentation(): MSBezierSegment;
  quadraticRepresentation(): MSBezierSegment;
  cubicRepresentation(): MSBezierSegment;
  representationUsingType(type: MSBezierSegmentType): MSBezierSegment;
  reversedSegment(): MSBezierSegment;
  isEqualToBezierSegment(object: MSBezierSegment): boolean;
  derivative(): MSBezierSegment;
  bounds(): CGRect;
  bezierPath(): NSBezierPath;

  segmentType(): MSBezierSegmentType;
  setSegmentType(segmentType: MSBezierSegmentType): void;
  endPoint1(): CGPoint;
  setEndPoint1(endPoint1: CGPoint): void;
  endPoint2(): CGPoint;
  setEndPoint2(endPoint2: CGPoint): void;
  lineLength(): CGFloat;
  setLineLength(lineLength: CGFloat): void;
  arcLength(): CGFloat;
  setArcLength(arcLength: CGFloat): void;
  controlPoint1(): CGPoint;
  setControlPoint1(controlPoint1: CGPoint): void;
  controlPoint2(): CGPoint;
  setControlPoint2(controlPoint2: CGPoint): void;
  looksLikeALine(): boolean;
  setLooksLikeALine(looksLikeALine: boolean): void;
  isAPoint(): boolean;
  setIsAPoint(isAPoint: boolean): void;
  lineSegment(): MSLineSegment;
  setLineSegment(lineSegment: MSLineSegment): void;
  xAxisRoots(): NSSet<any>;
  setXAxisRoots(xAxisRoots: NSSet<any>): void;
  yAxisRoots(): NSSet<any>;
  setYAxisRoots(yAxisRoots: NSSet<any>): void;
  inflectionOffsets(): NSSet<any>;
  setInflectionOffsets(inflectionOffsets: NSSet<any>): void;
  curviness(): CGFloat;
  setCurviness(curviness: CGFloat): void;
  flatness(): CGFloat;
  setFlatness(flatness: CGFloat): void;
  transformForXAxisAlignment(): CGAffineTransform;
  setTransformForXAxisAlignment(transformForXAxisAlignment: CGAffineTransform): void;
}

declare enum MSBezierSegmentType {
  MSBezierSegmentTypeLine = 0,
  MSBezierSegmentTypeQuadratic,
  MSBezierSegmentTypeCubic,
}

declare class MSBitmapLayer extends _MSBitmapLayer implements IMSImageOwner {
  initWithFrame_image<T extends MSBitmapLayer>(frame: NSRect, image: MSImageData): T;
  replaceImageWithImage(image: NSImage): void;
  NSImage(): NSImage;
  isAtOriginalSize(): boolean;
  resizeToOriginalSize(): void;
  correctInvalidGamma(): void;
  setReducedImage(image: MSImageData): void;

  image(): MSImageData;
  setImage(image: MSImageData): void;
  targetSizeForReduction(): NSSize;
  setTargetSizeForReduction(targetSizeForReduction: NSSize): void;
  canReduceImageSize(): boolean;
  setCanReduceImageSize(canReduceImageSize: boolean): void;
}

declare enum MSBlendMode {
  MSBlendModeNormal = 0,
  MSBlendModeDarken = 1,
  MSBlendModeMultiply = 2,
  MSBlendModeColorBurn = 3,
  MSBlendModeLighten = 4,
  MSBlendModeScreen = 5,
  MSBlendModeColorDodge = 6,
  MSBlendModeOverlay = 7,
  MSBlendModeSoftLight = 8,
  MSBlendModeHardLight = 9,
  MSBlendModeDifference = 10,
  MSBlendModeExclusion = 11,
  MSBlendModeHue = 12,
  MSBlendModeSaturation = 13,
  MSBlendModeColor = 14,
  MSBlendModeLuminosity = 15,
  MSBlendModePlusDarker = 16,
  MSBlendModePlusLighter = 17,
}

declare class MSBooleanOperationChain extends NSObject {
  static booleanOperationChainWithSubjectPath(subject: MSPath): MSBooleanOperationChain;
  initWithSubjectPath<T extends MSBooleanOperationChain>(subject: MSPath): T;
  addClippingPath_forBooleanOperation(subject: MSPath, operation: MSBooleanOperation): void;
  resultPath(): MSPath;
}

declare interface IMSCoding {
  encodeWithArchiver(archiver: MSBaseArchiver): void;
  // initWithUnarchiver<T extends IMSCoding>(unarchiver: MSBaseUnarchiver): T;
  // initWithUnarchiver_migratingFrom_toVersion<T extends IMSCoding>(unarchiver: MSBaseUnarchiver, fromVersion: NSInteger, toVersion: NSInteger): T;

  archiveReferenceIdentifier_bc(): NSString;
  setArchiveReferenceIdentifier_bc(archiveReferenceIdentifier_bc: NSString | string): void;
}

declare interface IMSColor {}

declare class MSColorArchivingFactory extends NSObject {
  static colorForEncodingColor(color: MSColor): MSColor;
}

declare interface IMSColorConverter {
  convertColor(color: MSColor): MSColor;
  convertImmutableColor(color: MSImmutableColor): MSImmutableColor;
  shouldConvertColor(color: MSColor): boolean;
  shouldConvertImmutableColor(color: MSImmutableColor): boolean;
}

declare interface IMSColorConvertible {
  convertColorsUsing(converter: any): void;
}

declare class MSColorCounter extends NSObject {
  countSource(source: any): void;
  compare(otherCounter: MSColorCounter): NSComparisonResult;
  compare_byColorUse(otherCounter: MSColorCounter, use: MSColorUse): NSComparisonResult;

  immutableColor(): MSImmutableColor;
  setImmutableColor(immutableColor: MSImmutableColor): void;
  color(): MSColor;
  setColor(color: MSColor): void;
  totalCount(): NSUInteger;
  setTotalCount(totalCount: NSUInteger): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
}

declare enum MSColorSpace {
  MSColorSpaceUnmanaged = 0,
  MSColorSpaceSRGB = 1,
  MSColorSpaceDisplayP3 = 2,
}

declare interface IMSColorUser {
  updateColorCounter(color: MSColorCounter): void;
}

declare enum MSColorUse {
  MSColorUseAll = 0,
  MSColorUseFill = 1,
  MSColorUseBorder = 2,
  MSColorUseShadow = 3,
  MSColorUseInnerShadow = 4,
  MSColorUseText = 5,
  MSColorUseArtboard = 6,
}

declare class MSConstantBaselineLayoutManager extends NSLayoutManager {
  constantBaselineTypesetter(): MSConstantBaselineTypesetter;
  setConstantBaselineTypesetter(constantBaselineTypesetter: MSConstantBaselineTypesetter): void;
}

declare class MSConstantBaselineTypesetter extends NSATSTypesetter {
  constantBaselineGlyphRangeForGlyphLocation(location: NSUInteger): NSRange;
  invalidateLayoutFromGlyphLocation(location: NSUInteger): void;
}

declare enum MSCurveMode {
  MSCurveModeUndefined = 0,
  MSCurveModeStraight = 1,
  MSCurveModeMirrored = 2,
  MSCurveModeAsymmetric = 3,
  MSCurveModeDisconnected = 4,
}

declare class MSCurvePoint extends _MSCurvePoint implements IMSCurvePoint, INSCopying {
  static point(): MSCurvePoint;
  static pointWithPoint(p: NSPoint): MSCurvePoint;
  static pointWithPoint_curveTo_curveFrom(p: NSPoint, p2: NSPoint, p1: NSPoint): MSCurvePoint;
  initWithPoint<T extends MSCurvePoint>(p: NSPoint): T;
  initWithPoint_curveTo_curveFrom<T extends MSCurvePoint>(p: NSPoint, p2: NSPoint, p1: NSPoint): T;
  changeCurveModeTo_usingPoint(m: MSCurveMode, pointType: MSPointType): void;
  isRounded(): boolean;
  isEffectivelyStraight(): boolean;
  inferCurveMode(): void;
  locationOfPoint(pointType: MSPointType): NSPoint;
  movePointTo(p: NSPoint): void;
  moveCurveFromTo(p: NSPoint): void;
  moveCurveToTo(p: NSPoint): void;
  multiplyBy(amount: CGFloat): void;
  copyWithZone(zone: NSZone | null): any;

  isStraight(): boolean;
  setIsStraight(isStraight: boolean): void;
}

declare interface IMSCurvePoint {}

declare enum MSPointType {
  MSPointTypeMain = 0,
  MSPointTypeControl1 = 1,
  MSPointTypeControl2 = 2,
}

declare enum MSCurveMoveOptions {
  MSCurveMoveIndependently = 1 << 0,
}

declare class MSCurvePointAsymmetricBehaviour extends MSCurvePointBehaviour {}

declare class MSCurvePointBehaviour extends NSObject {
  static didAssignBehaviorToHandle_ofPoint_previousMode(handle: MSPointType, point: MSCurvePoint, oldMode: MSCurveMode): void;
  static curveFromChangedInPoint(point: MSCurvePoint): void;
  static curveToChangedInPoint(point: MSCurvePoint): void;
}

declare class MSCurvePointDisconnectedBehaviour extends MSCurvePointBehaviour {}

declare class MSCurvePointMirroredBehaviour extends MSCurvePointBehaviour {}

declare class MSCurvePointStraightBehaviour extends MSCurvePointBehaviour {}

declare class MSDefaultArchive extends BCSingleton {
  archivesNeedingMigration(): NSArray<any>;
  oldDefaultsName(): NSString;
  filename(): NSString;
  defaultClass(): any;
  newObject(): any;

  defaultObject(): any;
  setDefaultObject(defaultObject: any): void;
}

declare class MSDefaultGrid extends MSDefaultArchive {
  static defaultGrid(): MSSimpleGrid;
  static setDefaultGrid(defaultGrid: MSSimpleGrid): void;
}

declare class MSDefaultLayoutGrid extends MSDefaultArchive {
  static defaultLayout(): MSLayoutGrid;
  static setDefaultLayout(defaultLayout: MSLayoutGrid): void;
}

declare class MSDefaultStyle extends MSDefaultArchive {
  static defaultStyle(): MSStyle;
  static setDefaultStyle(defaultStyle: MSStyle): void;
}

declare class MSDefaultTextStyle extends MSDefaultArchive {
  static recordTextStyleForLayer(layer: MSTextLayer): void;

  static defaultTextStyle(): NSDictionary<any, any>;
  static setDefaultTextStyle(defaultTextStyle: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSDiff extends NSObject {
  initWithFirstObjectRoot_secondObjectRoot<T extends MSDiff>(first: MSSubtreeRoot, second: MSSubtreeRoot): T;
  contentDirtyDiffRect(): NSRect;
  overlayDirtyDiffRect(): NSRect;

  firstObjectRoot(): MSSubtreeRoot;
  setFirstObjectRoot(firstObjectRoot: MSSubtreeRoot): void;
  secondObjectRoot(): MSSubtreeRoot;
  setSecondObjectRoot(secondObjectRoot: MSSubtreeRoot): void;
}

declare interface IMSDocumentData {
  pages(): NSArray<any>;
  setPages(pages: NSArray<any> | any[]): void;
}

declare interface IMSDocumentDataDelegate {
  documentData_didChangeToPage(data: MSDocumentData, newPage: MSPage): void;
  documentData_sharedObjectDidChange(data: MSDocumentData, object: any): void;
  documentData_temporarilyHideSelectionForLayers(data: MSDocumentData, layers: NSArray<any> | any[]): void;
  documentDataImmediatelyShowSelectionForAllLayers(data: MSDocumentData): void;
  documentDidChange(document: MSDocumentData): void;
  documentData_storeMetadata_forKey_object(data: MSDocumentData, metadata: any, key: NSString | string, object: MSModelObject): void;
  documentData_metadataForKey_object(data: MSDocumentData, key: NSString | string, object: MSModelObject): any;
  layerTreeLayoutDidChange(): void;
  refreshOverlayInRect(rect: NSRect): void;
  refreshOverlay(): void;
  layerSelectionMightHaveChanged(): void;
  determineCurrentArtboard(): void;
  visibleCanvasRectForDocumentData(data: MSDocumentData): CGRect;
}

declare class MSDocumentError extends NSError {
  static errorWithCode(code: MSDocumentErrorCode): MSDocumentError;
}

declare enum MSDocumentErrorCode {
  MSDocumentNoError,
  MSDocumentWrongType,
  MSDocumentMissingMetadata,
  MSDocumentCorruptMetadata,
  MSDocumentTooNew,
  MSDocumentCorruptDocument,
  MSDocumentMissingFonts,
  MSDocumentMissingWrapper,
  MSDocumentWrongSize,
  MSDocumentCouldntLoadData,
  MSDocumentNeedsMigrationService,
  MSDocumentUnarchivingError,
  MSDocumentUnknownError,
}

declare interface IMSDocumentPreviewGeneration {
  generatePreviewsForDocument(documentData: MSImmutableDocumentData): NSDictionary<any, any>;
}

declare class MSDocumentReader extends NSObject {
  static readerForDocumentAtURL(url: NSURL): MSDocumentReader;
  repair(): void;
  readDataWithCorruptionDetected_error(corruptionDetected: boolean, error: NSError): MSDocumentData;
  open(error: NSError): boolean;
  previewImageWithMaximumSize(size: NSSize): NSImage;
  validate(): MSDocumentErrorCode;
  readImmutableDataWithCorruptionDetected_error(corruptionDetected: boolean, errorOut: NSError): MSImmutableDocumentData;
  static readerForDocumentAtURL_engine(url: NSURL, engine: ECCommandLineEngine): MSDocumentReader;

  documentWasMigrated(): boolean;
  setDocumentWasMigrated(documentWasMigrated: boolean): void;
  missingFonts(): NSArray<any>;
  setMissingFonts(missingFonts: NSArray<any> | any[]): void;
  UIMetadata(): NSDictionary<any, any>;
  setUIMetadata(UIMetadata: NSDictionary<any, any> | {[key: string]: any}): void;
  containsPreviewImage(): boolean;
  setContainsPreviewImage(containsPreviewImage: boolean): void;
  previewImage(): NSImage;
  setPreviewImage(previewImage: NSImage): void;
  libraryPreviewImage(): NSImage;
  setLibraryPreviewImage(libraryPreviewImage: NSImage): void;
  version(): MSDocumentVersion;
  setVersion(version: MSDocumentVersion): void;
  compatibilityVersion(): MSDocumentVersion;
  setCompatibilityVersion(compatibilityVersion: MSDocumentVersion): void;
  metadata(): NSDictionary<any, any>;
  setMetadata(metadata: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSDocumentTree extends NSObject {
  initWithDocumentData<T extends MSDocumentTree>(documentData: MSImmutableDocumentData): T;
  parentForObject(object: MSImmutableModelObject): any;
  ancestorsOfObject(object: MSImmutableModelObject): NSArray<any>;
  ancestorLayersOfObject(object: MSImmutableLayer): NSArray<any>;

  documentData(): MSImmutableDocumentData;
  setDocumentData(documentData: MSImmutableDocumentData): void;
  cache(): BCCache;
  setCache(cache: BCCache): void;
}

declare enum MSDocumentVersion {
  MSDocumentUnknownVersion = -1,
  MSDocumentEarlyVersion = 0,
  MSDocument211to212Version = 2,
  MSDocument213to214Version = 3,
  MSDocument220Version = 4,
  MSDocument221Version = 8,
  MSDocument222to223Version = 9,
  MSDocument224to23Version = 10,
  MSDocumentFirstComaVersion = 14,
  MSDocumentAKArrayRenamedVersion = 16,
  MSDocumentDontStoreDefaultsAndOptimiseColors = 17,
  MSDocumentArchiveColorsAsDoubles = 18,
  MSDocumentMigrationTest = 19,
  MSDocumentSymbols = 20,
  MSDocumentDontSyncFlagOnText = 21,
  MSDocumentRemovedSliceContainers = 22,
  MSDocumentAddedExportOptions = 23,
  MSDocumentUnifiedTextStyleSymbols = 24,
  MSDocumentMigrateArtboardAssociatedSlice = 25,
  MSDocumentMergeLayerContainers = 26,
  MSDocumentColorControlsLoadingFix = 27,
  MSDocumentAddedWindingRule = 28,
  MSDocumentClearStylesOnArtboards = 29,
  MSDocumentOriginalObjectIDOnLayers = 30,
  MSDocumentDeprecateAdaptableColor = 31,
  MSDocumentNoiseAsSeparateFill = 32,
  MSDocumentImageCollection = 33,
  MSDocumentExportableLayers = 34,
  MSDocumentStripUnsupportedAttributes = 35,
  MSDocumentMergeStraightAndRoundedCornerEnums = 36,
  MSDocumentSplitGridAndLayout = 37,
  MSDocumentStructuredFile = 40,
  MSDocumentPatternsUsesImageCollection = 41,
  MSDocumentPatternsImagePropertyRemoved = 42,
  MSDocumentImageNameRemoved = 43,
  MSDocumentDontEncodeArchivedColor = 44,
  MSDocumentTextHeightIsClippedProperty = 45,
  MSDocumentNewLineSpacingBehaviour = 46,
  MSDocumentPersistentLayerListFolding = 47,
  MSDocumentDefaultStyleIncludesPatternImages = 48,
  MSDocumentArtisticStrokeRemoved = 49,
  MSDocumentDecorationsRemoved = 50,
  MSDocumentAddedLayerUserInfo = 51,
  MSDocumentArrowMoveToStyle = 52,
  MSDocumentColorControlsHue = 53,
  MSDocumentLocalAssets = 54,
  MSDocumentImagesStoredInLocalAssets = 55,
  MSDocumentSaveImmutableVariants = 56,
  MSDocumentSaveImageWrappersThemselves = 57,
  MSDocumentArtboardsOnFullPixels = 58,
  MSDocumentRemoveHasDashPatternProperty = 59,
  MSDocumentNineSliceScaleAdded = 60,
  MSDocumentFillReplacesImage = 61,
  MSDocumentNineSliceScaleBugFix = 62,
  MSDocumentSharedStylesOnInappropriateLayersBugFix = 63,
  MSDocumentRestoreImmutableVariants = 70,
  MSDocumentCloudShareIDSupport = 71,
  MSDocumentRenameSharedLayerToSymbol = 72,
  MSDocumentRenamedExportSizeToExportFormat = 73,
  MSDocumentRetinaCanvasAndDefaultZoomValueRemoved = 74,
  MSDocumentImageCollectionDeprecated = 75,
  MSDocumentImageCollectionCleared = 76,
  MSDocumentConsistentBaselineTypesetter = 77,
  MSDocumentTextLayerGlyphBounds = 78,
  MSDocumentSymbolsAsArtboards = 79,
  MSDocumentCloudExport = 80,
  MSDocumentRemoveNSTextStorage = 81,
  MSDocumentRemoveNSFontFromMSTextStyle = 82,
  MSDocumentHistoryBasedUndoIntroduced = 83,
  MSDocumentDataUserInfoAdded = 84,
  MSDocumentRepairSymbolOverrideMissingRootDictionary = 85,
  MSDocumentReplaceMSArray = 86,
  MSDocumentLayerResizing = 87,
  MSDocumentZippedJSON = 88,
  MSDocumentShapeLayerPointRadiusType = 89,
  MSDocumentRemoveGridIndex = 90,
  MSDocumentResizingMask = 91,
  MSDocumentDuplicateIDFix = 92,
  MSDocumentVerticalAlignmentAsComaProperty = 93,
  MSDocumentSmoothPointRadiusBehaviour = 94,
  MSDocumentColorManagementThatDidntShip = 95,
  MSDocumentColorManagementForReal = 96,
  MSDocumentOverrideValues = 97,
  MSDocumentRefactorBCTextBehaviour = 98,
  MSDocumentMSAttributedStringJSON = 99,
  MSDocumentRemoveShapePathClass = 100,
  MSDocumentPersistentArtboardPresets = 101,
  MSDocumentForeignStyles = 102,
  MSDocumentUseGenericDocumentMetadataKey = 103,
  MSDocumentRefactorWindingRule = 104,
  MSDocumentFancyArrowHeads = 105,
  MSDocumentPlusLigherPlusDarkerBlendModes = 106,
  MSDocumentBackgroundBlurSaturation = 107,
  MSDocumentNestedBooleanOperations = 110,
  MSDocumentNextVersion,
  MSDocumentCurrentVersion,
  MSDocumentCompatibilityVersion,
  MSDocumentNewestVersionRequiringMigration,
}

declare class MSDocumentWriter extends NSObject {
  initWithFileURL<T extends MSDocumentWriter>(url: NSURL): T;
  writeDocumentData_isAutosave_error(data: MSImmutableDocumentData, isAutosave: boolean, error: NSError): boolean;
  static metadataForNewFile(): NSDictionary<any, any>;

  UIMetadata(): NSDictionary<any, any>;
  setUIMetadata(UIMetadata: NSDictionary<any, any> | {[key: string]: any}): void;
  previewGenerationBlock(): imageGenerationBlock;
  setPreviewGenerationBlock(previewGenerationBlock: imageGenerationBlock): void;
}

declare class MSDocumentZippedJSONReader extends MSDocumentReader {
  initWithFileURL<T extends MSDocumentZippedJSONReader>(url: NSURL): T;
}

declare class MSExportFormat extends _MSExportFormat {
  static formatWithScale_name_fileFormat(scale: CGFloat, name: NSString | string, format: NSString | string): MSExportFormat;
  static formatWithScale_name_fileFormat_absoluteSize_namingScheme(scale: CGFloat, name: NSString | string, format: NSString | string, absoluteSize: CGFloat, namingScheme: MSExportFormatNamingScheme): MSExportFormat;
  static validFormats(): NSSet<any>;
  static exportableFilenameBodyForLayerName_exportFormat(layerName: NSString | string, format: MSImmutableExportFormat): NSString;
  static exportableFilenameForLayerName_exportFormat(layerName: NSString | string, format: MSImmutableExportFormat): NSString;
  container(): any;
  parentLayer(): MSLayer;
  remove(): void;
  isScalableExport(): boolean;
}

declare interface IMSExportFormatContainer {
  containingLayer(): MSLayer;
  exportFormats(): NSArray<any>;
  removeExportFormat(exportFormat: MSExportFormat): void;
}

declare enum MSExportFormatNamingScheme {
  MSExportFormatNamingSchemeSuffix = 0,
  MSExportFormatNamingSchemePrefix = 1,
}

declare enum MSExportLayerOptions {
  MSExportLayersAll = 0,
  MSExportLayersSelected = 1,
  MSExportLayersInGroup = 2,
}

declare class MSExportOptions extends _MSExportOptions implements IMSExportFormatContainer {
  static nextMostAppropriateExportFormatToAdd(existingExportFormats: NSArray<any> | any[]): MSExportFormat;
  addExportFormat(): MSExportFormat;
  containingLayer(): MSLayer;
  exportFormats(): NSArray<any>;
  removeExportFormat(exportFormat: MSExportFormat): void;
}

declare class MSFeatureAvailability extends NSObject {
  static enableFeatureAvailability(): void;

  static libraryStylesEnabled(): boolean;
  static setLibraryStylesEnabled(libraryStylesEnabled: boolean): void;
  static feature14414Enabled(): boolean;
  static setFeature14414Enabled(feature14414Enabled: boolean): void;
  static dataSuppliersEnabled(): boolean;
  static setDataSuppliersEnabled(dataSuppliersEnabled: boolean): void;
  static isComponentsPanelEnabled(): boolean;
  static setIsComponentsPanelEnabled(isComponentsPanelEnabled: boolean): void;
  static builtInRemoteLibrariesEnabled(): boolean;
  static setBuiltInRemoteLibrariesEnabled(builtInRemoteLibrariesEnabled: boolean): void;
  static cloudDocumentsEnabled(): boolean;
  static setCloudDocumentsEnabled(cloudDocumentsEnabled: boolean): void;
}

declare class MSFirstLineHeightTypesetter extends NSATSTypesetter {
  forcedBaselineOffset(): CGFloat;
  setForcedBaselineOffset(forcedBaselineOffset: CGFloat): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSFirstLineTypesetterDelegate {
  baselineAdjustmentForLayoutManager(layoutManager: NSLayoutManager): CGFloat;
}

declare class MSFlowConnection extends _MSFlowConnection {
  static flowConnectionTo_ofType(to: MSArtboardGroup, type: MSFlowAnimationType): MSFlowConnection;
  static flowConnectionBack(): MSFlowConnection;
  static defaultAnimationType(): MSFlowAnimationType;
  bezierPathForRenderingFlowAtZoomLevel(zoomLevel: CGFloat): NSBezierPath;

  isBackAction(): boolean;
  setIsBackAction(isBackAction: boolean): void;
  isValidFlowConnection(): boolean;
  setIsValidFlowConnection(isValidFlowConnection: boolean): void;
  sendingLayer(): MSLayer;
  setSendingLayer(sendingLayer: MSLayer): void;
  destinationArtboard(): MSArtboardGroup;
  setDestinationArtboard(destinationArtboard: MSArtboardGroup): void;
}

declare enum MSFlowAnimationType {
  MSFlowAnimationNone = -1,
  MSFlowAnimationSlideFromRight = 0,
  MSFlowAnimationSlideFromLeft,
  MSFlowAnimationSlideFromBottom,
  MSFlowAnimationSlideFromTop,
}

declare type MSFlowEndpoint = {
  edge: BCEdge
  rect: NSRect
}

declare type MSFlowInfo = {
  from: MSFlowEndpoint
  to: MSFlowEndpoint
  type: MSFlowType
}

declare enum MSFlowType {
  MSFlowTypeRegularTranstion,
  MSFlowTypeBackTransition,
  MSFlowTypeTransitionToParent,
  MSFlowTypeOtherPageTransition,
}

declare class MSFontList extends NSObject {
  initWithDocumentData<T extends MSFontList>(documentData: MSDocumentData): T;
  reloadFonts(): void;
  numberOfFontFamilies(): NSUInteger;
  nameOfFontFamilyAtIndex(index: NSUInteger): NSString;
  fontForFontFamilyAtIndex(index: NSUInteger): NSFont;
  filter(filter: NSString | string): void;
  clearFilter(): void;
  startCachingFonts(): void;
  prepareForDealloc(): void;

  documentFontFamilyNames(): NSArray<any>;
  setDocumentFontFamilyNames(documentFontFamilyNames: NSArray<any> | any[]): void;
  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
}

declare class MSForeignLayerStyle extends _MSForeignLayerStyle {}

declare class MSForeignObject extends _MSForeignObject {
  initWithOriginalObject_inLibrary<T extends MSForeignObject>(original: MSModelObject, library: any): T;
  isOutOfDateWithLibrary(library: any): boolean;
  syncWithRemote(remote: MSModelObject): void;
  unlinkFromRemote(): MSModelObject;
  masterFromLibrary(library: any): MSModelObject;
  masterFromDocument(doc: MSDocumentData): MSModelObject;
  matchingForeignObjectInDocument(doc: MSDocumentData): MSForeignObject;
  isLocalToDocument(doc: MSDocumentData): boolean;

  localObject(): MSModelObject;
  setLocalObject(localObject: MSModelObject): void;
  remoteShareID(): NSString;
  setRemoteShareID(remoteShareID: NSString | string): void;
}

declare class MSModelObject extends MSModelObjectCommon implements IMSModelObject {
  cachedValueForKey(key: any): any;
  cachedValueForKey_setUsingBlock(key: any, block: BCCacheCreateObjectBlock): any;
  updateCachedValue_forKey(value: any, key: any): void;
  clearCachedValueForKey(key: any): void;
  clearCache(): void;
  storeMetadata_forKey(toStore: any, key: NSString | string): void;
  metadataForKey(key: NSString | string): any;
  performInitWithImmutableModelObject(immutableObject: MSImmutableModelObject): void;
  static immutableClass(): any;
  object_didChangeProperty(object: MSModelObject, propertyName: NSString | string): void;
  invalidateModelCacheGeneration(): void;
  invalidateImmutableObject(): void;
  invalidateImmutableObjectAndAncestors(): void;
  initWithImmutableModelObject<T extends MSModelObject>(immutableBase: MSImmutableModelObject): T;
  setAsParentOnChildren(): void;
  parentGroup(): MSLayerGroup;
  static allowsFaulting(): boolean;
  fireFault(): void;
  fireFaultIfNecessary(): void;
  undoManager(): NSUndoManager;
  setUndoActionName(name: NSString | string): void;
  setUndoActionSenderAndName(name: NSString | string): void;
  isUndoing(): boolean;
  registerUndoNamed_action(name: NSString | string, action: MSUndoActionBlock): void;
  copyPropertiesToObject_options(objectCopy: any, options: MSModelCopyOptions): void;
  syncPropertiesFromObject(object: any): void;

  foreignObject(): MSModelObject;
  setForeignObject(foreignObject: MSModelObject): void;
  isForeign(): boolean;
  setIsForeign(isForeign: boolean): void;
  UIMetadataKey(): NSString;
  setUIMetadataKey(UIMetadataKey: NSString | string): void;
  cachedImmutableModelObject(): any;
  setCachedImmutableModelObject(cachedImmutableModelObject: any): void;
  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
  parentObject(): MSModelObject;
  setParentObject(parentObject: MSModelObject): void;
  immutableModelObject(): any;
  setImmutableModelObject(immutableModelObject: any): void;
  isFault(): boolean;
  setIsFault(isFault: boolean): void;
}

declare class MSForeignStyle extends _MSForeignStyle {}

declare class MSForeignSymbol extends _MSForeignSymbol {
  static foreignSymbolWithMaster_inLibrary(master: MSSymbolMaster, library: any): MSForeignSymbol;

  remoteSymbolID(): NSString;
  setRemoteSymbolID(remoteSymbolID: NSString | string): void;
}

declare class MSModelObjectCommon extends NSObject implements IMSModelObjectCommon {
  isContainedByInstanceOfForeignSymbol(ancestors: NSArray<any> | any[]): boolean;
  treeStructure(): NSString;
  simpleTreeStructure(): NSString;
  treeAsDictionary(): any;
  performInitEmptyObject(): void;
  initializeUnsetObjectPropertiesWithDefaults<T extends MSModelObjectCommon>(): T;
  objectDidInit(): void;
  enumerateProperties(enumerator: MSDataPropertyEnumerator): void;
  performMigrationsWithUnarchiver(coder: MSBaseUnarchiver): void;
  hasObjectID(): boolean;
  primitiveObjectID(): NSString;
  init<T extends MSModelObjectCommon>(): T;
  initWithBlock<T extends MSModelObjectCommon>(block: Block): T;
  initWithNoSetup<T extends MSModelObjectCommon>(): T;
  static generateObjectID(): any;
  recursivelyGenerateObjectID(): any;
  static defaultName(): NSString;
  enumerateChildProperties(enumerator: MSDataPropertyEnumerator): void;
  enumerateDescendants(enumerator: MSDescendantEnumerator): void;

  objectID(): NSString;
  setObjectID(objectID: NSString | string): void;
  modelObjectCacheGeneration(): MSModelObjectCacheGeneration;
  setModelObjectCacheGeneration(modelObjectCacheGeneration: MSModelObjectCacheGeneration): void;
  hasModelObjectCacheGeneration(): boolean;
  setHasModelObjectCacheGeneration(hasModelObjectCacheGeneration: boolean): void;
}

declare class MSForeignTextStyle extends _MSForeignTextStyle {}

declare class MSFrequentColorTracker extends NSObject {
  initWithColorUse_maximumColorCount_ignoreAlpha<T extends MSFrequentColorTracker>(colorUse: MSColorUse, maxCount: NSUInteger, ignoreAlpha: boolean): T;
  registerColor_fromSource(color: MSImmutableColor, source: any): void;
  registerColors_fromSource(colors: NSArray<any> | any[], source: any): void;
  frequentColors(): NSArray<any>;

  colorUse(): MSColorUse;
  setColorUse(colorUse: MSColorUse): void;
  maximumColorCount(): NSUInteger;
  setMaximumColorCount(maximumColorCount: NSUInteger): void;
  shouldIgnoreAlpha(): boolean;
  setShouldIgnoreAlpha(shouldIgnoreAlpha: boolean): void;
}

declare class MSGradientPointArray extends MSPointArray {
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSGradientPointArrayDelegate {
  gradientPointArray_didReplacePointAtIndex_withPoint(array: MSGradientPointArray, i: NSUInteger, aPoint: NSPoint): void;
}

declare class MSGradientStop extends _MSGradientStop implements IMSColorConvertible {
  static stopWithPosition_color(pos: CGFloat, aColor: MSColor): any;
  initWithPosition_color<T extends MSGradientStop>(pos: CGFloat, aColor: MSColor): T;
  convertColorsUsing(converter: any): void;
}

declare enum MSGradientType {
  MSGradientTypeLinear = 0,
  MSGradientTypeRadial = 1,
  MSGradientTypeAngular = 2,
}

declare class MSGraphicsContextSettings extends _MSGraphicsContextSettings {}

declare class MSImageCollection extends _MSImageCollection {}

declare interface IMSImageOwner {
  setReducedImage(image: MSImageData): void;

  image(): MSImageData;
  setImage(image: MSImageData): void;
  targetSizeForReduction(): NSSize;
  setTargetSizeForReduction(targetSizeForReduction: NSSize): void;
  canReduceImageSize(): boolean;
  setCanReduceImageSize(canReduceImageSize: boolean): void;
}

declare class MSImmutableLayerAncestry extends NSObject {
  initWithLayer_document<T extends MSImmutableLayerAncestry>(layer: MSImmutableLayer, doc: MSImmutableDocumentData): T;
  initWithLayer_ancestors_document<T extends MSImmutableLayerAncestry>(layer: MSImmutableLayer, ancestors: NSArray<any> | any[], doc: MSImmutableDocumentData): T;
  static ancestryWithMSLayer(layer: MSLayer): MSImmutableLayerAncestry;
  initWithMSLayer<T extends MSImmutableLayerAncestry>(layer: MSLayer): T;
  absoluteRect(): NSRect;

  layer(): MSImmutableLayer;
  setLayer(layer: MSImmutableLayer): void;
  document(): MSImmutableDocumentData;
  setDocument(document: MSImmutableDocumentData): void;
  page(): MSImmutablePage;
  setPage(page: MSImmutablePage): void;
  parentGroup(): MSImmutableLayerGroup;
  setParentGroup(parentGroup: MSImmutableLayerGroup): void;
  artboard(): MSImmutableArtboardGroup;
  setArtboard(artboard: MSImmutableArtboardGroup): void;
  ancestors(): NSArray<any>;
  setAncestors(ancestors: NSArray<any> | any[]): void;
  ancestorsAndSelf(): NSArray<any>;
  setAncestorsAndSelf(ancestorsAndSelf: NSArray<any> | any[]): void;
}

declare class MSJSONArchiveReference extends NSObject implements IBCJSONEncoding {
  initWithReferenceObject<T extends MSJSONArchiveReference>(object: NSObject): T;
  encodeAsJSON(coder: BCJSONEncoder): void;
  initWithJSONDecoder<T extends MSJSONArchiveReference>(decoder: BCJSONDecoder): T;
  replacementObjectForJSONEncoder(coder: BCJSONEncoder): NSObject;
}

declare class MSJSONOriginalFileReference extends MSJSONArchiveReference {}

declare class MSJSONFileReference extends MSJSONArchiveReference {}

declare class MSJSONDataReference extends MSJSONArchiveReference {}

declare class MSJSONOriginalDataReference extends MSJSONDataReference {}

declare class MSJSONArchiver extends MSBaseArchiver {
  static archiverFromCoder(coder: BCJSONEncoder): MSJSONArchiver;
  static archiveObject_coder(object: NSObject, coder: BCJSONEncoder): void;
  replacementObjectForObject(object: NSObject): NSObject;
}

declare class MSJSONDataArchiver extends MSJSONArchiver {
  static archiveStringWithRootObject_error(root: NSObject, error: NSError): NSString;
}

declare class MSJSONDataUnarchiver extends MSJSONUnarchiver {
  static unarchiveObjectWithString_asVersion_corruptionDetected_error(jsonString: NSString | string, version: MSDocumentVersion, corruption: boolean | null, error: NSError): any;
}

declare class MSJSONDictionaryUnarchiver extends MSJSONUnarchiver {
  static unarchiveObjectFromDictionary_asVersion_corruptionDetected_error(dict: NSDictionary<any, any> | {[key: string]: any}, version: MSDocumentVersion, corruption: boolean | null, error: NSError): any;
}

declare class MSJSONUnarchiver extends MSBaseUnarchiver {
  decodeReferenceObjectOfClass_withIdentifier(className: NSString | string | null, identifier: NSString | string | null): any;
  referenceObjectWithIdentifier(identifier: NSString | string | null): any;
  addReference_withIdentifier(reference: any, identifier: NSString | string): void;
}

declare class MSJSONZippedArchiver extends MSJSONArchiver {
  initWithURL<T extends MSJSONZippedArchiver>(url: NSURL): T;
  encodeObject_toSubpath_error(root: NSObject, path: NSString | string, error: NSError): boolean;
  encodeRawData_toSubpath_error(data: NSData, path: NSString | string, error: NSError): boolean;
  finishEncodingError(error: NSError): boolean;
}

declare interface IMSJSONArchiverAlternativeFileReference {
  encodeReferenceInJSONZipArchive(encoder: BCJSONZippedEncoder): void;

  archiveReferenceIdentifier_bc(): NSString;
  setArchiveReferenceIdentifier_bc(archiveReferenceIdentifier_bc: NSString | string): void;
}

declare class MSJSONZippedUnarchiver extends MSJSONUnarchiver {
  initWithURL<T extends MSJSONZippedUnarchiver>(url: NSURL): T;
  unarchiveObjectAtSubpath_error(path: NSString | string, error: NSError): any;
  unarchiveRawDataAtSubpath_error(path: NSString | string, error: NSError): NSData;
  containsFileAtSubpath(path: NSString | string): boolean;
}

declare class MSKeyedArchiver extends MSBaseArchiver {}

declare class MSKeyedArchiverHelper extends NSKeyedArchiver {
  archiver(): MSBaseArchiver;
  setArchiver(archiver: MSBaseArchiver): void;
}

declare class MSKeyedUnarchiver extends MSBaseUnarchiver {
  static unarchiveObjectFromURL_error(url: NSURL, error: NSError): any;

  legacyImages(): NSDictionary<any, any>;
  setLegacyImages(legacyImages: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSStyleFill extends _MSStyleFill implements IMSImageOwner {
  CSSAttributeString(): NSString;
  hasOpacity(): boolean;
  setOpacity(opacity: CGFloat): void;
  NSImage(): NSImage;
  setReducedImage(image: MSImageData): void;

  interfaceOpacity(): CGFloat;
  setInterfaceOpacity(interfaceOpacity: CGFloat): void;
  image(): MSImageData;
  setImage(image: MSImageData): void;
  targetSizeForReduction(): NSSize;
  setTargetSizeForReduction(targetSizeForReduction: NSSize): void;
  canReduceImageSize(): boolean;
  setCanReduceImageSize(canReduceImageSize: boolean): void;
}

declare class MSStyleBorder extends _MSStyleBorder implements IMSColorConvertible {
  CSSAttributeString(): NSString;
  supportsAdvancedBorderSettings(): boolean;
  convertColorsUsing(converter: any): void;
}

declare class MSStyleShadow extends _MSStyleShadow implements IMSColorConvertible {
  CSSAttributeString(): NSString;
  convertColorsUsing(converter: any): void;
}

declare class MSStyleInnerShadow extends _MSStyleInnerShadow {}

declare class MSSymbolInstance extends _MSSymbolInstance {
  symbolMaster(): MSSymbolMaster;
  isInstanceForMaster(symbolMaster: MSSymbolMaster): boolean;
  changeInstanceToSymbol(symbol: MSSymbolMaster): void;
  numberOfVisibleCells(): NSUInteger;
  detachByReplacingWithGroup(): MSLayerGroup;
  resizeInstanceToFitSymbol(symbol: MSSymbolMaster): void;
  resetSizeToMaster(): void;
  setValue_forOverridePoint(value: any | null, point: MSOverridePoint): void;
  updateOverridesWithObjectIDMap(idMap: NSDictionary<any, any> | {[key: string]: any}): void;
  invalidateIfAffectedBySymbolMastersIn(modifiedSymbols: NSSet<any>): boolean;
  removeShareableObjectsFromOverrides(removed: NSSet<any>): void;

  overridePoints(): NSArray<any>;
  setOverridePoints(overridePoints: NSArray<any> | any[]): void;
  availableOverrides(): NSArray<any>;
  setAvailableOverrides(availableOverrides: NSArray<any> | any[]): void;
  overrides(): NSDictionary<any, any>;
  setOverrides(overrides: NSDictionary<any, any> | {[key: string]: any}): void;
  masterRefreshCounter(): NSInteger;
  setMasterRefreshCounter(masterRefreshCounter: NSInteger): void;
  overrideContainer(): MSOverrideRepresentationContainer;
  setOverrideContainer(overrideContainer: MSOverrideRepresentationContainer): void;
  influencingSymbolIDs(): NSSet<any>;
  setInfluencingSymbolIDs(influencingSymbolIDs: NSSet<any>): void;
}

declare interface IMSLayerChangeObserver {
  layerDidChange(layer: MSLayer): void;
}

declare type MSLayerAbsolutePosition = NSPoint

declare enum MSAlignmentRectOptions {
  MSAlignmentRectTextBaselineAndCapHeight = 1 << 0,
  MSAlignmentRectTextXHeight = 2 << 0,
}

declare enum MSLayerRenameOptions {
  MSLayerRenameNumbersOnly = 0,
  MSLayerRenameIncludeCopy = 1,
}

declare enum MSLayerSelectionOptions {
  MSLayerSelectionClickThroughAllGroups = 1 << 1,
  MSLayerSelectionIgnoreSlices = 1 << 2,
  MSLayerSelectionIgnoreHotspots = 1 << 3,
  MSLayerSelectionSlicesAsOutlines = 1 << 4,
  MSLayerSelectionHotspotsAsOutlines = 1 <<5,
  MSLayerSelectionPreferSecondMatch = 1 << 6,
  MSLayerSelectionFullyContained = 1 << 7,
  MSLayerSelectionAllArtboards = 1 << 8,
}

declare class MSLayerBuilder extends NSObject {
  static layerTreeWithDictionary(dictionary: NSDictionary<any, any> | {[key: string]: any}): any;
  static layerTreeWithJSON_relativeToURL_error(json: NSString | string, url: NSURL, error: NSError): any;
  static layerTreeWithContentsOfURL_error(url: NSURL, error: NSError): any;
}

declare interface IMSLayerContainment {
  containedLayers(): NSArray<any>;
  containedLayersCount(): NSUInteger;
  firstLayer(): any;
  lastLayer(): any;
  containsNoOrOneLayers(): boolean;
  containsLayers(): boolean;
  containsOneLayer(): boolean;
  containsMultipleLayers(): boolean;
  layerAtIndex(i: NSUInteger): any;
  indexOfLayer(aLayer: any): NSUInteger;
  enumerateLayers(block: MSLayerSimpleEnumeratorBlock): void;
  enumerateLayersWithOptions_block(options: MSLayerEnumeratorOptions, block: MSLayerEnumeratorBlock): boolean;
}

declare type MSLayerEnumeratorOptions = NSUInteger

declare enum MSLayerEnumeratorFlags {
  MSLEDefault = 0,
  MSLEIncludeSelf = 1<<0,
  MSLEBackwards = 1<<1,
  MSLERecursive = 1<<2,
  MSLESkipHidden = 1<<3,
  MSLEMutates = 1<<4,
  MSLETraitsMatchOr = 1<<5,
  MSLEAllOptions,
}

declare interface IMSLayerCoordinateSpace {
  convertPoint_toCoordinateSpace(p: NSPoint, coordinateSpace: any | null): NSPoint;
  convertPoint_fromCoordinateSpace(p: NSPoint, coordinateSpace: any | null): NSPoint;
  convertRect_toCoordinateSpace(r: NSRect, coordinateSpace: any | null): NSRect;
  convertRect_fromCoordinateSpace(r: NSRect, coordinateSpace: any | null): NSRect;
  convertVector_toCoordinateSpace(vector: CGVector, coordinateSpace: any | null): CGVector;
  convertVector_fromCoordinateSpace(vector: CGVector, coordinateSpace: any | null): CGVector;
  transformForConvertingToCoordinateSpace(coordinateSpace: any | null): CGAffineTransform;
  transformForConvertingFromCoordinateSpace(coordinateSpace: any | null): CGAffineTransform;

  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  parentCoordinateSpace(): any;
  setParentCoordinateSpace(parentCoordinateSpace: any): void;
  transformForConvertingToParentCoordinateSpace(): CGAffineTransform;
  setTransformForConvertingToParentCoordinateSpace(transformForConvertingToParentCoordinateSpace: CGAffineTransform): void;
  transformForConvertingFromParentCoordinateSpace(): CGAffineTransform;
  setTransformForConvertingFromParentCoordinateSpace(transformForConvertingFromParentCoordinateSpace: CGAffineTransform): void;
}

declare class MSLayerEnumerator<ObjectType> extends NSEnumerator<ObjectType> {
  skipDescendants(): void;
}

declare interface IMSLayerGroup {
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare enum MSLayerGroupResizeOption {
  MSLayerGroupResizeOptionLayerOnly = 0,
  MSLayerGroupResizeOptionResizeParentUponRectChange = 1 << 0,
}

declare enum MSLayerListStatus {
  MSLayerListStatusUndecided = 0,
  MSLayerListStatusCollapsed = 1,
  MSLayerListStatusExpanded = 2,
}

declare class MSLayerMovement extends NSObject {
  static moveForward(layers: NSArray<any> | any[]): void;
  static moveBackward(layers: NSArray<any> | any[]): void;
  static canMoveLayerUpHierarchy(layer: MSLayer): boolean;
  static moveUpHierarchy(layers: NSArray<any> | any[]): void;
  static canMoveLayerToTopOfHierarchy(layer: MSLayer): boolean;
  static moveToTopOfHierarchy(layers: NSArray<any> | any[]): void;
  static canMoveLayersForward(layers: NSArray<any> | any[]): boolean;
  static canMoveLayersBackward(layers: NSArray<any> | any[]): boolean;
  static moveToFront(layers: NSArray<any> | any[]): void;
  static moveToBack(layers: NSArray<any> | any[]): void;
}

declare class MSLayerPaster extends NSObject {
  static insertPasteboardData_onPage_withHint_viewPort(pboardData: MSPasteboardLayers, page: MSPage, destinationHint: MSLayer | null, viewport: MSPastingViewport): MSPastingViewport;
  static insertPasteboardData_intoParent_atPosition_afterLayer_viewport_fitToParent(pboardData: MSPasteboardLayers, parent: MSLayerGroup, position: NSPoint, afterLayer: any, viewport: MSPastingViewport, fitToParent: boolean): MSLayerArray;
  static insertPasteboardData_intoParent_beforeLayer(pboardData: MSPasteboardLayers, parent: MSLayerGroup, beforeLayer: any): MSLayerArray;
  static insertPagePasteboardData_intoDocument_afterPage(pboardData: MSPasteboardLayers, document: MSDocumentData, afterPage: MSPage): MSLayerArray;
  static parentForData_hint_page_viewPort(pboardData: MSPasteboardLayers, hint: MSLayer | null, page: MSPage, viewport: MSPastingViewport): MSLayerGroup;
  static parentForData_hint_page(pboardData: MSPasteboardLayers, hint: MSLayer | null, page: MSPage): MSLayerGroup;
  static duplicateLayers(layers: MSPasteboardLayers): MSPasteboardLayers;
}

declare enum MSLayerResizingType {
  MSLayerResizingStretch = 0,
  MSLayerResizingPinToEdge = 1,
  MSLayerResizingResize = 2,
  MSLayerResizingFloat = 3,
}

declare interface IMSLayerTraits {
  traits(): MSTraits;
}

declare enum MSTraits {
  MSTraitStyled = 1<<8,
  MSTraitText = 1<<9,
  MSTraitImage = 1<<10,
  MSTraitSlice = 1<<11,
  MSTraitGroup = 1<<12,
  MSTraitArtboard = 1<<13,
  MSTraitShape = 1<<14,
  MSTraitPage = 1<<15,
  MSTraitContainer = 1<<16,
  MSTraitRoot = 1<<17,
  MSTraitPath = 1<<18,
  MSTraitSymbolInstance = 1<<19,
  MSTraitSymbolMaster = 1<<20,
  MSTraitHotspot = 1<<21,
  MSTraitExportable = 1<<22,
  MSTraitShapeOrPath = 1<<23,
  MSTraitAllTraits,
}

declare interface IMSLayerWithBackgroundColor {
  immutableBackgroundColor(): MSImmutableColor;

  hasBackgroundColor(): boolean;
  setHasBackgroundColor(hasBackgroundColor: boolean): void;
}

declare interface IMSLayerWithMutableBackgroundColor {
  backgroundColor(): MSColor;
  setBackgroundColor(backgroundColor: MSColor): void;
}

declare enum MSLayoutGridStyle {
  MSLayoutGridStyleFill,
  MSLayoutGridStyleBorder,
}

declare class MSLegacyDocumentReader extends MSDocumentReader {
  initWithFileURL<T extends MSLegacyDocumentReader>(url: NSURL | null): T;
}

declare interface IMSLibraryObject {
  name(): NSString;
  setName(name: NSString | string): void;
  libraryID(): NSString;
  setLibraryID(libraryID: NSString | string): void;
  document(): MSDocumentData;
  setDocument(document: MSDocumentData): void;
}

declare type MSLine = {
  A: CGFloat
  B: CGFloat
  C: CGFloat
}

declare type MSLineSegment = {
  p0: CGPoint
  p1: CGPoint
}

declare enum MSMarkerType {
  MSMarkerTypeNone = 0,
  MSMarkerTypeOpenArrow = 1,
  MSMarkerTypeFilledArrow = 2,
  MSMarkerTypeLine = 3,
  MSMarkerTypeOpenCircle = 4,
  MSMarkerTypeFilledCircle = 5,
  MSMarkerTypeOpenSquare = 6,
  MSMarkerTypeFilledSquare = 7,
  MSMarkerTypeFilledArrowRounded,
  MSMarkerTypeFilledSquareRounded,
}

declare enum MSSharedStyleType {
  MSSharedStyleTypeLayerStyles = 1,
  MSSharedStyleTypeTextStyles,
  MSSharedStyleTypeUnknown,
}

declare interface IMSModelObject {}

declare enum MSModelCopyOptions {
  MSModelCopyNormal = 0x0000,
  MSModelPreserveIDs = 0x0001,
}

declare class MSModelObjectCacheGeneration extends NSObject {}

declare interface IMSModelObjectCommon {
  objectID(): NSString;
  setObjectID(objectID: NSString | string): void;
}

declare enum MSRootObjectMessage {
  MSRootObjectMessageRulersChangedUsingUndo,
}

declare class MSModelResources extends BCSingleton {
  preloadResources(): void;
  URLForImageResource(resource: NSString | string): NSURL;
  URLForResource_withExtension(name: NSString | string, ext: NSString | string): NSURL;
  resourcesNeedingMigration(): NSArray<any>;

  bundle(): NSBundle;
  setBundle(bundle: NSBundle): void;
  noiseImages(): NSArray<any>;
  setNoiseImages(noiseImages: NSArray<any> | any[]): void;
  errorPattern(): NSBitmapImageRep;
  setErrorPattern(errorPattern: NSBitmapImageRep): void;
}

declare class MSOvalShape extends _MSOvalShape {}

declare class MSOverrideMapping extends NSObject {
  static overrideMappingFor_withOldOverrides(overridePoint: MSOverridePoint, oldOverridePoints: NSArray<any> | any[]): MSOverrideMapping;
  static consolidateAndFindNextMappingFrom(mappings: NSMutableArray<any> | any[]): MSOverrideMapping;
  removeOverridePoint(overridePoint: MSOverridePoint): void;

  score(): NSInteger;
  setScore(score: NSInteger): void;
  overridePoint(): MSOverridePoint;
  setOverridePoint(overridePoint: MSOverridePoint): void;
  oldOverridePoint(): MSOverridePoint;
  setOldOverridePoint(oldOverridePoint: MSOverridePoint): void;
}

declare class MSOverridePoint extends NSObject {
  initWithLayer_property_parent<T extends MSOverridePoint>(layer: MSImmutableLayer, property: NSString | string, parent: MSOverridePoint | null): T;
  comparisonScoreAgainst(point: MSOverridePoint): NSInteger;
  distanceToOverridePoint(point: MSOverridePoint): NSUInteger;

  layerID(): NSString;
  setLayerID(layerID: NSString | string): void;
  property(): NSString;
  setProperty(property: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
  path(): NSString;
  setPath(path: NSString | string): void;
  isSymbolOverride(): boolean;
  setIsSymbolOverride(isSymbolOverride: boolean): void;
  isStyleOverride(): boolean;
  setIsStyleOverride(isStyleOverride: boolean): void;
}

declare class MSOverrideRepresentationBase extends NSObject {
  children(): NSArray<any>;
  setChildren(children: NSArray<any> | any[]): void;
  instance(): MSSymbolInstance;
  setInstance(instance: MSSymbolInstance): void;
}

declare class MSOverrideRepresentationContainer extends MSOverrideRepresentationBase {
  static rootRepresentationForSymbolInstance(instance: MSSymbolInstance): MSOverrideRepresentationContainer;
}

declare class MSOverrideValue extends _MSOverrideValue {
  addPredecessor(predecessor: MSOverrideValue): void;
  initWithName_value<T extends MSOverrideValue>(name: NSString | string, value: NSObject): T;

  isInherited(): boolean;
  setIsInherited(isInherited: boolean): void;
  predecessor(): MSOverrideValue;
  setPredecessor(predecessor: MSOverrideValue): void;
  attributeName(): NSString;
  setAttributeName(attributeName: NSString | string): void;
}

declare class MSPasteboardLayers extends NSObject implements IMSLayerTraits {
  static pasteboardLayersWithLayers(layers: NSArray<any> | any[]): MSPasteboardLayers;
  static pasteboardLayersWithForeignLayers(layers: NSArray<any> | any[]): MSPasteboardLayers;
  insertOnPage_viewport_hint(page: MSPage, viewport: MSPastingViewport, destinationHint: MSLayer | null): MSPastingViewport;
  insertInGroup_atPosition_afterLayer_viewport_fitToParent(group: MSLayerGroup, position: NSPoint, afterLayer: any, viewport: MSPastingViewport | null, fitToParent: boolean): MSLayerArray;
  traits(): MSTraits;
  canBeContainedInLayer(layer: MSLayer): boolean;
  unionSize(): NSSize;
  layerPositionsRelativeToUnion(): NSArray<any>;
  suggestedRect(): NSRect;
  traits(): MSTraits;

  layers(): MSLayerArray;
  setLayers(layers: MSLayerArray): void;
  sharedStyles(): NSArray<any>;
  setSharedStyles(sharedStyles: NSArray<any> | any[]): void;
  localSymbols(): NSDictionary<any, any>;
  setLocalSymbols(localSymbols: NSDictionary<any, any> | {[key: string]: any}): void;
  foreignSymbols(): NSDictionary<any, any>;
  setForeignSymbols(foreignSymbols: NSDictionary<any, any> | {[key: string]: any}): void;
  suggestedPosition(): NSPoint;
  setSuggestedPosition(suggestedPosition: NSPoint): void;
  parentTraits(): MSTraits;
  setParentTraits(parentTraits: MSTraits): void;
}

declare class MSPasteboardLayersBase extends NSObject {
  static dictionaryFromPasteboardLayers(pasteboardLayers: MSPasteboardLayers): NSDictionary<any, any>;
  static dataFromPasteboardDictionary(dict: NSDictionary<any, any> | {[key: string]: any}): NSData;
  static pasteboardDataFromData(data: NSData | null): MSPasteboardLayers;
}

declare enum MSPasteboardVersion {
  MSPasteboardVersionUnknown = 0,
  MSPasteboardVersion34 = 1,
  MSPasteboardVersion34WithSeparateLayersArchiving = 2,
  MSPasteboardVersion36 = 3,
  MSPasteboardUsingJSON = 4,
  MSPasteboardForeignObjects = 5,
  MSPasteboardArchiveObjectIDs = 6,
  MSPasteboardForeignStyles = 7,
  MSPasteboardNextVersion,
  MSPasteboardCurrentVersion,
}

declare class MSPasteboardLayersReaderWriter extends NSObject implements IMSPasteboardReader, IMSPasteboardWriter {
  supportedPasteboardTypes(): NSArray<any>;
  pasteboardDataFromPasteboard_colorSpace_options_sender(pasteboard: NSPasteboard, colorSpace: NSColorSpace, options: MSPasteboardReaderOptions, sender: any | null): MSPasteboardLayers;
  canWriteDataToPasteboard(pasteboard: NSPasteboard): boolean;
  supportedPasteboardTypes(): NSArray<any>;
  writeData_toPasteboard(data: MSPasteboardLayers, pasteboard: NSPasteboard): void;
}

declare class MSPasteboardLayerListReaderWriter extends MSPasteboardLayersReaderWriter {}

declare class MSPasteboardPageListReaderWriter extends MSPasteboardLayersReaderWriter {}

declare class MSPasteboardManager extends NSObject {
  static readPasteboardLayersFromPasteboard_colorSpace_options(pasteboard: NSPasteboard, colorSpace: NSColorSpace, options: MSPasteboardReaderOptions): MSPasteboardLayers;
  static readPasteboardLayersFromDrag_colorSpace(dragInfo: any, colorSpace: NSColorSpace): MSPasteboardLayers;
  static writePasteboardLayers_toPasteboard(layers: MSPasteboardLayers, pasteboard: NSPasteboard): void;
  static registerReader(reader: any): void;
  static registerWriter(writer: any): void;
  static registerViewForSupportedDraggedTypes(view: NSView): void;
  registerDefaultReadersAndWriters(): void;
}

declare interface IMSPasteboardReader {
  supportedPasteboardTypes(): NSArray<any>;
  pasteboardDataFromPasteboard_colorSpace_options_sender(pasteboard: NSPasteboard, colorSpace: NSColorSpace, options: MSPasteboardReaderOptions, sender: any | null): MSPasteboardLayers;
}

declare enum MSPasteboardReaderOptions {
  MSPasteboardReaderOptionsNone = 0,
  MSPasteboardReaderOptionsStripTextStyle = 1<<0,
  MSPasteboardReaderOptionsDefault,
}

declare interface IMSPasteboardWriter {
  canWriteDataToPasteboard(pasteboard: NSPasteboard): boolean;
  supportedPasteboardTypes(): NSArray<any>;
  writeData_toPasteboard(data: MSPasteboardLayers, pasteboard: NSPasteboard): void;
}

declare class MSPastingViewport extends NSObject {
  static viewportWithVisibleRect_zoom(visibleRect: NSRect, zoom: CGFloat): MSPastingViewport;
  viewportContainingLayers(layers: MSLayerArray): MSPastingViewport;

  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
  visibleRect(): NSRect;
  setVisibleRect(visibleRect: NSRect): void;
}

declare class MSPath extends NSObject implements INSCopying {
  booleanOp_withPath(op: MSBooleanOperation, otherPath: MSPath): MSPath;
  booleanUnionWith(otherPath: MSPath): MSPath;
  booleanIntersectWith(otherPath: MSPath): MSPath;
  booleanSubtractWith(otherPath: MSPath): MSPath;
  booleanExclusiveOrWith(otherPath: MSPath): MSPath;
  copyWithZone(zone: NSZone): MSPath;
  static pathWithSubpaths(subpaths: NSArray<any> | any[]): MSPath;
  static pathWithContours(contours: NSArray<any> | any[]): MSPath;
  static pathWithRect(rect: CGRect): MSPath;
  static pathWithEllipseInRect(rect: CGRect): MSPath;
  static pathWithCGPath(pathRef: CGPathRef): MSPath;
  static pathWithBezierPath(bezierPath: NSBezierPath): MSPath;
  static pathWithLineFrom_to(point1: CGPoint, point2: CGPoint): MSPath;
  static pathWithCurveFromPoint_to_controlPoint1_controlPoint2(point: CGPoint, to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): MSPath;
  static pathWithPoints_pointCount_close(points: CGPoint, pointCount: number, close: boolean): MSPath;
  initWithCGPath<T extends MSPath>(pathRef: CGPathRef): T;
  initWithContours<T extends MSPath>(contours: NSArray<any> | any[]): T;
  initWithRect<T extends MSPath>(rect: CGRect): T;
  initWithRoundedRect_radius<T extends MSPath>(rect: CGRect, radius: CGFloat): T;
  initWithSquircleInRect_radius<T extends MSPath>(rect: CGRect, radius: CGFloat): T;
  initWithEllipseInRect<T extends MSPath>(rect: CGRect): T;
  initWithLineFrom_to<T extends MSPath>(point1: CGPoint, point2: CGPoint): T;
  initWithCurveFromPoint_to_controlPoint1_controlPoint2<T extends MSPath>(point: CGPoint, to: CGPoint, controlPoint1: CGPoint, controlPoint2: CGPoint): T;
  initWithPoints_pointCount_close<T extends MSPath>(points: CGPoint, pointCount: number, close: boolean): T;
  initWithBezierPath<T extends MSPath>(bezierPath: NSBezierPath): T;
  transformedPathUsingAffineTransform(transform: CGAffineTransform): MSPath;
  transformedPathUsingMapBlock(map: Block): MSPath;
  pathWithInset(inset: CGFloat): MSPath;
  pathWithInset_joinStrategy(inset: CGFloat, strategy: MSBezierJoinStrategy): MSPath;
  outlinePathWithWidth(width: CGFloat): MSPath;
  outlinePathWithWidth_lineCap_lineJoin(width: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin): MSPath;
  pathByRemovingSubsequentMoveToComponents(): MSPath;
  pathByCuttingBeforeIndex(index: NSUInteger): MSPath;
  pathByScalingToBounds(bounds: CGRect): MSPath;
  reversedPath(): MSPath;
  pathByJoiningWithPath(path: MSPath): MSPath;
  pointAtIndex(index: NSUInteger): CGPoint;
  pointOnPathAtLength(length: CGFloat): CGPoint;
  length(): CGFloat;
  startPoint(): CGPoint;
  endPoint(): CGPoint;
  bezierIndexForPoint_tolerance(point: CGPoint, tolerance: CGFloat): NSUInteger;
  containsPoint(point: CGPoint): boolean;
  isClosed(): boolean;
  pointsInRect(rect: NSRect): NSArray<any>;
  elementAtIndex(index: NSUInteger): MSCGPathElement;
  isEqualToPath(path: MSPath): boolean;
  isEqualToPath_epsilon(path: MSPath, epsilon: CGFloat): boolean;
  clipContext_windingRule_inBlock(context: CGContextRef, windingRule: NSWindingRule, block: Block): void;
  addClipForWindingRule_context(windingRule: NSWindingRule, context: CGContextRef): void;
  pathWithDashPattern(dashPattern: NSArray<any> | any[]): MSPath;
  outerPathWithRect(rect: CGRect): MSPath;
  pathWithOuterPathOfSize(amount: CGFloat): MSPath;
  insetPathBy(inset: CGFloat): MSPath;
  insetPathBy_borderOptions(size: CGFloat, options: MSImmutableStyleBorderOptions): MSPath;
  pathByGrowingBy(offset: CGFloat): MSPath;
  outlinePathWithLineWidth_borderOptions(lineWidth: CGFloat, borderOptions: MSImmutableStyleBorderOptions): MSPath;
  copyWithZone(zone: NSZone | null): any;

  CGPath(): CGPathRef;
  setCGPath(CGPath: CGPathRef): void;
  isEmpty(): boolean;
  setIsEmpty(isEmpty: boolean): void;
  elementCount(): NSUInteger;
  setElementCount(elementCount: NSUInteger): void;
  contours(): NSArray<any>;
  setContours(contours: NSArray<any> | any[]): void;
  isRectangular(): boolean;
  setIsRectangular(isRectangular: boolean): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  controlPointBounds(): CGRect;
  setControlPointBounds(controlPointBounds: CGRect): void;
  safeBounds(): CGRect;
  setSafeBounds(safeBounds: CGRect): void;
  subpaths(): NSArray<any>;
  setSubpaths(subpaths: NSArray<any> | any[]): void;
}

declare type MSCGPathElement = {
  type: CGPathElementType
  controlPoints: [CGPoint, CGPoint]
  toPoint: CGPoint
}

declare interface IMSPathLayer {
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  pathInFrame(): MSPath;
  setPathInFrame(pathInFrame: MSPath): void;
}

declare interface IMSImmutablePathLayer {
  decoratedPathInBounds(): MSPath;
  setDecoratedPathInBounds(decoratedPathInBounds: MSPath): void;
  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  style(): MSImmutableStyle;
  setStyle(style: MSImmutableStyle): void;
}

declare enum MSPatternFillType {
  MSPatternFillTypeTile = 0,
  MSPatternFillTypeFill = 1,
  MSPatternFillTypeStretch = 2,
  MSPatternFillTypeFit = 3,
}

declare class MSPersistentAssetCollection extends MSAssetCollection {
  static assetCollectionWithName(name: NSString | string): MSPersistentAssetCollection;
  save(): void;
  resourceNeedingMigration(): NSArray<any>;
  cleanupAfterTesting(): void;
  static assetCollectionByMigratingPresetsFromSources(sources: MSAssetMigrationSources): MSPersistentAssetCollection;
  static defaultMigrationSources(): MSAssetMigrationSources;
  static defaultExportPresets(): NSArray<any>;
}

declare class MSAssetMigrationSources extends NSObject {
  imageURL(): NSURL;
  setImageURL(imageURL: NSURL): void;
}

declare class MSPointArray extends NSObject implements INSCopying {
  addPoint(aPoint: NSPoint): void;
  insertPoint_atIndex(aPoint: NSPoint, i: NSUInteger): void;
  pointAtIndex(i: NSUInteger): NSPoint;
  removePointAtIndex(i: NSUInteger): void;
  countOfPoints(): NSUInteger;
  replacePointAtIndex_withPoint(i: NSUInteger, aPoint: NSPoint): void;
  copyWithZone(zone: NSZone | null): any;
}

declare enum MSPointRadiusBehaviour {
  MSPointRadiusBehaviourV0 = 0,
  MSPointRadiusBehaviourV1 = 1,
  MSPointRadiusBehaviourV1Smooth = 2,
  MSPointRadiusBehaviourDisabled = -1,
  MSPointRadiusBehaviourLegacy,
  MSPointRadiusBehaviourCurrent,
}

declare class MSPolygonShape extends _MSPolygonShape {}

declare class MSRect extends _MSRect implements IMSRect {
  static rectWithX_y_width_height(x: CGFloat, y: CGFloat, w: CGFloat, h: CGFloat): any;
  static rectWithRect(rect: NSRect): any;
  static rectWithUnionOfRects(rects: NSArray<any> | any[]): any;
  initWithX_y_width_height<T extends MSRect>(x: CGFloat, y: CGFloat, w: CGFloat, h: CGFloat): T;
  initWithRect<T extends MSRect>(rect: NSRect): T;
  calculateProportions(): void;
  performUpdatesWithUnconstrainedProportions(block: Block): void;
  setRectByIgnoringProportions(newRect: NSRect): void;
  shouldConstrainProportions(): boolean;
  containsPoint(p: NSPoint): boolean;
  isIntegral(): boolean;
  makeOriginIntegral(): void;
  makeRectIntegral(): void;
  log(): void;

  rect(): NSRect;
  setRect(rect: NSRect): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  origin(): NSPoint;
  setOrigin(origin: NSPoint): void;
  mid(): NSPoint;
  setMid(mid: NSPoint): void;
  primitiveConstrainProportions(): boolean;
  setPrimitiveConstrainProportions(primitiveConstrainProportions: boolean): void;
  proportions(): CGFloat;
  setProportions(proportions: CGFloat): void;
}

declare interface IMSRect {
  rect(): NSRect;
  setRect(rect: NSRect): void;
  size(): NSSize;
  setSize(size: NSSize): void;
  origin(): NSPoint;
  setOrigin(origin: NSPoint): void;
}

declare interface IMSRectDelegate {
  rect_didChangeFromRect(rect: MSRect, oldRect: NSRect): void;
}

declare interface IMSRootLayer {
  grid(): MSSimpleGrid;
  setGrid(grid: MSSimpleGrid): void;
  layout(): MSLayoutGrid;
  setLayout(layout: MSLayoutGrid): void;
  rulerBase(): NSPoint;
  setRulerBase(rulerBase: NSPoint): void;
  contentBounds(): NSRect;
  setContentBounds(contentBounds: NSRect): void;
  rect(): CGRect;
  setRect(rect: CGRect): void;
}

declare interface IMSImmutableRootLayer {
  contentBoundsForDocument(doc: MSImmutableDocumentData): NSRect;

  grid(): MSImmutableSimpleGrid;
  setGrid(grid: MSImmutableSimpleGrid): void;
  layout(): MSImmutableLayoutGrid;
  setLayout(layout: MSImmutableLayoutGrid): void;
}

declare class MSRulerCoordinateSpace extends NSObject implements IMSLayerCoordinateSpace {
  initWithLayer<T extends MSRulerCoordinateSpace>(layer: MSLayer): T;
  convertPoint_toCoordinateSpace(p: NSPoint, coordinateSpace: any | null): NSPoint;
  convertPoint_fromCoordinateSpace(p: NSPoint, coordinateSpace: any | null): NSPoint;
  convertRect_toCoordinateSpace(r: NSRect, coordinateSpace: any | null): NSRect;
  convertRect_fromCoordinateSpace(r: NSRect, coordinateSpace: any | null): NSRect;
  convertVector_toCoordinateSpace(vector: CGVector, coordinateSpace: any | null): CGVector;
  convertVector_fromCoordinateSpace(vector: CGVector, coordinateSpace: any | null): CGVector;
  transformForConvertingToCoordinateSpace(coordinateSpace: any | null): CGAffineTransform;
  transformForConvertingFromCoordinateSpace(coordinateSpace: any | null): CGAffineTransform;

  layer(): MSLayer;
  setLayer(layer: MSLayer): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  parentCoordinateSpace(): any;
  setParentCoordinateSpace(parentCoordinateSpace: any): void;
  transformForConvertingToParentCoordinateSpace(): CGAffineTransform;
  setTransformForConvertingToParentCoordinateSpace(transformForConvertingToParentCoordinateSpace: CGAffineTransform): void;
  transformForConvertingFromParentCoordinateSpace(): CGAffineTransform;
  setTransformForConvertingFromParentCoordinateSpace(transformForConvertingFromParentCoordinateSpace: CGAffineTransform): void;
}

declare class MSRulerData extends _MSRulerData {
  addGuide(): void;
  addGuideWithValue(value: CGFloat): void;
  addGuide(guide: NSNumber | number): void;
  removeGuideAtIndex(index: NSUInteger): void;
  removeGuide(guide: NSNumber | number): void;
  removeAllGuides(): void;
  numberOfGuides(): NSUInteger;
  guideAtIndex(index: NSUInteger): CGFloat;
  setValue_forGuideAtIndex(value: CGFloat, index: NSUInteger): void;
}

declare interface IMSShapeGroup {
  hasMarkers(): boolean;
  setHasMarkers(hasMarkers: boolean): void;
  isPartOfClippingMask(): boolean;
  setIsPartOfClippingMask(isPartOfClippingMask: boolean): void;
}

declare enum MSClippingMaskMode {
  MSClippingMaskOutline,
  MSClippingMaskAlpha,
}

declare class MSShapePath extends _MSShapePath {}

declare class MSSharedObject extends _MSSharedObject implements IBCSortable {
  initWithName_firstInstance<T extends MSSharedObject>(name: NSString | string, firstInstance: MSSharedObjectInstance): T;
  initWithName_sharedObjectID_value<T extends MSSharedObject>(name: NSString | string, sharedObjectID: NSString | string, value: MSSharedObjectInstance): T;
  registerInstance(instance: MSSharedObjectInstance): void;
  unregisterInstance(instance: MSSharedObjectInstance): void;
  isSharedObjectForInstance(instance: MSSharedObjectInstance): boolean;
  newInstance(): MSSharedObjectInstance;
  isOutOfSyncWithInstance(instance: MSSharedObjectInstance): boolean;

  name(): NSString;
  setName(name: NSString | string): void;
}

declare interface IMSSharedObjectInstance {
  type(): MSSharedStyleType;
  syncWithTemplateInstance(instance: any): void;

  sharedObjectID(): NSString;
  setSharedObjectID(sharedObjectID: NSString | string): void;
}

declare type MSSharedObjectInstance = MSModelObject

declare class MSSharedObjectContainer extends _MSSharedObjectContainer {
  removeSharedObject(sharedObject: MSSharedObject): void;
  removeSharedObjects(sharedObjects: NSArray<any> | any[]): void;
  instancesOf_inContainer(sharedObjectIDs: NSSet<any>, container: any): NSArray<any>;
  isSharedObjectForInstance(instance: MSSharedObjectInstance): boolean;
  sharedObjectForInstance(instance: MSSharedObjectInstance): MSSharedObject;
  sharedObjectWithID(sharedObjectID: NSString | string): MSSharedObject;
  sharedObjectAtIndex(index: NSUInteger): MSSharedObject;
  indexOfSharedObject(sharedObject: MSSharedObject): NSInteger;
  numberOfSharedObjects(): NSUInteger;
  registerInstance_withSharedObject(instance: MSSharedObjectInstance, sharedObject: MSSharedObject): void;
  unregisterInstance(instance: MSSharedObjectInstance): void;
  sharedObjectsInLayers(layers: MSLayerArray): NSDictionary<any, any>;
  objectsSortedByName(): NSArray<any>;
}

declare interface IMSSharedStylePasting {
  handlePasteIntoDocument(document: MSDocumentData): NSString;

  currentObjectID_MSSharedStylePasting(): NSString;
  setCurrentObjectID_MSSharedStylePasting(currentObjectID_MSSharedStylePasting: NSString | string): void;
}

declare class MSSharedStyleContainer extends _MSSharedStyleContainer {
  removeSharedStyle(sharedStyle: MSSharedStyle): void;
  isSharedStyleForInstance(instance: MSStyle): boolean;
  sharedStyleForInstance(instance: MSStyle): MSSharedStyle;
  sharedStyleWithID(sharedStyleID: NSString | string): MSSharedStyle;
  sharedStyleAtIndex(index: NSUInteger): MSSharedStyle;
  indexOfSharedStyle(sharedStyle: MSSharedStyle): NSInteger;
  numberOfSharedStyles(): NSUInteger;
  registerInstance_withSharedStyle(instance: MSStyle, sharedObject: MSSharedStyle): void;
  validStyleType(): MSSharedStyleType;
  sharedStyles(): NSArray<any>;
}

declare class MSSharedTextStyleContainer extends _MSSharedTextStyleContainer {}

declare class MSSmoothBezierFillet extends MSBezierFillet {
  static smoothBezierFilletWithLineSegment1_lineSegment2_filletRadius(segment1: MSBezierSegment, segment2: MSBezierSegment, filletRadius: CGFloat): MSSmoothBezierFillet;
}

declare class MSStarShape extends _MSStarShape {}

declare enum MSStylePartType {
  MSStylePartFill,
  MSStylePartBorder,
  MSStylePartShadow,
  MSStylePartInnerShadow,
}

declare class MSStyleBasicFill extends _MSStyleBasicFill implements IMSColorConvertible {
  static defaultFillColor(): NSColor;
  static drawBasicFill_colorSpace_enabled_inRect(basicFill: MSStyleBasicFill, colorSpace: NSColorSpace, enabled: boolean, frame: NSRect): void;
  static drawCheckerboardBackgroundInRect(r: NSRect): void;
  static drawColor_enabled_inRect(color: NSColor, enabled: boolean, frame: NSRect): void;
  previewImageOfSize_colorSpace_clippingAsBorder_borderWidth(size: NSSize, colorSpace: NSColorSpace, clipBorder: boolean, borderWidth: CGFloat): NSImage;
  convertColorsUsing(converter: any): void;
}

declare class MSStyleBlur extends _MSStyleBlur {
  cropRadius(): CGFloat;
}

declare enum MSStyleBlurType {
  MSStyleBlurGaussian = 0,
  MSStyleBlurMotion = 1,
  MSStyleBlurZoom = 2,
  MSStyleBlurBackground = 3,
}

declare class MSStyleBorderOptions extends _MSStyleBorderOptions {
  hasDashPattern(): boolean;
  setHasDashPattern(hasDashPattern: boolean): void;
}

declare class MSStyleColorControls extends _MSStyleColorControls {
  hasDefaultColorControlsValues(): boolean;
  resetToDefaultValues(): void;
}

declare enum BCFillType {
  BCFillTypeColor = 0,
  BCFillTypeGradient = 1,
  BCFillTypePattern = 4,
  BCFillTypeNoise = 5,
}

declare enum MSBorderPositionType {
  MSBorderPositionCenter = 0,
  MSBorderPositionInside = 1,
  MSBorderPositionOutside = 2,
}

declare interface IMSStylePart {
  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare interface IMSStyledLayer {}

declare class MSSymbol extends _MSSymbol {}

declare class MSSymbolContainer extends _MSSymbolContainer {}

declare interface IMSTextLayerEditingDelegate {
  adjustTextViewFrame(): void;
  adjustForegroundColor(): void;
}

declare class MSTextLayout extends NSObject {
  static textLayoutForLayoutManager(layoutManager: NSLayoutManager): MSTextLayout;

  baselineOffsets(): NSArray<any>;
  setBaselineOffsets(baselineOffsets: NSArray<any> | any[]): void;
  lineFragmentRectangles(): NSArray<any>;
  setLineFragmentRectangles(lineFragmentRectangles: NSArray<any> | any[]): void;
  firstBaselineOffset(): CGFloat;
  setFirstBaselineOffset(firstBaselineOffset: CGFloat): void;
  lastBaselineOffset(): CGFloat;
  setLastBaselineOffset(lastBaselineOffset: CGFloat): void;
  lineFragmentBounds(): CGRect;
  setLineFragmentBounds(lineFragmentBounds: CGRect): void;
  firstLineCapOffset(): CGFloat;
  setFirstLineCapOffset(firstLineCapOffset: CGFloat): void;
}

declare class MSTrailingLayersMover extends NSObject {
  static changeFrameForLayers_inBlock(layers: NSArray<any> | any[], block: BCVoidBlock): void;
}

declare class MSTreeDiff extends NSObject {
  initWithFirstDocument_secondDocument<T extends MSTreeDiff>(firstDoc: MSImmutableDocumentData, secondDoc: MSImmutableDocumentData): T;
  diffs(): NSArray<any>;
  contentDirtyDiffRect(): NSRect;
  overlayDirtyDiffRect(): NSRect;
  changedPropertiesAllExhibitTrait_allKeysWereCompared(trait: MSPropertyTraits, allKeysWereCompared: boolean): boolean;
  someChangedPropertiesExhibitTrait_allKeysWereCompared(targetTrait: MSPropertyTraits, allKeysWereCompared: boolean): boolean;
  containsLayerWithTraits(traits: MSTraits): boolean;
}

declare class MSTriangleShape extends _MSTriangleShape {}

declare class MSUnitCoordinateSpace extends NSObject implements IMSLayerCoordinateSpace {
  static convertPoint_fromBounds(point: CGPoint, bounds: CGRect): CGPoint;
  static convertPoint_toBounds(point: CGPoint, bounds: CGRect): CGPoint;
  convertPoint_toCoordinateSpace(p: NSPoint, coordinateSpace: any | null): NSPoint;
  convertPoint_fromCoordinateSpace(p: NSPoint, coordinateSpace: any | null): NSPoint;
  convertRect_toCoordinateSpace(r: NSRect, coordinateSpace: any | null): NSRect;
  convertRect_fromCoordinateSpace(r: NSRect, coordinateSpace: any | null): NSRect;
  convertVector_toCoordinateSpace(vector: CGVector, coordinateSpace: any | null): CGVector;
  convertVector_fromCoordinateSpace(vector: CGVector, coordinateSpace: any | null): CGVector;
  transformForConvertingToCoordinateSpace(coordinateSpace: any | null): CGAffineTransform;
  transformForConvertingFromCoordinateSpace(coordinateSpace: any | null): CGAffineTransform;

  parentCoordinateSpace(): any;
  setParentCoordinateSpace(parentCoordinateSpace: any): void;
  bounds(): CGRect;
  setBounds(bounds: CGRect): void;
  transformForConvertingToParentCoordinateSpace(): CGAffineTransform;
  setTransformForConvertingToParentCoordinateSpace(transformForConvertingToParentCoordinateSpace: CGAffineTransform): void;
  transformForConvertingFromParentCoordinateSpace(): CGAffineTransform;
  setTransformForConvertingFromParentCoordinateSpace(transformForConvertingFromParentCoordinateSpace: CGAffineTransform): void;
}

declare enum MSUserVisibleScaleType {
  MSUserVisibleScaleTypeScale = 0,
  MSUserVisibleScaleTypeWidth = 1,
  MSUserVisibleScaleTypeHeight = 2,
}

declare class MSVersionedArchive extends NSObject {
  static globalArchiveWithName_extension_version(name: NSString | string, extension: NSString | string, version: MSDocumentVersion): MSVersionedArchive;
  initWithURL_version<T extends MSVersionedArchive>(url: NSURL, version: MSDocumentVersion): T;
  unarchiveRootObjectVersion_error(version: MSDocumentVersion, error: NSError): any;
  archiveRootObject_error(rootObject: any, error: NSError): boolean;
  URLNeedingMigration(): NSURL;
  exists(): boolean;
  static versionedURLWithBase_extension_version(base: NSURL, extension: NSString | string, version: NSUInteger): NSURL;
  cleanupAfterTesting(): void;
}

declare enum MSBooleanOperation {
  MSBooleanOperationNone = -1,
  MSBooleanOperationUnion = 0,
  MSBooleanOperationSubtract = 1,
  MSBooleanOperationIntersect = 2,
  MSBooleanOperationDifference = 3,
}

declare class NSBezierPathEnumerator extends NSObject implements INSFastEnumeration {
  objectAtIndex(index: NSUInteger): any;
  countByEnumeratingWithState_objects_count(state: NSFastEnumerationState, buffer: any[], len: NSUInteger): NSUInteger;

  pathItems(): NSArray<any>;
  setPathItems(pathItems: NSArray<any> | any[]): void;
  bezierPath(): NSBezierPath;
  setBezierPath(bezierPath: NSBezierPath): void;
  reverse(): boolean;
  setReverse(reverse: boolean): void;
}

declare class NSBezierPathItem extends NSObject {
  points(): NSPoint;
  setPoints(p: NSPoint): void;
  bezierPathStartingAtPoint(point: NSPoint): NSBezierPath;
  isEqual_withAccuracy(other: NSBezierPathItem, accuracy: CGFloat): boolean;

  type(): NSBezierPathElement;
  setType(type: NSBezierPathElement): void;
}

declare class CMapParser extends NSObject {
  initWithStream<T extends CMapParser>(stream: PDFStream): T;
  initWithData<T extends CMapParser>(data: NSData): T;

  map(): NSMutableDictionary<any, any>;
  setMap(map: NSMutableDictionary<any, any> | {[key: string]: any}): void;
}

declare class EPSConverter extends NSObject {
  convertEPSAtURL_progressBlock(source: NSURL, progress: ProgressBlock): NSData;
  convertEPSData_progressBlock(data: NSData, progress: ProgressBlock): NSData;
  convertEPSAtURL_toURL_progressBlock(source: NSURL, destination: NSURL, progress: ProgressBlock): void;
}

declare class EPSParser extends NSObject implements IPDFParser {
  initWithScanner<T extends EPSParser>(scanner: PDFScanner): T;
  loadDocumentFromURL(url: NSURL): void;
  loadDocumentFromData(data: NSData): void;
  parseWithProgress(progress: BCVoidBlock): void;
  parsePastedDocument(): void;
  pageCount(): NSUInteger;
  name(): NSString;
}

declare class MSPDFScanner extends PDFScanner {
  rootLayer(): MSLayerGroup;
  setRootLayer(rootLayer: MSLayerGroup): void;
  substituteFontName(): NSString;
  setSubstituteFontName(substituteFontName: NSString | string): void;
}

declare class MSPDFState extends NSObject implements INSCopying {
  initWithScanner<T extends MSPDFState>(scanner: MSPDFScanner): T;
  addLayer(layer: MSLayer): void;
  layerWithEnclosingGroup(enclosingGroup: boolean): MSLayer;
  makeArtboardGroup(): MSArtboardGroup;
  optimiseClipLayerInGroup(group: MSLayerGroup): boolean;
  lastLayer(): MSLayer;
  resetTransform(transform: NSAffineTransform): void;
  appendTransform(transform: NSAffineTransform): void;
  transformPoint(aPoint: NSPoint): NSPoint;
  transformSize(aSize: NSSize): NSSize;
  transformStruct(): NSAffineTransformStruct;
  transformBezierPath(aPath: NSBezierPath): NSBezierPath;
  stringFromTransform(transform: NSAffineTransform): NSString;
  updateClipping(): void;
  updateClippingWithTextPath(path: NSBezierPath): void;
  transformedClippingPath(): NSBezierPath;
  copyWithZone(zone: NSZone | null): any;

  borderAlphaConstant(): CGFloat;
  setBorderAlphaConstant(borderAlphaConstant: CGFloat): void;
  borderColor(): NSColor;
  setBorderColor(borderColor: NSColor): void;
  borderColorSpace(): NSColorSpace;
  setBorderColorSpace(borderColorSpace: NSColorSpace): void;
  borderColorSpaceMapping(): PDFFunction;
  setBorderColorSpaceMapping(borderColorSpaceMapping: PDFFunction): void;
  borderDashes(): NSArray<any>;
  setBorderDashes(borderDashes: NSArray<any> | any[]): void;
  borderCapStyle(): NSLineCapStyle;
  setBorderCapStyle(borderCapStyle: NSLineCapStyle): void;
  borderGradient(): PDFPattern;
  setBorderGradient(borderGradient: PDFPattern): void;
  borderJoinStyle(): NSLineJoinStyle;
  setBorderJoinStyle(borderJoinStyle: NSLineJoinStyle): void;
  borderThickness(): CGFloat;
  setBorderThickness(borderThickness: CGFloat): void;
  clippingMode(): ClippingMode;
  setClippingMode(clippingMode: ClippingMode): void;
  clippingPath(): NSBezierPath;
  setClippingPath(clippingPath: NSBezierPath): void;
  clippingUpdated(): boolean;
  setClippingUpdated(clippingUpdated: boolean): void;
  containsClippedItems(): boolean;
  setContainsClippedItems(containsClippedItems: boolean): void;
  currentPoint(): NSPoint;
  setCurrentPoint(currentPoint: NSPoint): void;
  fillAlphaConstant(): CGFloat;
  setFillAlphaConstant(fillAlphaConstant: CGFloat): void;
  fillColor(): NSColor;
  setFillColor(fillColor: NSColor): void;
  fillColorSpace(): NSColorSpace;
  setFillColorSpace(fillColorSpace: NSColorSpace): void;
  fillColorSpaceMapping(): PDFFunction;
  setFillColorSpaceMapping(fillColorSpaceMapping: PDFFunction): void;
  fillGradient(): PDFPattern;
  setFillGradient(fillGradient: PDFPattern): void;
  layers(): NSMutableArray<any>;
  setLayers(layers: NSMutableArray<any> | any[]): void;
  path(): NSBezierPath;
  setPath(path: NSBezierPath): void;
  pathClosed(): boolean;
  setPathClosed(pathClosed: boolean): void;
  pathUsed(): boolean;
  setPathUsed(pathUsed: boolean): void;
  pathWasRect(): boolean;
  setPathWasRect(pathWasRect: boolean): void;
  renderingIntent(): CGColorRenderingIntent;
  setRenderingIntent(renderingIntent: CGColorRenderingIntent): void;
  text(): MSPDFTextState;
  setText(text: MSPDFTextState): void;
  transformedPath(): NSBezierPath;
  setTransformedPath(transformedPath: NSBezierPath): void;
  scanner(): MSPDFScanner;
  setScanner(scanner: MSPDFScanner): void;
}

declare enum ClippingMode {
  ClippingModeNonZeroWinding,
  ClippingModeWithEvenOddWindow,
  ClippingModeDontClip,
}

declare class MSPDFTextState extends NSObject implements INSCopying {
  static textStateWithState(state: MSPDFState): MSPDFTextState;
  shouldFill(): boolean;
  shouldStroke(): boolean;
  shouldClip(): boolean;
  setTransform_resettingLineTransform(transform: NSAffineTransform, resettingLineTransform: boolean): void;
  resetRenderingTransform(): void;
  appendText(text: NSString | string): void;
  attributes(): NSDictionary<any, any>;
  copyWithZone(zone: NSZone | null): any;

  characterSpacing(): CGFloat;
  setCharacterSpacing(characterSpacing: CGFloat): void;
  font(): NSFont;
  setFont(font: NSFont): void;
  fontName(): NSString;
  setFontName(fontName: NSString | string): void;
  fontInfo(): NSDictionary<any, any>;
  setFontInfo(fontInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  leading(): CGFloat;
  setLeading(leading: CGFloat): void;
  lineTransform(): NSAffineTransform;
  setLineTransform(lineTransform: NSAffineTransform): void;
  mode(): NSUInteger;
  setMode(mode: NSUInteger): void;
  offset(): CGFloat;
  setOffset(offset: CGFloat): void;
  renderingTransform(): NSAffineTransform;
  setRenderingTransform(renderingTransform: NSAffineTransform): void;
  rise(): CGFloat;
  setRise(rise: CGFloat): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  size(): CGFloat;
  setSize(size: CGFloat): void;
  state(): MSPDFState;
  setState(state: MSPDFState): void;
  text(): NSMutableAttributedString;
  setText(text: NSMutableAttributedString): void;
  transform(): NSAffineTransform;
  setTransform(transform: NSAffineTransform): void;
  wordSpacing(): CGFloat;
  setWordSpacing(wordSpacing: CGFloat): void;
}

declare class PDFFunction extends NSObject {
  static functionWithInfo(info: any): PDFFunction;
  initWithInfo<T extends PDFFunction>(info: any): T;
  mapInputs_toOutputs(inputs: PDFFunctionInput, outputs: PDFFunctionOutput): void;

  samples(): NSData;
  setSamples(samples: NSData): void;
  parameters(): NSDictionary<any, any>;
  setParameters(parameters: NSDictionary<any, any> | {[key: string]: any}): void;
  numberOfInputComponents(): NSUInteger;
  setNumberOfInputComponents(numberOfInputComponents: NSUInteger): void;
  numberOfOutputComponents(): NSUInteger;
  setNumberOfOutputComponents(numberOfOutputComponents: NSUInteger): void;
  bitsPerSample(): NSUInteger;
  setBitsPerSample(bitsPerSample: NSUInteger): void;
  bytesPerSampleComponent(): NSUInteger;
  setBytesPerSampleComponent(bytesPerSampleComponent: NSUInteger): void;
  bytesPerSample(): NSUInteger;
  setBytesPerSample(bytesPerSample: NSUInteger): void;
  numberOfSamples(): NSUInteger;
  setNumberOfSamples(numberOfSamples: NSUInteger): void;
  domain(): NSArray<any>;
  setDomain(domain: NSArray<any> | any[]): void;
}

declare type PDFFunctionInput = CGFloat[]

declare type PDFFunctionOutput = CGFloat[]

declare class PDFOperatorInfo extends NSObject {
  selector(): string;
  setSelector(selector: string): void;
  callback(): CGPDFOperatorCallback;
  setCallback(callback: CGPDFOperatorCallback): void;
  operatorName(): NSString;
  setOperatorName(operatorName: NSString | string): void;
  methodName(): NSString;
  setMethodName(methodName: NSString | string): void;
}

declare class PDFParser extends NSObject implements IPDFParser {
  initWithScanner<T extends PDFParser>(scanner: PDFScanner): T;
  loadDocumentFromURL(url: NSURL): void;
  loadDocumentFromData(data: NSData): void;
  parseWithProgress(progress: BCVoidBlock): void;
  parsePastedDocument(): void;
  pageCount(): NSUInteger;
  name(): NSString;

  name(): NSString;
  setName(name: NSString | string): void;
}

declare interface IPDFParser extends NSObject {
  // initWithScanner<T extends IPDFParser>(scanner: PDFScanner): T;
  loadDocumentFromURL(url: NSURL): void;
  loadDocumentFromData(data: NSData): void;
  parseWithProgress(progress: BCVoidBlock): void;
  parsePastedDocument(): void;
  pageCount(): NSUInteger;
  name(): NSString;
}

declare class PDFPattern extends NSObject {
  static patternWithResource(resource: any): PDFPattern;
  initWithResource<T extends PDFPattern>(resource: any): T;

  shadingType(): ShadingType;
  setShadingType(shadingType: ShadingType): void;
  function(): PDFFunction;
  setFunction(functionName: PDFFunction): void;
  space(): any;
  setSpace(space: any): void;
  coords(): NSArray<any>;
  setCoords(coords: NSArray<any> | any[]): void;
}

declare enum ShadingType {
  ShadingTypeFunction = 1,
  ShadingTypeLinear,
  ShadingTypeRadial,
  ShadingTypeGouraudTriange,
  ShadingTypeGouraudLattice,
  ShadingTypeCoonsPatchMesh,
  ShadingTypeTensorProductPatchMesh,
}

declare class PDFScanner extends NSObject {
  init<T extends PDFScanner>(): T;
  scanPage_parser_isPasted(page: CGPDFPageRef, parser: PDFParser, isPasted: boolean): void;
  scanStream_dictionary(stream: CGPDFContentStreamRef, dictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  popBool(): boolean;
  popDouble(): CGFloat;
  popInteger(): NSInteger;
  popRGBColor(): NSColor;
  popCMYKColor(): NSColor;
  popNumber(): NSNumber;
  popPoint(): NSPoint;
  popString(): PDFString;
  popName(): NSString;
  popTransform(): NSAffineTransform;
  popArray(): NSArray<any>;
  popObject(): any;
  static convertObject(object: CGPDFObjectRef): any;
  static convertArray(array: CGPDFArrayRef): NSArray<any>;
  static convertDictionary(dictionary: CGPDFDictionaryRef): NSDictionary<any, any>;
  colorSpaceWithInfo_mapping(info: any, mapping: PDFFunction): NSColorSpace;
  gradientForPattern(pattern: PDFPattern): NSGradient;
  currentPoint(): NSPoint;
  currentLeading(): CGFloat;
  currentFillColorSpace(): NSColorSpace;
  currentFillColorSpaceMapping(): PDFFunction;
  currentStrokeColorSpace(): NSColorSpace;
  currentStrokeColorSpaceMapping(): PDFFunction;
  currentFont(): NSDictionary<any, any>;
  moveTo(point: NSPoint): void;
  lineTo(point: NSPoint): void;
  curveTo_control1_control2(point: NSPoint, control1: NSPoint, control2: NSPoint): void;
  closePath(): void;
  endPath(): void;
  appendRectangle(rectangle: NSRect): void;
  defineMarkedPoint(): void;
  processXObject(object: PDFStream): void;
  processForm(form: PDFStream): void;
  processImage_info(image: NSImage, info: NSDictionary<any, any> | {[key: string]: any}): void;
  concatMatrix(transform: NSAffineTransform): void;
  saveGraphicState(): void;
  restoreGraphicState(): void;
  setLineWidth(width: CGFloat): void;
  setLineJoin(join: NSUInteger): void;
  setLineCap(cap: NSUInteger): void;
  setLineDash_phase(dashes: NSArray<any> | any[], phase: NSInteger): void;
  setMitreLimit(limit: CGFloat): void;
  setStrokeColourSpace_mapping(space: NSColorSpace, mapping: PDFFunction): void;
  setFillColourSpace_mapping(space: NSColorSpace, mapping: PDFFunction): void;
  setColourRenderingIntent(intent: CGColorRenderingIntent): void;
  setFillColour(colour: NSColor): void;
  setStrokeColour(colour: NSColor): void;
  setFillPattern(pattern: PDFPattern): void;
  setStrokePattern(pattern: PDFPattern): void;
  setFillAlphaConstant(alpha: CGFloat): void;
  setStrokeAlphaConstant(alpha: CGFloat): void;
  clipWithWinding(winding: NSWindingRule): void;
  fillWithWinding(winding: NSWindingRule): void;
  fillWithShadingPattern(pattern: PDFPattern): void;
  strokeWithWinding(winding: NSWindingRule): void;
  beginCompatibility(): void;
  endCompatibility(): void;
  beginMarkedContentWithProperty(): void;
  beginMarkedContent(): void;
  endMarkedContent(): void;
  beginImage(): void;
  setOverprintMode(mode: NSInteger): void;
  beginText(): void;
  setFontName_size_info(name: NSString | string, size: CGFloat, info: NSDictionary<any, any> | {[key: string]: any}): void;
  setTextCharacterSpacing(spacing: CGFloat): void;
  setTextWordSpacing(spacing: CGFloat): void;
  setTextLeading(spacing: CGFloat): void;
  setTextRise(spacing: CGFloat): void;
  setTextScale(spacing: CGFloat): void;
  setTextMode(mode: NSUInteger): void;
  setTextMatrix(matrix: NSAffineTransform): void;
  offset(offset: CGFloat): void;
  nextLineWithOffset(point: NSPoint): void;
  appendText(string: NSString | string): void;
  endText(): void;
  declareGlyph(): void;
  glyphBounds(): void;

  dictionary(): NSDictionary<any, any>;
  setDictionary(dictionary: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class PDFStream extends NSObject {
  initWithStream<T extends PDFStream>(stream: CGPDFStreamRef): T;
  dictionary(): NSDictionary<any, any>;

  stream(): CGPDFStreamRef;
  setStream(stream: CGPDFStreamRef): void;
  format(): CGPDFDataFormat;
  setFormat(format: CGPDFDataFormat): void;
  data(): NSData;
  setData(data: NSData): void;
  dictionary(): NSDictionary<any, any>;
  setDictionary(dictionary: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class PDFString extends NSObject {
  initWithStringRef<T extends PDFString>(stringRef: CGPDFStringRef): T;
  string(): NSString;
  data(): NSData;
  stringWithMap(map: NSDictionary<any, any> | {[key: string]: any}): NSString;
}

declare class PDFLoggingScanner extends PDFScanner {
  log_method(string: NSString | string, method: string): void;
}

declare class MSPluginBundle extends NSObject {
  static pluginBundleWithURL(url: NSURL): MSPluginBundle;
  initPluginBundleWithURL<T extends MSPluginBundle>(url: NSURL): T;
  initWithName_identifier_commands_icon<T extends MSPluginBundle>(name: NSString | string, identifier: NSString | string, commands: NSArray<any> | any[], icon: NSImage): T;
  writeToURL(url: NSURL): boolean;
  urlForResourceNamed(resourceName: NSString | string): NSURL;

  url(): NSURL;
  setUrl(url: NSURL): void;
  commands(): NSDictionary<any, any>;
  setCommands(commands: NSDictionary<any, any> | {[key: string]: any}): void;
  version(): NSString;
  setVersion(version: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
  icon(): NSImage;
  setIcon(icon: NSImage): void;
  alertIcon(): NSImage;
  setAlertIcon(alertIcon: NSImage): void;
  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  versionedIdentifier(): NSString;
  setVersionedIdentifier(versionedIdentifier: NSString | string): void;
  pluginDescription(): NSString;
  setPluginDescription(pluginDescription: NSString | string): void;
  suppliesData(): boolean;
  setSuppliesData(suppliesData: boolean): void;
  menuDescription(): NSDictionary<any, any>;
  setMenuDescription(menuDescription: NSDictionary<any, any> | {[key: string]: any}): void;
  homepageURL(): NSURL;
  setHomepageURL(homepageURL: NSURL): void;
  author(): NSString;
  setAuthor(author: NSString | string): void;
  authorEmail(): NSString;
  setAuthorEmail(authorEmail: NSString | string): void;
  appcastURL(): NSURL;
  setAppcastURL(appcastURL: NSURL): void;
  compatibleVersion(): NSString;
  setCompatibleVersion(compatibleVersion: NSString | string): void;
  maximumCompatibleVersion(): NSString;
  setMaximumCompatibleVersion(maximumCompatibleVersion: NSString | string): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  compatible(): boolean;
  setCompatible(compatible: boolean): void;
  disableCocoaScriptPreprocessor(): boolean;
  setDisableCocoaScriptPreprocessor(disableCocoaScriptPreprocessor: boolean): void;
}

declare class MSPluginCommand extends NSObject implements ICOPrintController {
  static commandWithJSON_scripts_scriptsURL(commandJSON: any, scripts: NSMutableDictionary<any, any> | {[key: string]: any}, scriptsURL: NSURL): MSPluginCommand;
  initWithScript_identifier_name_handlers_shortcut_scope<T extends MSPluginCommand>(script: MSPluginScript, identifier: NSString | string, name: NSString | string, handlers: NSDictionary<any, any> | {[key: string]: any}, shortcut: NSString | string, scope: MSPluginCommandScope): T;
  initWithScript_identifier_name_runHandler_scope<T extends MSPluginCommand>(script: MSPluginScript, identifier: NSString | string, name: NSString | string, runHandler: NSString | string, scope: MSPluginCommandScope): T;
  runHandlerWithKey_context_manager(handlerKey: NSString | string, context: NSDictionary<any, any> | {[key: string]: any}, manager: MSPluginManager): NSString;
  runHandlerWithKey_context_manager_onComplete(handlerKey: NSString | string, context: NSDictionary<any, any> | {[key: string]: any}, manager: MSPluginManager, callback: Block): NSString;
  runHandler_context_manager(handler: NSString | string, context: NSDictionary<any, any> | {[key: string]: any}, manager: MSPluginManager): NSString;
  runHandler_context_manager_onComplete(handler: NSString | string, context: NSDictionary<any, any> | {[key: string]: any}, manager: MSPluginManager, callback: Block): NSString;
  run_manager(context: NSDictionary<any, any> | {[key: string]: any}, manager: MSPluginManager): NSString;
  run_manager_onComplete(context: NSDictionary<any, any> | {[key: string]: any}, manager: MSPluginManager, callback: Block): NSString;
  tearDownIfFinished(): boolean;
  hasRunHandler(): boolean;
  menuItemWithAction(selector: string): NSMenuItem;
  metadata(): NSDictionary<any, any>;
  print(value: any): void;
  logString(): NSString;
  valueForKey_onLayer_forPluginIdentifier(key: NSString | string, layer: MSLayer, identifier: NSString | string): any;
  setValue_forKey_onLayer_forPluginIdentifier(value: any, key: NSString | string, layer: MSLayer, identifier: NSString | string): void;
  valueForKey_onLayer(key: NSString | string, layer: MSLayer): any;
  setValue_forKey_onLayer(value: any, key: NSString | string, layer: MSLayer): void;
  valueForKey_onDocument_forPluginIdentifier(key: NSString | string, document: MSDocumentData, identifier: NSString | string): any;
  setValue_forKey_onDocument_forPluginIdentifier(value: any, key: NSString | string, document: MSDocumentData, identifier: NSString | string): void;
  valueForKey_onDocument(key: NSString | string, document: MSDocumentData): any;
  setValueForKey_forKey_onDocument(value: any, key: NSString | string, document: MSDocumentData): void;
  print(s: any): void;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  commandSpecifier(): MSPluginCommandSpecifier;
  setCommandSpecifier(commandSpecifier: MSPluginCommandSpecifier): void;
  script(): MSPluginScript;
  setScript(script: MSPluginScript): void;
  name(): NSString;
  setName(name: NSString | string): void;
  shortcut(): NSString;
  setShortcut(shortcut: NSString | string): void;
  pluginBundle(): MSPluginBundle;
  setPluginBundle(pluginBundle: MSPluginBundle): void;
  scope(): MSPluginCommandScope;
  setScope(scope: MSPluginCommandScope): void;
  stayRunning(): boolean;
  setStayRunning(stayRunning: boolean): void;
  disableCocoaScriptPreprocessor(): boolean;
  setDisableCocoaScriptPreprocessor(disableCocoaScriptPreprocessor: boolean): void;
}

declare enum MSPluginCommandScope {
  MSPluginCommandScopeDocument,
  MSPluginCommandScopeApplication,
}

declare class MSPluginCommandSpecifier extends NSObject implements INSCopying {
  initWithPluginBundleIdentifier_commandIdentifier<T extends MSPluginCommandSpecifier>(pluginBundleIdentifier: NSString | string, commandIdentifier: NSString | string): T;
  isEqualToCommandSpecifier(specifier: MSPluginCommandSpecifier): boolean;
  stringValue(): NSString;
  copyWithZone(zone: NSZone | null): any;

  pluginBundleIdentifier(): NSString;
  setPluginBundleIdentifier(pluginBundleIdentifier: NSString | string): void;
  commandIdentifier(): NSString;
  setCommandIdentifier(commandIdentifier: NSString | string): void;
}

declare class MSPluginDebugController extends NSObject implements ICODebugController {
  output_args(format: NSString | string, ...args: any[]): void;
}

declare class MSPluginManager extends NSObject {
  static initialisePlugins<T extends MSPluginManager>(): T;
  static mainPluginsFolderURL(): NSURL;
  static defaultPluginURL(): NSURL;
  static pluginsURLs(): NSArray<any>;
  static warehousePluginFolderForIdentifier_withVersion(identifier: NSString | string, version: NSString | string): NSURL;
  initWithPluginsFolderURLs_updater_pluginStateManager<T extends MSPluginManager>(pluginsFolderURLs: NSArray<any> | any[] | null, updater: any | null, stateManager: MSPluginManagingState | null): T;
  enablePlugin(pluginBundle: MSPluginBundle): void;
  disablePlugin(pluginBundle: MSPluginBundle): void;
  enabledPlugins(): NSArray<any>;
  disabledPlugins(): NSArray<any>;
  versionsForPlugin(pluginBundle: MSPluginBundle): MSPluginVersions;
  reloadPlugins(): void;
  commandWithSpecifier(specifier: MSPluginCommandSpecifier): MSPluginCommand;
  addPluginsToMenu_selector(menu: NSMenu, selector: string | null): void;
  stopTrackingLongRunningCommandWithSpecifier(specifier: MSPluginCommandSpecifier): MSPluginCommand;
  trackLongRunningCommand_onComplete(command: MSPluginCommand, callback: Block): void;
  editBundle(bundle: MSPluginBundle | null): void;
  runHandlerWithKey_fromCommand_inPlugin_withContext(handlerKey: NSString | string, commandIdentifier: NSString | string, pluginIdentifier: NSString | string, context: NSDictionary<any, any> | {[key: string]: any}): void;
  checkForPluginUpdatesWithHandler_completionHandler(handler: Block, completionHandler: Block | null): void;
  checkForPluginUpdates_handler_completionHandler(plugins: NSArray<any> | any[], handler: Block, completionHandler: Block | null): void;
  downloadCompatiblePluginUpdatesWithCompletionHandler(completionHandler: Block): void;
  downloadLatestPluginUpdatesWithCompletionHandler(completionHandler: Block): void;
  downloadPluginUpdates_withCompletionHandler(updates: NSDictionary<any, any> | {[key: string]: any}, completionHandler: Block): void;
  isPluginUpdateDownloadedWithIdentifier_version(identifier: NSString | string, version: NSString | string): boolean;
  downloadPluginUpdate_withVersion_completionHandler(pluginIdentifier: NSString | string, pluginVersion: NSString | string, downloadCompletionHandler: Block): void;
  downloadAndInstallPluginWithIdentifier_version_downloadCompletionHandler(identifier: NSString | string, version: NSString | string, downloadCompletionHandler: Block): void;
  installPluginWithIdentifier_version_error(identifier: NSString | string, version: NSString | string, error: NSError): boolean;
  isPluginWithIdentifier_incompatibleWithVersion(identifier: NSString | string, version: NSString | string): boolean;
  cancelDownloadingPluginVersions(): void;
  clearPluginsCache(): void;
  clearFolderMonitors(): void;
  registerIncompatiblePlugins(): void;
  downloadRemotePluginsBlacklist(): void;

  pluginsFolderURLs(): NSArray<any>;
  setPluginsFolderURLs(pluginsFolderURLs: NSArray<any> | any[]): void;
  mainPluginsFolderURL(): NSURL;
  setMainPluginsFolderURL(mainPluginsFolderURL: NSURL): void;
  plugins(): NSDictionary<any, any>;
  setPlugins(plugins: NSDictionary<any, any> | {[key: string]: any}): void;
  numberOfPluginsWithUpdates(): NSInteger;
  setNumberOfPluginsWithUpdates(numberOfPluginsWithUpdates: NSInteger): void;
  numberOfPluginsWithSketchCompatibleUpdates(): NSInteger;
  setNumberOfPluginsWithSketchCompatibleUpdates(numberOfPluginsWithSketchCompatibleUpdates: NSInteger): void;
  numberOfIncompatiblePluginsDisabled(): NSInteger;
  setNumberOfIncompatiblePluginsDisabled(numberOfIncompatiblePluginsDisabled: NSInteger): void;
  incompatiblePluginsWithCompatibleUpdates(): NSDictionary<any, any>;
  setIncompatiblePluginsWithCompatibleUpdates(incompatiblePluginsWithCompatibleUpdates: NSDictionary<any, any> | {[key: string]: any}): void;
  pluginsWithSketchCompatipleUpdates(): NSArray<any>;
  setPluginsWithSketchCompatipleUpdates(pluginsWithSketchCompatipleUpdates: NSArray<any> | any[]): void;
  static pluginsWarehouseURL(): NSURL;
  static setPluginsWarehouseURL(pluginsWarehouseURL: NSURL): void;
  updatesAddedToWarehouse(): NSInteger;
  setUpdatesAddedToWarehouse(updatesAddedToWarehouse: NSInteger): void;
  disableAllPlugins(): boolean;
  setDisableAllPlugins(disableAllPlugins: boolean): void;
  logAction(): any;
  setLogAction(logAction: any): void;
}

declare interface IMSPluginLogAction {
  log(sender: NSDictionary<any, any> | {[key: string]: any}): void;
  clearLog(): void;
  logString(): NSString;
}

declare class MSPluginManagingState extends NSObject {
  initWithMetadataURL_incompatiblePlugins<T extends MSPluginManagingState>(metadataURL: NSURL, incompatiblePlugins: NSDictionary<any, any> | {[key: string]: any}): T;
  setEnabled_forPluginIdentifier_withVersion(enable: boolean, identifier: NSString | string, version: NSString | string): void;
  shouldEnablePluginIdentifier_withVersion(identifier: NSString | string, version: NSString | string): boolean;
  updateMetadataWithPluginIndentifiers(identifiers: NSArray<any> | any[]): void;
  isPluginWithIdentifier_incompatibleWithVersion(identifier: NSString | string, version: NSString | string): boolean;
  registerPluginIncompatibilityForVersions(pluginsDictionary: NSDictionary<any, any> | {[key: string]: any}): NSInteger;
  resetIncompatiblePluginMetadata(): void;

  static incompatiblePlugins(): NSDictionary<any, any>;
  static setIncompatiblePlugins(incompatiblePlugins: NSDictionary<any, any> | {[key: string]: any}): void;
  static existingDownloadededBlacklistURL(): NSURL;
  static setExistingDownloadededBlacklistURL(existingDownloadededBlacklistURL: NSURL): void;
}

declare class MSPluginScript extends NSObject {
  initWithURL_error<T extends MSPluginScript>(URL: NSURL, error: NSError): T;
  initWithString_filename<T extends MSPluginScript>(string: NSString | string, filename: NSString | string): T;
  reload(): void;

  URL(): NSURL;
  setURL(URL: NSURL): void;
  filename(): NSString;
  setFilename(filename: NSString | string): void;
  script(): NSString;
  setScript(script: NSString | string): void;
}

declare interface IMSPluginUpdater {
  downloadingAppcastsStatus(): MSUpdaterStatus;
  setDownloadingAppcastsStatus(downloadingAppcastsStatus: MSUpdaterStatus): void;
  downloadingPluginVersionsStatus(): MSUpdaterStatus;
  setDownloadingPluginVersionsStatus(downloadingPluginVersionsStatus: MSUpdaterStatus): void;
}

declare enum MSUpdaterStatus {
  MSUpdaterNotUpdating,
  MSUpdaterActive,
  MSUpdaterCancelling,
  MSUpdaterFinished,
}

declare class MSPluginUpdaterImplementation {}

declare class MSPluginVersions extends NSObject {
  initWithIdentifier_appcastURL<T extends MSPluginVersions>(identifier: NSString | string, appcastURL: NSURL): T;
  addVersions(versionsDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  downloadURLForVersion(version: NSString | string): NSURL;
  isVersionDownloaded(version: NSString | string): boolean;
  isVersionListed(version: NSString | string): boolean;
  isUpdateAvailableForVersion(version: NSString | string): boolean;

  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  appcastURL(): NSURL;
  setAppcastURL(appcastURL: NSURL): void;
  versions(): NSArray<any>;
  setVersions(versions: NSArray<any> | any[]): void;
  versionsDictionary(): NSDictionary<any, any>;
  setVersionsDictionary(versionsDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
  latestVersionAvailable(): NSString;
  setLatestVersionAvailable(latestVersionAvailable: NSString | string): void;
}

declare class MSArtboardRendererCG extends MSGroupRendererCG {
  renderSubLayersOfGroup_ignoreDrawingArea_context(group: MSImmutableLayerGroup, ignoreDrawingArea: boolean, context: MSRenderingContext): void;
}

declare class MSBackgroundBlurRendererCG extends NSObject implements IMSBackgroundBlurRenderer {
  renderBackgroundBlurBehindLayer_context_clippedToPath(shape: MSImmutableStyledLayer, context: MSRenderingContext, path: MSPath): void;
}

declare class MSBitmapBackedRendering extends NSObject {
  static imageToCacheForLayer_context(layer: MSImmutableLayer, context: MSRenderingContextCG): MSLayerCachedImage;
}

declare class MSBitmapRendererCG extends MSLayerRendererCG {}

declare class MSBitmapShadowRendererCG extends NSObject implements IMSShadowRenderer {
  renderShadow_path_cacheObject_windingRule_options_type_strokeType_fillShouldClip_lineWidth_context(shadow: MSImmutableStyleShadow, path: MSPath, cacheObject: MSModelObjectCommon, windingRule: NSWindingRule, options: MSImmutableStyleBorderOptions, shadowType: MSShadowType, strokeType: MSShadowBorderType, fillShouldClip: boolean, width: CGFloat, context: MSRenderingContext): void;
  renderShadow_rect_context_block(shadow: MSImmutableStyleShadow, rect: CGRect, context: MSRenderingContext, block: BCVoidBlock): void;
  renderInnerShadow_path_windingRule_context_cacheObject(shadow: MSImmutableStyleInnerShadow, path: MSPath, windingRule: NSWindingRule, context: MSRenderingContext, cacheObject: MSModelObjectCommon): void;
}

declare enum MSBlurredImageOptions {
  MSBlurredImageOptionsNone = 0,
  MSBlurredImageOptionsWhiteBackground = 1<<1,
  MSBlurredImageOptionsBlurTwice = 1<<2,
}

declare class MSCGContextPool extends BCObjectPool {
  initWithSize_colorSpace<T extends MSCGContextPool>(contextSize: CGSize, colorSpace: CGColorSpaceRef): T;
  vendsSize_colorSpace(size: CGSize, colorSpace: CGColorSpaceRef): boolean;
  recycleContext(context: CGContextRef): void;
}

declare class MSCacheManager extends NSObject implements IMSRenderingContextCacheProvider {
  init<T extends MSCacheManager>(): T;
  initWithZoomIndependentCache<T extends MSCacheManager>(zoomIndependentCache: BCCache): T;
  clearCachesExceptForOwners(ownersToKeep: NSSet<any>): void;
  clearAllCaches(): void;
  cacheForZoomLevel(zoomLevel: CGFloat): BCCache;

  modelCache(): BCCache;
  setModelCache(modelCache: BCCache): void;
  zoomIndependentCache(): BCCache;
  setZoomIndependentCache(zoomIndependentCache: BCCache): void;
}

declare type MSColorTriangleVertex = {
  x: number
  y: number
  z: number
  w: number
  r: number
  g: number
  b: number
  a: number
}

declare type MSColorTriangleMesh = {
  vertices: MSColorTriangleVertex
  count: number
  capacity: number
}

declare class MSCoreImageQueue extends NSObject {
  static drawImage_withEffect_inRect_fromObject_context_colorSpace_options(imageRef: CGImageRef, effect: MSCoreImageEffect, rect: CGRect, source: any, contextRef: CGContextRef, colorSpace: CGColorSpaceRef, options: MSRenderingRequestOptions): void;
  static cachedImage_withEffect_fromObject_colorSpace(imageRef: CGImageRef, effect: MSCoreImageEffect, source: any, colorSpace: CGColorSpaceRef): MSLayerCachedImage;
  static averageLuminanceOfImage(inputImage: CGImageRef): CGFloat;
}

declare enum MSCoreImageEffect {
  MSCoreImageEffectDefault,
  MSCoreImageEffectPerspective,
  MSCoreImageEffectAverageLuminance,
  MSCoreImageEffectSaturation,
}

declare class MSEPSExporter extends MSExporter {}

declare class MSExportRenderingContext extends MSRenderingContextCG {
  exportRequest(): MSExportRequest;
  setExportRequest(exportRequest: MSExportRequest): void;
}

declare class MSExporter extends NSObject {
  static exporterForRequest_colorSpace(request: MSExportRequest, colorSpace: NSColorSpace | null): MSExporter;
  static exporterForRequest_colorSpace_driver(request: MSExportRequest, colorSpace: NSColorSpace, driver: MSRenderingDriver): MSExporter;
  data(): NSData;
  image(): NSImage;
  previewImage(): NSImage;
  drawRect_context(dirtyRect: NSRect, contextRef: CGContextRef): void;
  exportToFileURL(fileURL: NSURL): boolean;
  bitmapImageRep(): NSBitmapImageRep;
  basicBitmapImageRep(): NSBitmapImageRep;
  boundsForVectorRender(): NSRect;

  request(): MSExportRequest;
  setRequest(request: MSExportRequest): void;
  isPrinting(): boolean;
  setIsPrinting(isPrinting: boolean): void;
  driver(): MSRenderingDriver;
  setDriver(driver: MSRenderingDriver): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
}

declare class MSExporterView extends NSView {
  static exportViewWithRenderer(renderer: MSExporter): MSExporterView;

  renderer(): MSExporter;
  setRenderer(renderer: MSExporter): void;
}

declare class MSFillRendererCG extends NSObject implements IMSFillRenderer {
  renderFill_path_layer_index_rect_hasInnerStroke_context(fill: MSImmutableStyleFill, path: MSPath, layer: MSImmutableStyledLayer, index: NSInteger, rect: CGRect, hasInnerStroke: boolean, context: MSRenderingContext): void;
}

declare class MSFlowRenderer extends MSOverlayRenderer {
  drawRect_context_selectedLayerIDs(dirtyRect: NSRect, context: MSRenderingContext, selectedLayerIDs: NSArray<any> | any[]): void;

  flowInfluencingLayerIDs(): NSArray<any>;
  setFlowInfluencingLayerIDs(flowInfluencingLayerIDs: NSArray<any> | any[]): void;
  shouldDrawSourceLayerBounds(): boolean;
  setShouldDrawSourceLayerBounds(shouldDrawSourceLayerBounds: boolean): void;
  sourceLayerBounds(): CGRect;
  setSourceLayerBounds(sourceLayerBounds: CGRect): void;
  flowType(): MSFlowType;
  setFlowType(flowType: MSFlowType): void;
  flowPath(): NSBezierPath;
  setFlowPath(flowPath: NSBezierPath): void;
  flowClipPath(): NSBezierPath;
  setFlowClipPath(flowClipPath: NSBezierPath): void;
}

declare class MSFlowRendererCollector extends NSObject {
  initWithLayers_onPage_document_zoomLevel_cache<T extends MSFlowRendererCollector>(layers: MSLayerArray, page: MSImmutablePage, doc: MSImmutableDocumentData, zoomLevel: CGFloat, cache: BCCache | null): T;
  shouldInvalidateCollectedFlowsWithDiff(diff: MSTreeDiff): boolean;

  flowRenderers(): NSArray<any>;
  setFlowRenderers(flowRenderers: NSArray<any> | any[]): void;
}

declare class MSGridRendererCG extends NSObject implements IMSGridRenderer {
  initWithLightColor_darkColor<T extends MSGridRendererCG>(lightColor: CGColorRef, darkColor: CGColorRef): T;
  renderGrid_in_origin_context(grid: MSImmutableBaseGrid, rect: CGRect, origin: CGPoint, context: MSRenderingContext): void;

  lightColor(): CGColorRef;
  setLightColor(lightColor: CGColorRef): void;
  darkColor(): CGColorRef;
  setDarkColor(darkColor: CGColorRef): void;
}

declare class MSGroupRendererCG extends MSLayerRendererCG {
  renderSubLayersOfGroup_ignoreDrawingArea_context(group: MSImmutableLayerGroup, ignoreDrawingArea: boolean, context: MSRenderingContext): void;
}

declare class MSHighLevelExporter extends NSObject {
  static exporterWithDelgate(delegate: any): MSHighLevelExporter;
  initWithDelegate<T extends MSHighLevelExporter>(delegate: any): T;
  initWithDelegate_driver<T extends MSHighLevelExporter>(delegate: any, driver: MSRenderingDriver): T;
  formatsToExport(): NSArray<any>;
  exportLayers(layers: NSArray<any> | any[]): boolean;
  exportPage(page: MSPage): boolean;

  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSHighLevelExportDelegate {}

declare class MSJPGExporter extends MSExporter {}

declare class MSLayerAnnotationsRenderer extends MSOptionalRenderer {}

declare class MSLayerCachedImage extends NSObject {
  rect(): NSRect;
  setRect(rect: NSRect): void;
  image(): CGImageRef;
  setImage(image: CGImageRef): void;
}

declare class MSLayerRendererCG extends NSObject implements IMSLayerRenderer {
  renderLayer_ignoreDrawingArea_context(layer: MSImmutableLayer, ignoreDrawingArea: boolean, context: MSRenderingContext): void;
  renderLayerUncached_ignoreDrawingArea_context(layer: MSImmutableLayer, ignoreDrawingArea: boolean, context: MSRenderingContext): void;
}

declare class MSMemoryBuffer extends NSObject {
  initWithSize<T extends MSMemoryBuffer>(size: size_t): T;
  zerofill(bytesToFill: size_t): void;

  size(): size_t;
  setSize(size: size_t): void;
  bytes(): void;
  setBytes(bytes: void): void;
}

declare class MSMetalRenderer extends NSObject {
  drawColorQuad_rect_commands_color(texture: any, rect: CGRect, commands: any, color: MTLClearColor): void;
  drawColorTriangleMesh_mesh_commands(texture: any, mesh: MSColorTriangleMesh, commands: any): void;
  drawTexturedQuadOnTexture_destinationRect_sourceTexture_commands_bilinearFilter(texture: any, destinationRect: CGRect, sourceTexture: any, commands: any, bilinearFilter: boolean): void;
  drawTexturedQuadOnTexture_destinationRect_sourceTexture_sourceRect_commands_bilinearFilter(texture: any, destinationRect: CGRect, sourceTexture: any, sourceRect: CGRect, commands: any, bilinearFilter: boolean): void;
  drawShadowForArtboardInRect_texture_commands_selected(rect: CGRect, texture: any, commands: any, selected: boolean): void;
  setScissorRectWithX_y_width_height(x: number, y: number, width: number, height: number): void;
  setScissorRectWithIntRect(scissorRect: BCIntRect): void;
  resetScissorRect(): void;

  metalLayer(): CAMetalLayer;
  setMetalLayer(metalLayer: CAMetalLayer): void;
  metalLibrary(): any;
  setMetalLibrary(metalLibrary: any): void;
  metalCommandQueue(): any;
  setMetalCommandQueue(metalCommandQueue: any): void;
}

declare class MSMetalTile extends NSObject {
  initWithMetalDevice_point<T extends MSMetalTile>(device: any, point: BCIntPoint): T;
  replaceRegion_withBytes_bytesPerRow(region: BCIntRect, bytes: void, bytesPerRow: NSUInteger): void;

  texture(): any;
  setTexture(texture: any): void;
  point(): BCIntPoint;
  setPoint(point: BCIntPoint): void;
  rectWithImageFragment(): BCIntRect;
  setRectWithImageFragment(rectWithImageFragment: BCIntRect): void;
}

declare class MSNoise extends NSObject {
  static noiseIsOpaqueForType(type: NSInteger): boolean;
  static drawWithIntensity_ofType_inRect_zoomValue_context(intensity: CGFloat, type: NSInteger, rect: NSRect, zoomValue: CGFloat, context: CGContextRef): void;
  static drawWithIntensity_ofType_inPath_windingRule_zoomValue_context(intensity: CGFloat, type: NSInteger, path: MSPath, windingRule: NSWindingRule, zoomValue: CGFloat, context: CGContextRef): void;
}

declare class MSOptionalRenderer extends NSObject {
  initWithBaseRenderer_disableSetting<T extends MSOptionalRenderer>(baseRenderer: any, setting: NSString | string): T;

  baseRenderer(): any;
  setBaseRenderer(baseRenderer: any): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
}

declare class MSOverlayRenderer extends NSObject {
  drawRect_context(dirtyRect: NSRect, context: MSRenderingContext): void;
  setNeedsDisplayInRect(rect: NSRect): void;

  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  hostView(): any;
  setHostView(hostView: any): void;
}

declare class MSPDFExporter extends MSExporter {}

declare class MSPDFPage extends NSObject {
  initWithPDFData<T extends MSPDFPage>(PDFData: NSData): T;

  pageRef(): CGPDFPageRef;
  setPageRef(pageRef: CGPDFPageRef): void;
  size(): CGSize;
  setSize(size: CGSize): void;
}

declare class MSPNGExporter extends MSExporter {}

declare class MSPathRendererCG extends NSObject implements IMSPathRenderer {
  renderPath_style_layer_inRect_fallbackColor_context(path: MSPath, style: MSImmutableStyle, layer: MSImmutableStyledLayer, rect: CGRect, fillColor: CGColorRef | null, context: MSRenderingContext): void;
  renderFillsForPath_style_layer_rect_context(path: MSPath, style: MSImmutableStyle, layer: MSImmutableStyledLayer, rect: CGRect, context: MSRenderingContext): void;
  renderBordersForPath_style_rect_context(path: MSPath, style: MSImmutableStyle, rect: CGRect, context: MSRenderingContext): void;
}

declare class MSPerspectiveInstructions extends NSObject {
  applyToImage(image: CIImage): CIImage;

  rect(): NSRect;
  setRect(rect: NSRect): void;
}

declare type MSRegionRunHead = {
  _refCnt: number
  _runCount: number
  _ySpanCount: number
  _intervalCount: number
}

declare type MSRegion = {
  _bounds: BCIntRect
  _runHead: MSRegionRunHead
}

declare type MSRegionIterator = {
  _runs: number
  _rect: BCIntRect
  _done: boolean
}

declare enum MSRegionOp {
  MSDifferenceOp,
  MSIntersectOp,
  MSUnionOp,
  MSXOROp,
}

declare class MSRenderingContext extends NSObject {
  initWithName_driver_renderingRequest<T extends MSRenderingContext>(name: NSString | string, driver: MSRenderingDriver, renderingRequest: MSRenderingRequest): T;
  renderLayer_ignoreCacheAndDrawingArea(layer: MSImmutableLayer, ignoreCacheAndDrawingArea: boolean): void;
  renderRect_withStyle(rect: CGRect, style: MSImmutableStyle): void;
  renderInBlock(block: BCVoidBlock): void;
  setUp(): void;
  tearDown(): void;
  setCachedValue_forModelObject_key_zoomIndependent(value: any, modelObject: MSModelObjectCommon, key: any, zoomIndependent: boolean): void;
  cachedValueForModelObject_key_zoomIndependent_orCreateWithBlock(object: MSModelObjectCommon, key: any, zoomIndependent: boolean, block: BCCacheCreateObjectBlock): any;
  concatTransform(transform: CGAffineTransform): void;
  accumulatedTransform(): CGAffineTransform;
  accumulatedRotateFlipTransform(): CGAffineTransform;
  pushGraphicsState(): void;
  popGraphicsState(): void;
  pushParentGroup(layerGroup: MSImmutableLayerGroup): void;
  popParentGroup(): MSImmutableLayerGroup;
  parentGroupForLayer(layer: any): MSImmutableLayerGroup;
  cancel(): void;
  transparencyLayerInBlock(block: BCVoidBlock): void;
  transparencyLayerInRect_inBlock(rect: CGRect, block: BCVoidBlock): void;
  beginTransparencyLayerInRect(aRect: CGRect): CGFloat;
  beginTransparencyLayerInRect_inheritClip(aRect: CGRect, inheritClip: boolean): CGFloat;
  beginTransparencyLayer(): CGFloat;
  endTransparencyLayer(oldAlpha: CGFloat): void;
  multiplyAlphaBy(alpha: CGFloat): CGFloat;
  setAlpha(oldAlpha: CGFloat): CGFloat;
  setBlendMode(blendMode: CGBlendMode): CGBlendMode;
  prepareLayerDrawing_inBlock(layer: MSImmutableStyledLayer, block: BCVoidBlock): void;
  applySettings_withOptions_inBlock(settings: MSImmutableGraphicsContextSettings, options: NSInteger, block: BCVoidBlock): void;
  applyLayerTransform_inBlock(layer: MSImmutableLayer, block: BCVoidBlock): void;
  shouldDrawLayer_withMaskingShapeGroup_ignoreDrawingArea(layer: MSImmutableLayer, mask: MSImmutableShapeGroup | null, ignoreDrawingArea: boolean): boolean;
  clipToRect(rect: CGRect): void;
  applyFillColor(color: MSImmutableColor): void;
  applyStrokeColor(color: MSImmutableColor): void;
  applyShadow(shadow: MSImmutableStyleShadow): void;
  canDrawSymbolMasterWithoutRiskingRecursion(master: MSImmutableSymbolMaster): boolean;
  isDrawingSymbol(): boolean;
  isDrawingSymbolInstance(): boolean;
  drawSymbolMaster_inBlock(master: MSImmutableSymbolMaster, block: BCVoidBlock): void;
  drawSymbolInstance_inBlock(instance: MSImmutableSymbolInstance, block: BCVoidBlock): void;
  shouldSkipDrawingShadow(shadow: MSImmutableStyleShadow): boolean;
  shouldLog(): boolean;

  renderingRequest(): MSRenderingRequest;
  setRenderingRequest(renderingRequest: MSRenderingRequest): void;
  rootLayer(): MSImmutableLayerGroup;
  setRootLayer(rootLayer: MSImmutableLayerGroup): void;
  cancelled(): boolean;
  setCancelled(cancelled: boolean): void;
  drawingArea(): CGRect;
  setDrawingArea(drawingArea: CGRect): void;
  driver(): MSRenderingDriver;
  setDriver(driver: MSRenderingDriver): void;
  name(): NSString;
  setName(name: NSString | string): void;
  zoomLevelForShadows(): CGFloat;
  setZoomLevelForShadows(zoomLevelForShadows: CGFloat): void;
  rotateFlipTransform(): CGAffineTransform;
  setRotateFlipTransform(rotateFlipTransform: CGAffineTransform): void;
}

declare enum MSGraphicsContextSettingMode {
  MSGraphicsSettingBlending = 1,
  MSGraphicsSettingOpacity = 2,
}

declare enum MSTransparencyOption {
  MSTransparencyDontUseLayer,
  MSTransparencyUseLayer,
}

declare enum MSTransparencyOptimiseOption {
  MSTransparencyDontOptimise,
  MSTransparencyCanOptimise,
}

declare enum MSTransparencyRectangleOption {
  MSTransparencyDontUseRectangle,
  MSTransparencyUseRectangle,
}

declare class MSRenderingContextCG extends MSRenderingContext {
  initWithName_driver_context_renderingRequest<T extends MSRenderingContextCG>(name: NSString | string, driver: MSRenderingDriver, cgContext: CGContextRef, renderingRequest: MSRenderingRequest): T;
  initWithName_driver_cgContext_contextIsVectorBacked_renderingRequest<T extends MSRenderingContextCG>(name: NSString | string, driver: MSRenderingDriver, cgContext: CGContextRef, vectorBacked: boolean, renderingRequest: MSRenderingRequest): T;
  subContextWithCGContext_contextIsVectorBacked_pointScale_zoomLevel_options(cgContext: CGContextRef, vectorBacked: boolean, pointScale: CGFloat, zoomLevel: CGFloat, options: MSRenderingRequestOptions): MSRenderingContextCG;
  blurSubContextWithCGContext_backgroundBlurLayer_pointScale_rect(cgContext: CGContextRef, layer: MSImmutableLayer | null, pointScale: CGFloat, rect: CGRect): MSRenderingContextCG;
  applyShadow_withXOffset(shadow: MSImmutableStyleShadow, offset: CGFloat): void;
  applyShadow_respectFlipped(shadow: MSImmutableStyleShadow, respectFlipped: boolean): void;
  shouldDisableSubpixelQuantization(): boolean;
  doNotClipFillsInBlock(block: BCVoidBlock): void;
  shouldClipFills(): boolean;
  ifCondition_skipDrawingFillsInBlock(condition: boolean, block: BCVoidBlock): void;
  shouldDrawFills(): boolean;

  contextIsVectorBacked(): boolean;
  setContextIsVectorBacked(contextIsVectorBacked: boolean): void;
  contextRef(): CGContextRef;
  setContextRef(contextRef: CGContextRef): void;
  contextPool(): MSCGContextPool;
  setContextPool(contextPool: MSCGContextPool): void;
  graphicsContext(): NSGraphicsContext;
  setGraphicsContext(graphicsContext: NSGraphicsContext): void;
}

declare interface IMSRenderingContextCacheProvider {
  cacheForZoomLevel(zoomLevel: CGFloat): BCCache;

  zoomIndependentCache(): BCCache;
  setZoomIndependentCache(zoomIndependentCache: BCCache): void;
}

declare class MSRenderingDriver extends NSObject {
  initWithSettings<T extends MSRenderingDriver>(settings: MSRenderingDriverSettings): T;
  setupRendererMap(): NSMapTable<any, any>;
  rendererForObject_protocol(object: any, protocol: Protocol): any;
  contextWithName_forCGContext_renderingRequest(name: NSString | string, contextRef: CGContextRef, renderingRequest: MSRenderingRequest): MSRenderingContext;

  settings(): MSRenderingDriverSettings;
  setSettings(settings: MSRenderingDriverSettings): void;
}

declare class MSRenderingDriverCG extends MSRenderingDriver {}

declare class MSRenderingDriverCGDebug extends MSRenderingDriverCG {}

declare class MSRenderingDriverCGProfiling extends MSRenderingDriverCG {
  initWithDelegate<T extends MSRenderingDriverCGProfiling>(delegate: any): T;
}

declare class MSRenderingDriverExport extends MSRenderingDriverCG {}

declare class MSRenderingDriverSettings extends NSObject {
  initWithGridLightColor_gridDarkColor_layoutGridStyle_flowColor_flowTipImage_flowBackImage_flowOtherPageImage<T extends MSRenderingDriverSettings>(gridLightColor: CGColorRef, gridDarkColor: CGColorRef, layoutGridStyle: MSLayoutGridStyle, flowColor: CGColorRef, tipImage: CGImageRef | null, backImage: CGImageRef | null, otherPageImage: CGImageRef | null): T;
  flowTipImage(): CGImageRef;
  flowBackImage(): CGImageRef;
  flowOtherPageImage(): CGImageRef;
  flowColor(): CGColorRef;

  layoutGridStyle(): MSLayoutGridStyle;
  setLayoutGridStyle(layoutGridStyle: MSLayoutGridStyle): void;
  gridLightColor(): CGColorRef;
  setGridLightColor(gridLightColor: CGColorRef): void;
  gridDarkColor(): CGColorRef;
  setGridDarkColor(gridDarkColor: CGColorRef): void;
}

declare interface IMSRenderer extends NSObject {}

declare interface IMSLayerRenderer extends IMSRenderer {
  renderLayer_ignoreDrawingArea_context(layer: MSImmutableLayer, ignoreDrawingArea: boolean, context: MSRenderingContext): void;
  renderLayerUncached_ignoreDrawingArea_context(layer: MSImmutableLayer, ignoreDrawingArea: boolean, context: MSRenderingContext): void;
}

declare interface IMSPathRenderer extends IMSRenderer {
  renderPath_style_layer_inRect_fallbackColor_context(path: MSPath, style: MSImmutableStyle, layer: MSImmutableStyledLayer, rect: CGRect, fillColor: CGColorRef | null, context: MSRenderingContext): void;
  renderFillsForPath_style_layer_rect_context(path: MSPath, style: MSImmutableStyle, layer: MSImmutableStyledLayer, rect: CGRect, context: MSRenderingContext): void;
  renderBordersForPath_style_rect_context(path: MSPath, style: MSImmutableStyle, rect: CGRect, context: MSRenderingContext): void;
}

declare interface IMSFillRenderer extends IMSRenderer {
  renderFill_path_layer_index_rect_hasInnerStroke_context(fill: MSImmutableStyleFill, path: MSPath, layer: MSImmutableStyledLayer, index: NSInteger, rect: CGRect, hasInnerStroke: boolean, context: MSRenderingContext): void;
}

declare interface IMSBackgroundBlurRenderer extends IMSRenderer {
  renderBackgroundBlurBehindLayer_context_clippedToPath(shape: MSImmutableStyledLayer, context: MSRenderingContext, path: MSPath): void;
}

declare interface IMSShadowRenderer extends IMSRenderer {
  renderShadow_path_cacheObject_windingRule_options_type_strokeType_fillShouldClip_lineWidth_context(shadow: MSImmutableStyleShadow, path: MSPath, cacheObject: MSModelObjectCommon, windingRule: NSWindingRule, options: MSImmutableStyleBorderOptions, shadowType: MSShadowType, strokeType: MSShadowBorderType, fillShouldClip: boolean, width: CGFloat, context: MSRenderingContext): void;
  renderShadow_rect_context_block(shadow: MSImmutableStyleShadow, rect: CGRect, context: MSRenderingContext, block: BCVoidBlock): void;
  renderInnerShadow_path_windingRule_context_cacheObject(shadow: MSImmutableStyleInnerShadow, path: MSPath, windingRule: NSWindingRule, context: MSRenderingContext, cacheObject: MSModelObjectCommon): void;
}

declare interface IMSGridRenderer extends IMSRenderer {
  renderGrid_in_origin_context(grid: MSImmutableBaseGrid, rect: CGRect, origin: CGPoint, context: MSRenderingContext): void;
}

declare enum MSPageOverlayRenderOptions {
  MSPageOverlayRenderTitles = 0x01,
  MSPageOverlayRenderShadows = 0x02,
  MSPageOverlayRenderGrids = 0x04,
  MSPageOverlayRenderPixels = 0x08,
  MSPageOverlayRenderSlices = 0x10,
  MSPageOverlayRenderFlows = 0x20,
}

declare class MSRenderingRequest extends NSObject {
  initWithDocument_colorSpace_pointScale_zoomLevel_cacheProvider_backgroundBlurLayer_options<T extends MSRenderingRequest>(document: MSImmutableDocumentData, colorSpace: CGColorSpaceRef, pointScale: CGFloat, zoomLevel: CGFloat, cacheProvider: any | null, backgroundBlurLayer: MSImmutableLayer | null, options: MSRenderingRequestOptions): T;
  initWithDocument_colorSpace_pointScale_zoomLevel_cacheProvider_options<T extends MSRenderingRequest>(document: MSImmutableDocumentData, colorSpace: CGColorSpaceRef, pointScale: CGFloat, zoomLevel: CGFloat, cacheProvider: any | null, options: MSRenderingRequestOptions): T;
  requestWithOptions(options: MSRenderingRequestOptions): MSRenderingRequest;

  cacheProvider(): any;
  setCacheProvider(cacheProvider: any): void;
  colorSpace(): CGColorSpaceRef;
  setColorSpace(colorSpace: CGColorSpaceRef): void;
  document(): MSImmutableDocumentData;
  setDocument(document: MSImmutableDocumentData): void;
  pointScale(): CGFloat;
  setPointScale(pointScale: CGFloat): void;
  zoomLevel(): CGFloat;
  setZoomLevel(zoomLevel: CGFloat): void;
  backgroundBlurLayer(): MSImmutableLayer;
  setBackgroundBlurLayer(backgroundBlurLayer: MSImmutableLayer): void;
  options(): MSRenderingRequestOptions;
  setOptions(options: MSRenderingRequestOptions): void;
  exporting(): boolean;
  setExporting(exporting: boolean): void;
  drawingMask(): boolean;
  setDrawingMask(drawingMask: boolean): void;
  drawingPixelated(): boolean;
  setDrawingPixelated(drawingPixelated: boolean): void;
  willDrawPixelated(): boolean;
  setWillDrawPixelated(willDrawPixelated: boolean): void;
  includeArtboardBackground(): boolean;
  setIncludeArtboardBackground(includeArtboardBackground: boolean): void;
  printing(): boolean;
  setPrinting(printing: boolean): void;
  skipLayerInclusionTests(): boolean;
  setSkipLayerInclusionTests(skipLayerInclusionTests: boolean): void;
  shouldFlipShadows(): boolean;
  setShouldFlipShadows(shouldFlipShadows: boolean): void;
}

declare enum MSRenderingRequestOptions {
  MSRenderingRequestOptionsNone = 0,
  MSRenderingRequestOptionsExporting = 1 << 0,
  MSRenderingRequestOptionsDrawingMask = 1 << 1,
  MSRenderingRequestOptionsDrawingPixelated = 1 << 2,
  MSRenderingRequestOptionsIncludeArtboardBackground = 1 << 3,
  MSRenderingRequestOptionsPrinting = 1 << 4,
  MSRenderingRequestOptionsFlipShadows = 1 << 5,
  MSRenderingRequestOptionsSkipLayerInclusionTests = 1 << 6,
  MSRenderingRequestOptionsVectorBacked = 1 << 7,
  MSRenderingRequestOptionsDefault,
}

declare class MSSelfContainedHighLevelExporter extends MSHighLevelExporter implements IMSHighLevelExportDelegate {
  initWithOptions<T extends MSSelfContainedHighLevelExporter>(options: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithOptions_driver<T extends MSSelfContainedHighLevelExporter>(options: NSDictionary<any, any> | {[key: string]: any}, driver: MSRenderingDriver): T;

  results(): NSDictionary<any, any>;
  setResults(results: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSShadowRendererCG extends NSObject implements IMSShadowRenderer {
  renderShadow_path_cacheObject_windingRule_options_type_strokeType_fillShouldClip_lineWidth_context(shadow: MSImmutableStyleShadow, path: MSPath, cacheObject: MSModelObjectCommon, windingRule: NSWindingRule, options: MSImmutableStyleBorderOptions, shadowType: MSShadowType, strokeType: MSShadowBorderType, fillShouldClip: boolean, width: CGFloat, context: MSRenderingContext): void;
  renderShadow_rect_context_block(shadow: MSImmutableStyleShadow, rect: CGRect, context: MSRenderingContext, block: BCVoidBlock): void;
  renderInnerShadow_path_windingRule_context_cacheObject(shadow: MSImmutableStyleInnerShadow, path: MSPath, windingRule: NSWindingRule, context: MSRenderingContext, cacheObject: MSModelObjectCommon): void;
}

declare class MSShapeRendererCG extends MSGroupRendererCG {}

declare class MSSliceTrimming extends NSObject {
  static trimmedRectForLayerAncestry(ancestry: MSImmutableLayerAncestry): NSRect;
  static simpleSafeRectFromLayerAncestry(ancestry: MSImmutableLayerAncestry): NSRect;
}

declare class MSSymbolMasterRendererCG extends MSArtboardRendererCG {}

declare class MSSymbolRendererCG extends MSArtboardRendererCG {}

declare class MSTextRendererCG extends MSLayerRendererCG {}

declare class MSTextStoragePool extends BCObjectPool {
  initWithTextLayer<T extends MSTextStoragePool>(textLayer: MSImmutableTextLayer): T;
  vendTextStorage(): NSTextStorage;
  recycleTextStorage(textStorage: NSTextStorage): void;
}

declare class MSTiffExporter extends MSExporter {}

declare class MSTileMipLevel extends NSObject {
  static tileMipLevelWithScaleRangeMax(rangeMax: CGFloat): MSTileMipLevel;
  initWithScaleRangeMax<T extends MSTileMipLevel>(max: CGFloat): T;
  enqueueRenderableTilesForVisibleRect(visibleRect: NSRect): NSArray<any>;
  countExistingTilesForVisibleRect(visibleRect: NSRect): NSUInteger;
  findWritableTileAt(point: BCIntPoint): MSMetalTile;
  addTile(tile: MSMetalTile): void;
  removeAllTiles(): void;
  removeAllTilesAndClearDirtyRegion(): void;
  removeAllTilesAndResetDirtyRegionToRect(rect: BCIntRect): void;
  isCurrentColorSpaceEqualTo(colorSpace: CGColorSpaceRef): boolean;
  uniteDirtyRect(rect: NSRect): void;
  subtractDirtyRect(rect: BCIntRect): void;

  scaleRangeMax(): CGFloat;
  setScaleRangeMax(scaleRangeMax: CGFloat): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  currentColorSpace(): CGColorSpaceRef;
  setCurrentColorSpace(currentColorSpace: CGColorSpaceRef): void;
  clearBeforeUpload(): boolean;
  setClearBeforeUpload(clearBeforeUpload: boolean): void;
  dirtyRegion(): MSRegion;
  setDirtyRegion(dirtyRegion: MSRegion): void;
  tileCount(): NSUInteger;
  setTileCount(tileCount: NSUInteger): void;
}

declare class MSTileRasterisationOperation extends NSOperation {
  static operationWithMemory_bytesPerRow_rect_zoomValue_backingScaleFactor_page_document_driver_contextPool_cacheProvider_colorSpace(memory: void, bytesPerRow: size_t, rect: BCIntRect, zoomValue: CGFloat, backingScaleFactor: CGFloat, page: MSImmutablePage, document: MSImmutableDocumentData, driver: MSRenderingDriver, contextPool: MSCGContextPool | null, cacheProvider: any | null, colorSpace: CGColorSpaceRef): MSTileRasterisationOperation;
}

declare class MSTileRenderPass extends NSObject {
  static tileRenderPassWithPage_inDocument_dirtyRect_zoomValue(page: MSImmutablePage, documentData: MSImmutableDocumentData, dirtyRect: CGRect, zoomValue: CGFloat): MSTileRenderPass;
}

declare class MSTileRenderOperation extends NSOperation {
  static bitmapImageRenderForPage_inDocument_visibleContentRect_backingScaleFactor_pixelViewSize_zoomValue_pixelated_pageOverlayRenderOptions_cacheProvider_canvasColorSpace(page: MSImmutablePage, documentData: MSImmutableDocumentData, visibleContentRect: CGRect, backingScaleFactor: CGFloat, pixelViewSize: CGSize, zoomValue: CGFloat, pixelated: boolean, pageOverlayRenderOptions: MSPageOverlayRenderOptions, cacheProvider: any, canvasColorSpace: NSColorSpace): NSBitmapImageRep;
  static bitmapImageFromRenderPasses_visibleContentRect_backingScaleFactor_pixelViewSize_pixelated_pageOverlayRenderOptions_cacheProvider_canvasColorSpace(renderPasses: NSArray<any> | any[], visibleContentRect: CGRect, backingScaleFactor: CGFloat, pixelViewSize: CGSize, pixelated: boolean, pageOverlayRenderOptions: MSPageOverlayRenderOptions, cacheProvider: any, canvasColorSpace: NSColorSpace): NSBitmapImageRep;
  static renderOperationWithPage_inDocument_visibleContentRect_backingScaleFactor_pixelViewSize_zoomValue_pixelated_pageOverlayRenderOptions_cacheProvider_canvasColorSpace(page: MSImmutablePage, documentData: MSImmutableDocumentData, visibleContentRect: CGRect, backingScaleFactor: CGFloat, pixelViewSize: CGSize, zoomValue: CGFloat, pixelated: boolean, pageOverlayRenderOptions: MSPageOverlayRenderOptions, cacheProvider: any, canvasColorSpace: NSColorSpace): MSTileRenderOperation;
  static renderOperationWithRenderPasses_visibleContentRect_backingScaleFactor_pixelViewSize_pixelated_pageOverlayRenderOptions_cacheProvider_canvasColorSpace(renderPasses: NSArray<any> | any[], visibleContentRect: CGRect, backingScaleFactor: CGFloat, pixelViewSize: CGSize, pixelated: boolean, pageOverlayRenderOptions: MSPageOverlayRenderOptions, cacheProvider: any, canvasColorSpace: NSColorSpace): MSTileRenderOperation;

  renderedImage(): NSBitmapImageRep;
  setRenderedImage(renderedImage: NSBitmapImageRep): void;
}

declare class MSTiledRenderer extends NSObject {
  updateContentInRect_forPage_document_visibleImageRect_backingScaleFactor_pixelViewSize_zoomValue_pixelated_pageOverlayRenderOptions_cacheProvider_canvasColorSpace_renderContentSynchronously(dirtyRect: NSRect, page: MSImmutablePage, document: MSImmutableDocumentData, visibleImageRect: NSRect, backingScaleFactor: CGFloat, pixelViewSize: CGSize, zoomValue: CGFloat, pixelated: boolean, pageOverlayRenderOptions: MSPageOverlayRenderOptions, cacheProvider: any | null, canvasColorSpace: NSColorSpace, renderContentSynchronously: boolean): void;
  beginFastZooming(): void;

  metalLayer(): CAMetalLayer;
  setMetalLayer(metalLayer: CAMetalLayer): void;
  renderingCacheProvider(): any;
  setRenderingCacheProvider(renderingCacheProvider: any): void;
  overlayRenderingDelegate(): any;
  setOverlayRenderingDelegate(overlayRenderingDelegate: any): void;
  hostView(): NSView;
  setHostView(hostView: NSView): void;
  hideOverlay(): boolean;
  setHideOverlay(hideOverlay: boolean): void;
}

declare interface IMSOverlayRenderingDelegate {
  renderOverlayInRect_context_pageOverlayRenderOptions(rect: NSRect, context: CGContextRef, pageOverlayRenderOptions: MSPageOverlayRenderOptions): void;
}

declare interface IMSTiledRendererHostView {
  scheduleRedraw(): void;
  driver(): MSRenderingDriver;
}

declare class MSWebPExporter extends MSExporter {}

declare class DrawingView extends NSView {}

declare class DataProtocol extends NSURLProtocol {
  static dataFromLink_type_encoding(link: NSString | string, typeOut: NSString | string, encodingOut: NSString | string): NSData;
}

declare class _SVGBasicShape extends SVGDrawableElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
}

declare class _SVGCircleShape extends SVGBasicShape {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  cx(): number;
  setCx(cx: number): void;
  cy(): number;
  setCy(cy: number): void;
  r(): number;
  setR(r: number): void;
}

declare class _SVGClipPath extends SVGGroupElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveAddClippingObject(object: any): void;
  primitiveRemoveClippingObject(object: any): void;

  clipping(): NSSet<any>;
  setClipping(clipping: NSSet<any>): void;
}

declare class _SVGDrawableElement extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveSetClip(clip: any): void;
  primitiveSetFill(fill: any): void;
  primitiveSetFont(font: any): void;
  primitiveSetMask(mask: any): void;
  primitiveSetStroke(stroke: any): void;

  blendMode(): NSString;
  setBlendMode(blendMode: NSString | string): void;
  clips(): boolean;
  setClips(clips: boolean): void;
  hidden(): boolean;
  setHidden(hidden: boolean): void;
  opacity(): number;
  setOpacity(opacity: number): void;
  rect(): NSRect;
  setRect(rect: NSRect): void;
  transform(): NSAffineTransform;
  setTransform(transform: NSAffineTransform): void;
  clip(): SVGClipPath;
  setClip(clip: SVGClipPath): void;
  fill(): SVGFill;
  setFill(fill: SVGFill): void;
  font(): SVGFont;
  setFont(font: SVGFont): void;
  mask(): SVGMask;
  setMask(mask: SVGMask): void;
  stroke(): SVGStroke;
  setStroke(stroke: SVGStroke): void;
}

declare class _SVGElement extends NSObject {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveAddChildrenObject(object: any): void;
  primitiveRemoveChildrenObject(object: any): void;
  primitiveAddLinkedObject(object: any): void;
  primitiveRemoveLinkedObject(object: any): void;
  primitiveSetParent(parent: any): void;

  desc(): NSString;
  setDesc(desc: NSString | string): void;
  identifier(): NSString;
  setIdentifier(identifier: NSString | string): void;
  index(): number;
  setIndex(index: number): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  type(): NSString;
  setType(type: NSString | string): void;
  children(): NSSet<any>;
  setChildren(children: NSSet<any>): void;
  linked(): NSSet<any>;
  setLinked(linked: NSSet<any>): void;
  parent(): SVGElement;
  setParent(parent: SVGElement): void;
}

declare class _SVGEllipseShape extends SVGBasicShape {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  cx(): number;
  setCx(cx: number): void;
  cy(): number;
  setCy(cy: number): void;
  rx(): number;
  setRx(rx: number): void;
  ry(): number;
  setRy(ry: number): void;
}

declare class _SVGFill extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveSetGradient(gradient: any): void;
  primitiveSetPattern(pattern: any): void;
  primitiveAddUsedByObject(object: any): void;
  primitiveRemoveUsedByObject(object: any): void;

  color(): MSImmutableColor;
  setColor(color: MSImmutableColor): void;
  opacity(): number;
  setOpacity(opacity: number): void;
  windingrule(): NSString;
  setWindingrule(windingrule: NSString | string): void;
  gradient(): SVGGradient;
  setGradient(gradient: SVGGradient): void;
  pattern(): SVGPattern;
  setPattern(pattern: SVGPattern): void;
  usedBy(): NSSet<any>;
  setUsedBy(usedBy: NSSet<any>): void;
}

declare class _SVGFont extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveAddUsedByObject(object: any): void;
  primitiveRemoveUsedByObject(object: any): void;

  family(): NSString;
  setFamily(family: NSString | string): void;
  size(): number;
  setSize(size: number): void;
  style(): NSString;
  setStyle(style: NSString | string): void;
  variant(): NSString;
  setVariant(variant: NSString | string): void;
  weight(): number;
  setWeight(weight: number): void;
  usedBy(): NSSet<any>;
  setUsedBy(usedBy: NSSet<any>): void;
}

declare class _SVGGradient extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveAddLinkedFromObject(object: any): void;
  primitiveRemoveLinkedFromObject(object: any): void;
  primitiveSetLinkedTo(linkedTo: any): void;
  primitiveAddUsedByFillsObject(object: any): void;
  primitiveRemoveUsedByFillsObject(object: any): void;
  primitiveAddUsedByStrokesObject(object: any): void;
  primitiveRemoveUsedByStrokesObject(object: any): void;

  fromX(): number;
  setFromX(fromX: number): void;
  fromY(): number;
  setFromY(fromY: number): void;
  radial(): boolean;
  setRadial(radial: boolean): void;
  toX(): number;
  setToX(toX: number): void;
  toY(): number;
  setToY(toY: number): void;
  transform(): NSAffineTransform;
  setTransform(transform: NSAffineTransform): void;
  linkedFrom(): NSSet<any>;
  setLinkedFrom(linkedFrom: NSSet<any>): void;
  linkedTo(): SVGGradient;
  setLinkedTo(linkedTo: SVGGradient): void;
  usedByFills(): NSSet<any>;
  setUsedByFills(usedByFills: NSSet<any>): void;
  usedByStrokes(): NSSet<any>;
  setUsedByStrokes(usedByStrokes: NSSet<any>): void;
}

declare class _SVGGradientStop extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  color(): MSImmutableColor;
  setColor(color: MSImmutableColor): void;
  position(): number;
  setPosition(position: number): void;
}

declare class _SVGGroupElement extends SVGDrawableElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
}

declare class _SVGImage extends SVGDrawableElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  image(): NSImage;
  setImage(image: NSImage): void;
}

declare class _SVGLineShape extends SVGBasicShape {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  x1(): number;
  setX1(x1: number): void;
  x2(): number;
  setX2(x2: number): void;
  y1(): number;
  setY1(y1: number): void;
  y2(): number;
  setY2(y2: number): void;
}

declare class _SVGLink extends SVGDrawableElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveSetLink(link: any): void;

  link(): SVGElement;
  setLink(link: SVGElement): void;
}

declare class _SVGMask extends SVGGroupElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveAddMaskingObject(object: any): void;
  primitiveRemoveMaskingObject(object: any): void;

  masking(): NSSet<any>;
  setMasking(masking: NSSet<any>): void;
}

declare class _SVGPathShape extends SVGDrawableElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  closed(): boolean;
  setClosed(closed: boolean): void;
  path(): NSBezierPath;
  setPath(path: NSBezierPath): void;
}

declare class _SVGPattern extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveAddUsedByFillsObject(object: any): void;
  primitiveRemoveUsedByFillsObject(object: any): void;
  primitiveAddUsedByStrokesObject(object: any): void;
  primitiveRemoveUsedByStrokesObject(object: any): void;

  height(): number;
  setHeight(height: number): void;
  patternUnits(): NSString;
  setPatternUnits(patternUnits: NSString | string): void;
  width(): number;
  setWidth(width: number): void;
  x(): number;
  setX(x: number): void;
  y(): number;
  setY(y: number): void;
  usedByFills(): NSSet<any>;
  setUsedByFills(usedByFills: NSSet<any>): void;
  usedByStrokes(): NSSet<any>;
  setUsedByStrokes(usedByStrokes: NSSet<any>): void;
}

declare class _SVGPolygonShape extends SVGPathShape {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
}

declare class _SVGRectangleShape extends SVGBasicShape {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  cornerRadius(): number;
  setCornerRadius(cornerRadius: number): void;
}

declare class _SVGRootElement extends SVGGroupElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  height(): number;
  setHeight(height: number): void;
  width(): number;
  setWidth(width: number): void;
}

declare class _SVGStroke extends SVGElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
  primitiveSetGradient(gradient: any): void;
  primitiveSetPattern(pattern: any): void;
  primitiveAddUsedByObject(object: any): void;
  primitiveRemoveUsedByObject(object: any): void;

  color(): MSImmutableColor;
  setColor(color: MSImmutableColor): void;
  dashes(): NSArray<any>;
  setDashes(dashes: NSArray<any> | any[]): void;
  linecap(): NSString;
  setLinecap(linecap: NSString | string): void;
  linejoin(): NSString;
  setLinejoin(linejoin: NSString | string): void;
  width(): number;
  setWidth(width: number): void;
  gradient(): SVGGradient;
  setGradient(gradient: SVGGradient): void;
  pattern(): SVGPattern;
  setPattern(pattern: SVGPattern): void;
  usedBy(): NSSet<any>;
  setUsedBy(usedBy: NSSet<any>): void;
}

declare class _SVGSymbolElement extends SVGGroupElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;
}

declare class _SVGText extends SVGDrawableElement {
  static propertyNames(): NSArray<any>;
  static relationshipNames(): NSArray<any>;
  static attributeNames(): NSArray<any>;

  adjustSpacingAndGlyphs(): boolean;
  setAdjustSpacingAndGlyphs(adjustSpacingAndGlyphs: boolean): void;
  anchor(): number;
  setAnchor(anchor: number): void;
  dx(): number;
  setDx(dx: number): void;
  dy(): number;
  setDy(dy: number): void;
  length(): number;
  setLength(length: number): void;
  rotate(): number;
  setRotate(rotate: number): void;
  text(): NSString;
  setText(text: NSString | string): void;
  x(): number;
  setX(x: number): void;
  y(): number;
  setY(y: number): void;
}

declare class SVGBasicShape extends _SVGBasicShape {
  shapeGroupForLayer(layer: MSLayer): MSShapeGroup;
}

declare class SVGCircleShape extends _SVGCircleShape {}

declare class SVGClipPath extends _SVGClipPath {}

declare class SVGDrawableElement extends _SVGDrawableElement {
  dontCollapse(): boolean;
  processStyles_parent(xml: NSXMLElement, parent: SVGDrawableElement): void;
  emptyLayerWithParentLayer(parentLayer: MSLayerGroup): MSLayer;
  applyEffectsToLayer(layer: MSLayer): void;

  deferredClipping(): NSXMLElement;
  setDeferredClipping(deferredClipping: NSXMLElement): void;
}

declare class SVGElement extends _SVGElement {
  static elementOfType_xml_importer_parent(type: NSString | string, xml: NSXMLElement, importer: SVGImporter, parent: SVGElement): SVGElement;
  initWithImporter_xml<T extends SVGElement>(importer: SVGImporter, xml: NSXMLElement): T;
  elementOfType_xml_parent(type: NSString | string, xml: NSXMLElement, parent: SVGElement): SVGElement;
  process(): void;
  processSelf(xml: NSXMLElement): void;
  processIdentifier(xml: NSXMLElement): void;
  processStyles(): void;
  processChildren(xml: NSXMLElement): void;
  processChildren_startingAtIndex(xml: NSXMLElement, index: NSUInteger): void;
  processChild_index(xml: NSXMLElement, index: NSUInteger): NSUInteger;
  svgDescription(): NSString;
  svgAttributesDescription(): NSString;
  addReferenceToIdentifier_type_property(identifier: NSString | string, type: NSString | string, property: NSString | string): void;
  resolvedValue_forProperty(value: SVGElement, property: NSString | string): void;
  name(): NSString;
  containsDrawables(): boolean;
  drawableParent(): SVGDrawableElement;
  clippingParent(): SVGDrawableElement;
  relativeURLForLink(link: NSString | string): NSURL;
  styleAttributesForElement_defaults(xml: NSXMLElement, defaults: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  isDescendantOf(element: SVGElement): boolean;
  makeLayerWithParentLayer_progress(parentLayer: MSLayerGroup, progress: BCVoidBlock): MSLayer;
  nameLayer(layer: MSLayer): void;
  adjustSizeForChildrenOfLayer(layer: MSLayer): void;

  xml(): NSXMLElement;
  setXml(xml: NSXMLElement): void;
  importer(): SVGImporter;
  setImporter(importer: SVGImporter): void;
  effectiveLayerName(): NSString;
  setEffectiveLayerName(effectiveLayerName: NSString | string): void;
}

declare class SVGEllipseShape extends _SVGEllipseShape {}

declare class SVGFill extends _SVGFill {
  static fillForXML_element_parent(xml: NSXMLElement, element: SVGElement, parent: SVGDrawableElement): SVGFill;
}

declare class SVGFont extends _SVGFont {
  static fontForXML_element_parent(xml: NSXMLElement, element: SVGElement, parent: SVGDrawableElement): SVGFont;
  representedFont(): NSFont;
}

declare class SVGGradient extends _SVGGradient {
  from(): NSPoint;
  to(): NSPoint;
  stopsElements(): NSArray<any>;

  usesAbsoluteUnits(): boolean;
  setUsesAbsoluteUnits(usesAbsoluteUnits: boolean): void;
}

declare class SVGGradientStop extends _SVGGradientStop {}

declare class SVGGroupElement extends _SVGGroupElement {}

declare class SVGImage extends _SVGImage {}

declare class SVGLineShape extends _SVGLineShape {}

declare class SVGLink extends _SVGLink {}

declare class SVGMask extends _SVGMask {}

declare class SVGPathShape extends _SVGPathShape {}

declare class SVGPolygonShape extends _SVGPolygonShape {}

declare class SVGRectangleShape extends _SVGRectangleShape {}

declare class SVGRootElement extends _SVGRootElement {}

declare class SVGStroke extends _SVGStroke {
  static strokeForXML_element_parent(xml: NSXMLElement, element: SVGElement, parent: SVGDrawableElement): SVGStroke;
}

declare class SVGSymbolElement extends _SVGSymbolElement {}

declare class SVGText extends _SVGText {}

declare class SVGCSSParser extends NSObject {
  static parseCSSAttributeList(cssAttributes: NSString | string): NSDictionary<any, any>;
  static mergeStylesheet_withExisting(styleSheet: NSString | string, existing: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
}

declare class SVGDescription extends SVGElement {}

declare enum SVGExportOptions {
  SVGExportOptionsIncludeHeader = 1,
  SVGExportOptionsCompact = 0,
  SVGExportOptionsDefault,
}

declare class SVGImporter extends NSObject {
  initWithURL<T extends SVGImporter>(url: NSURL): T;
  initWithData<T extends SVGImporter>(data: NSData): T;
  initWithXMLString<T extends SVGImporter>(string: NSString | string): T;
  importObjectGraph(): SVGElement;
  addedDrawableElement(element: SVGDrawableElement): void;
  drawableElementCount(): NSUInteger;
  elementOfType_xml_parent(type: NSString | string, xml: NSXMLElement, parent: SVGElement): SVGElement;
  registerElementWithIdentifier_type_element(identifier: NSString | string, type: NSString | string, element: SVGElement): void;
  addReferenceToIdentifier_type_target_property(identifier: NSString | string, type: NSString | string, target: any, property: NSString | string): void;
  relativeURLForLink(link: NSString | string): NSURL;
  registerStylesheet(stylesheet: NSString | string): void;
  styleAttributesForElement_defaults(xml: NSXMLElement, defaults: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;

  documentWidth(): CGFloat;
  setDocumentWidth(documentWidth: CGFloat): void;
  documentHeight(): CGFloat;
  setDocumentHeight(documentHeight: CGFloat): void;
  scaleValue(): CGFloat;
  setScaleValue(scaleValue: CGFloat): void;
}

declare class SVGPathInterpreter extends NSObject {
  bezierPathFromCommands_isPathClosed(commands: NSString | string, isClosed: boolean): NSBezierPath;
  bezierPathFromPoints(points: NSString | string): NSBezierPath;
}

declare class SVGPathScanner extends NSObject {
  initWithString<T extends SVGPathScanner>(string: NSString | string): T;
  nextCommand(): string;
  nextFloat(): CGFloat;

  scanner(): NSScanner;
  setScanner(scanner: NSScanner): void;
}

declare class SVGStyle extends SVGElement {}

declare class SVGTitle extends SVGElement {}

declare class SVGTransformImporter extends NSObject {
  static transformFromString(aString: NSString | string): NSAffineTransform;
  static transformFromName_components(name: NSString | string, paramString: NSString | string): NSAffineTransform;
  static translateTransformFromComponents(params: NSArray<any> | any[]): NSAffineTransform;
  static rotateTransformFromComponents(params: NSArray<any> | any[]): NSAffineTransform;
  static matrixTransformFromComponents(params: NSArray<any> | any[]): NSAffineTransform;
}

declare class MSExportRendererWithSVGSupport extends MSExporter {}

declare class MSSVGBlendMode extends NSObject {
  static sketchBlendModeFromSVG(svgValue: NSString | string): MSBlendMode;
  static svgFromSketchBlendMode(blendMode: MSBlendMode): NSString;
}

declare class MSSVGColorMatrix extends MSSVGfeFilterPrimitive {
  static colorMatrixForColor(color: MSImmutableColor): MSSVGColorMatrix;

  in(): NSString;
  setIn(in_: NSString | string): void;
  type(): NSString;
  setType(type: NSString | string): void;
  values(): NSString;
  setValues(values: NSString | string): void;
}

declare class MSSVGComposite extends MSSVGfeFilterPrimitive {
  in(): NSString;
  setIn(in_: NSString | string): void;
  in2(): NSString;
  setIn2(in2: NSString | string): void;
  operator(): NSString;
  setOperator(operator: NSString | string): void;
  k1(): CGFloat;
  setK1(k1: CGFloat): void;
  k2(): CGFloat;
  setK2(k2: CGFloat): void;
  k3(): CGFloat;
  setK3(k3: CGFloat): void;
  k4(): CGFloat;
  setK4(k4: CGFloat): void;
}

declare class MSSVGFilter extends MSXMLElementWrapper {
  static filter(): MSSVGFilter;
  addFilterItem(filterItem: NSXMLElement): void;
  addFilterOutput(string: NSString | string): void;
  close(): void;

  x(): NSString;
  setX(x: NSString | string): void;
  y(): NSString;
  setY(y: NSString | string): void;
  width(): NSString;
  setWidth(width: NSString | string): void;
  height(): NSString;
  setHeight(height: NSString | string): void;
  filterRes(): NSString;
  setFilterRes(filterRes: NSString | string): void;
  filterUnits(): NSString;
  setFilterUnits(filterUnits: NSString | string): void;
  primitiveUnits(): NSString;
  setPrimitiveUnits(primitiveUnits: NSString | string): void;
  href(): NSString;
  setHref(href: NSString | string): void;
}

declare class MSSVGGaussianBlur extends MSSVGfeFilterPrimitive {
  in(): NSString;
  setIn(in_: NSString | string): void;
  stdDeviation(): NSString;
  setStdDeviation(stdDeviation: NSString | string): void;
}

declare class MSSVGImageWrapper extends MSXMLElementWrapper {
  externalResourcesRequired(): NSString;
  setExternalResourcesRequired(externalResourcesRequired: NSString | string): void;
  preserveAspectRatio(): NSString;
  setPreserveAspectRatio(preserveAspectRatio: NSString | string): void;
  transform(): NSString;
  setTransform(transform: NSString | string): void;
  x(): NSString;
  setX(x: NSString | string): void;
  y(): NSString;
  setY(y: NSString | string): void;
  width(): NSString;
  setWidth(width: NSString | string): void;
  height(): NSString;
  setHeight(height: NSString | string): void;
  href(): NSString;
  setHref(href: NSString | string): void;
}

declare class MSSVGMerge extends MSSVGfeFilterPrimitive {
  addMergeNodeNamed(name: NSString | string): void;
}

declare class MSSVGMergeNode extends MSXMLElementWrapper {
  static mergeNodeNamed(nodeName: NSString | string): MSSVGMergeNode;

  in(): NSString;
  setIn(in_: NSString | string): void;
}

declare class MSSVGMorphology extends MSSVGfeFilterPrimitive {
  in(): NSString;
  setIn(in_: NSString | string): void;
  operator(): NSString;
  setOperator(operator: NSString | string): void;
  radius(): CGFloat;
  setRadius(radius: CGFloat): void;
}

declare class MSSVGOffset extends MSSVGfeFilterPrimitive {
  in(): NSString;
  setIn(in_: NSString | string): void;
  dx(): CGFloat;
  setDx(dx: CGFloat): void;
  dy(): CGFloat;
  setDy(dy: CGFloat): void;
}

declare class MSSVGPatternWrapper extends MSXMLElementWrapper {
  preserveAspectRatio(): NSString;
  setPreserveAspectRatio(preserveAspectRatio: NSString | string): void;
  x(): NSString;
  setX(x: NSString | string): void;
  y(): NSString;
  setY(y: NSString | string): void;
  width(): NSString;
  setWidth(width: NSString | string): void;
  height(): NSString;
  setHeight(height: NSString | string): void;
  patternUnits(): NSString;
  setPatternUnits(patternUnits: NSString | string): void;
  patternContentUnits(): NSString;
  setPatternContentUnits(patternContentUnits: NSString | string): void;
  patternTransform(): NSString;
  setPatternTransform(patternTransform: NSString | string): void;
  href(): NSString;
  setHref(href: NSString | string): void;
}

declare class MSSVGUseWrapper extends MSXMLElementWrapper {
  externalResourcesRequired(): NSString;
  setExternalResourcesRequired(externalResourcesRequired: NSString | string): void;
  transform(): NSString;
  setTransform(transform: NSString | string): void;
  x(): NSString;
  setX(x: NSString | string): void;
  y(): NSString;
  setY(y: NSString | string): void;
  width(): NSString;
  setWidth(width: NSString | string): void;
  height(): NSString;
  setHeight(height: NSString | string): void;
  href(): NSString;
  setHref(href: NSString | string): void;
}

declare class MSSVGfeFilterPrimitive extends MSXMLElementWrapper {
  static filter(): MSSVGfeFilterPrimitive;

  result(): NSString;
  setResult(result: NSString | string): void;
}

declare class MSXMLElementWrapper extends NSObject {
  initWithName<T extends MSXMLElementWrapper>(elementName: NSString | string): T;
  initWithElement<T extends MSXMLElementWrapper>(element: NSXMLElement): T;
  static elementName(): NSString;
  static element(): MSXMLElementWrapper;
  attributeStringForKey(key: NSString | string): NSString;
  setAttributeString_forKey(value: NSString | string, key: NSString | string): void;
  addChild(child: NSXMLNode): void;
  addChildWrapper(child: MSXMLElementWrapper): void;

  element(): NSXMLElement;
  setElement(element: NSXMLElement): void;
  svgId(): NSString;
  setSvgId(svgId: NSString | string): void;
  svgClass(): NSString;
  setSvgClass(svgClass: NSString | string): void;
  style(): NSString;
  setStyle(style: NSString | string): void;
}

declare class SVGPattern extends _SVGPattern {
  imageData(): MSImageData;
  setImageData(imageData: MSImageData): void;
  scale(): CGFloat;
  setScale(scale: CGFloat): void;
  sketchPatternFillType(): MSPatternFillType;
  setSketchPatternFillType(sketchPatternFillType: MSPatternFillType): void;
}

declare class SketchSVGExporter extends NSObject {
  initWithImmutableDocument_exportRect_layerIDs_includeBackground<T extends SketchSVGExporter>(immutableDocument: MSImmutableDocumentData, exportRect: NSRect, layerIDs: NSSet<any>, includeBackground: boolean): T;
  initWithName_exportRequest<T extends SketchSVGExporter>(name: NSString | string, request: MSExportRequest): T;
  exportLayers(layers: NSArray<any> | any[]): NSData;
  pushParent(layer: MSImmutableLayer): void;
  popParent(): MSImmutableLayer;
  parentForLayer(layer: any): MSImmutableLayer;
  performWithParent_block(layer: MSImmutableLayer, block: BCVoidBlock): void;
  ancestorsForLayer(layer: any): NSArray<any>;
  drawSymbolInstance_inBlock(instance: MSImmutableSymbolInstance, block: BCVoidBlock): void;
  isDrawingSymbol(): boolean;
  addDefinitionWithName_children_attributes(name: NSString | string, children: NSArray<any> | any[], attributes: NSArray<any> | any[]): NSXMLElement;
  addGradient_inRect(gradient: MSImmutableGradient, rect: MSImmutableRect): void;
  gradientElement_inRect(gradient: MSImmutableGradient, rect: MSImmutableRect): NSXMLElement;
  uniqueIDForElementWithName(name: NSString | string): NSString;
  beginFilterGroup(): MSSVGFilter;
  endFilterGroup(): boolean;
  layerIsIncluded(layer: MSImmutableLayer): boolean;

  exportBounds(): NSRect;
  setExportBounds(exportBounds: NSRect): void;
  mask(): NSString;
  setMask(mask: NSString | string): void;
  currentShapeDef(): NSString;
  setCurrentShapeDef(currentShapeDef: NSString | string): void;
  document(): MSImmutableDocumentData;
  setDocument(document: MSImmutableDocumentData): void;
  currentFilterGroup(): MSSVGFilter;
  setCurrentFilterGroup(currentFilterGroup: MSSVGFilter): void;
  currentSymbolInstance(): MSImmutableSymbolInstance;
  setCurrentSymbolInstance(currentSymbolInstance: MSImmutableSymbolInstance): void;
  includeArtboardBackground(): boolean;
  setIncludeArtboardBackground(includeArtboardBackground: boolean): void;
}

declare class BCSketchToolRunner extends BCToolRunner {
  initWithSketchToolURL_maximumConcurrentOperations<T extends BCSketchToolRunner>(toolURL: NSURL, maxConcurrency: NSInteger): T;
  exportPreviewImageForDocumentAtURL_additionalArguments_intoURL_completionHandler(url: NSURL, additionalArguments: NSArray<any> | any[], previewImageURL: NSURL, handler: MSDocumentPreviewImageHandler): void;

  sketchToolURL(): NSURL;
  setSketchToolURL(sketchToolURL: NSURL): void;
}

declare class BCSTCommand extends ECCommandLineCommand {
  processDocumentsAtPaths_engine(paths: NSArray<any> | any[], engine: ECCommandLineEngine): ECCommandLineResult;
  processDocumentURL_engine(documentURL: NSURL, engine: ECCommandLineEngine): ECCommandLineResult;
  processItemsForPage_engine(page: MSPage, engine: ECCommandLineEngine): ECCommandLineResult;
  documentDataForURL_engine(url: NSURL, engine: ECCommandLineEngine): MSDocumentData;
  documentForURL_engine(url: NSURL, engine: ECCommandLineEngine): MSDocumentReader;
  pagesForURL_engine(url: NSURL, engine: ECCommandLineEngine): NSArray<any>;
  scalesToUseForSlice_scales(slice: MSSliceLayer, scales: NSArray<any> | any[]): NSArray<any>;
  suffixForScale(scale: CGFloat): NSString;
  specifiedItemsWithEngine(engine: ECCommandLineEngine): NSArray<any>;
  filteredArtboardsForPage_engine(page: MSPage, engine: ECCommandLineEngine): NSArray<any>;
}

declare enum BCSTErrorCode {
  BCSTNoError,
  BCSTExportFailed,
  BCSTBadBoundsFormat,
  BCSTDocumentTooNew,
  BCSTUnknownFolderType,
  BCSTMissingReleaseNotes,
  BCSTFailedToLaunchSketch,
  BCSTTimedOutWaitingForSketch,
}

declare class BCSTDumpCommand extends BCSTCommand {}

declare class BCSTEngineDelegate extends NSObject implements IECCommandLineEngineDelegate {
  engineDidFinishLaunching(engine: ECCommandLineEngine): void;
  engine_willProcessCommands(engine: ECCommandLineEngine, commands: NSArray<any> | any[]): void;
  engine_didProcessCommands(engine: ECCommandLineEngine, commands: NSArray<any> | any[]): void;

  resources(): NSBundle;
  setResources(resources: NSBundle): void;
}

declare class BCSTExportArtboardsCommand extends BCSTCommand {}

declare class BCSTExportLayersCommand extends BCSTExportSlicesCommand {}

declare class BCSTExportPagesCommand extends BCSTCommand {}

declare class BCSTExportPreviewCommand extends BCSTExportPagesCommand {}

declare class BCSTExportSlicesCommand extends BCSTCommand {}

declare class BCSTListArtboardsCommand extends BCSTListCommand {}

declare class BCSTListCommand extends BCSTCommand {
  itemsName(): NSString;
  itemsToListFromPages_engine(pages: NSArray<any> | any[], engine: ECCommandLineEngine): NSArray<any>;
  itemsToListFromPage_engine(page: MSPage, engine: ECCommandLineEngine): NSArray<any>;
  infoForPage_engine(page: MSPage, engine: ECCommandLineEngine): any;
  infoForItem_engine(item: any, engine: ECCommandLineEngine): NSDictionary<any, any>;
  safeName(name: NSString | string): NSString;
  rectDictionary(rect: NSRect): NSDictionary<any, any>;
  supportedFormats(): NSArray<any>;
}

declare class BCSTListFormatsCommand extends BCSTListCommand {}

declare class BCSTListLayersCommand extends BCSTListSlicesCommand {}

declare class BCSTListPagesCommand extends BCSTListCommand {}

declare class BCSTListSlicesCommand extends BCSTListCommand {}

declare class BCSTMetadataCommand extends BCSTCommand {}

declare class BCSTRunCommand extends BCSTCommand {
  waitForTermination(): boolean;
  setWaitForTermination(waitForTermination: boolean): void;
}

declare class BCSTShowCommand extends BCSTCommand {}

declare class TerminationListener extends NSObject {
  initWithProcessIdentifier<T extends TerminationListener>(processIdentifier: NSNumber | number): T;
  startListeningWithCompletion(completionBlock: Block): void;

  terminated(): boolean;
  setTerminated(terminated: boolean): void;
}

declare class SUAppcast extends NSObject implements INSURLDownloadDelegate {
  fetchAppcastFromURL_inBackground_completionBlock(url: NSURL, bg: boolean, err: Block): void;
  copyWithoutDeltaUpdates(): SUAppcast;
  parseAppcastItemsFromXMLFile_error(appcastFile: NSURL, errorp: NSError): NSArray<any>;
  downloadDidBegin(download: NSURLDownload): void;
  download_willSendRequest_redirectResponse(download: NSURLDownload, request: NSURLRequest, redirectResponse: NSURLResponse | null): NSURLRequest;
  download_canAuthenticateAgainstProtectionSpace(connection: NSURLDownload, protectionSpace: NSURLProtectionSpace): boolean;
  download_didReceiveAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  download_didCancelAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  downloadShouldUseCredentialStorage(download: NSURLDownload): boolean;
  download_didReceiveResponse(download: NSURLDownload, response: NSURLResponse): void;
  download_willResumeWithResponse_fromByte(download: NSURLDownload, response: NSURLResponse, startingByte: number): void;
  download_didReceiveDataOfLength(download: NSURLDownload, length: NSUInteger): void;
  download_shouldDecodeSourceDataOfMIMEType(download: NSURLDownload, encodingType: NSString | string): boolean;
  download_decideDestinationWithSuggestedFilename(download: NSURLDownload, filename: NSString | string): void;
  download_didCreateDestination(download: NSURLDownload, path: NSString | string): void;
  downloadDidFinish(download: NSURLDownload): void;
  download_didFailWithError(download: NSURLDownload, error: NSError): void;

  userAgentString(): NSString;
  setUserAgentString(userAgentString: NSString | string): void;
  httpHeaders(): NSDictionary<any, any>;
  setHttpHeaders(httpHeaders: NSDictionary<any, any> | {[key: string]: any}): void;
  items(): NSArray<any>;
  setItems(items: NSArray<any> | any[]): void;
}

declare class SUAppcastItem extends NSObject {
  initWithDictionary<T extends SUAppcastItem>(dict: NSDictionary<any, any> | {[key: string]: any}): T;
  initWithDictionary_failureReason<T extends SUAppcastItem>(dict: NSDictionary<any, any> | {[key: string]: any}, error: NSString | string): T;
  infoURL(): NSURL;

  title(): NSString;
  setTitle(title: NSString | string): void;
  dateString(): NSString;
  setDateString(dateString: NSString | string): void;
  itemDescription(): NSString;
  setItemDescription(itemDescription: NSString | string): void;
  releaseNotesURL(): NSURL;
  setReleaseNotesURL(releaseNotesURL: NSURL): void;
  DSASignature(): NSString;
  setDSASignature(DSASignature: NSString | string): void;
  minimumSystemVersion(): NSString;
  setMinimumSystemVersion(minimumSystemVersion: NSString | string): void;
  maximumSystemVersion(): NSString;
  setMaximumSystemVersion(maximumSystemVersion: NSString | string): void;
  fileURL(): NSURL;
  setFileURL(fileURL: NSURL): void;
  contentLength(): number;
  setContentLength(contentLength: number): void;
  versionString(): NSString;
  setVersionString(versionString: NSString | string): void;
  osString(): NSString;
  setOsString(osString: NSString | string): void;
  displayVersionString(): NSString;
  setDisplayVersionString(displayVersionString: NSString | string): void;
  deltaUpdates(): NSDictionary<any, any>;
  setDeltaUpdates(deltaUpdates: NSDictionary<any, any> | {[key: string]: any}): void;
  infoURL(): NSURL;
  setInfoURL(infoURL: NSURL): void;
  deltaUpdate(): boolean;
  setDeltaUpdate(deltaUpdate: boolean): void;
  criticalUpdate(): boolean;
  setCriticalUpdate(criticalUpdate: boolean): void;
  macOsUpdate(): boolean;
  setMacOsUpdate(macOsUpdate: boolean): void;
  informationOnlyUpdate(): boolean;
  setInformationOnlyUpdate(informationOnlyUpdate: boolean): void;
  propertiesDictionary(): NSDictionary<any, any>;
  setPropertiesDictionary(propertiesDictionary: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class SUApplicationInfo extends NSObject {
  static isBackgroundApplication(application: NSApplication): boolean;
  static bestIconForHost(host: SUHost): NSImage;
}

declare class SUAutomaticUpdateAlert extends NSWindowController {
  initWithAppcastItem_host_completionBlock<T extends SUAutomaticUpdateAlert>(item: SUAppcastItem, hostBundle: SUHost, c: Block): T;
  installNowsender(): IBAction;
  installLatersender(): IBAction;
  doNotInstallsender(): IBAction;
}

declare enum SUAutomaticInstallationChoice {
  SUInstallNowChoice,
  SUInstallLaterChoice,
  SUDoNotInstallChoice,
}

declare class SUAutomaticUpdateDriver extends SUBasicUpdateDriver {}

declare class SUBasicUpdateDriver extends SUUpdateDriver implements INSURLDownloadDelegate {
  checkForUpdatesAtURL_host(URL: NSURL, host: SUHost): void;
  isItemNewer(ui: SUAppcastItem): boolean;
  static hostSupportsItem(ui: SUAppcastItem): boolean;
  itemContainsSkippedVersion(ui: SUAppcastItem): boolean;
  itemContainsValidUpdate(ui: SUAppcastItem): boolean;
  appcastDidFinishLoading(ac: SUAppcast): void;
  didFindValidUpdate(): void;
  didNotFindUpdate(): void;
  downloadUpdate(): void;
  download_decideDestinationWithSuggestedFilename(d: NSURLDownload, name: NSString | string): void;
  downloadDidFinish(d: NSURLDownload): void;
  download_didFailWithError(download: NSURLDownload, error: NSError): void;
  extractUpdate(): void;
  failedToApplyDeltaUpdate(): void;
  unarchiver_extractedProgress(ua: any, progress: number): void;
  unarchiverDidFinish(ua: any): void;
  installWithToolAndRelaunch(relaunch: boolean): void;
  installWithToolAndRelaunch_displayingUserInterface(relaunch: boolean, showUI: boolean): void;
  installerForHost_failedWithError(host: SUHost, error: NSError): void;
  cleanUpDownload(): void;
  abortUpdate(): void;
  abortUpdateWithError(error: NSError): void;
  terminateApp(): void;
  static bestItemFromAppcastItems_getDeltaItem_withHostVersion_comparator(appcastItems: NSArray<any> | any[], deltaItem: SUAppcastItem, hostVersion: NSString | string, comparator: any): SUAppcastItem;
  downloadDidBegin(download: NSURLDownload): void;
  download_willSendRequest_redirectResponse(download: NSURLDownload, request: NSURLRequest, redirectResponse: NSURLResponse | null): NSURLRequest;
  download_canAuthenticateAgainstProtectionSpace(connection: NSURLDownload, protectionSpace: NSURLProtectionSpace): boolean;
  download_didReceiveAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  download_didCancelAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  downloadShouldUseCredentialStorage(download: NSURLDownload): boolean;
  download_didReceiveResponse(download: NSURLDownload, response: NSURLResponse): void;
  download_willResumeWithResponse_fromByte(download: NSURLDownload, response: NSURLResponse, startingByte: number): void;
  download_didReceiveDataOfLength(download: NSURLDownload, length: NSUInteger): void;
  download_shouldDecodeSourceDataOfMIMEType(download: NSURLDownload, encodingType: NSString | string): boolean;
  download_decideDestinationWithSuggestedFilename(download: NSURLDownload, filename: NSString | string): void;
  download_didCreateDestination(download: NSURLDownload, path: NSString | string): void;
  downloadDidFinish(download: NSURLDownload): void;
  download_didFailWithError(download: NSURLDownload, error: NSError): void;

  updateItem(): SUAppcastItem;
  setUpdateItem(updateItem: SUAppcastItem): void;
  download(): NSURLDownload;
  setDownload(download: NSURLDownload): void;
  downloadPath(): NSString;
  setDownloadPath(downloadPath: NSString | string): void;
}

declare enum SUBinaryDeltaMajorVersion {
  SUAzureMajorVersion = 1,
  SUBeigeMajorVersion = 2,
}

declare class SUBinaryDeltaUnarchiver extends NSObject implements ISUUnarchiverProtocol {
  initWithArchivePath_updateHostBundlePath<T extends SUBinaryDeltaUnarchiver>(archivePath: NSString | string, updateHostBundlePath: NSString | string): T;
  static updateSpotlightImportersAtBundlePath(targetPath: NSString | string): void;
  static canUnarchivePath(path: NSString | string): boolean;
  static unsafeIfArchiveIsNotValidated(): boolean;
  unarchiveWithCompletionBlock_progressBlock(completionBlock: Block, progressBlock: Block): void;
  description(): NSString;
}

declare class SUBundleIcon extends NSObject {
  static iconURLForHost(host: SUHost): NSURL;
}

declare class SUCodeSigningVerifier extends NSObject {
  static codeSignatureAtBundleURL_matchesSignatureAtBundleURL_error(oldBundlePath: NSURL, newBundlePath: NSURL, error: NSError): boolean;
  static codeSignatureIsValidAtBundleURL_error(bundlePath: NSURL, error: NSError): boolean;
  static bundleAtURLIsCodeSigned(bundlePath: NSURL): boolean;
}

declare class SUDSAVerifier extends NSObject {
  static validatePath_withEncodedDSASignature_withPublicDSAKey(path: NSString | string, encodedSignature: NSString | string, pkeyString: NSString | string): boolean;
  initWithPublicKeyData<T extends SUDSAVerifier>(data: NSData): T;
  verifyFileAtPath_signature(path: NSString | string, signature: NSData): boolean;
  verifyStream_signature(stream: NSInputStream, signature: NSData): boolean;
}

declare class SUDiskImageUnarchiver extends NSObject implements ISUUnarchiverProtocol {
  initWithArchivePath_decryptionPassword<T extends SUDiskImageUnarchiver>(archivePath: NSString | string, decryptionPassword: NSString | string | null): T;
  static canUnarchivePath(path: NSString | string): boolean;
  static unsafeIfArchiveIsNotValidated(): boolean;
  unarchiveWithCompletionBlock_progressBlock(completionBlock: Block, progressBlock: Block): void;
  description(): NSString;
}

declare enum SUError {
  SUAppcastParseError = 1000,
  SUNoUpdateError = 1001,
  SUAppcastError = 1002,
  SURunningFromDiskImageError = 1003,
  SUTemporaryDirectoryError = 2000,
  SUDownloadError = 2001,
  SUUnarchivingError = 3000,
  SUSignatureError = 3001,
  SUFileCopyFailure = 4000,
  SUAuthenticationFailure = 4001,
  SUMissingUpdateError = 4002,
  SUMissingInstallerToolError = 4003,
  SURelaunchError = 4004,
  SUInstallationError = 4005,
  SUDowngradeError = 4006,
  SUInstallationCancelledError = 4007,
  SUSystemPowerOffError = 5000,
}

declare class SUFileManager extends NSObject {
  static defaultManager(): SUFileManager;
  static fileManagerWithAuthorizationToolPath(authorizationToolPath: NSString | string): SUFileManager;
  fileManagerByPreservingAuthorizationRights(): SUFileManager;
  makeTemporaryDirectoryWithPreferredName_appropriateForDirectoryURL_error(preferredName: NSString | string, appropriateURL: NSURL, error: NSError): NSURL;
  makeDirectoryAtURL_error(targetURL: NSURL, error: NSError): boolean;
  moveItemAtURL_toURL_error(sourceURL: NSURL, destinationURL: NSURL, error: NSError): boolean;
  copyItemAtURL_toURL_error(sourceURL: NSURL, destinationURL: NSURL, error: NSError): boolean;
  removeItemAtURL_error(url: NSURL, error: NSError): boolean;
  changeOwnerAndGroupOfItemAtRootURL_toMatchURL_error(targetURL: NSURL, matchURL: NSURL, error: NSError): boolean;
  updateModificationAndAccessTimeOfItemAtURL_error(targetURL: NSURL, error: NSError): boolean;
  releaseItemFromQuarantineAtRootURL_error(rootURL: NSURL, error: NSError): boolean;
  executePackageAtURL_progressBlock_error(packageURL: NSURL, progressBlock: Block | null, error: NSError): boolean;
  _acquireAuthorizationWithError(error: NSError): boolean;
  _itemExistsAtURL(fileURL: NSURL): boolean;
  _itemExistsAtURL_isDirectory(fileURL: NSURL, isDirectory: boolean | null): boolean;
}

declare class SUGuidedPackageInstaller extends NSObject implements ISUInstallerProtocol {
  initWithPackagePath_installationPath_fileOperationToolPath<T extends SUGuidedPackageInstaller>(packagePath: NSString | string, installationPath: NSString | string, fileOperationToolPath: NSString | string): T;
  performInitialInstallation(error: NSError): boolean;
  performFinalInstallationProgressBlock_error(cb: Block | null, error: NSError): boolean;
  canInstallSilently(): boolean;
  installationPath(): NSString;
}

declare class SUHost extends NSObject {
  initWithBundle<T extends SUHost>(aBundle: NSBundle): T;
  objectForInfoDictionaryKey(key: NSString | string): any;
  boolForInfoDictionaryKey(key: NSString | string): boolean;
  objectForUserDefaultsKey(defaultName: NSString | string): any;
  setObject_forUserDefaultsKey(value: any, defaultName: NSString | string): void;
  boolForUserDefaultsKey(defaultName: NSString | string): boolean;
  setBool_forUserDefaultsKey(value: boolean, defaultName: NSString | string): void;
  objectForKey(key: NSString | string): any;
  boolForKey(key: NSString | string): boolean;

  bundle(): NSBundle;
  setBundle(bundle: NSBundle): void;
  bundlePath(): NSString;
  setBundlePath(bundlePath: NSString | string): void;
  name(): NSString;
  setName(name: NSString | string): void;
  version(): NSString;
  setVersion(version: NSString | string): void;
  displayVersion(): NSString;
  setDisplayVersion(displayVersion: NSString | string): void;
  runningOnReadOnlyVolume(): boolean;
  setRunningOnReadOnlyVolume(runningOnReadOnlyVolume: boolean): void;
  publicDSAKey(): NSString;
  setPublicDSAKey(publicDSAKey: NSString | string): void;
  publicDSAKeyFileKey(): NSString;
  setPublicDSAKeyFileKey(publicDSAKeyFileKey: NSString | string): void;
}

declare class SUInstaller extends NSObject {
  static installerForHost_fileOperationToolPath_updateDirectory_error(host: SUHost, fileOperationToolPath: NSString | string, updateDirectory: NSString | string, error: NSError): any;
  static installSourcePathInUpdateFolder_forHost_isPackage_isGuided(inUpdateFolder: NSString | string, host: SUHost, isPackagePtr: boolean, isGuidedPtr: boolean | null): NSString;
}

declare interface ISUInstallerProtocol {
  performInitialInstallation(error: NSError): boolean;
  performFinalInstallationProgressBlock_error(cb: Block | null, error: NSError): boolean;
  canInstallSilently(): boolean;
  installationPath(): NSString;
}

declare enum SULogLevel {
  SULogLevelDefault,
  SULogLevelError,
}

declare class SUOperatingSystem extends NSObject {
  static operatingSystemVersion(): NSOperatingSystemVersion;
  static isOperatingSystemAtLeastVersion(version: NSOperatingSystemVersion): boolean;
  static systemVersionString(): NSString;
}

declare class SUPackageInstaller extends NSObject implements ISUInstallerProtocol {
  initWithPackagePath_installationPath<T extends SUPackageInstaller>(packagePath: NSString | string, installationPath: NSString | string): T;
  performInitialInstallation(error: NSError): boolean;
  performFinalInstallationProgressBlock_error(cb: Block | null, error: NSError): boolean;
  canInstallSilently(): boolean;
  installationPath(): NSString;
}

declare class SUPipedUnarchiver extends NSObject implements ISUUnarchiverProtocol {
  initWithArchivePath<T extends SUPipedUnarchiver>(archivePath: NSString | string): T;
  static canUnarchivePath(path: NSString | string): boolean;
  static unsafeIfArchiveIsNotValidated(): boolean;
  unarchiveWithCompletionBlock_progressBlock(completionBlock: Block, progressBlock: Block): void;
  description(): NSString;
}

declare class SUPlainInstaller extends NSObject implements ISUInstallerProtocol {
  initWithHost_bundlePath_installationPath_fileOperationToolPath<T extends SUPlainInstaller>(host: SUHost, bundlePath: NSString | string, installationPath: NSString | string, fileOperationToolPath: NSString | string): T;
  performInitialInstallation(error: NSError): boolean;
  performFinalInstallationProgressBlock_error(cb: Block | null, error: NSError): boolean;
  canInstallSilently(): boolean;
  installationPath(): NSString;
}

declare class SUProbingUpdateDriver extends SUBasicUpdateDriver {}

declare class SUScheduledUpdateDriver extends SUUIBasedUpdateDriver {}

declare class SUStandardVersionComparator extends NSObject implements ISUVersionComparison {
  init<T extends SUStandardVersionComparator>(): T;
  static defaultComparator(): SUStandardVersionComparator;
  compareVersion_toVersion(versionA: NSString | string, versionB: NSString | string): NSComparisonResult;
  compareVersion_toVersion(versionA: NSString | string, versionB: NSString | string): NSComparisonResult;
}

declare class SUStatusController extends NSWindowController {
  initWithHost<T extends SUStatusController>(host: SUHost): T;
  beginActionWithTitle_maxProgressValue_statusText(title: NSString | string, maxProgressValue: number, statusText: NSString | string): void;
  setButtonTitle_target_action_isDefault(buttonTitle: NSString | string, target: any, action: string, isDefault: boolean): void;

  actionButton(): NSButton;
  setActionButton(actionButton: NSButton): void;
  progressBar(): NSProgressIndicator;
  setProgressBar(progressBar: NSProgressIndicator): void;
  statusTextField(): NSTextField;
  setStatusTextField(statusTextField: NSTextField): void;
  statusText(): NSString;
  setStatusText(statusText: NSString | string): void;
  progressValue(): number;
  setProgressValue(progressValue: number): void;
  maxProgressValue(): number;
  setMaxProgressValue(maxProgressValue: number): void;
  buttonEnabled(): boolean;
  setButtonEnabled(buttonEnabled: boolean): void;
}

declare class SUSystemProfiler extends NSObject {
  static systemProfileArrayForHost(host: SUHost): NSArray<any>;
}

declare class SUSystemUpdateInfo extends NSObject {
  static systemAllowsAutomaticUpdatesForHost(host: SUHost): boolean;
}

declare class SUTouchBarButtonGroup extends NSViewController {
  initByReferencingButtons<T extends SUTouchBarButtonGroup>(buttons: NSArray<any> | any[]): T;

  buttons(): NSArray<any>;
  setButtons(buttons: NSArray<any> | any[]): void;
}

declare class SUUIBasedUpdateDriver extends SUBasicUpdateDriver {
  showAlert(alert: NSAlert): void;
  cancelDownload(sender: any): IBAction;
  installAndRestart(sender: any): void;

  showErrors(): boolean;
  setShowErrors(showErrors: boolean): void;
}

declare class SUUnarchiver extends NSObject {
  static unarchiverForPath_updatingHostBundlePath_decryptionPassword(path: NSString | string, hostPath: NSString | string | null, decryptionPassword: NSString | string | null): any;
}

declare class SUUnarchiverNotifier extends NSObject {
  initWithCompletionBlock_progressBlock<T extends SUUnarchiverNotifier>(completionBlock: Block, progressBlock: Block): T;
  notifySuccess(): void;
  notifyFailureWithError(reason: NSError): void;
  notifyProgress(progress: number): void;
}

declare interface ISUUnarchiverProtocol {
  unarchiveWithCompletionBlock_progressBlock(completionBlock: Block, progressBlock: Block): void;
  description(): NSString;
}

declare class SUUpdateAlert extends NSWindowController {
  initWithAppcastItem_host_completionBlock<T extends SUUpdateAlert>(item: SUAppcastItem, host: SUHost, c: Block): T;
  installUpdatesender(): IBAction;
  skipThisVersionsender(): IBAction;
  remindMeLatersender(): IBAction;
  disableKeyboardShortcutForInstallButton(): void;

  versionDisplayer(): any;
  setVersionDisplayer(versionDisplayer: any): void;
}

declare enum SUUpdateAlertChoice {
  SUInstallUpdateChoice,
  SURemindMeLaterChoice,
  SUSkipThisVersionChoice,
  SUOpenInfoURLChoice,
}

declare class SUUpdateDriver extends NSObject implements INSURLDownloadDelegate {
  initWithUpdater<T extends SUUpdateDriver>(updater: any): T;
  checkForUpdatesAtURL_host(URL: NSURL, host: SUHost): void;
  abortUpdate(): void;
  resumeUpdateInteractively(): boolean;
  showAlert(alert: NSAlert): void;
  downloadDidBegin(download: NSURLDownload): void;
  download_willSendRequest_redirectResponse(download: NSURLDownload, request: NSURLRequest, redirectResponse: NSURLResponse | null): NSURLRequest;
  download_canAuthenticateAgainstProtectionSpace(connection: NSURLDownload, protectionSpace: NSURLProtectionSpace): boolean;
  download_didReceiveAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  download_didCancelAuthenticationChallenge(download: NSURLDownload, challenge: NSURLAuthenticationChallenge): void;
  downloadShouldUseCredentialStorage(download: NSURLDownload): boolean;
  download_didReceiveResponse(download: NSURLDownload, response: NSURLResponse): void;
  download_willResumeWithResponse_fromByte(download: NSURLDownload, response: NSURLResponse, startingByte: number): void;
  download_didReceiveDataOfLength(download: NSURLDownload, length: NSUInteger): void;
  download_shouldDecodeSourceDataOfMIMEType(download: NSURLDownload, encodingType: NSString | string): boolean;
  download_decideDestinationWithSuggestedFilename(download: NSURLDownload, filename: NSString | string): void;
  download_didCreateDestination(download: NSURLDownload, path: NSString | string): void;
  downloadDidFinish(download: NSURLDownload): void;
  download_didFailWithError(download: NSURLDownload, error: NSError): void;

  updater(): SUUpdater;
  setUpdater(updater: SUUpdater): void;
  host(): SUHost;
  setHost(host: SUHost): void;
  interruptible(): boolean;
  setInterruptible(interruptible: boolean): void;
  finished(): boolean;
  setFinished(finished: boolean): void;
  downloadsAppcastInBackground(): boolean;
  setDownloadsAppcastInBackground(downloadsAppcastInBackground: boolean): void;
  downloadsUpdatesInBackground(): boolean;
  setDownloadsUpdatesInBackground(downloadsUpdatesInBackground: boolean): void;
  automaticallyInstallUpdates(): boolean;
  setAutomaticallyInstallUpdates(automaticallyInstallUpdates: boolean): void;
}

declare class SUUpdatePermissionPrompt extends NSWindowController {
  static promptWithHost_systemProfile_reply(host: SUHost, profile: NSArray<any> | any[], reply: Block): void;
  toggleMoreInfo(sender: any): IBAction;
  finishPrompt(sender: any): IBAction;
}

declare enum SUPermissionPromptResult {
  SUAutomaticallyCheck,
  SUDoNotAutomaticallyCheck,
}

declare class SUUpdatePermissionResponse extends NSObject {
  initWithAutomaticUpdateChecks_sendSystemProfile<T extends SUUpdatePermissionResponse>(automaticUpdateChecks: boolean, sendSystemProfile: boolean): T;

  automaticUpdateChecks(): boolean;
  setAutomaticUpdateChecks(automaticUpdateChecks: boolean): void;
  sendSystemProfile(): boolean;
  setSendSystemProfile(sendSystemProfile: boolean): void;
}

declare class SUUpdateValidator extends NSObject {
  initWithDownloadPath_dsaSignature_host_performingPrevalidation<T extends SUUpdateValidator>(downloadPath: NSString | string, dsaSignature: NSString | string, host: SUHost, performingPrevalidation: boolean): T;
  validateWithUpdateDirectory(updateDirectory: NSString | string): boolean;

  canValidate(): boolean;
  setCanValidate(canValidate: boolean): void;
}

declare class SUUpdater extends NSObject {
  static sharedUpdater(): SUUpdater;
  static updaterForBundle(bundle: NSBundle): SUUpdater;
  initForBundle<T extends SUUpdater>(bundle: NSBundle): T;
  checkForUpdates(sender: any): IBAction;
  validateMenuItem(menuItem: NSMenuItem): boolean;
  checkForUpdatesInBackground(): void;
  checkForUpdateInformation(): void;
  installUpdatesIfAvailable(): void;
  resetUpdateCycle(): void;

  delegate(): any;
  setDelegate(delegate: any): void;
  automaticallyChecksForUpdates(): boolean;
  setAutomaticallyChecksForUpdates(automaticallyChecksForUpdates: boolean): void;
  automaticallyDownloadsUpdates(): boolean;
  setAutomaticallyDownloadsUpdates(automaticallyDownloadsUpdates: boolean): void;
  updateCheckInterval(): NSTimeInterval;
  setUpdateCheckInterval(updateCheckInterval: NSTimeInterval): void;
  feedURL(): NSURL;
  setFeedURL(feedURL: NSURL): void;
  hostBundle(): NSBundle;
  setHostBundle(hostBundle: NSBundle): void;
  sparkleBundle(): NSBundle;
  setSparkleBundle(sparkleBundle: NSBundle): void;
  userAgentString(): NSString;
  setUserAgentString(userAgentString: NSString | string): void;
  httpHeaders(): NSDictionary<any, any>;
  setHttpHeaders(httpHeaders: NSDictionary<any, any> | {[key: string]: any}): void;
  sendsSystemProfile(): boolean;
  setSendsSystemProfile(sendsSystemProfile: boolean): void;
  decryptionPassword(): NSString;
  setDecryptionPassword(decryptionPassword: NSString | string): void;
  lastUpdateCheckDate(): NSDate;
  setLastUpdateCheckDate(lastUpdateCheckDate: NSDate): void;
  updateInProgress(): boolean;
  setUpdateInProgress(updateInProgress: boolean): void;
}

declare class SUUserInitiatedUpdateDriver extends SUUIBasedUpdateDriver {}

declare interface ISUVersionComparison {
  compareVersion_toVersion(versionA: NSString | string, versionB: NSString | string): NSComparisonResult;
}

declare interface ISUVersionDisplay {
  formatVersion_andVersion(inOutVersionA: NSString | string, inOutVersionB: NSString | string): void;
}

declare class SUTestApplicationDelegate extends NSObject implements INSApplicationDelegate {
  applicationShouldTerminate(sender: NSApplication): NSApplicationTerminateReply;
  application_openURLs(application: NSApplication, urls: NSArray<any> | any[]): void;
  application_openFile(sender: NSApplication, filename: NSString | string): boolean;
  application_openFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  application_openTempFile(sender: NSApplication, filename: NSString | string): boolean;
  applicationShouldOpenUntitledFile(sender: NSApplication): boolean;
  applicationOpenUntitledFile(sender: NSApplication): boolean;
  application_openFileWithoutUI(sender: any, filename: NSString | string): boolean;
  application_printFile(sender: NSApplication, filename: NSString | string): boolean;
  application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: NSArray<any> | any[], printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanels: boolean): NSApplicationPrintReply;
  applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication): boolean;
  applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: boolean): boolean;
  applicationDockMenu(sender: NSApplication): NSMenu;
  application_willPresentError(application: NSApplication, error: NSError): NSError;
  application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData): void;
  application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError): void;
  application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  application_willEncodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_didDecodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_willContinueUserActivityWithType(application: NSApplication, userActivityType: NSString | string): boolean;
  application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: Block): boolean;
  application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: NSString | string, error: NSError): void;
  application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity): void;
  application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata): void;
  applicationWillFinishLaunching(notification: NSNotification): void;
  applicationDidFinishLaunching(notification: NSNotification): void;
  applicationWillHide(notification: NSNotification): void;
  applicationDidHide(notification: NSNotification): void;
  applicationWillUnhide(notification: NSNotification): void;
  applicationDidUnhide(notification: NSNotification): void;
  applicationWillBecomeActive(notification: NSNotification): void;
  applicationDidBecomeActive(notification: NSNotification): void;
  applicationWillResignActive(notification: NSNotification): void;
  applicationDidResignActive(notification: NSNotification): void;
  applicationWillUpdate(notification: NSNotification): void;
  applicationDidUpdate(notification: NSNotification): void;
  applicationWillTerminate(notification: NSNotification): void;
  applicationDidChangeScreenParameters(notification: NSNotification): void;
  applicationDidChangeOcclusionState(notification: NSNotification): void;
}

declare class SUTestWebServer extends NSObject {
  initWithPort_workingDirectory<T extends SUTestWebServer>(port: number, workingDirectory: NSString | string): T;
  close(): void;
}

declare class SUUpdateSettingsWindowController extends NSWindowController {}

declare class TestFlight extends NSObject {
  static manuallyStartSession(): void;
  static manuallyEndSession(): void;
  static addCustomEnvironmentInformation_forKey(information: NSString | string, key: NSString | string): void;
  static takeOff(applicationToken: NSString | string): void;
  static setOptions(options: NSDictionary<any, any> | {[key: string]: any}): void;
  static passCheckpoint(checkpointName: NSString | string): void;
  static submitFeedback(feedback: NSString | string): void;
}

declare class BCBooleanView extends NSView implements INSTableViewDataSource, INSTableViewDelegate, INSPathControlDelegate {
  onPathControl(sender: any): IBAction;
  onZoom(sender: any): IBAction;
  onDebugIntersections(sender: any): IBAction;
  onDebugCrossings(sender: any): IBAction;
  onDebugLeftContainment(sender: any): IBAction;
  onDebugRightContainment(sender: any): IBAction;
  onDebugOperation(sender: any): IBAction;
  onDebugCrossingContainment(sender: any): IBAction;
  onDebugCrossingContainmentIntersection(sender: any): IBAction;
  onDebugWhyIntersectionIsntExternalCrossing(sender: any): IBAction;
  onDebugCrossingContainmentRayWithEdge(sender: any): IBAction;
  onShowIntersectionType(sender: any): IBAction;
  onShowOverlaps(sender: any): IBAction;
  onShowContainmentRays(sender: any): IBAction;
  onShowWindingRuleContainmentRays(sender: any): IBAction;
  onShowCrossingContainmentRays(sender: any): IBAction;
  onShowExpandedXor(sender: any): IBAction;
  onShowContourJoints(sender: any): IBAction;
  onShowSuspiciousSelfCrossings(sender: any): IBAction;
  onShowWindingRuleContainmentRaysForSelection(sender: any): IBAction;
  onConvertToXor(sender: any): IBAction;
  onToggleAnimation(sender: any): IBAction;
  onPrescale(sender: any): IBAction;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;
  pathControl_shouldDragItem_withPasteboard(pathControl: NSPathControl, pathItem: NSPathControlItem, pasteboard: NSPasteboard): boolean;
  pathControl_shouldDragPathComponentCell_withPasteboard(pathControl: NSPathControl, pathComponentCell: NSPathComponentCell, pasteboard: NSPasteboard): boolean;
  pathControl_validateDrop(pathControl: NSPathControl, info: any): NSDragOperation;
  pathControl_acceptDrop(pathControl: NSPathControl, info: any): boolean;
  pathControl_willDisplayOpenPanel(pathControl: NSPathControl, openPanel: NSOpenPanel): void;
  pathControl_willPopUpMenu(pathControl: NSPathControl, menu: NSMenu): void;

  examplesTableView(): NSTableView;
  setExamplesTableView(examplesTableView: NSTableView): void;
  examplesPathControl(): NSPathControl;
  setExamplesPathControl(examplesPathControl: NSPathControl): void;
}

declare class FBBezierContour extends NSObject implements INSCopying {
  static bezierContourWithCurve(curve: FBBezierCurve): FBBezierContour;
  addCurve(curve: FBBezierCurve): void;
  addCurveFrom_to(startCrossing: FBEdgeCrossing, endCrossing: FBEdgeCrossing): void;
  addReverseCurve(curve: FBBezierCurve): void;
  addReverseCurveFrom_to(startCrossing: FBEdgeCrossing, endCrossing: FBEdgeCrossing): void;
  intersectionsWithRay_withBlock(testEdge: FBBezierCurve, block: Block): void;
  numberOfIntersectionsWithRay(testEdge: FBBezierCurve): NSUInteger;
  containsPoint(point: FBPoint): boolean;
  markCrossingsAsEntryOrExitWithContour_markInside(otherContour: FBBezierContour, markInside: boolean): void;
  containsPointUsingNonZeroWindingRule(point: FBPoint): boolean;
  containsCrossingUsingNonZeroWindingRule(testIntersection: FBBezierIntersection): boolean;
  bezierPath(): FBBezierPath;
  close(): void;
  bezierPathFromEdge_toEdge(curve1: FBBezierCurve, curve2: FBBezierCurve): FBBezierPath;
  reversedContour(): FBBezierContour;
  contourMadeClockwiseIfNecessary(): FBBezierContour;
  contourWithTransform(t: CGAffineTransform): FBBezierContour;
  contourByMergingLinearRuns(): FBBezierContour;
  addOverlap(overlap: FBContourOverlap): void;
  removeAllOverlaps(): void;
  isEquivalent(other: FBBezierContour): boolean;
  startEdge(): FBBezierCurve;
  testRayForContainment(bounds: FBRect): FBBezierCurve;
  closestLocationToPoint(point: FBPoint): FBCurveLocation;
  clone(): FBBezierContour;
  crossesOwnContour(contour: FBBezierContour): boolean;
  contourWithFlatness(flatness: CGFloat): FBBezierContour;
  markSelfCrossingsAsEntryOrExit(): void;
  sortCoincidentCrossings(): void;
  crossingContainmentRay(testPoint: FBPoint): FBBezierCurve;
  debugPathForIntersectionType_withTransform_andSizeTransform(itersectionType: NSInteger, transform: CGAffineTransform, sizeTransform: CGAffineTransform): FBBezierPath;
  debugPathForJointsWithTransform_andSizeTransform(transform: CGAffineTransform, sizeTransform: CGAffineTransform): FBBezierPath;
  debugPathForContainmentOfCrossing_transform(testIntersection: FBBezierIntersection, transform: CGAffineTransform): FBBezierPath;
  debugPathForWindingRuleContainmentWithTransform_andSizeTransform(transform: CGAffineTransform, sizeTransform: CGAffineTransform): FBBezierPath;
  forEachEdgeOverlapDo(block: Block): void;
  doesOverlapContainCrossing(crossing: FBEdgeCrossing): boolean;
  doesOverlapContainParameter_onEdge(parameter: FBFloat, edge: FBBezierCurve): boolean;
  debugDrawColor_scale(color: NSColor, scale: CGFloat): void;
  copyWithZone(zone: NSZone | null): any;

  edges(): NSArray<any>;
  setEdges(edges: NSArray<any> | any[]): void;
  nonPointEdges(): NSArray<any>;
  setNonPointEdges(nonPointEdges: NSArray<any> | any[]): void;
  bounds(): FBRect;
  setBounds(bounds: FBRect): void;
  boundingRect(): FBRect;
  setBoundingRect(boundingRect: FBRect): void;
  firstPoint(): FBPoint;
  setFirstPoint(firstPoint: FBPoint): void;
  inside(): FBContourInside;
  setInside(inside: FBContourInside): void;
  intersectingContours(): NSArray<any>;
  setIntersectingContours(intersectingContours: NSArray<any> | any[]): void;
  isEmpty(): boolean;
  setIsEmpty(isEmpty: boolean): void;
  isClosed(): boolean;
  setIsClosed(isClosed: boolean): void;
  direction(): FBContourDirection;
  setDirection(direction: FBContourDirection): void;
  CGPath(): CGPathRef;
  setCGPath(CGPath: CGPathRef): void;
  overlaps(): NSArray<any>;
  setOverlaps(overlaps: NSArray<any> | any[]): void;
  crossings(): NSArray<any>;
  setCrossings(crossings: NSArray<any> | any[]): void;
}

declare enum FBContourDirection {
  FBContourClockwise,
  FBContourAntiClockwise,
}

declare class FBBezierCurve extends NSObject {
  static bezierCurvesFromBezierPath(path: FBBezierPath): NSArray<any>;
  static bezierCurveWithLineStartPoint_endPoint(startPoint: FBPoint, endPoint: FBPoint): FBBezierCurve;
  static bezierCurveWithEndPoint1_controlPoint1_controlPoint2_endPoint2(endPoint1: FBPoint, controlPoint1: FBPoint, controlPoint2: FBPoint, endPoint2: FBPoint): FBBezierCurve;
  initWithEndPoint1_controlPoint1_controlPoint2_endPoint2_contour<T extends FBBezierCurve>(endPoint1: FBPoint, controlPoint1: FBPoint, controlPoint2: FBPoint, endPoint2: FBPoint, contour: FBBezierContour): T;
  initWithLineStartPoint_endPoint_contour<T extends FBBezierCurve>(startPoint: FBPoint, endPoint: FBPoint, contour: FBBezierContour): T;
  checkForLine(): void;
  doesHaveIntersectionsWithBezierCurve(curve: FBBezierCurve): boolean;
  intersectionsWithBezierCurve_overlapRange_withBlock(curve: FBBezierCurve, intersectRange: FBBezierIntersectRange, block: FBCurveIntersectionBlock): void;
  pointAtParameter(parameter: FBFloat): FBPoint;
  pointAtParameter_leftBezierCurve_rightBezierCurve(parameter: FBFloat, leftBezierCurve: FBBezierCurve, rightBezierCurve: FBBezierCurve): FBPoint;
  subcurveWithRange(range: FBRange): FBBezierCurve;
  splitSubcurvesWithRange_left_middle_right(range: FBRange, leftCurve: FBBezierCurve, middleCurve: FBBezierCurve, rightCurve: FBBezierCurve): void;
  lengthAtParameter(parameter: FBFloat): FBFloat;
  length(): FBFloat;
  pointFromRightOffset(offset: FBFloat): FBPoint;
  pointFromLeftOffset(offset: FBFloat): FBPoint;
  tangentFromRightOffset(offset: FBFloat): FBPoint;
  tangentFromLeftOffset(offset: FBFloat): FBPoint;
  tangentAtParameter(parameter: FBFloat): FBPoint;
  closestLocationToPoint(point: FBPoint): FBBezierCurveLocation;
  reversedCurve(): FBBezierCurve;
  curveWithTransform(t: CGAffineTransform): FBBezierCurve;
  bezierPath(): FBBezierPath;
  clone(): FBBezierCurve;
  edgesWithFlatness(flatness: CGFloat): NSArray<any>;
  mightIntersectWith(curve: FBBezierCurve): boolean;
  firstCrossingUsingNonself(useNonself: boolean): FBEdgeCrossing;
  lastCrossingUsingNonself(useNonself: boolean): FBEdgeCrossing;
  hasCrossingsUsingNonself(useNonself: boolean): boolean;
  crossingsWithBlock(block: Block): void;
  crossingsCopyWithBlock(block: Block): void;
  removeCrossingsInNonCrossingOverlapRuns(): void;
  nextCrossing(crossing: FBEdgeCrossing): FBEdgeCrossing;
  previousCrossing(crossing: FBEdgeCrossing): FBEdgeCrossing;
  intersectingEdgesWithBlock(block: Block): void;
  selfIntersectingEdgesWithBlock(block: Block): void;
  addCrossing(crossing: FBEdgeCrossing): void;
  removeCrossing(crossing: FBEdgeCrossing): void;
  removeDuplicateCrossings(): void;
  removeAllCrossings(): void;
  reorderCoincidentCrossingA_crossingB(crossingA: FBEdgeCrossing, crossingB: FBEdgeCrossing): void;
  crossesEdge_atIntersection(edge2: FBBezierCurve, intersection: FBBezierIntersection): boolean;
  crossesEdge_atIntersectRange(edge2: FBBezierCurve, intersectRange: FBBezierIntersectRange): boolean;
  isNext(other: FBBezierCurve): boolean;
  debugDrawColor_controlPointColor_scale(color: NSColor, controlPointColor: NSColor, scale: CGFloat): void;

  endPoint1(): FBPoint;
  setEndPoint1(endPoint1: FBPoint): void;
  controlPoint1(): FBPoint;
  setControlPoint1(controlPoint1: FBPoint): void;
  controlPoint2(): FBPoint;
  setControlPoint2(controlPoint2: FBPoint): void;
  endPoint2(): FBPoint;
  setEndPoint2(endPoint2: FBPoint): void;
  isStraightLine(): boolean;
  setIsStraightLine(isStraightLine: boolean): void;
  bounds(): FBRect;
  setBounds(bounds: FBRect): void;
  boundingRect(): FBRect;
  setBoundingRect(boundingRect: FBRect): void;
  flatness(): FBFloat;
  setFlatness(flatness: FBFloat): void;
  point(): boolean;
  setPoint(point: boolean): void;
  isPointOrHorizontalLine(): boolean;
  setIsPointOrHorizontalLine(isPointOrHorizontalLine: boolean): void;
  isStartHorizontal(): boolean;
  setIsStartHorizontal(isStartHorizontal: boolean): void;
  isEndHorizontal(): boolean;
  setIsEndHorizontal(isEndHorizontal: boolean): void;
  isHorizontalLine(): boolean;
  setIsHorizontalLine(isHorizontalLine: boolean): void;
  looksLikeLine(): boolean;
  setLooksLikeLine(looksLikeLine: boolean): void;
  contour(): FBBezierContour;
  setContour(contour: FBBezierContour): void;
  index(): NSUInteger;
  setIndex(index: NSUInteger): void;
  startShared(): boolean;
  setStartShared(startShared: boolean): void;
  next(): FBBezierCurve;
  setNext(next: FBBezierCurve): void;
  previous(): FBBezierCurve;
  setPrevious(previous: FBBezierCurve): void;
  nextNonpoint(): FBBezierCurve;
  setNextNonpoint(nextNonpoint: FBBezierCurve): void;
  previousNonpoint(): FBBezierCurve;
  setPreviousNonpoint(previousNonpoint: FBBezierCurve): void;
  nextNonpointNonHorizontalLine(): FBBezierCurve;
  setNextNonpointNonHorizontalLine(nextNonpointNonHorizontalLine: FBBezierCurve): void;
  previousNonpointNonHorizontalLine(): FBBezierCurve;
  setPreviousNonpointNonHorizontalLine(previousNonpointNonHorizontalLine: FBBezierCurve): void;
  firstCrossing(): FBEdgeCrossing;
  setFirstCrossing(firstCrossing: FBEdgeCrossing): void;
  lastCrossing(): FBEdgeCrossing;
  setLastCrossing(lastCrossing: FBEdgeCrossing): void;
  crossings(): NSArray<any>;
  setCrossings(crossings: NSArray<any> | any[]): void;
  hasCrossings(): boolean;
  setHasCrossings(hasCrossings: boolean): void;
}

declare type FBBezierCurveLocation = {
  parameter: FBFloat
  distance: FBFloat
}

declare class FBBezierGraph extends NSObject {
  static bezierGraph(): FBBezierGraph;
  static bezierGraphWithCGPath(path: CGPathRef): FBBezierGraph;
  static bezierGraphWithBezierPath(path: FBBezierPath): FBBezierGraph;
  static bezierGraphWithContours(contours: NSArray<any> | any[]): FBBezierGraph;
  initWithBezierPath<T extends FBBezierGraph>(path: FBBezierPath): T;
  unionWithBezierGraph(graph: FBBezierGraph): FBBezierGraph;
  intersectWithBezierGraph(graph: FBBezierGraph): FBBezierGraph;
  differenceWithBezierGraph(graph: FBBezierGraph): FBBezierGraph;
  xorWithBezierGraph(graph: FBBezierGraph): FBBezierGraph;
  noneWithBezierGraph(graph: FBBezierGraph): FBBezierGraph;
  bezierPath(): FBBezierPath;
  bezierPathWithClass(bezierClass: any): any;
  closestLocationToPoint(point: FBPoint): FBCurveLocation;
  closestCrossingToPoint(point: FBPoint): FBEdgeCrossing;
  convertToNoneZeroWindingRule(): FBBezierGraph;
  convertToEvenOddWindingRule(): FBBezierGraph;
  bezierGraphBySplittingSelfCrossingContours(singleCrossingContoursOut: NSMutableArray<any> | any[]): FBBezierGraph;
  bezierGraphByTrimmingSelfCrossingContours(): FBBezierGraph;
  bezierGraphWithTransform(t: CGAffineTransform): FBBezierGraph;
  bezierGraphByMergingLinearRunsInContours(): FBBezierGraph;
  bezierGraphWithClockwiseFillsAnticlockwiseHoles(): FBBezierGraph;
  containmentResultForContour(testContour: FBBezierContour): FBContainmentResult;
  debuggingInsertCrossingsForUnionWithBezierGraph(otherGraph: FBBezierGraph): void;
  debuggingInsertCrossingsForIntersectWithBezierGraph(otherGraph: FBBezierGraph): void;
  debuggingInsertCrossingsForDifferenceWithBezierGraph(otherGraph: FBBezierGraph): void;
  debuggingInsertIntersectionsWithBezierGraph(otherGraph: FBBezierGraph): void;
  debuggingInsertCrossingsForFillConversion(): void;
  debugPathForContainmentOfContour(contour: FBBezierContour): FBBezierPath;
  debugPathForContainmentOfContour_transform(testContour: FBBezierContour, transform: CGAffineTransform): FBBezierPath;
  debugPathForJointsOfContour(testContour: FBBezierContour): FBBezierPath;
  debugFindCurvesThatShouldIntersectWith_withBlock(otherGraph: FBBezierGraph, block: Block): void;

  nonEmptyContours(): NSArray<any>;
  setNonEmptyContours(nonEmptyContours: NSArray<any> | any[]): void;
  contours(): NSArray<any>;
  setContours(contours: NSArray<any> | any[]): void;
  bounds(): FBRect;
  setBounds(bounds: FBRect): void;
  CGPath(): CGPathRef;
  setCGPath(CGPath: CGPathRef): void;
}

declare class FBBezierIntersectRange extends NSObject {
  static intersectRangeWithCurve1_parameterRange1_curve2_parameterRange2_reversed(curve1: FBBezierCurve, parameterRange1: FBRange, curve2: FBBezierCurve, parameterRange2: FBRange, reversed: boolean): FBBezierIntersectRange;
  initWithCurve1_parameterRange1_curve2_parameterRange2_reversed<T extends FBBezierIntersectRange>(curve1: FBBezierCurve, parameterRange1: FBRange, curve2: FBBezierCurve, parameterRange2: FBRange, reversed: boolean): T;
  merge(other: FBBezierIntersectRange): void;
  flip(): FBBezierIntersectRange;

  curve1(): FBBezierCurve;
  setCurve1(curve1: FBBezierCurve): void;
  parameterRange1(): FBRange;
  setParameterRange1(parameterRange1: FBRange): void;
  curve1LeftBezier(): FBBezierCurve;
  setCurve1LeftBezier(curve1LeftBezier: FBBezierCurve): void;
  curve1RightBezier(): FBBezierCurve;
  setCurve1RightBezier(curve1RightBezier: FBBezierCurve): void;
  curve1OverlappingBezier(): FBBezierCurve;
  setCurve1OverlappingBezier(curve1OverlappingBezier: FBBezierCurve): void;
  curve2(): FBBezierCurve;
  setCurve2(curve2: FBBezierCurve): void;
  parameterRange2(): FBRange;
  setParameterRange2(parameterRange2: FBRange): void;
  reversed(): boolean;
  setReversed(reversed: boolean): void;
  curve2LeftBezier(): FBBezierCurve;
  setCurve2LeftBezier(curve2LeftBezier: FBBezierCurve): void;
  curve2RightBezier(): FBBezierCurve;
  setCurve2RightBezier(curve2RightBezier: FBBezierCurve): void;
  curve2OverlappingBezier(): FBBezierCurve;
  setCurve2OverlappingBezier(curve2OverlappingBezier: FBBezierCurve): void;
  startIntersection(): FBBezierIntersection;
  setStartIntersection(startIntersection: FBBezierIntersection): void;
  middleIntersection(): FBBezierIntersection;
  setMiddleIntersection(middleIntersection: FBBezierIntersection): void;
  stopIntersection(): FBBezierIntersection;
  setStopIntersection(stopIntersection: FBBezierIntersection): void;
  atStartOfCurve1(): boolean;
  setAtStartOfCurve1(atStartOfCurve1: boolean): void;
  atStopOfCurve1(): boolean;
  setAtStopOfCurve1(atStopOfCurve1: boolean): void;
  atStartOfCurve2(): boolean;
  setAtStartOfCurve2(atStartOfCurve2: boolean): void;
  atStopOfCurve2(): boolean;
  setAtStopOfCurve2(atStopOfCurve2: boolean): void;
}

declare class FBBezierIntersection extends NSObject {
  static intersectionWithCurve1_parameter1_curve2_parameter2(curve1: FBBezierCurve, parameter1: FBFloat, curve2: FBBezierCurve, parameter2: FBFloat): FBBezierIntersection;
  initWithCurve1_parameter1_curve2_parameter2<T extends FBBezierIntersection>(curve1: FBBezierCurve, parameter1: FBFloat, curve2: FBBezierCurve, parameter2: FBFloat): T;
  enumerateAliasesWithBlock(block: Block): void;
  curve1Direction(): FBPoint;
  curve2Direction(): FBPoint;
  curve1WindingCount(): NSInteger;
  curve2WindingCount(): NSInteger;

  location(): FBPoint;
  setLocation(location: FBPoint): void;
  curve1(): FBBezierCurve;
  setCurve1(curve1: FBBezierCurve): void;
  parameter1(): FBFloat;
  setParameter1(parameter1: FBFloat): void;
  curve2(): FBBezierCurve;
  setCurve2(curve2: FBBezierCurve): void;
  parameter2(): FBFloat;
  setParameter2(parameter2: FBFloat): void;
  tangent(): boolean;
  setTangent(tangent: boolean): void;
  curve1LeftBezier(): FBBezierCurve;
  setCurve1LeftBezier(curve1LeftBezier: FBBezierCurve): void;
  curve1RightBezier(): FBBezierCurve;
  setCurve1RightBezier(curve1RightBezier: FBBezierCurve): void;
  curve2LeftBezier(): FBBezierCurve;
  setCurve2LeftBezier(curve2LeftBezier: FBBezierCurve): void;
  curve2RightBezier(): FBBezierCurve;
  setCurve2RightBezier(curve2RightBezier: FBBezierCurve): void;
  atStartOfCurve1(): boolean;
  setAtStartOfCurve1(atStartOfCurve1: boolean): void;
  atStopOfCurve1(): boolean;
  setAtStopOfCurve1(atStopOfCurve1: boolean): void;
  atStartOfCurve2(): boolean;
  setAtStartOfCurve2(atStartOfCurve2: boolean): void;
  atStopOfCurve2(): boolean;
  setAtStopOfCurve2(atStopOfCurve2: boolean): void;
  isAtExactStartOfCurve1(): boolean;
  setIsAtExactStartOfCurve1(isAtExactStartOfCurve1: boolean): void;
  isAtExactStopOfCurve1(): boolean;
  setIsAtExactStopOfCurve1(isAtExactStopOfCurve1: boolean): void;
  isAtExactStartOfCurve2(): boolean;
  setIsAtExactStartOfCurve2(isAtExactStartOfCurve2: boolean): void;
  isAtExactStopOfCurve2(): boolean;
  setIsAtExactStopOfCurve2(isAtExactStopOfCurve2: boolean): void;
  atEndPointOfCurve1(): boolean;
  setAtEndPointOfCurve1(atEndPointOfCurve1: boolean): void;
  atEndPointOfCurve2(): boolean;
  setAtEndPointOfCurve2(atEndPointOfCurve2: boolean): void;
  atEndPointOfCurve(): boolean;
  setAtEndPointOfCurve(atEndPointOfCurve: boolean): void;
}

declare class FBBezierOperationChain extends NSObject {
  initWithBezierPath<T extends FBBezierOperationChain>(sourcePath: FBBezierPath): T;
  initWithData<T extends FBBezierOperationChain>(data: NSData): T;
  appendBezierPath_withOperation(path: FBBezierPath, op: FBBezierPathOperation): void;
  archive(): NSData;
  saveWithName(name: NSString | string): void;
  enumerateWithBlock(block: Block): void;
}

declare type FBBezierPathElement = {
  type: FBPathElementType
  point: FBPoint
  controlPoints: [FBPoint, FBPoint]
}

declare enum FBBezierPathOperation {
  FBBezierPathOperationUnion = 0,
  FBBezierPathOperationDifference = 1,
  FBBezierPathOperationIntersect = 2,
  FBBezierPathOperationXor = 3,
}

declare class FBContainmentResult extends NSObject {
  initWithTestContour_inGraph_evenOddInside_nonZeroInside_testEdge_intersections<T extends FBContainmentResult>(testContour: FBBezierContour, graph: FBBezierGraph, evenOdd: FBContourInside, nonZero: FBContourInside, testEdge: FBBezierCurve | null, intersections: NSArray<any> | any[]): T;

  evenOdd(): FBContourInside;
  setEvenOdd(evenOdd: FBContourInside): void;
  nonZero(): FBContourInside;
  setNonZero(nonZero: FBContourInside): void;
  testEdge(): FBBezierCurve;
  setTestEdge(testEdge: FBBezierCurve): void;
  intersections(): NSArray<any>;
  setIntersections(intersections: NSArray<any> | any[]): void;
  testContour(): FBBezierContour;
  setTestContour(testContour: FBBezierContour): void;
  graph(): FBBezierGraph;
  setGraph(graph: FBBezierGraph): void;
  container(): FBBezierContour;
  setContainer(container: FBBezierContour): void;
}

declare class FBEdgeOverlap extends NSObject {
  range(): FBBezierIntersectRange;
  setRange(range: FBBezierIntersectRange): void;
  edge1(): FBBezierCurve;
  setEdge1(edge1: FBBezierCurve): void;
  edge2(): FBBezierCurve;
  setEdge2(edge2: FBBezierCurve): void;
}

declare class FBEdgeOverlapRun extends NSObject {
  isCrossing(): boolean;
  isCrossingUsingNonZeroWindingRule(): boolean;
  removeCrossings(): void;
  addMiddleCrossing(): void;
  addStartCrossing(): void;
  addStopCrossing(): void;
  middleIntersection(): FBBezierIntersection;

  overlaps(): NSArray<any>;
  setOverlaps(overlaps: NSArray<any> | any[]): void;
  startIsInsideContour1(): boolean;
  setStartIsInsideContour1(startIsInsideContour1: boolean): void;
  stopIsInsideContour1(): boolean;
  setStopIsInsideContour1(stopIsInsideContour1: boolean): void;
  startIsInsideContour2(): boolean;
  setStartIsInsideContour2(startIsInsideContour2: boolean): void;
  stopIsInsideContour2(): boolean;
  setStopIsInsideContour2(stopIsInsideContour2: boolean): void;
  crossingType(): FBEdgeOverlapRunCrossingType;
  setCrossingType(crossingType: FBEdgeOverlapRunCrossingType): void;
}

declare class FBContourOverlap extends NSObject {
  static contourOverlap(): FBContourOverlap;
  addOverlap_forEdge1_edge2(range: FBBezierIntersectRange, edge1: FBBezierCurve, edge2: FBBezierCurve): void;
  runsWithBlock(block: Block): void;
  reset(): void;
  isComplete(): boolean;
  isEmpty(): boolean;
  isBetweenContour_andContour(contour1: FBBezierContour, contour2: FBBezierContour): boolean;
  doesContainCrossing(crossing: FBEdgeCrossing): boolean;
  doesContainParameter_onEdge(parameter: FBFloat, edge: FBBezierCurve): boolean;

  contour1(): FBBezierContour;
  setContour1(contour1: FBBezierContour): void;
  contour2(): FBBezierContour;
  setContour2(contour2: FBBezierContour): void;
  overlapRuns(): NSArray<any>;
  setOverlapRuns(overlapRuns: NSArray<any> | any[]): void;
}

declare class FBCurveLocation extends NSObject {
  static curveLocationWithEdge_parameter_distance(edge: FBBezierCurve, parameter: FBFloat, distance: FBFloat): FBCurveLocation;
  initWithEdge_parameter_distance<T extends FBCurveLocation>(edge: FBBezierCurve, parameter: FBFloat, distance: FBFloat): T;

  graph(): FBBezierGraph;
  setGraph(graph: FBBezierGraph): void;
  contour(): FBBezierContour;
  setContour(contour: FBBezierContour): void;
  edge(): FBBezierCurve;
  setEdge(edge: FBBezierCurve): void;
  parameter(): FBFloat;
  setParameter(parameter: FBFloat): void;
  distance(): FBFloat;
  setDistance(distance: FBFloat): void;
}

declare enum FBDebugIntersectionType {
  FBDebugIntersectionTypeNone,
  FBDebugIntersectionTypeEntry,
  FBDebugIntersectionTypeExit,
}

declare type FBDoublePoint = {
  x: FBDouble
  y: FBDouble
}

declare type FBDoubleSize = {
  width: FBDouble
  height: FBDouble
}

declare type FBDoubleRect = {
  origin: FBDoublePoint
  size: FBDoubleSize
}

declare type FBDouble = number

declare class FBEdgeCrossing extends NSObject {
  static crossingWithIntersection(intersection: FBBezierIntersection): FBEdgeCrossing;
  initWithIntersection<T extends FBEdgeCrossing>(intersection: FBBezierIntersection): T;
  removeFromEdge(): void;
  isCoincidentWith(crossing: FBEdgeCrossing): boolean;
  nextUsingNonself(useNonself: boolean): FBEdgeCrossing;
  previousUsingNonself(useNonself: boolean): FBEdgeCrossing;
  isEqualToEdgeCrossing(crossing: FBEdgeCrossing): boolean;

  edge(): FBBezierCurve;
  setEdge(edge: FBBezierCurve): void;
  counterpart(): FBEdgeCrossing;
  setCounterpart(counterpart: FBEdgeCrossing): void;
  order(): FBFloat;
  setOrder(order: FBFloat): void;
  entry(): boolean;
  setEntry(entry: boolean): void;
  processed(): boolean;
  setProcessed(processed: boolean): void;
  selfCrossing(): boolean;
  setSelfCrossing(selfCrossing: boolean): void;
  overlapRun(): FBEdgeOverlapRun;
  setOverlapRun(overlapRun: FBEdgeOverlapRun): void;
  fromCrossingOverlap(): boolean;
  setFromCrossingOverlap(fromCrossingOverlap: boolean): void;
  index(): NSUInteger;
  setIndex(index: NSUInteger): void;
  suspicious(): boolean;
  setSuspicious(suspicious: boolean): void;
  next(): FBEdgeCrossing;
  setNext(next: FBEdgeCrossing): void;
  previous(): FBEdgeCrossing;
  setPrevious(previous: FBEdgeCrossing): void;
  parameter(): FBFloat;
  setParameter(parameter: FBFloat): void;
  curve(): FBBezierCurve;
  setCurve(curve: FBBezierCurve): void;
  leftCurve(): FBBezierCurve;
  setLeftCurve(leftCurve: FBBezierCurve): void;
  rightCurve(): FBBezierCurve;
  setRightCurve(rightCurve: FBBezierCurve): void;
  atStart(): boolean;
  setAtStart(atStart: boolean): void;
  atEnd(): boolean;
  setAtEnd(atEnd: boolean): void;
  location(): FBPoint;
  setLocation(location: FBPoint): void;
  intersection(): FBBezierIntersection;
  setIntersection(intersection: FBBezierIntersection): void;
}

declare type FBAngleRange = {
  minimum: FBFloat
  maximum: FBFloat
}

declare type FBRange = {
  minimum: FBFloat
  maximum: FBFloat
}

declare class FBTangentIterator extends NSObject {
  static tangentIteratorWithIntersection_onCurve(intersection: FBBezierIntersection, curve: FBBezierCurve): FBTangentIterator;
  initWithIntersection_onCurve<T extends FBTangentIterator>(intersection: FBBezierIntersection, curve: FBBezierCurve): T;
  sync(other: FBTangentIterator): void;
  next(tangents: [FBPoint, FBPoint]): boolean;

  leftCurve(): FBBezierCurve;
  setLeftCurve(leftCurve: FBBezierCurve): void;
  rightCurve(): FBBezierCurve;
  setRightCurve(rightCurve: FBBezierCurve): void;
  offset(): FBFloat;
  setOffset(offset: FBFloat): void;
  offsetStep(): FBFloat;
  setOffsetStep(offsetStep: FBFloat): void;
  offsetMaximum(): FBFloat;
  setOffsetMaximum(offsetMaximum: FBFloat): void;
}

declare type FBPathElementType = any

declare enum FBContourInside {
  FBContourInsideFilled,
  FBContourInsideHole,
}

declare enum FBEdgeOverlapRunCrossingType {
  FBEdgeOverlapRunCrossingTypeUnknown = 0,
  FBEdgeOverlapRunCrossingTypeCrossing = 1<<1,
  FBEdgeOverlapRunCrossingTypeContainedByContour1 = 1<<2,
  FBEdgeOverlapRunCrossingTypeContainedByContour2 = 1<<3,
  FBEdgeOverlapRunCrossingTypeDisjoint = 1<<4,
  FBEdgeOverlapRunCrossingTypeContainedMask,
}

declare enum FBEdgeOverlapRunCrossingPosition {
  FBEdgeOverlapRunCrossingPositionMiddle,
  FBEdgeOverlapRunCrossingPositionInside,
  FBEdgeOverlapRunCrossingPositionOutside,
}

declare class Brush extends NSObject {
  mouseDown_inView_onCanvas(theEvent: NSEvent, view: NSView, canvas: Canvas): void;
  mouseDragged_inView_onCanvas(theEvent: NSEvent, view: NSView, canvas: Canvas): void;
  mouseUp_inView_onCanvas(theEvent: NSEvent, view: NSView, canvas: Canvas): void;
}

declare class Canvas extends NSObject {
  beginPathAtLocation_withWidth_color(location: NSPoint, width: CGFloat, color: NSColor): void;
  extendPathToLocation(location: NSPoint): void;
  endPath(): void;
  drawRect(dirtyRect: NSRect): void;

  showPoints(): boolean;
  setShowPoints(showPoints: boolean): void;
  simplify(): boolean;
  setSimplify(simplify: boolean): void;
  fitCurve(): boolean;
  setFitCurve(fitCurve: boolean): void;
}

declare class CanvasView extends NSView {
  showPoints(): boolean;
  setShowPoints(showPoints: boolean): void;
  simplify(): boolean;
  setSimplify(simplify: boolean): void;
  fitCurve(): boolean;
  setFitCurve(fitCurve: boolean): void;
}

declare class MyDocument extends NSDocument {
  toggleShowPoints(sender: any): IBAction;
  toggleSimplifyPath(sender: any): IBAction;
  toggleFitCurve(sender: any): IBAction;
}

declare type NSBezierElement = {
  kind: NSBezierPathElement
  point: NSPoint
  controlPoints: [NSPoint, NSPoint]
}

declare class AppController extends NSObject implements INSApplicationDelegate, INSWindowDelegate, INSMenuDelegate, INSUserNotificationCenterDelegate, IMSDataMenuProviderDelegate, IMSDataSupplierManagerDelegate {
  actionClasses(): NSArray<any>;
  runPluginCommandWithIdentifier_fromBundleAtURL_context(identifier: NSString | string, url: NSURL, context: NSDictionary<any, any> | {[key: string]: any}): NSString;
  runPluginCommandWithIdentifier_fromBundleAtURL_context_portToAsnwerTo(identifier: NSString | string, url: NSURL, context: NSDictionary<any, any> | {[key: string]: any}, port: NSString | string): NSString;
  revealPlugin(sender: any): IBAction;
  buildPluginsMenu(menu: NSMenu): void;
  runPluginCommand_fromMenu_context(command: MSPluginCommand, fromMenu: boolean, context: NSDictionary<any, any> | {[key: string]: any}): NSString;
  runPluginScript_name(script: NSString | string, name: NSString | string): NSString;
  runPluginScript_handler_name_withPreprocess(script: NSString | string, handler: NSString | string, name: NSString | string, shoulPreprocess: boolean): NSString;
  validatePluginMenuItem_documentShowing(menuItem: NSMenuItem, documentShowing: boolean): boolean;
  registerURLScheme(): void;
  static sharedInstance(): AppController;
  checkDefaults(): void;
  openPreferencesWindowWithPreferencePaneIdentifier(identifier: NSString | string): void;
  openAboutWindow(sender: any): IBAction;
  revealTemplatesFolderInFinder(sender: any): IBAction;
  buy(sender: any): IBAction;
  refreshCurrentDocument(): void;
  currentDocumentDidChange(): void;
  refreshDocumentWindowBadges(): void;
  openTemplateAtPath(templateURL: NSURL): void;
  templateLibraryPath(): NSURL;
  toggleDarkMode(sender: any): IBAction;
  applicationShouldTerminate(sender: NSApplication): NSApplicationTerminateReply;
  application_openURLs(application: NSApplication, urls: NSArray<any> | any[]): void;
  application_openFile(sender: NSApplication, filename: NSString | string): boolean;
  application_openFiles(sender: NSApplication, filenames: NSArray<any> | any[]): void;
  application_openTempFile(sender: NSApplication, filename: NSString | string): boolean;
  applicationShouldOpenUntitledFile(sender: NSApplication): boolean;
  applicationOpenUntitledFile(sender: NSApplication): boolean;
  application_openFileWithoutUI(sender: any, filename: NSString | string): boolean;
  application_printFile(sender: NSApplication, filename: NSString | string): boolean;
  application_printFiles_withSettings_showPrintPanels(application: NSApplication, fileNames: NSArray<any> | any[], printSettings: NSDictionary<any, any> | {[key: string]: any}, showPrintPanels: boolean): NSApplicationPrintReply;
  applicationShouldTerminateAfterLastWindowClosed(sender: NSApplication): boolean;
  applicationShouldHandleReopen_hasVisibleWindows(sender: NSApplication, flag: boolean): boolean;
  applicationDockMenu(sender: NSApplication): NSMenu;
  application_willPresentError(application: NSApplication, error: NSError): NSError;
  application_didRegisterForRemoteNotificationsWithDeviceToken(application: NSApplication, deviceToken: NSData): void;
  application_didFailToRegisterForRemoteNotificationsWithError(application: NSApplication, error: NSError): void;
  application_didReceiveRemoteNotification(application: NSApplication, userInfo: NSDictionary<any, any> | {[key: string]: any}): void;
  application_willEncodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_didDecodeRestorableState(app: NSApplication, coder: NSCoder): void;
  application_willContinueUserActivityWithType(application: NSApplication, userActivityType: NSString | string): boolean;
  application_continueUserActivity_restorationHandler(application: NSApplication, userActivity: NSUserActivity, restorationHandler: Block): boolean;
  application_didFailToContinueUserActivityWithType_error(application: NSApplication, userActivityType: NSString | string, error: NSError): void;
  application_didUpdateUserActivity(application: NSApplication, userActivity: NSUserActivity): void;
  application_userDidAcceptCloudKitShareWithMetadata(application: NSApplication, metadata: CKShareMetadata): void;
  applicationWillFinishLaunching(notification: NSNotification): void;
  applicationDidFinishLaunching(notification: NSNotification): void;
  applicationWillHide(notification: NSNotification): void;
  applicationDidHide(notification: NSNotification): void;
  applicationWillUnhide(notification: NSNotification): void;
  applicationDidUnhide(notification: NSNotification): void;
  applicationWillBecomeActive(notification: NSNotification): void;
  applicationDidBecomeActive(notification: NSNotification): void;
  applicationWillResignActive(notification: NSNotification): void;
  applicationDidResignActive(notification: NSNotification): void;
  applicationWillUpdate(notification: NSNotification): void;
  applicationDidUpdate(notification: NSNotification): void;
  applicationWillTerminate(notification: NSNotification): void;
  applicationDidChangeScreenParameters(notification: NSNotification): void;
  applicationDidChangeOcclusionState(notification: NSNotification): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  userNotificationCenter_didDeliverNotification(center: NSUserNotificationCenter, notification: NSUserNotification): void;
  userNotificationCenter_didActivateNotification(center: NSUserNotificationCenter, notification: NSUserNotification): void;
  userNotificationCenter_shouldPresentNotification(center: NSUserNotificationCenter, notification: NSUserNotification): boolean;
  dataMenuProvider_canChooseDataOfType(controller: MSDataMenuProvider, type: MSDataType): boolean;
  dataMenuProviderCanApplyMasterDataToInstances(controller: MSDataMenuProvider): boolean;
  dataMenuProviderCanRefreshData(controller: MSDataMenuProvider): boolean;
  dataMenuProviderSelectedLayersWithAppliedData(controller: MSDataMenuProvider): NSArray<any>;
  dataMenuProviderDataTypeForMenuBuilding(controller: MSDataMenuProvider): MSDataType;
  dataMenuProviderIsInspectorPopupMenu(provider: MSDataMenuProvider): boolean;
  dataMenuProvider_didChooseData(controller: MSDataMenuProvider, data: MSDataSupplier): void;
  dataMenuProviderRefreshData(controller: MSDataMenuProvider): void;
  dataMenuProviderRefreshMasterData(controller: MSDataMenuProvider): void;
  dataMenuProviderRemoveDataRecord(controller: MSDataMenuProvider): void;
  dataMenuProviderDataIdentifier(controller: MSDataMenuProvider): NSString;
  requestDataFromPluginDataSupplier_pluginContext(pluginDataSupplier: MSPluginDataSupplier, pluginContext: NSDictionary<any, any> | {[key: string]: any}): void;
  isThereAPluginForDataSupplier(pluginDataSupplier: MSPluginDataSupplier): boolean;
  pluginIconForIdentifier(pluginIdentifier: NSString | string): NSImage;
  pluginNameForIdentifier(pluginIdentifier: NSString | string): NSString;

  lastRun(): MSPluginCommand;
  setLastRun(lastRun: MSPluginCommand): void;
  shapesMenu(): any;
  setShapesMenu(shapesMenu: any): void;
  pluginsMenuItem(): NSMenuItem;
  setPluginsMenuItem(pluginsMenuItem: NSMenuItem): void;
  templatesMenu(): NSMenu;
  setTemplatesMenu(templatesMenu: NSMenu): void;
  printMenu(): NSMenu;
  setPrintMenu(printMenu: NSMenu): void;
  prototypingMenuItem(): NSMenuItem;
  setPrototypingMenuItem(prototypingMenuItem: NSMenuItem): void;
  debugMenuItem(): NSMenuItem;
  setDebugMenuItem(debugMenuItem: NSMenuItem): void;
  dataFeedMenuItem(): NSMenuItem;
  setDataFeedMenuItem(dataFeedMenuItem: NSMenuItem): void;
  cloudEnvironmentMenuItem(): NSMenuItem;
  setCloudEnvironmentMenuItem(cloudEnvironmentMenuItem: NSMenuItem): void;
  updateTimer(): NSTimer;
  setUpdateTimer(updateTimer: NSTimer): void;
  pasteboardManager(): MSPasteboardManager;
  setPasteboardManager(pasteboardManager: MSPasteboardManager): void;
  mirrorController(): SMKMirrorController;
  setMirrorController(mirrorController: SMKMirrorController): void;
  mirrorDataProvider(): MSMirrorDataProvider;
  setMirrorDataProvider(mirrorDataProvider: MSMirrorDataProvider): void;
  dataFeedProvider(): MSDataMenuProvider;
  setDataFeedProvider(dataFeedProvider: MSDataMenuProvider): void;
  dataSupplierManager(): MSDataSupplierManager;
  setDataSupplierManager(dataSupplierManager: MSDataSupplierManager): void;
  crashLogManager(): MSCrashLogManager;
  setCrashLogManager(crashLogManager: MSCrashLogManager): void;
  pluginManager(): MSPluginManagerWithActions;
  setPluginManager(pluginManager: MSPluginManagerWithActions): void;
  licenseManager(): BCLicenseManager;
  setLicenseManager(licenseManager: BCLicenseManager): void;
  updateController(): MSUpdateController;
  setUpdateController(updateController: MSUpdateController): void;
  actionController(): MSActionController;
  setActionController(actionController: MSActionController): void;
  librariesController(): MSAssetLibraryController;
  setLibrariesController(librariesController: MSAssetLibraryController): void;
  hud(): MSHUDWindowController;
  setHud(hud: MSHUDWindowController): void;
  creationTime(): NSTimeInterval;
  setCreationTime(creationTime: NSTimeInterval): void;
  launchStartTime(): NSTimeInterval;
  setLaunchStartTime(launchStartTime: NSTimeInterval): void;
  launchEndTime(): NSTimeInterval;
  setLaunchEndTime(launchEndTime: NSTimeInterval): void;
  globalAssets(): MSPersistentAssetCollection;
  setGlobalAssets(globalAssets: MSPersistentAssetCollection): void;
  sketchSafeModeOn(): boolean;
  setSketchSafeModeOn(sketchSafeModeOn: boolean): void;
  needToInformUserPluginsAreDisabled(): boolean;
  setNeedToInformUserPluginsAreDisabled(needToInformUserPluginsAreDisabled: boolean): void;
  canShowWelcomeWindowForUserAction(): boolean;
  setCanShowWelcomeWindowForUserAction(canShowWelcomeWindowForUserAction: boolean): void;
  canCreateDocuments(): boolean;
  setCanCreateDocuments(canCreateDocuments: boolean): void;
}

declare class BCBaseMagnifierButton extends NSButton {
  color(): BCFlexibleColor;
  documentColorSpace(): NSColorSpace;
}

declare class BCFlexibleColor extends NSObject {
  static colorWithRed_green_blue_alpha(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat): any;
  static colorWithHue_sat_light_alpha(hue: CGFloat, sat: CGFloat, light: CGFloat, alpha: CGFloat): any;
  colorForColorSpace(space: NSColorSpace): NSColor;
}

declare class BCFontSearchField extends NSSearchField implements INSTextViewDelegate {
  textView_clickedOnLink_atIndex(textView: NSTextView, link: any, charIndex: NSUInteger): boolean;
  textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: any, rect: NSRect, event: NSEvent, charIndex: NSUInteger): void;
  textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: any, charIndex: NSUInteger): NSArray<any>;
  textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: any, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType): boolean;
  textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange): NSRange;
  textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSArray<any> | any[], newSelectedCharRanges: NSArray<any> | any[]): NSArray<any>;
  textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSDictionary<any, any> | {[key: string]: any}, newTypingAttributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  textViewDidChangeSelection(notification: NSNotification): void;
  textViewDidChangeTypingAttributes(notification: NSNotification): void;
  textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: NSString | string, characterIndex: NSUInteger): NSString;
  textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger | null): NSArray<any>;
  textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  textView_doCommandBySelector(textView: NSTextView, commandSelector: string): boolean;
  textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange): NSInteger;
  textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger): NSMenu;
  textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSDictionary<any, any> | {[key: string]: any}, checkingTypes: NSTextCheckingTypes): NSDictionary<any, any>;
  textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, results: NSArray<any> | any[], orthography: NSOrthography, wordCount: NSInteger): NSArray<any>;
  textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger): NSURL;
  textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray<any> | any[]): NSSharingServicePicker;
  undoManagerForTextView(view: NSTextView): NSUndoManager;
  textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSArray<any> | any[]): NSArray<any>;
  textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger): boolean;
  textView_clickedOnLink(textView: NSTextView, link: any): boolean;
  textView_clickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_draggedCell_inRect_event(view: NSTextView, cell: any, rect: NSRect, event: NSEvent): void;

  searchResults(): NSTableView;
  setSearchResults(searchResults: NSTableView): void;
}

declare class BCHexTextField extends NSTextField {}

declare class BCMagicWand extends NSOperation {
  startPoint(): NSPoint;
  setStartPoint(startPoint: NSPoint): void;
  tolerance(): number;
  setTolerance(tolerance: number): void;
  bitmap(): NSBitmapImageRep;
  setBitmap(bitmap: NSBitmapImageRep): void;
}

declare class BCMagnifier extends NSObject {
  static pickColorInColorSpace_completionHandler(colorSpace: NSColorSpace, completionHandler: BCMagnifierCompletionBlock): void;
}

declare class BCMagnifierWindow extends NSWindow {
  initWithScreenGrab_frameOffset<T extends BCMagnifierWindow>(screenGrab: BCScreenGrab, offset: NSPoint): T;
  updateScreenGrabIfNeeded(screenGrab: BCScreenGrab): void;
  mouseMovedTo(mousePoint: NSPoint): void;
  setCurrentColor(color: BCFlexibleColor): void;
  flagsChanged(): void;

  frameOffset(): NSPoint;
  setFrameOffset(frameOffset: NSPoint): void;
  screenFrame(): CGRect;
  setScreenFrame(screenFrame: CGRect): void;
}

declare class BCMagnifierWindowContentView extends NSView {
  screenGrab(): BCScreenGrab;
  setScreenGrab(screenGrab: BCScreenGrab): void;
  currentColor(): BCFlexibleColor;
  setCurrentColor(currentColor: BCFlexibleColor): void;
}

declare class BCScreenGrab extends NSObject {
  static screenGrabForDisplay_belowWindowWithID(displayID: CGDirectDisplayID, windowID: CGWindowID): BCScreenGrab;
  static screenGrabWithBitmapImageRep_originOnScreen_colorSpace_displayID(bitmapRep: NSBitmapImageRep, screenOrigin: NSPoint, colorSpace: NSColorSpace, displayID: CGDirectDisplayID): BCScreenGrab;
  bitmapImageRepCroppingToRect(r: NSRect): NSBitmapImageRep;

  displayID(): CGDirectDisplayID;
  setDisplayID(displayID: CGDirectDisplayID): void;
  image(): NSImage;
  setImage(image: NSImage): void;
  bitmapRep(): NSBitmapImageRep;
  setBitmapRep(bitmapRep: NSBitmapImageRep): void;
  imageOrigin(): NSPoint;
  setImageOrigin(imageOrigin: NSPoint): void;
  isRetinaScreen(): boolean;
  setIsRetinaScreen(isRetinaScreen: boolean): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  screenFrame(): NSRect;
  setScreenFrame(screenFrame: NSRect): void;
}

declare class BCSparkleLicensedUpdateChecker extends NSObject {
  static sparkleCheckerWithLicenseExpirationDate_buildNumber_appcastResults(date: NSDate, buildNumber: NSString | string, results: NSArray<any> | any[]): BCSparkleLicensedUpdateChecker;

  numberOfUnavailableReleases(): NSUInteger;
  setNumberOfUnavailableReleases(numberOfUnavailableReleases: NSUInteger): void;
  hasAvailableUpdates(): boolean;
  setHasAvailableUpdates(hasAvailableUpdates: boolean): void;
  numberOfUpdatesRequiringRenewal(): NSUInteger;
  setNumberOfUpdatesRequiringRenewal(numberOfUpdatesRequiringRenewal: NSUInteger): void;
  numberOfUpdatesRequiringHostUpdate(): NSUInteger;
  setNumberOfUpdatesRequiringHostUpdate(numberOfUpdatesRequiringHostUpdate: NSUInteger): void;
  numberOfUpdatesRequiringHostUpdateAndRenewal(): NSUInteger;
  setNumberOfUpdatesRequiringHostUpdateAndRenewal(numberOfUpdatesRequiringHostUpdateAndRenewal: NSUInteger): void;
  latestUnavailableVersion(): NSString;
  setLatestUnavailableVersion(latestUnavailableVersion: NSString | string): void;
  latestUnavailableBuildNumber(): NSString;
  setLatestUnavailableBuildNumber(latestUnavailableBuildNumber: NSString | string): void;
  latestUnavailableVersionBeforeRenewing(): NSString;
  setLatestUnavailableVersionBeforeRenewing(latestUnavailableVersionBeforeRenewing: NSString | string): void;
  latestUnavailableBuildNumberBeforeRenewing(): NSString;
  setLatestUnavailableBuildNumberBeforeRenewing(latestUnavailableBuildNumberBeforeRenewing: NSString | string): void;
  latestUnavailableVersionBeforeUpdatingMac(): NSString;
  setLatestUnavailableVersionBeforeUpdatingMac(latestUnavailableVersionBeforeUpdatingMac: NSString | string): void;
  latestUnavailableBuildNumberBeforeUpdatingMac(): NSString;
  setLatestUnavailableBuildNumberBeforeUpdatingMac(latestUnavailableBuildNumberBeforeUpdatingMac: NSString | string): void;
  latestUnavailableVersionBeforeUpdatingMacAndRenewing(): NSString;
  setLatestUnavailableVersionBeforeUpdatingMacAndRenewing(latestUnavailableVersionBeforeUpdatingMacAndRenewing: NSString | string): void;
  latestUnavailableBuildNumberBeforeUpdatingMacAndRenewing(): NSString;
  setLatestUnavailableBuildNumberBeforeUpdatingMacAndRenewing(latestUnavailableBuildNumberBeforeUpdatingMacAndRenewing: NSString | string): void;
  indexOfBestUpdate(): NSUInteger;
  setIndexOfBestUpdate(indexOfBestUpdate: NSUInteger): void;
}

declare class CHPlainWhiteView extends NSView {
  displayString(): NSString;
  setDisplayString(displayString: NSString | string): void;
}

declare class CHWhiteView extends NSView {}

declare class CHLinedWhiteView extends CHPlainWhiteView {}

declare class BCAlphaColorPicker extends BCColorPickerSliderView {
  colorAlphaValue(): CGFloat;
  setColorAlphaValue(colorAlphaValue: CGFloat): void;
  color(): BCFlexibleColor;
  setColor(color: BCFlexibleColor): void;
}

declare class BCColorPickerBaseView extends NSControl {
  initInBounds<T extends BCColorPickerBaseView>(colorPickerBounds: NSRect): T;
  drawContentInRect_dirtyRect(contentRect: NSRect, dirtyRect: NSRect): void;
  drawCheckerboardPatternInRect(rect: NSRect): void;
  drawMarkerInRect(rect: NSRect): void;
  contentBounds(): NSRect;
  markerShadow(): NSShadow;
  static darkShadow(): NSShadow;
  static drawFrameInRect_block(contentRect: NSRect, block: BCVoidBlock): void;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  hideSelection(): boolean;
  setHideSelection(hideSelection: boolean): void;
}

declare class BCColorPickerSliderView extends BCColorPickerBaseView {
  drawSelectionMarkerAtPosition(xPosition: NSInteger): void;
}

declare class BCColorPreview extends NSPopUpButton implements INSMenuDelegate {
  initInBounds<T extends BCColorPreview>(colorPickerBounds: NSRect): T;
  static menuItemForColorCounter_target_action_documentColorSpace_useHSB(colorCounter: MSColorCounter, target: any, action: string, colorSpace: NSColorSpace, useHSB: boolean): NSMenuItem;
  static shouldUseHSBInColorDescriptions(): boolean;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;

  color(): BCFlexibleColor;
  setColor(color: BCFlexibleColor): void;
  frequentColors(): NSArray<any>;
  setFrequentColors(frequentColors: NSArray<any> | any[]): void;
}

declare interface IBCColorPreviewDelegate {
  colorPreviewColorSpace(colorPreviewView: BCColorPreview): NSColorSpace;
}

declare class BCHSBColorPicker extends NSControl implements IBCColorPreviewDelegate, IBCMagnifierButtonDelegate {
  setColor_multipleValues(color: MSColor, multiple: boolean): void;
  hueChanged(sender: BCHueColorPicker): IBAction;
  alphaChanged(sender: BCAlphaColorPicker): IBAction;
  saturationBrightnessChanged(sender: BCSaturationBrightnessColorPicker): IBAction;
  rgbComponentFieldsChanged(sender: NSTextField): IBAction;
  hslComponentFieldsChanged(sender: NSTextField): IBAction;
  hexValueFieldChanged(sender: any): IBAction;
  frequentColorPicked(sender: any): IBAction;
  setFrequentColors(frequentColors: NSArray<any> | any[]): void;
  colorPreviewColorSpace(colorPreviewView: BCColorPreview): NSColorSpace;
  magnifierButtonDocumentColorSpace(button: BCMagnifierButton): NSColorSpace;

  delegate(): any;
  setDelegate(delegate: any): void;
  color(): MSColor;
  setColor(color: MSColor): void;
  hexValueTextField(): NSTextField;
  setHexValueTextField(hexValueTextField: NSTextField): void;
  alphaComponentTextField(): NSTextField;
  setAlphaComponentTextField(alphaComponentTextField: NSTextField): void;
  separatorView(): MSColorInspectorSeparatorView;
  setSeparatorView(separatorView: MSColorInspectorSeparatorView): void;
}

declare interface IBCHSBColorPickerDelegate {
  hsbColorPickerDocumentColorSpace(colorPicker: BCHSBColorPicker): NSColorSpace;
  hsbColorPickerPreviewColorSpace(colorPicker: BCHSBColorPicker): NSColorSpace;
}

declare class BCHueColorPicker extends BCColorPickerSliderView {
  hueValue(): CGFloat;
  setHueValue(hueValue: CGFloat): void;
}

declare class BCMagnifierButton extends BCBaseMagnifierButton {
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare class BCMagnifierButtonCell extends NSButtonCell {}

declare interface IBCMagnifierButtonDelegate {
  magnifierButtonDocumentColorSpace(button: BCMagnifierButton): NSColorSpace;
}

declare class BCSaturationBrightnessColorPicker extends BCColorPickerBaseView {}

declare class MSCustomShapeItem extends MSInspectorItem {
  refreshAndResetAction(sender: any): IBAction;
}

declare class MSAboutLinkButton extends MSHoverButton {}

declare class MSAboutLinkButtonCell extends MSHoverButtonCell {}

declare class MSAboutWindowController extends NSWindowController {
  static showAboutWindow(): void;
  showAboutUsPage(sender: any): IBAction;
  showAcknowledgementsPage(sender: any): IBAction;
  showPurchaseLicensePage(sender: any): IBAction;
  showRenewLicensePage(sender: any): IBAction;
  unlinkDevice(sender: any): IBAction;

  backgroundImageView(): NSImageView;
  setBackgroundImageView(backgroundImageView: NSImageView): void;
  buildNumberTextField(): NSTextField;
  setBuildNumberTextField(buildNumberTextField: NSTextField): void;
  copyrightTextField(): NSTextField;
  setCopyrightTextField(copyrightTextField: NSTextField): void;
  expirationTitleTextField(): NSTextField;
  setExpirationTitleTextField(expirationTitleTextField: NSTextField): void;
  expirationDateTextField(): NSTextField;
  setExpirationDateTextField(expirationDateTextField: NSTextField): void;
  purchaseLicenseButton(): NSButton;
  setPurchaseLicenseButton(purchaseLicenseButton: NSButton): void;
  registeredToTextField(): NSTextField;
  setRegisteredToTextField(registeredToTextField: NSTextField): void;
  renewLicenseButton(): NSButton;
  setRenewLicenseButton(renewLicenseButton: NSButton): void;
  trialNoteTextField(): NSTextField;
  setTrialNoteTextField(trialNoteTextField: NSTextField): void;
  unlinkDeviceButton(): NSButton;
  setUnlinkDeviceButton(unlinkDeviceButton: NSButton): void;
  variantNameTextField(): NSTextField;
  setVariantNameTextField(variantNameTextField: NSTextField): void;
  versionTextField(): NSTextField;
  setVersionTextField(versionTextField: NSTextField): void;
}

declare class MSAddAsLibraryAction extends MSDocumentAction {
  addAsLibraryAction(sender: any): IBAction;
}

declare class MSAddExportFormatAction extends MSDocumentAction {
  addExportFormat(sender: any): IBAction;
  addExportFormatToLayer(layer: MSSliceLayer): void;
}

declare class MSAddFlowAction extends MSFlowBaseAction {
  addFlow(sender: any): IBAction;
}

declare class MSAddFlowBackAction extends MSFlowBaseAction {
  addFlowBack(sender: any): IBAction;
}

declare class MSAddFlowHomeAction extends MSFlowBaseAction {
  addFlowHome(sender: any): IBAction;
}

declare class MSInsertMenuAction extends MSDocumentAction {}

declare class MSInsertImageAction extends MSBaseInsertAction {
  insertImage(sender: any): IBAction;
}

declare class MSPencilAction extends MSDocumentAction {
  pencil(sender: any): IBAction;
}

declare class MSAddRemoteLibraryAction extends MSAction {
  addAppcastURL(url: NSURL): void;
}

declare class MSBaseAlignLayersAction extends MSDocumentAction implements IMSAltButtonTarget {
  alignToKey(key: NSString | string): void;
  altButtonCanShowAltImage(altButton: MSAltButton): boolean;
}

declare class MSAlignLayersLeftAction extends MSBaseAlignLayersAction {
  alignLayersLeft(sender: any): IBAction;
}

declare class MSAlignLayersCenterAction extends MSBaseAlignLayersAction {
  alignLayersCenter(sender: any): IBAction;
}

declare class MSAlignLayersRightAction extends MSBaseAlignLayersAction {
  alignLayersRight(sender: any): IBAction;
}

declare class MSAlignLayersTopAction extends MSBaseAlignLayersAction {
  alignLayersTop(sender: any): IBAction;
}

declare class MSAlignLayersMiddleAction extends MSBaseAlignLayersAction {
  alignLayersMiddle(sender: any): IBAction;
}

declare class MSAlignLayersBottomAction extends MSBaseAlignLayersAction {
  alignLayersBottom(sender: any): IBAction;
}

declare class MSAlignmentActions extends MSTouchBarGroupAction {}

declare class MSAlignmentBackgroundView extends NSStackView {}

declare class MSAlternatingView extends NSView {
  otherView(): NSView;
  setOtherView(otherView: NSView): void;
}

declare class MSAnalytics extends BCSingleton implements IMSActionObserver {
  trackScreenWithName(name: NSString | string): void;
  trackEvent_withValue(event: NSString | string, value: any | null): void;
  actionController_willBeginActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didFinishActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didInstantActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;

  isEnabled(): boolean;
  setIsEnabled(isEnabled: boolean): void;
}

declare class MSAngularGradientEventHandler extends MSGradientEventHandler {}

declare class MSAppearanceInspectorSection extends MSBaseInspectorSection {
  beginRenameSharedObject_completionBlock(sharedObject: MSSharedObject, block: MSRenameSharedObjectBlock): void;
  layerWithSharedStyleDidChange(): void;
}

declare class MSApplyOrientationAction extends MSDocumentAction {}

declare class MSApplyLandscapeOrientationAction extends MSApplyOrientationAction {
  applyLandscapeOrientation(sender: any): IBAction;
}

declare class MSApplyPortraitOrientationAction extends MSApplyOrientationAction {
  applyPortraitOrientation(sender: any): IBAction;
}

declare class MSApplySharedStyleAction extends MSDocumentAction {}

declare class MSApplySharedLayerStyleAction extends MSApplySharedStyleAction {
  applySharedLayerStyle(sender: any): IBAction;
}

declare class MSApplySharedTextStyleAction extends MSApplySharedStyleAction {
  applySharedTextStyle(sender: any): IBAction;
}

declare class MSBaseMoveAction extends MSDocumentAction {}

declare class MSBaseMoveForwardAction extends MSBaseMoveAction {}

declare class MSBaseMoveBackwardAction extends MSBaseMoveAction {}

declare class MSMoveForwardAction extends MSBaseMoveForwardAction {
  moveForward(sender: any): IBAction;
}

declare class MSMoveBackwardAction extends MSBaseMoveBackwardAction {
  moveBackward(sender: any): IBAction;
}

declare class MSMoveToFrontAction extends MSBaseMoveForwardAction {
  moveToFront(sender: any): IBAction;
}

declare class MSMoveToBackAction extends MSBaseMoveBackwardAction {
  moveToBack(sender: any): IBAction;
}

declare class MSArtboardContentResizeInspectorItem extends MSInspectorItem {}

declare class MSArtboardPositionInspectorItem extends MSPositionInspectorItem {}

declare enum MSArtboardPresetMatch {
  MSArtboardPresetMatchInvalid = 0,
  MSArtboardPresetMatchValid = 1 << 0,
  MSArtboardPresetMatchTall = 1 << 1,
  MSArtboardPresetMatchScaled = 1 << 2,
  MSArtboardPresetMatchRotated = 1 << 3,
}

declare class MSArtboardPresetInspectorItem extends MSInspectorItem {}

declare class MSArtboardPresetTableCellView extends NSTableCellView {
  checkmark(): NSImageView;
  setCheckmark(checkmark: NSImageView): void;
  sizeLabel(): NSTextField;
  setSizeLabel(sizeLabel: NSTextField): void;
}

declare class MSArtboardPresetsTableView extends NSTableView {}

declare class MSArtboardPresetsViewController extends NSViewController implements IBCPopoverDelegate {
  categoryForPreset(preset: MSArtboardPreset): MSArtboardPresetsCategory;
  addUserPreset(newPreset: MSArtboardPreset): void;
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;

  presetStore(): MSArtboardPresetStore;
  setPresetStore(presetStore: MSArtboardPresetStore): void;
  categories(): NSArray<any>;
  setCategories(categories: NSArray<any> | any[]): void;
  selectedCategory(): MSArtboardPresetsCategory;
  setSelectedCategory(selectedCategory: MSArtboardPresetsCategory): void;
  orientation(): NSPaperOrientation;
  setOrientation(orientation: NSPaperOrientation): void;
  extraPresets(): NSArray<any>;
  setExtraPresets(extraPresets: NSArray<any> | any[]): void;
  selectedPresetSize(): NSSize;
  setSelectedPresetSize(selectedPresetSize: NSSize): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSArtboardPresetsViewControllerDelegate {
  artboardPresetsViewController_didSelectPreset(sender: MSArtboardPresetsViewController, preset: MSArtboardPreset): void;
  artboardPresetsViewController_didSelectOrientation(sender: MSArtboardPresetsViewController, orientation: NSPaperOrientation): void;
  showCustomPresetSheet(presetsController: MSArtboardPresetsViewController): void;
}

declare class MSArtboardResizeToFitInspectorItem extends MSExportSelectedOrResizeInspectorItem {}

declare class MSArtboardSizeInspectorItem extends MSBaseSizeInspectorItem {}

declare class MSAssetLibrariesPreferencePane extends MSPreferencePane implements INSTableViewDelegate, INSTableViewDataSource {
  importLibraryAction(sender: any): IBAction;
  removeLibraryAction(sender: any): IBAction;
  locateLibraryAction(sender: any): IBAction;
  addLibrariesFromURLS(urls: NSArray<any> | any[]): void;
  preferenceItemHasUpdated(item: MSAssetPreferenceItem): void;
  startDownloadForRemoteLibrary(remoteLibrary: MSRemoteAssetLibrary): void;
  reloadSelectingLibrary(library: MSAssetLibrary): void;
  updateAvailableForRemoteLibrary(remoteLibrary: MSRemoteAssetLibrary): void;
  displayInstallerAlertSheetForRemoteAssetLibrary(): void;
  displayDuplicateAlertSheetForRemoteAssetLibrary(remoteAssetLibrary: MSRemoteAssetLibrary): void;
  tableCellForLibrary(library: MSAssetLibrary): MSAssetLibraryTableCellView;
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;

  tableView(): MSAssetLibraryTableView;
  setTableView(tableView: MSAssetLibraryTableView): void;
  assetLibraryController(): MSAssetLibraryController;
  setAssetLibraryController(assetLibraryController: MSAssetLibraryController): void;
}

declare class MSAssetLibraryPreview extends NSView {
  libraryPreview(): NSImage;
  setLibraryPreview(libraryPreview: NSImage): void;
}

declare class MSAssetLibraryTableCellView extends NSTableCellView {
  startDownloading(): void;

  assetPreferenceItem(): MSAssetPreferenceItem;
  setAssetPreferenceItem(assetPreferenceItem: MSAssetPreferenceItem): void;
}

declare class MSAssetLibraryTableView extends BCKeyEventActionTableView {}

declare class MSAssetPickerHeaderView extends NSView {
  static headerPickerWithTitle_isExpandedPreference_delegate(title: NSString | string, preferenceKey: NSString | string, delegate: any): MSAssetPickerHeaderView;
}

declare interface IMSAssetPickerHeaderViewDelegate {
  assetHeaderViewDidClick(headerView: MSAssetPickerHeaderView): void;
}

declare class MSAssetPickerView extends NSView implements INSScrubberDataSource, INSScrubberDelegate, INSTouchBarDelegate {
  reloadData(): void;
  numberOfItemsForScrubber(scrubber: NSScrubber): NSInteger;
  scrubber_viewForItemAtIndex(scrubber: NSScrubber, index: NSInteger): NSScrubberItemView;
  scrubber_didSelectItemAtIndex(scrubber: NSScrubber, selectedIndex: NSInteger): void;
  scrubber_didHighlightItemAtIndex(scrubber: NSScrubber, highlightedIndex: NSInteger): void;
  scrubber_didChangeVisibleRange(scrubber: NSScrubber, visibleRange: NSRange): void;
  didBeginInteractingWithScrubber(scrubber: NSScrubber): void;
  didFinishInteractingWithScrubber(scrubber: NSScrubber): void;
  didCancelInteractingWithScrubber(scrubber: NSScrubber): void;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;

  delegate(): any;
  setDelegate(delegate: any): void;
  tileSize(): NSSize;
  setTileSize(tileSize: NSSize): void;
  tileMargin(): CGFloat;
  setTileMargin(tileMargin: CGFloat): void;
  edgeMargins(): NSEdgeInsets;
  setEdgeMargins(edgeMargins: NSEdgeInsets): void;
  hoveringIndex(): NSUInteger;
  setHoveringIndex(hoveringIndex: NSUInteger): void;
  currentIndexes(): NSIndexSet;
  setCurrentIndexes(currentIndexes: NSIndexSet): void;
  assetCollection(): MSAssetCollection;
  setAssetCollection(assetCollection: MSAssetCollection): void;
  assetType(): MSAsset;
  setAssetType(assetType: MSAsset): void;
}

declare class MSAssetPreferenceItem extends NSObject {
  static preferenceItemForLibrary(library: MSAssetLibrary): MSAssetPreferenceItem;
  evaluateSecondaryTitle(): void;

  updatingStatus(): MSAssetLibraryUpdatingStatus;
  setUpdatingStatus(updatingStatus: MSAssetLibraryUpdatingStatus): void;
  updateAvailable(): boolean;
  setUpdateAvailable(updateAvailable: boolean): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  library(): MSAssetLibrary;
  setLibrary(library: MSAssetLibrary): void;
  remoteLibrary(): MSRemoteAssetLibrary;
  setRemoteLibrary(remoteLibrary: MSRemoteAssetLibrary): void;
  name(): NSString;
  setName(name: NSString | string): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  validForSecondaryTextField(): boolean;
  setValidForSecondaryTextField(validForSecondaryTextField: boolean): void;
  preview(): NSImage;
  setPreview(preview: NSImage): void;
  secondaryTitle(): NSString;
  setSecondaryTitle(secondaryTitle: NSString | string): void;
  hasAppcastURL(): boolean;
  setHasAppcastURL(hasAppcastURL: boolean): void;
  fileSize(): NSUInteger;
  setFileSize(fileSize: NSUInteger): void;
  downloadedSoFar(): NSUInteger;
  setDownloadedSoFar(downloadedSoFar: NSUInteger): void;
  missingRemoteLibraryWithNoInternet(): boolean;
  setMissingRemoteLibraryWithNoInternet(missingRemoteLibraryWithNoInternet: boolean): void;
}

declare interface IMSAssetPreferenceItemDelegate {
  preferenceItemHasUpdated(item: MSAssetPreferenceItem): void;
}

declare enum MSAssetLibraryUpdatingStatus {
  MSAssetLibraryUpdatingStatusNoDownloadAvailable = 0,
  MSAssetLibraryUpdatingStatusDownloadAvailable,
  MSAssetLibraryUpdatingStatusUpdateAvailable,
  MSAssetLibraryUpdatingStatusDownloading,
  MSAssetLibraryUpdatingStatusDownloadError,
  MSAssetLibraryUpdatingStatusWaitingForInstall,
}

declare class MSAssetScrubberItemView extends NSScrubberItemView {
  color(): MSColor;
  setColor(color: MSColor): void;
  canvasColorSpace(): NSColorSpace;
  setCanvasColorSpace(canvasColorSpace: NSColorSpace): void;
  gradient(): MSGradient;
  setGradient(gradient: MSGradient): void;
  pattern(): MSImageData;
  setPattern(pattern: MSImageData): void;
  isFirstInCollection(): boolean;
  setIsFirstInCollection(isFirstInCollection: boolean): void;
  isLastInCollection(): boolean;
  setIsLastInCollection(isLastInCollection: boolean): void;
  tailPadding(): CGFloat;
  setTailPadding(tailPadding: CGFloat): void;
}

declare class MSAssetSyncHeaderCellView extends NSTableCellView {
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
}

declare class MSAssetSyncItemTableCellView extends NSTableCellView {}

declare class MSAssetSyncSheet extends CHSheetController {}

declare class MSAssetSyncSheetHeader extends NSObject implements IMSAssetSyncSheetItem {
  modifiedDateString(): NSString;
  setModifiedDateString(modifiedDateString: NSString | string): void;
  type(): MSAssetSyncSheetItemType;
  setType(type: MSAssetSyncSheetItemType): void;
  library(): MSAssetLibrary;
  setLibrary(library: MSAssetLibrary): void;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
  shouldSync(): boolean;
  setShouldSync(shouldSync: boolean): void;
}

declare interface IMSAssetSyncSheetItem {
  type(): MSAssetSyncSheetItemType;
  setType(type: MSAssetSyncSheetItemType): void;
  library(): MSAssetLibrary;
  setLibrary(library: MSAssetLibrary): void;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
  shouldSync(): boolean;
  setShouldSync(shouldSync: boolean): void;
}

declare enum MSAssetSyncSheetItemType {
  MSAssetSyncSheetItemTypeHeader,
  MSAssetSyncSheetItemTypeSymbol,
  MSAssetSyncSheetItemTypeLayerStyle,
  MSAssetSyncSheetItemTypeTextStyle,
}

declare class MSAssetSyncSheetObject extends NSObject implements IMSAssetSyncSheetItem {
  foreignObject(): MSForeignObject;
  setForeignObject(foreignObject: MSForeignObject): void;
  libraryMaster(): MSShareableObject;
  setLibraryMaster(libraryMaster: MSShareableObject): void;
  shouldSync(): boolean;
  setShouldSync(shouldSync: boolean): void;
  tooltipForLocal(): NSString;
  setTooltipForLocal(tooltipForLocal: NSString | string): void;
  tooltipForRemote(): NSString;
  setTooltipForRemote(tooltipForRemote: NSString | string): void;
  type(): MSAssetSyncSheetItemType;
  setType(type: MSAssetSyncSheetItemType): void;
  library(): MSAssetLibrary;
  setLibrary(library: MSAssetLibrary): void;
  displayName(): NSString;
  setDisplayName(displayName: NSString | string): void;
}

declare class MSAutoExpandGroupsAction extends MSDocumentAction {
  autoExpandGroups(sender: any): IBAction;
}

declare class MSRevealInLayerListAction extends MSDocumentAction {
  revealInLayerList(sender: any): IBAction;
}

declare class MSBackButtonWindowController extends NSWindowController {
  backButtonAction(sender: any): IBAction;
  attachToView_forArtboard(view: NSView, artboard: MSArtboardGroup): void;
  hide(): void;

  doc(): MSDocument;
  setDoc(doc: MSDocument): void;
}

declare class MSBackButtonContentView extends NSView {}

declare class MSBackToInstanceAction extends MSDocumentAction {
  backToInstance(sender: any): IBAction;
}

declare class MSBackgroundColorView extends NSView {
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
}

declare class MSBadgeController extends NSObject {
  initWithDocument<T extends MSBadgeController>(document: MSDocument): T;
  refresh(): void;

  activeWindowBadgingActions(): NSArray<any>;
  setActiveWindowBadgingActions(activeWindowBadgingActions: NSArray<any> | any[]): void;
}

declare class MSBadgeMenuAction extends MSDocumentAction implements IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSBaseBlurInspectorItem extends MSStylePartInspectorItem implements IMSInspectorValueAdaptorDelegate {
  inspectorValueAdaptor_validateValue_forModel_context(adaptor: MSInspectorValueAdaptor, value: ModelValueType, model: any, context: any): boolean;
  inspectorValueAdaptorDidChangeValue(adaptor: MSInspectorValueAdaptor): void;
  inspectorValueAdaptor_didEncounterError(adaptor: MSInspectorValueAdaptor, error: NSError): void;

  radiusField(): MSUpDownTextField;
  setRadiusField(radiusField: MSUpDownTextField): void;
  radiusSlider(): NSSlider;
  setRadiusSlider(radiusSlider: NSSlider): void;
}

declare class MSSimpleBlurInspectorItem extends MSBaseBlurInspectorItem {}

declare class MSMotionBlurInspectorItem extends MSBaseBlurInspectorItem {}

declare class MSZoomBlurInspectorItem extends MSBaseBlurInspectorItem {}

declare class MSBackgroundBlurInspectorItem extends MSBaseBlurInspectorItem {
  saturationField(): MSUpDownTextField;
  setSaturationField(saturationField: MSUpDownTextField): void;
  saturationSlider(): NSSlider;
  setSaturationSlider(saturationSlider: NSSlider): void;
}

declare class MSBaseInsertAction extends MSDocumentAction {}

declare class MSInspectorItem extends NSViewController {
  manageTextField_adaptor_identifier_toolTip_touchBarItems(textField: MSUpDownTextField, adaptor: MSMathInspectorValueAdaptor, identifier: NSUserInterfaceItemIdentifier, toolTip: NSString | string, touchBarItems: NSArray<any> | any[] | null): void;
  static itemForSection(section: MSBaseInspectorSection): MSInspectorItem;
  selectionDidChangeTo(layers: MSLayerArray): void;
  updateDisplayedValues(): void;
  static filterSelection(layers: MSLayerArray): MSLayerArray;
  static canHandleSomeLayersOfSelection(layerArray: MSLayerArray): boolean;
  static canHandleLayer(layer: MSLayer): boolean;

  layers(): MSLayerArray;
  setLayers(layers: MSLayerArray): void;
  layersController(): NSArrayController;
  setLayersController(layersController: NSArrayController): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
}

declare class MSBaseInspectorSection extends NSViewController implements IMSInspectorSection, IMSInspectorItemDelegate {
  updateItems(): void;
  valuesPossiblyChanged(): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  canHandleColorMagnifierAction(): boolean;
  colorMagnifierAction(sender: any): IBAction;
  changeTextLayerFont(sender: any): IBAction;
  views(): NSArray<any>;
  wantsSeparatorAfterViews(): boolean;
  separatorInsets(): NSEdgeInsets;
  valuesPossiblyChanged(item: NSViewController): void;
  itemDidResize(item: NSViewController): void;
  documentForInspectorItem(section: NSViewController): MSDocument;
  item_wantsSectionToCollapse(item: NSViewController, collapse: boolean): void;

  items(): NSArray<any>;
  setItems(items: NSArray<any> | any[]): void;
  layers(): MSLayerArray;
  setLayers(layers: MSLayerArray): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare class MSBaseSharedObjectAction extends MSDocumentAction {
  performSharedObjectAction(): void;

  updater(): MSShareableObjectUpdater;
  setUpdater(updater: MSShareableObjectUpdater): void;
  needsRenameAfterAction(): boolean;
  setNeedsRenameAfterAction(needsRenameAfterAction: boolean): void;
}

declare class MSBaseSizeInspectorItem extends MSInspectorItem {
  updateUI(): void;

  widthAdapter(): MSSizeInspectorValueAdaptor;
  setWidthAdapter(widthAdapter: MSSizeInspectorValueAdaptor): void;
  heightAdapter(): MSSizeInspectorValueAdaptor;
  setHeightAdapter(heightAdapter: MSSizeInspectorValueAdaptor): void;
}

declare class MSBaseTransformInspectorItem extends MSInspectorItem {
  initWithTitle_textFieldLabel<T extends MSBaseTransformInspectorItem>(title: NSString | string, textFieldLabel: NSString | string): T;

  textField(): MSUpDownTextField;
  setTextField(textField: MSUpDownTextField): void;
  flipSegmentedControl(): NSSegmentedControl;
  setFlipSegmentedControl(flipSegmentedControl: NSSegmentedControl): void;
  textFieldFormatter(): MSMathNumberFormatter;
  setTextFieldFormatter(textFieldFormatter: MSMathNumberFormatter): void;
}

declare class MSBitmapEditEventHandler extends MSEventHandler {
  invertAction(sender: any): IBAction;
  cropAction(sender: any): IBAction;
  selectLayerBelowPoint(mouse: NSPoint): void;
  fillSelectionWithColor(color: NSColor): void;
  bitmapEditableLayer(): MSLayer;
  imageSize(): NSSize;
  imageBounds(): NSRect;

  currentMode(): MSBitmapEditMode;
  setCurrentMode(currentMode: MSBitmapEditMode): void;
  accumulatedSelection(): NSBezierPath;
  setAccumulatedSelection(accumulatedSelection: NSBezierPath): void;
}

declare enum MSBitmapEditMode {
  MSBitmapEditModeRect,
  MSBitmapEditModeMagicWand,
}

declare class MSBitmapEditInspectorViewController extends NSViewController implements IMSInspectorChildController {
  refresh(): void;
  prepareForDisplay(): void;
  selectionDidChangeTo(layers: NSArray<any> | any[]): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;

  currentMode(): MSBitmapEditMode;
  setCurrentMode(currentMode: MSBitmapEditMode): void;
  hasSelection(): boolean;
  setHasSelection(hasSelection: boolean): void;
  eventHandler(): MSBitmapEditEventHandler;
  setEventHandler(eventHandler: MSBitmapEditEventHandler): void;
}

declare interface IMSBitmapEditable {
  image(): MSImageData;
  setImage(image: MSImageData): void;
  NSImage(): NSImage;
  setNSImage(NSImage: NSImage): void;
}

declare class MSBitmapEditor extends NSObject {
  draw(): void;
  mouseDown_flags(mouse: NSPoint, flags: NSUInteger): void;
  mouseDragged(mouse: NSPoint): void;
  mouseUp_flags(mouse: NSPoint, flags: NSUInteger): void;
  refreshRectInBitmapCoordinates(bitmapRect: NSRect): void;
  drawMarchingAntsForPath(path: NSBezierPath): void;
  pointInBitmapLayer(mouse: NSPoint): NSPoint;
  imageSize(): NSSize;
  imageBounds(): NSRect;

  eventHandler(): MSBitmapEditEventHandler;
  setEventHandler(eventHandler: MSBitmapEditEventHandler): void;
  bitmapEditableLayer(): MSLayer;
  setBitmapEditableLayer(bitmapEditableLayer: MSLayer): void;
  accumulatedSelection(): NSBezierPath;
  setAccumulatedSelection(accumulatedSelection: NSBezierPath): void;
}

declare class MSBitmapLayerItem extends MSInspectorItem {}

declare class MSBitmapMagicWandEditor extends MSBitmapEditor {}

declare class MSBitmapOverrideInspectorItem extends MSOverrideInspectorItem implements IMSDataMenuProviderDelegate {
  NSImage(): NSImage;
  dataMenuProvider_canChooseDataOfType(controller: MSDataMenuProvider, type: MSDataType): boolean;
  dataMenuProviderCanApplyMasterDataToInstances(controller: MSDataMenuProvider): boolean;
  dataMenuProviderCanRefreshData(controller: MSDataMenuProvider): boolean;
  dataMenuProviderSelectedLayersWithAppliedData(controller: MSDataMenuProvider): NSArray<any>;
  dataMenuProviderDataTypeForMenuBuilding(controller: MSDataMenuProvider): MSDataType;
  dataMenuProviderIsInspectorPopupMenu(provider: MSDataMenuProvider): boolean;
  dataMenuProvider_didChooseData(controller: MSDataMenuProvider, data: MSDataSupplier): void;
  dataMenuProviderRefreshData(controller: MSDataMenuProvider): void;
  dataMenuProviderRefreshMasterData(controller: MSDataMenuProvider): void;
  dataMenuProviderRemoveDataRecord(controller: MSDataMenuProvider): void;
  dataMenuProviderDataIdentifier(controller: MSDataMenuProvider): NSString;
}

declare class MSBitmapRectangleEditor extends MSBitmapEditor {
  sizeForLabel(): NSSize;
}

declare class MSBlockAnimation extends CABasicAnimation {
  initWithBlock<T extends MSBlockAnimation>(aBlock: MSAnimationBlock): T;
}

declare class MSBlurInspectorViewController extends MSStylePartInspectorViewController implements INSMenuDelegate {
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare class MSBlurNameInspectorItem extends MSStylePartInspectorItem {}

declare class MSBlurPopUpButtonCell extends NSPopUpButtonCell {}

declare class MSBooleanMenuAction extends MSDocumentAction {}

declare class MSBaseBooleanAction extends MSDocumentAction {}

declare class MSSubtractAction extends MSBaseBooleanAction {
  booleanSubtract(sender: any): IBAction;
}

declare class MSUnionAction extends MSBaseBooleanAction {
  booleanUnion(sender: any): IBAction;
}

declare class MSIntersectAction extends MSBaseBooleanAction {
  booleanIntersect(sender: any): IBAction;
}

declare class MSDifferenceAction extends MSBaseBooleanAction {
  booleanDifference(sender: any): IBAction;
}

declare class MSBooleanTouchBarGroupAction extends MSTouchBarGroupAction {}

declare class MSBorderInspectorViewController extends MSColorStylePartInspectorViewController {
  enableAction(sender: any): IBAction;

  positionPopUp(): NSPopUpButton;
  setPositionPopUp(positionPopUp: NSPopUpButton): void;
  thicknessField(): MSUpDownTextField;
  setThicknessField(thicknessField: MSUpDownTextField): void;
}

declare class MSBorderOptionsInspectorViewController extends MSStylePartInspectorViewController {
  startDecorationAction(sender: any): IBAction;
  endDecorationAction(sender: any): IBAction;
  capAction(sender: any): IBAction;
  joinAction(sender: any): IBAction;
  dashPatternAction(sender: any): IBAction;
  reloadData(): void;

  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare class MSBottomGradientView extends NSView {}

declare class MSCallToActionButton extends MSHoverButton {}

declare class MSCallToActionButtonCell extends MSHoverButtonCell {}

declare class MSCallToActionButtonDividerView extends NSView {}

declare class MSZoomToActualSizeAction extends MSDocumentAction {}

declare class MSZoomToSelectionAction extends MSDocumentAction {}

declare class MSZoomToArtboardAction extends MSDocumentAction {}

declare class MSCenterSelectionInVisibleAreaAction extends MSDocumentAction {}

declare class MSCenterLayersInCanvasAction extends MSDocumentAction {}

declare class MSSelectAllAction extends MSDocumentAction {}

declare class MSCutAction extends MSDocumentAction {}

declare class MSCopyAction extends MSDocumentAction {}

declare class MSPasteAction extends MSDocumentAction {}

declare class MSPasteWithStyleAction extends MSDocumentAction {}

declare class MSPasteOverSelectionAction extends MSDocumentAction {}

declare class MSPasteHereAction extends MSDocumentAction {}

declare class MSDuplicateAction extends MSDocumentAction {}

declare class MSDeleteAction extends MSDocumentAction {}

declare class MSCanvasPreferencePane extends MSPreferencePane {
  adjustSnapColorAction(sender: any): IBAction;
  adjustFlowColorAction(sender: any): IBAction;

  flowColorWell(): NSColorWell;
  setFlowColorWell(flowColorWell: NSColorWell): void;
  flowColorLabel(): NSTextField;
  setFlowColorLabel(flowColorLabel: NSTextField): void;
}

declare class MSCenteredPopUpButtonCell extends NSPopUpButtonCell {}

declare class MSChangeFontAction extends MSDocumentAction {
  changeTextLayerFont(sender: any): IBAction;
}

declare class MSSilentCheckForUpdatesAction extends MSAction {}

declare class MSQuietCheckForUpdatesAction extends MSSilentCheckForUpdatesAction {}

declare class MSCheckForUpdatesAction extends MSSilentCheckForUpdatesAction {
  checkForUpdates(sender: any): IBAction;
}

declare class MSClippingMaskAction extends MSDocumentAction {
  clippingMask(sender: any): IBAction;
}

declare class MSClippingMaskModeAction extends MSDocumentAction {
  clippingMaskMode(sender: any): IBAction;
}

declare class MSClosePathAction extends MSDocumentAction {
  closePath(sender: any): IBAction;
}

declare class MSCloudAction extends MSPopoverAction {
  startUploadUpdating(existingShare: SCKShare | null): void;
  refreshShareWithHandler(handler: Block): void;
  static isErrorRecoverable(error: NSError): boolean;
  static cloudError_addingRecoveryOptionsWithAttempter(error: NSError, attempter: any): NSError;
  static attemptRecoveryFromCloudError_optionIndex(error: NSError, recoveryOptionIndex: NSUInteger): void;
  static cloudEnabled(): boolean;
  static openCloudUploadURL_parameters(url: NSURL, parameters: NSDictionary<any, any> | {[key: string]: any}): void;
  static addRemoteLibraryWithURL_parameters(url: NSURL, parameters: NSDictionary<any, any> | {[key: string]: any}): void;
  updateProgressImage(): void;

  exportedDocument(): any;
  setExportedDocument(exportedDocument: any): void;
  upload(): MSCloudShareUploadController;
  setUpload(upload: MSCloudShareUploadController): void;
  refreshOperation(): SCKAPIOperation;
  setRefreshOperation(refreshOperation: SCKAPIOperation): void;
}

declare class MSCloudAvatarView extends NSView {
  avatar(): SCKAvatar;
  setAvatar(avatar: SCKAvatar): void;
}

declare class MSCloudBaseViewController extends MSToolbarPopoverContentViewController {
  // initWithAction<T extends MSCloudBaseViewController>(action: MSCloudAction): T;
  cloudBaseViewControllerDidAppear(): void;

  cloudAction(): MSCloudAction;
  setCloudAction(cloudAction: MSCloudAction): void;
  cloudViewController(): MSCloudViewController;
  setCloudViewController(cloudViewController: MSCloudViewController): void;
}

declare class MSCloudDocumentViewController extends MSCloudBaseViewController {}

declare class MSCloudInitialViewController extends MSCloudBaseViewController {}

declare class MSCloudInvalidLicenseViewController extends MSCloudBaseViewController {}

declare class MSCloudLoginWindowController extends NSWindowController {
  delegate(): any;
  setDelegate(delegate: any): void;
  isLoading(): boolean;
  setIsLoading(isLoading: boolean): void;
  email(): NSString;
  setEmail(email: NSString | string): void;
  password(): NSString;
  setPassword(password: NSString | string): void;
}

declare interface IMSCloudLoginWindowControllerDelegate {
  cloudLoginControllerDidSignIn(controller: MSCloudLoginWindowController): void;
  cloudLoginControllerDidOpenBrowser(controller: MSCloudLoginWindowController): void;
  cloudLoginControllerDidCancel(controller: MSCloudLoginWindowController): void;
}

declare class MSCloudPreferencePane extends MSPreferencePane {
  updateWindowFrame(): void;
  static loginWithURLParameters(parameters: NSDictionary<any, any> | {[key: string]: any} | null): void;
}

declare class MSCloudPreferencesAccountViewController extends MSCloudPreferencesViewController {}

declare class MSCloudPreferencesIntroViewController extends MSCloudPreferencesViewController {}

declare class MSCloudPreferencesViewController extends NSViewController {
  popToRootViewController(sender: any | null): IBAction;
  showAlert(alert: NSAlert): void;

  preferencePane(): MSCloudPreferencePane;
  setPreferencePane(preferencePane: MSCloudPreferencePane): void;
}

declare class MSCloudReuploadViewController extends MSCloudBaseViewController {}

declare class MSCloudRoundedView extends NSView {}

declare class MSCloudShareCollectionItem extends MSExistingDocumentCollectionItem {
  initWithController_cloudShare<T extends MSCloudShareCollectionItem>(controller: MSWelcomeWindowController, share: SCKShare): T;
  downloadLatestDocument(handler: Block): void;

  cloudShare(): SCKShare;
  setCloudShare(cloudShare: SCKShare): void;
  latestDocument(): SCKCloudDocument;
  setLatestDocument(latestDocument: SCKCloudDocument): void;
  downloadProgress(): NSProgress;
  setDownloadProgress(downloadProgress: NSProgress): void;
}

declare class MSCloudUploadArrowView extends NSView {
  startAnimation(): void;
}

declare class MSCloudUploadFailedViewController extends MSCloudBaseViewController {
  error(): NSError;
  setError(error: NSError): void;
  existingShare(): SCKShare;
  setExistingShare(existingShare: SCKShare): void;
}

declare class MSCloudUploadViewController extends MSCloudBaseViewController {}

declare class MSCloudViewController extends NSViewController {
  initWithAction<T extends MSCloudViewController>(action: MSCloudAction): T;
  setContentViewController_animated(contentViewController: MSCloudBaseViewController, animated: boolean): void;
  resetContentViewController(sender: any): IBAction;
  updateFrame(): void;
  animateFrameWithCompletionHandler(handler: Block): void;

  action(): MSCloudAction;
  setAction(action: MSCloudAction): void;
  contentViewController(): MSCloudBaseViewController;
  setContentViewController(contentViewController: MSCloudBaseViewController): void;
}

declare class MSCloudWelcomeViewController extends MSCloudBaseViewController {}

declare class MSCollapseAllGroupsAction extends MSDocumentAction {
  collapseAllGroups(sender: any): IBAction;
}

declare class MSCollapsibleHeaderInspectorItem extends MSHeaderInspectorItem {
  toggleCollapsed(sender: any): IBAction;

  collapsed(): boolean;
  setCollapsed(collapsed: boolean): void;
}

declare interface IMSCollapsibleHeaderInspectorItemTarget {
  item_wantsSectionToCollapse(item: NSViewController, collapse: boolean): void;
}

declare class MSCollectionView extends NSCollectionView {}

declare class MSColorComponentValueTextField extends MSUpDownTextField {
  counterpart(): MSColorComponentValueTextField;
  setCounterpart(counterpart: MSColorComponentValueTextField): void;
}

declare class MSColorControlsInspectorViewController extends MSStylePartInspectorViewController {
  reset(sender: any): IBAction;
}

declare class MSColorInspector extends NSViewController implements IMSColorInspectorSectionDelegate, IMSModeModePickerDelegate, IBCPopoverDelegate, INSTouchBarDelegate, IBCHSBColorPickerDelegate, IMSStylePartPreviewButtonDelegate {
  initWithSender_document_handlerManager_globalAssets<T extends MSColorInspector>(delegate: any, document: MSDocument, manager: MSEventHandlerManager, globalAssets: MSPersistentAssetCollection): T;
  static presentColorInspectorPopoverForViewController_document_globalAssets_relativeToView_colorInspectorSetupHandler(viewController: NSViewController, document: MSDocument, globalAssets: MSPersistentAssetCollection, positioningView: NSView, setupHandler: MSColorInspectorSetupBlock): BCPopover;
  static presentColorInspectorPopoverForViewController_inspectorController_relativeToView_colorInspectorSetupHandler(viewController: NSViewController, inspectorController: MSInspectorController, positioningView: NSView, setupHandler: MSColorInspectorSetupBlock): BCPopover;
  validateEnableButtons(): void;
  stack(): void;
  setColor(color: MSColor): void;
  colorPickerAction(sender: any): IBAction;
  refreshAction(sender: any): IBAction;
  colorMagnifierAction(sender: any): IBAction;
  setInitialColor(color: MSColor): void;
  setMaximumAvailableHeight(maxHeight: NSInteger): void;
  switchToColorTabAtIndex(index: NSUInteger): IBAction;
  colorTabIndex(): NSUInteger;
  colorDidChangeTo(color: MSColor): void;
  inspectorSectionDidUpdate(pattern: MSColorInspectorSectionPattern): void;
  documentAssets(): MSAssetCollection;
  globalAssets(): MSPersistentAssetCollection;
  eventHandlerManager(): MSEventHandlerManager;
  stack(): void;
  didAddAsset(asset: any): void;
  didRemoveAssetOfType(assetType: MSAsset): void;
  touchBar(): NSTouchBar;
  pickerViewWillChange(picker: MSModePickerView): void;
  pickerViewChanged(picker: MSModePickerView): void;
  pickerView_labelForMode(view: MSModePickerView, mode: NSInteger): NSString;
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;
  hsbColorPickerDocumentColorSpace(colorPicker: BCHSBColorPicker): NSColorSpace;
  hsbColorPickerPreviewColorSpace(colorPicker: BCHSBColorPicker): NSColorSpace;
  stylePartPreviewButtonPreviewColorSpace(button: MSStylePartPreviewButton): NSColorSpace;

  styleParts(): NSArray<any>;
  setStyleParts(styleParts: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  colorPicker(): BCHSBColorPicker;
  setColorPicker(colorPicker: BCHSBColorPicker): void;
  emptyTopView(): NSView;
  setEmptyTopView(emptyTopView: NSView): void;
  colorPickerView(): NSView;
  setColorPickerView(colorPickerView: NSView): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
}

declare interface IMSColorInspectorDelegate {
  colorInspector_didChangeToColor(inspector: MSColorInspector, color: MSColor): void;
  inspectorDidChangeType(inspector: MSColorInspector): void;
  colorInspectorDidChange(inspector: MSColorInspector): void;
  colorInspectorWillClose(inspector: MSColorInspector): void;
  colorInspectorShouldAdjustInspectorToPopover(inspector: MSColorInspector): boolean;
  colorInspectorUndoManager(inspector: MSColorInspector): NSUndoManager;
}

declare class MSColorInspectorModePickerAction extends MSDocumentAction {}

declare class MSColorInspectorColorTabAction extends MSColorInspectorModePickerAction {}

declare class MSColorInspectorLinearGradientTabAction extends MSColorInspectorModePickerAction {}

declare class MSColorInspectorRadialGradientTabAction extends MSColorInspectorModePickerAction {}

declare class MSColorInspectorCircularGradientTabAction extends MSColorInspectorModePickerAction {}

declare class MSColorInspectorImageTabAction extends MSColorInspectorModePickerAction {}

declare class MSColorInspectorModeBorderTouchBarGroupAction extends MSTouchBarGroupAction {}

declare class MSColorInspectorModeFillTouchBarGroupAction extends MSColorInspectorModeBorderTouchBarGroupAction {}

declare class MSColorInspectorSection extends NSViewController {
  initWithDelegate<T extends MSColorInspectorSection>(delegate: any): T;
  validate(): void;
  popoverWillClose(): void;
  isEnabled(): boolean;
  hasPresetPickers(): boolean;
  fillType(): NSInteger;
  assetCollectionForPresetPicker(picker: MSAssetPickerView): MSAssetCollection;
  refreshAction(sender: any): IBAction;
  colorPickerChangedTo(color: MSColor): void;
  reloadPresetPicker(): void;
  viewsWithColorPickerView_blendingView_topViewIsEmpty(colorPickerView: NSView, blendingView: NSView, topViewIsEmpty: boolean): NSArray<any>;
  assetPickerViews(): NSArray<any>;
  assetPickerViewKeys(): NSDictionary<any, any>;
  customTouchBarItemIdentifiers(): NSArray<any>;
  makeTouchBarItemForIdentifier(identifier: NSString | string): NSTouchBarItem;
  assetType(): MSAsset;
  numberOfAssetsForPickerView(picker: MSAssetPickerView): NSUInteger;
  addAsset_forPickerView(asset: any, picker: MSAssetPickerView): void;
  insertAsset_atIndex_forPickerView(asset: any, index: NSUInteger, picker: MSAssetPickerView): void;
  assetAtIndex_forPickerView(index: NSUInteger, picker: MSAssetPickerView): any;
  removeAssetAtIndex_forPickerView(index: NSUInteger, picker: MSAssetPickerView): void;
  indexesOfAsset_forPickerView(asset: any, picker: MSAssetPickerView): NSIndexSet;
  moveAssetAtIndex_beforeObjectAtIndex_ForPickerView(fromIndex: NSUInteger, toIndex: NSUInteger, picker: MSAssetPickerView): boolean;
  scrollViewWithStackedViews(scrollableViews: NSArray<any> | any[]): NSScrollView;
  minimumHeight(): CGFloat;
  static refreshColorPickerViewHeight(colorPickerView: NSView): void;
  colorAssetCollectionLabelWithTitle(title: NSString | string): NSTextField;
  fittingAssetScrubberLabelItemSizeForTitle(title: NSString | string): NSSize;

  delegate(): any;
  setDelegate(delegate: any): void;
  styleParts(): NSArray<any>;
  setStyleParts(styleParts: NSArray<any> | any[]): void;
}

declare class MSColorInspectorSectionColor extends MSColorInspectorSection {
  pickedColor(): MSColor;
  setPickedColor(pickedColor: MSColor): void;
}

declare interface IMSColorInspectorSectionDelegate {
  colorDidChangeTo(color: MSColor): void;
  inspectorSectionDidUpdate(pattern: MSColorInspectorSectionPattern): void;
  documentAssets(): MSAssetCollection;
  globalAssets(): MSPersistentAssetCollection;
  eventHandlerManager(): MSEventHandlerManager;
  stack(): void;
  didAddAsset(asset: any): void;
  didRemoveAssetOfType(assetType: MSAsset): void;
  touchBar(): NSTouchBar;

  document(): MSDocument;
  setDocument(document: MSDocument): void;
}

declare class MSColorInspectorSectionGradient extends MSColorInspectorSection implements IMSGradientEventHandlerDelegate, IMSGradientBarViewDelegate {
  switchToGradientHandler(): void;
  gradientBarAction(sender: any): IBAction;
  rotateGradientAction(sender: any): IBAction;
  closeGradientHandler(): void;
  switchToGradientHandlerIfNecessary(): void;
  gradientHandlerDidChangeCurrentPoint(handler: MSGradientEventHandler): void;
  gradientHandlerDidChangeGradient(handler: MSGradientEventHandler): void;
  gradientHandlerWillLoseFocus(handler: MSGradientEventHandler): void;
  gradientBarViewPreviewColorSpace(gradientBarView: MSGradientBarView): NSColorSpace;
  gradientBarChanged(gradientView: MSGradientBarView): void;

  gradientBarParentView(): NSView;
  setGradientBarParentView(gradientBarParentView: NSView): void;
  gradientBarView(): MSGradientBarView;
  setGradientBarView(gradientBarView: MSGradientBarView): void;
}

declare class MSColorInspectorSectionNoise extends MSColorInspectorSection {}

declare class MSColorInspectorSectionPattern extends MSColorInspectorSection {
  choosePatternImage(sender: any): IBAction;
  patternWellAction(sender: any): IBAction;
  updatePatternWellImage(): void;

  patternWell(): NSImageView;
  setPatternWell(patternWell: NSImageView): void;
  choosePatternButton(): NSButton;
  setChoosePatternButton(choosePatternButton: NSButton): void;
  patternTilButton(): NSPopUpButton;
  setPatternTilButton(patternTilButton: NSPopUpButton): void;
}

declare class MSColorPickerBackgroundView extends NSView {}

declare class MSColorStylePartInspectorViewController extends MSStylePartInspectorViewController {
  updateColorInActiveInspector(): void;
  previewCellAction(sender: any): IBAction;
  checkBoxAction(sender: any): IBAction;

  colorButton(): MSStylePartPreviewButton;
  setColorButton(colorButton: MSStylePartPreviewButton): void;
}

declare class MSCommand extends NSObject {
  static runWithArguments(block: MSCommandPreparation): any;
  run(): any;
}

declare class MSConstraintAction extends MSDocumentAction {
  actionKeyPath(): NSString;
  setActionKeyPath(actionKeyPath: NSString | string): void;
  validationKeyPath(): NSString;
  setValidationKeyPath(validationKeyPath: NSString | string): void;
}

declare class MSConstraintPinLeftAction extends MSConstraintAction {
  pinLeftAction(sender: any): IBAction;
}

declare class MSConstraintPinRightAction extends MSConstraintAction {
  pinRightAction(sender: any): IBAction;
}

declare class MSConstraintPinTopAction extends MSConstraintAction {
  pinTopAction(sender: any): IBAction;
}

declare class MSConstraintPinBottomAction extends MSConstraintAction {
  pinBottomAction(sender: any): IBAction;
}

declare class MSConstraintFixWidthAction extends MSConstraintAction {
  fixWidthAction(sender: any): IBAction;
}

declare class MSConstraintFixHeightAction extends MSConstraintAction {
  fixHeightAction(sender: any): IBAction;
}

declare class MSConstraintResetAction extends MSDocumentAction {
  resetConstraintAction(sender: any): IBAction;
}

declare class MSContentDrawView extends NSView implements IMSEventHandlerManagerDelegate, IMSTiledRendererHostView {
  setNeedsUpdateCursor(): void;
  scheduleRedraw(): void;
  redrawContentImmediately(): void;
  centerDocumentAndPlaceScrollOriginInTopLeft(): void;
  placeOriginInTopLeft(): void;
  currentPage(): MSPage;
  animateToZoom_scalingCenteredOnAbsoluteCoordinates(zoom: CGFloat, midPoint: NSPoint): void;
  animateToViewPort(viewPort: MSViewPort): void;
  zoomIn(): void;
  zoomOut(): void;
  zoomToActualSizeAnimated(animated: boolean): void;
  endZoomToolMode(): void;
  prepare(): void;
  refreshAfterSettingsChange(): void;
  renderOverlayInRect_context_pageOverlayRenderOptions(rect: NSRect, context: CGContextRef, pageOverlayRenderOptions: MSPageOverlayRenderOptions): void;
  centerLayersInCanvas(): void;
  centerSelectionInVisibleArea(): void;
  centerRect(rect: NSRect): void;
  centerRect_animated(rect: NSRect, animated: boolean): void;
  zoomToFitRect(rect: NSRect): void;
  viewPortForZoomToFitRect(rect: NSRect): MSViewPort;
  viewPortWithCenter_zoomValue(center: NSPoint, zoom: CGFloat): MSViewPort;
  selectToolbarItemWithIdentifier(identifier: NSString | string): void;
  visibleContentRect(): NSRect;
  scrollToScrollOrigin(scrollOrigin: NSPoint): void;
  displayPropertiesDidChange(): void;
  pageDidChange(page: MSPage): void;
  windowDidResize(note: NSNotification): void;
  pixelGridDidChange(): void;
  ignoreNextKeyDownEventUntilModifiersChange(): void;
  layerPositionPossiblyChanged(): void;
  convertPoint_toLayer(point: NSPoint, layer: MSLayer): NSPoint;
  convertPointFromPage(aPoint: NSPoint): NSPoint;
  convertSizeToPage(aSize: NSSize): NSSize;
  eventHandlerManager_didChangeCurrentHandler(manager: MSEventHandlerManager, newHandler: MSEventHandler): void;
  scheduleRedraw(): void;
  driver(): MSRenderingDriver;

  tiledRenderer(): MSTiledRenderer;
  setTiledRenderer(tiledRenderer: MSTiledRenderer): void;
  contentDrawViewParent(): MSContentDrawViewParent;
  setContentDrawViewParent(contentDrawViewParent: MSContentDrawViewParent): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  eventHandlerManager(): MSEventHandlerManager;
  setEventHandlerManager(eventHandlerManager: MSEventHandlerManager): void;
  viewPort(): MSViewPort;
  setViewPort(viewPort: MSViewPort): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  shouldHideOverlayControls(): boolean;
  setShouldHideOverlayControls(shouldHideOverlayControls: boolean): void;
  measurementLabelNumberFormatter(): NSNumberFormatter;
  setMeasurementLabelNumberFormatter(measurementLabelNumberFormatter: NSNumberFormatter): void;
  pendingMonitor(): MSRenderMonitor;
  setPendingMonitor(pendingMonitor: MSRenderMonitor): void;
  driver(): MSRenderingDriver;
  setDriver(driver: MSRenderingDriver): void;
  cacheManager(): MSCacheManager;
  setCacheManager(cacheManager: MSCacheManager): void;
  mouseTracker(): MSMouseTracker;
  setMouseTracker(mouseTracker: MSMouseTracker): void;
  didMouseDown(): boolean;
  setDidMouseDown(didMouseDown: boolean): void;
  handToolState(): MSHandToolState;
  setHandToolState(handToolState: MSHandToolState): void;
  needsUpdateCursor(): boolean;
  setNeedsUpdateCursor(needsUpdateCursor: boolean): void;
  zoomTool(): MSZoomTool;
  setZoomTool(zoomTool: MSZoomTool): void;
}

declare interface IMSContentDrawViewDelegate {
  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
}

declare enum MSHandToolState {
  MSHandToolStateInactive,
  MSHandToolStateActive,
  MSHandToolStateDragging,
}

declare class MSContentDrawViewController extends NSViewController implements IMSContentDrawViewDelegate {
  currentArtboardDidChange(): void;
  changeToPage(page: MSPage): void;
  prepareForDealloc(): void;

  contentDrawView(): MSContentDrawView;
  setContentDrawView(contentDrawView: MSContentDrawView): void;
  contentDrawViewParent(): MSContentDrawViewParent;
  setContentDrawViewParent(contentDrawViewParent: MSContentDrawViewParent): void;
  horizontalRuler(): MSRulerView;
  setHorizontalRuler(horizontalRuler: MSRulerView): void;
  verticalRuler(): MSRulerView;
  setVerticalRuler(verticalRuler: MSRulerView): void;
  rulerCornerView(): NSView;
  setRulerCornerView(rulerCornerView: NSView): void;
  rulerWidthConstraint(): NSLayoutConstraint;
  setRulerWidthConstraint(rulerWidthConstraint: NSLayoutConstraint): void;
  rulerHeightConstraint(): NSLayoutConstraint;
  setRulerHeightConstraint(rulerHeightConstraint: NSLayoutConstraint): void;
  flashController(): MSFlashController;
  setFlashController(flashController: MSFlashController): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
}

declare class MSContentDrawViewParent extends NSView {
  contentDrawView(): MSContentDrawView;
  setContentDrawView(contentDrawView: MSContentDrawView): void;
}

declare class MSConvertFlowToHotspotAction extends MSFlowBaseAction {
  convertFlowToHotspot(sender: any): IBAction;
}

declare class MSConvertSymbolOrDetachInstancesAction extends MSDocumentAction {
  detachSymbolInstances(sender: any): IBAction;
}

declare class MSConvertToOutlinesAction extends MSDocumentAction {
  convertToOutlines(sender: any): IBAction;
}

declare class MSCopySVGCodeAction extends MSDocumentAction {
  copySVG(sender: any): IBAction;
}

declare class MSCopyStyleAction extends MSDocumentAction {
  copyStyle(sender: any): IBAction;
}

declare class MSPasteStyleAction extends MSDocumentAction {
  pasteStyle(sender: any): IBAction;
}

declare class MSCopyCSSAttributesAction extends MSDocumentAction {
  copyCSSAttributes(sender: any): IBAction;
}

declare class MSCrashLogManager extends NSObject implements IMSActionObserver, IBITHockeyManagerDelegate, IBITCrashManagerDelegate {
  setEnvironmentValue_forKey(value: NSString | string, key: NSString | string): void;
  log(text: NSString | string): void;
  setup(): boolean;
  actionController_willBeginActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didFinishActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didInstantActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  userIDForHockeyManager_componentManager(hockeyManager: BITHockeyManager, componentManager: BITHockeyBaseManager): NSString;
  userNameForHockeyManager_componentManager(hockeyManager: BITHockeyManager, componentManager: BITHockeyBaseManager): NSString;
  userEmailForHockeyManager_componentManager(hockeyManager: BITHockeyManager, componentManager: BITHockeyBaseManager): NSString;
  crashManagerWillSendCrashReport(crashManager: BITCrashManager): void;
  crashManager_didFailWithError(crashManager: BITCrashManager, error: NSError): void;
  crashManagerDidFinishSendingCrashReport(crashManager: BITCrashManager): void;

  text(): NSString;
  setText(text: NSString | string): void;
}

declare class MSCreateDetachSymbolButtonCell extends MSHoverButtonCell {
  artboardPreviewImage(): NSImage;
  setArtboardPreviewImage(artboardPreviewImage: NSImage): void;
}

declare class MSCreateSharedStyleAction extends MSBaseSharedObjectAction {
  createSharedStyle(sender: any): IBAction;
}

declare class MSCreateSymbolAction extends MSDocumentAction {
  createSymbolAction(sender: any): IBAction;
}

declare class MSCreateSymbolNamingSheet extends CHSheetController {
  setSymbolPageName(symbolPageName: NSString | string): void;
  setSuggestedName(suggestedName: NSString | string): void;
  setShouldShowMoveCheckbox(showCheckbox: boolean): void;

  symbolNameField(): NSTextField;
  setSymbolNameField(symbolNameField: NSTextField): void;
  symbolPageField(): NSTextField;
  setSymbolPageField(symbolPageField: NSTextField): void;
  completionBlock(): MSCreateSymbolCompletionBlock;
  setCompletionBlock(completionBlock: MSCreateSymbolCompletionBlock): void;
}

declare class MSCursorButton extends NSButton {
  cursor(): NSCursor;
  setCursor(cursor: NSCursor): void;
}

declare class MSCurveModeAdjustAction extends MSDocumentAction {}

declare class MSCurveModeStraightAction extends MSCurveModeAdjustAction {}

declare class MSCurveModeMirroredAction extends MSCurveModeAdjustAction {}

declare class MSCurveModeDisconnectedAction extends MSCurveModeAdjustAction {}

declare class MSCurveModeAsymmetricAction extends MSCurveModeAdjustAction {}

declare class MSCurveModeTouchGroupAction extends MSTouchBarGroupAction {}

declare class MSDataAction extends MSDocumentAction implements IMSDataMenuProviderDelegate, INSMenuDelegate {
  dataMenuProvider_canChooseDataOfType(controller: MSDataMenuProvider, type: MSDataType): boolean;
  dataMenuProviderCanApplyMasterDataToInstances(controller: MSDataMenuProvider): boolean;
  dataMenuProviderCanRefreshData(controller: MSDataMenuProvider): boolean;
  dataMenuProviderSelectedLayersWithAppliedData(controller: MSDataMenuProvider): NSArray<any>;
  dataMenuProviderDataTypeForMenuBuilding(controller: MSDataMenuProvider): MSDataType;
  dataMenuProviderIsInspectorPopupMenu(provider: MSDataMenuProvider): boolean;
  dataMenuProvider_didChooseData(controller: MSDataMenuProvider, data: MSDataSupplier): void;
  dataMenuProviderRefreshData(controller: MSDataMenuProvider): void;
  dataMenuProviderRefreshMasterData(controller: MSDataMenuProvider): void;
  dataMenuProviderRemoveDataRecord(controller: MSDataMenuProvider): void;
  dataMenuProviderDataIdentifier(controller: MSDataMenuProvider): NSString;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare class MSDataMenuAction extends MSDocumentAction {}

declare class MSDataPreferenceItem extends NSObject {
  static preferenceItemForLocalData(localData: MSDataSupplier): MSDataPreferenceItem;

  data(): MSDataSupplier;
  setData(data: MSDataSupplier): void;
  name(): NSString;
  setName(name: NSString | string): void;
  preview(): NSImage;
  setPreview(preview: NSImage): void;
  secondaryTitle(): NSString;
  setSecondaryTitle(secondaryTitle: NSString | string): void;
  valid(): boolean;
  setValid(valid: boolean): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
  canRevealInFinder(): boolean;
  setCanRevealInFinder(canRevealInFinder: boolean): void;
  localData(): MSLocalDataSupplier;
  setLocalData(localData: MSLocalDataSupplier): void;
  pluginData(): MSPluginDataSupplier;
  setPluginData(pluginData: MSPluginDataSupplier): void;
  pluginBundleIcon(): NSImage;
  setPluginBundleIcon(pluginBundleIcon: NSImage): void;
  primaryTextFieldColor(): NSColor;
  setPrimaryTextFieldColor(primaryTextFieldColor: NSColor): void;
  secondaryTextFieldColor(): NSColor;
  setSecondaryTextFieldColor(secondaryTextFieldColor: NSColor): void;
  cellView(): MSDataTableCellView;
  setCellView(cellView: MSDataTableCellView): void;
}

declare class MSDataPreferencePane extends MSPreferencePane implements INSTableViewDelegate, INSTableViewDataSource {
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;

  tableView(): MSDataTableView;
  setTableView(tableView: MSDataTableView): void;
  dataArrayController(): NSArrayController;
  setDataArrayController(dataArrayController: NSArrayController): void;
  data(): NSArray<any>;
  setData(data: NSArray<any> | any[]): void;
  dataSupplierManager(): MSDataSupplierManager;
  setDataSupplierManager(dataSupplierManager: MSDataSupplierManager): void;
}

declare class MSDataPreview extends NSView {
  dataItem(): MSDataPreferenceItem;
  setDataItem(dataItem: MSDataPreferenceItem): void;
}

declare class MSDataTableCellView extends NSTableCellView {
  dataPreferenceItem(): MSDataPreferenceItem;
  setDataPreferenceItem(dataPreferenceItem: MSDataPreferenceItem): void;
}

declare class MSDataTableView extends BCKeyEventActionTableView {}

declare class MSDefaultStyleAction extends MSDocumentAction {
  setStyleAsDefault(sender: any): IBAction;
}

declare class MSDetachSharedStyleAction extends MSBaseSharedObjectAction {
  detachSharedStyle(sender: any): IBAction;
}

declare class MSDisabledButtonCell extends NSButtonCell {}

declare class MSDistributeAction extends MSDocumentAction {
  distributeAlongAxis(axis: BCAxis): void;
}

declare class MSDistributeHorizontallyAction extends MSDistributeAction {
  distributeHorizontally(sender: any): IBAction;
}

declare class MSDistributeVerticallyAction extends MSDistributeAction {
  distributeVertically(sender: any): IBAction;
}

declare class MSDistributeActions extends MSTouchBarGroupAction {}

declare class MSDocument extends NSDocument implements INSMenuDelegate, INSToolbarDelegate, INSWindowDelegate, IMSEventHandlerManagerDelegate, IMSDocumentDataDelegate, IMSMenuBuilderDelegate {
  actionClasses(): NSArray<any>;
  addLayerFromImageAtURL_toGroup_fitPixels_error(fileURL: NSURL, group: MSLayerGroup, fitPixels: boolean, outError: NSError): MSLayer;
  askForUserInput_initialValue(label: NSString | string, defaultString: NSString | string): NSString;
  askForUserInput_ofType_initialValue(label: NSString | string, type: MSModalInputTypes, defaultString: NSString | string): NSString;
  saveArtboardOrSlice_toFile(artboardOrSlice: any, filename: NSString | string): void;
  dataForRequest_ofType(request: MSExportRequest, extension: NSString | string): NSData;
  showMessage(message: NSString | string): void;
  pluginContext(): NSDictionary<any, any>;
  saveDocumentToURL_saveMode_context_callback(url: NSURL, saveMode: NSSaveOperationType, coscript: COScript, callback: MOJavaScriptObject | Function): void;
  contentDrawView(): MSContentDrawView;
  static currentDocument(): MSDocument;
  static windowForSheet(): NSWindow;
  window(): NSWindow;
  setCurrentArtboard(newArtboard: MSArtboardGroup): void;
  selectedLayers(): MSLayerArray;
  changeToImmutableDocumentData_selecting_onPage(documentData: MSImmutableDocumentData, selection: NSSet<any>, pageID: NSString | string): void;
  commitHistoryIfNecessary(sender: any): void;
  addLayer(layer: MSLayer): void;
  addLayer_changeName(layer: MSLayer, changeName: boolean): void;
  currentPage(): MSPage;
  validateMenuItem(item: NSMenuItem): boolean;
  toolbar(): NSToolbar;
  selectToolbarItemWithIdentifier(anIdentifier: NSString | string): void;
  createActions(): void;
  shouldCreateToolbar(): boolean;
  resetDocumentData(newData: MSDocumentData): void;
  deleteSymbolMasters(array: NSArray<any> | any[]): void;
  setCurrentPage(page: any): void;
  refreshSidebarWithMask(mask: BCSideBarRefreshType): void;
  updateFilterSettings(): void;
  reloadInspector(): void;
  reloadView(): void;
  refreshWindowBadge(): void;
  layerStyles(): MSSharedStyleContainer;
  pages(): NSArray<any>;
  isLayerListVisible(): boolean;
  isInspectorVisible(): boolean;
  toggleClickThrough(sender: any): IBAction;
  exportSliceLayers(sliceLayers: NSArray<any> | any[]): void;
  allExportableLayers(): NSArray<any>;
  currentArtboardDidChange(): void;
  layerSelectionMightHaveChanged(): void;
  determineCurrentArtboard(): void;
  addBlankPage(): MSPage;
  removePage(page: MSPage): void;
  hasArtboards(): boolean;
  currentHorizontalRulerData(): MSRulerData;
  currentVerticalRulerData(): MSRulerData;
  isRulersVisible(): boolean;
  layerPositionPossiblyChanged(): void;
  zoomValueDidChange(): void;
  debugCountObjects(sender: any): IBAction;
  shouldDrawSelectionForLayer(layer: MSLayer): boolean;
  temporarilyDisableSelectionHidingDuringBlock(block: BCVoidBlock): void;
  isShowingMeasurements(): boolean;
  visitArtboardForInstance(instance: MSSymbolInstance): void;
  openLibrariesForForeignObjects(objects: NSArray<any> | any[]): void;
  restoreViewportAfterArtboardEdit(artboard: MSArtboardGroup): void;
  removeViewportForArtboard(artboard: MSArtboardGroup): void;
  canRestoreViewportAfterArtboardEdit(artboard: MSArtboardGroup): boolean;
  visitSymbolMasterWithID(symbolID: NSString | string): void;
  reloadTouchBars(): void;
  localObjectForObjectReference(ref: MSShareableObjectReference): MSShareableObject;
  symbolReferenceForRecipe(recipe: MSSymbolMasterReferenceDescriptor): MSSymbolMasterReference;
  showNonDefaultColorSpaceWarningIfApplicable(): void;
  returnToDefaultFirstResponder(): void;
  installedFontsDidChange(): void;
  historyMaker_didApplyHistoryUpdate(maker: MSHistoryMaker, update: MSHistoryUpdate): void;
  historyMakerDidRevertHistory(maker: MSHistoryMaker): void;
  historyMakerDidProgressHistory(maker: MSHistoryMaker): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSToolbarItemIdentifier, flag: boolean): NSToolbarItem;
  toolbarDefaultItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarAllowedItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarSelectableItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarWillAddItem(notification: NSNotification): void;
  toolbarDidRemoveItem(notification: NSNotification): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  eventHandlerManager_didChangeCurrentHandler(manager: MSEventHandlerManager, newHandler: MSEventHandler): void;
  documentData_didChangeToPage(data: MSDocumentData, newPage: MSPage): void;
  documentData_sharedObjectDidChange(data: MSDocumentData, object: any): void;
  documentData_temporarilyHideSelectionForLayers(data: MSDocumentData, layers: NSArray<any> | any[]): void;
  documentDataImmediatelyShowSelectionForAllLayers(data: MSDocumentData): void;
  documentDidChange(document: MSDocumentData): void;
  documentData_storeMetadata_forKey_object(data: MSDocumentData, metadata: any, key: NSString | string, object: MSModelObject): void;
  documentData_metadataForKey_object(data: MSDocumentData, key: NSString | string, object: MSModelObject): any;
  layerTreeLayoutDidChange(): void;
  refreshOverlayInRect(rect: NSRect): void;
  refreshOverlay(): void;
  layerSelectionMightHaveChanged(): void;
  determineCurrentArtboard(): void;
  visibleCanvasRectForDocumentData(data: MSDocumentData): CGRect;
  previewColorSpaceForItem(item: NSMenuItem): NSColorSpace;

  cloudShare(): SCKShare;
  setCloudShare(cloudShare: SCKShare): void;
  cloudName(): NSString;
  setCloudName(cloudName: NSString | string): void;
  documentWindow(): NSWindow;
  setDocumentWindow(documentWindow: NSWindow): void;
  messageView(): NSView;
  setMessageView(messageView: NSView): void;
  splitViewController(): MSMainSplitViewController;
  setSplitViewController(splitViewController: MSMainSplitViewController): void;
  toolbarConstructor(): MSToolbarConstructor;
  setToolbarConstructor(toolbarConstructor: MSToolbarConstructor): void;
  actionsController(): MSActionController;
  setActionsController(actionsController: MSActionController): void;
  badgeController(): MSBadgeController;
  setBadgeController(badgeController: MSBadgeController): void;
  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
  immutableDocumentData(): MSImmutableDocumentData;
  setImmutableDocumentData(immutableDocumentData: MSImmutableDocumentData): void;
  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  canvasColorSpace(): NSColorSpace;
  setCanvasColorSpace(canvasColorSpace: NSColorSpace): void;
  eventHandlerManager(): MSEventHandlerManager;
  setEventHandlerManager(eventHandlerManager: MSEventHandlerManager): void;
  cacheManager(): MSCacheManager;
  setCacheManager(cacheManager: MSCacheManager): void;
  historyMaker(): MSHistoryMaker;
  setHistoryMaker(historyMaker: MSHistoryMaker): void;
  inspectorController(): MSInspectorController;
  setInspectorController(inspectorController: MSInspectorController): void;
  exportableLayerSelection(): NSArray<any>;
  setExportableLayerSelection(exportableLayerSelection: NSArray<any> | any[]): void;
  sidebarController(): BCSideBarViewController;
  setSidebarController(sidebarController: BCSideBarViewController): void;
  currentContentViewController(): MSContentDrawViewController;
  setCurrentContentViewController(currentContentViewController: MSContentDrawViewController): void;
  nextReadFromURLIsReload(): boolean;
  setNextReadFromURLIsReload(nextReadFromURLIsReload: boolean): void;
  hasOpenedImageFile(): boolean;
  setHasOpenedImageFile(hasOpenedImageFile: boolean): void;
  UIMetadata(): NSDictionary<any, any>;
  setUIMetadata(UIMetadata: NSDictionary<any, any> | {[key: string]: any}): void;
  scrollOrigin(): NSPoint;
  setScrollOrigin(scrollOrigin: NSPoint): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
  colorSpaceMismatchWarning(): any;
  setColorSpaceMismatchWarning(colorSpaceMismatchWarning: any): void;
  editingLibraryWarning(): any;
  setEditingLibraryWarning(editingLibraryWarning: any): void;
  isCurrent(): boolean;
  setIsCurrent(isCurrent: boolean): void;
}

declare class MSDocumentAction extends MSAction {
  touchBarItem(): NSTouchBarItem;
  makeTouchBarItem(): NSTouchBarItem;
  makeTouchBarItemButton(): NSButton;
  touchBarItemButtonShouldShowState(): boolean;
  refreshTouchBarItem(): void;
  showTouchBarPopover(sender: any): void;
  isTouchBarItemSelected(): boolean;
  shouldUseImageForTouchBarItem(): boolean;
  touchBarImage(): NSImage;
  touchBarItemSizing(): MSTouchBarItemSizing;
  initWithDocument<T extends MSDocumentAction>(doc: MSDocument): T;
  selectedLayers(): MSLayerArray;
  isInNormalHandler(): boolean;
  currentHandler(): MSEventHandler;
  toggleHandlerClass(handlerClass: any): MSEventHandler;
  setCurrentHandlerClass(handlerClass: any): MSEventHandler;
  switchToNormalHandler(): void;
  currentPage(): MSPage;
  contentDrawView(): MSContentDrawView;
  refreshOverlay(): void;
  repopulateMenu(menu: NSMenu): void;

  document(): MSDocument;
  setDocument(document: MSDocument): void;
  historyMomentTitle(): NSString;
  setHistoryMomentTitle(historyMomentTitle: NSString | string): void;
  cachedTouchedBarItem(): NSTouchBarItem;
  setCachedTouchedBarItem(cachedTouchedBarItem: NSTouchBarItem): void;
}

declare enum MSTouchBarItemSizing {
  MSTouchBarItemSizingDefault = 0,
  MSTouchBarItemSizingNarrow = 1,
  MSTouchBarItemSizingSquare = 2,
}

declare class MSDocumentController extends NSDocumentController {
  openDocumentWithContentsOfURL_display_context_callback(url: NSURL, displayDocument: boolean, coscript: COScript, callback: MOJavaScriptObject | Function): void;
}

declare class MSDocumentImporter extends NSObject {
  static importFromURL_inPage_importer(url: NSURL, page: MSPage, importer: any): void;

  group(): MSLayerGroup;
  setGroup(group: MSLayerGroup): void;
  view(): MSContentDrawView;
  setView(view: MSContentDrawView): void;
}

declare class MSDocumentWindow extends NSWindow {
  titleBarBadge(): BCWindowBadge;
  setTitleBarBadge(titleBarBadge: BCWindowBadge): void;
}

declare class MSDragHandleGestureRecognizer extends MSDragToMoveOrCopyGestureRecognizer {
  originalHandleLocation(): NSPoint;
  setOriginalHandleLocation(originalHandleLocation: NSPoint): void;
  lockingConstraint(): MSAlignmentEngineConstraint;
  setLockingConstraint(lockingConstraint: MSAlignmentEngineConstraint): void;
  effectiveLockingConstraint(): MSAlignmentEngineConstraint;
  setEffectiveLockingConstraint(effectiveLockingConstraint: MSAlignmentEngineConstraint): void;
}

declare class MSDragRectEventHandler extends MSEventHandler {
  performActionWithRect_fromLayer_constrainProportions(rect: NSRect, layer: MSLayer | null, constrainProportions: boolean): MSLayer;
  drawingRectForInsertionRect(insertionRect: NSRect): NSRect;
  drawRectPreview(): void;

  insertionRect(): NSRect;
  setInsertionRect(insertionRect: NSRect): void;
  allowsInsertLayerFromExistingLayer(): boolean;
  setAllowsInsertLayerFromExistingLayer(allowsInsertLayerFromExistingLayer: boolean): void;
  cursorForInsertingFromExisting(): NSCursor;
  setCursorForInsertingFromExisting(cursorForInsertingFromExisting: NSCursor): void;
  layerSelectionOptionsForInsertingFromExistingLayer(): MSLayerSelectionOptions;
  setLayerSelectionOptionsForInsertingFromExistingLayer(layerSelectionOptionsForInsertingFromExistingLayer: MSLayerSelectionOptions): void;
  dragGestureRecognizer(): MSDragGestureRecognizer;
  setDragGestureRecognizer(dragGestureRecognizer: MSDragGestureRecognizer): void;
  snapper(): MSAlignmentEngine;
  setSnapper(snapper: MSAlignmentEngine): void;
  snappingResult(): MSAlignmentEngineResult;
  setSnappingResult(snappingResult: MSAlignmentEngineResult): void;
  insertionCursor(): NSCursor;
  setInsertionCursor(insertionCursor: NSCursor): void;
}

declare class MSDragRectGestureRecognizer extends MSDragGestureRecognizer {
  constrainProportions(): boolean;
  setConstrainProportions(constrainProportions: boolean): void;
}

declare class MSDragSegmentGestureRecognizer extends MSDragGestureRecognizer {
  offset(): CGFloat;
  setOffset(offset: CGFloat): void;
}

declare class MSDragToMoveOrCopyGestureRecognizer extends MSDragGestureRecognizer {
  translationInLayer(layer: MSLayer | null): CGVector;
  locationInLayer(layer: MSLayer | null): NSPoint;

  shouldCopyDraggedItems(): boolean;
  setShouldCopyDraggedItems(shouldCopyDraggedItems: boolean): void;
  shouldSnap(): boolean;
  setShouldSnap(shouldSnap: boolean): void;
  alignModifierMask(): NSEventModifierFlags;
  setAlignModifierMask(alignModifierMask: NSEventModifierFlags): void;
  shouldInterpretAlignment(): boolean;
  setShouldInterpretAlignment(shouldInterpretAlignment: boolean): void;
  align(): boolean;
  setAlign(align: boolean): void;
  alignmentAxis(): BCAxis;
  setAlignmentAxis(alignmentAxis: BCAxis): void;
  draggedItem(): any;
  setDraggedItem(draggedItem: any): void;
  originalDraggedItems(): NSArray<any>;
  setOriginalDraggedItems(originalDraggedItems: NSArray<any> | any[]): void;
  originalDragPositions(): NSArray<any>;
  setOriginalDragPositions(originalDragPositions: NSArray<any> | any[]): void;
  copiedItems(): NSArray<any>;
  setCopiedItems(copiedItems: NSArray<any> | any[]): void;
}

declare class MSDragLayerGestureRecognizer extends MSDragToMoveOrCopyGestureRecognizer {}

declare class MSDragToSelectGestureRecognizer extends MSDragGestureRecognizer {
  selectionRect(): NSRect;

  extendSelection(): boolean;
  setExtendSelection(extendSelection: boolean): void;
  selectionExtensionMask(): NSEventModifierFlags;
  setSelectionExtensionMask(selectionExtensionMask: NSEventModifierFlags): void;
  initialSelection(): NSArray<any>;
  setInitialSelection(initialSelection: NSArray<any> | any[]): void;
}

declare class MSDrawingInfo extends NSObject {
  static sharedController(): MSDrawingInfo;

  isDragging(): boolean;
  setIsDragging(isDragging: boolean): void;
}

declare class MSDropdownButtonCell extends MSSmallButtonCell {
  imageRightEdgeInset(): CGFloat;
  setImageRightEdgeInset(imageRightEdgeInset: CGFloat): void;
}

declare class MSDuplicateOffsetTracker extends NSObject {
  reset(): void;
  resetToInitialOffset(): void;
  increment(): void;
  offset(): CGFloat;
}

declare class MSEditAction extends MSDocumentAction {
  static editableLayerTraits(): MSTraits;
  edit(sender: any): IBAction;
}

declare class MSEditArtboardPresetViewController extends NSViewController {
  preset(): MSArtboardPreset;
  setPreset(preset: MSArtboardPreset): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSEditArtboardPresetViewControllerDelegate {
  editArtboardPresetViewController_savePreset(sender: MSEditArtboardPresetViewController, preset: MSArtboardPreset): void;
}

declare class MSEditColorSpaceAction extends MSDocumentAction {
  editDocumentColorSpace(sender: any): IBAction;
}

declare class MSChangeColorSpaceAction extends MSDocumentAction {}

declare class MSAssignColorSpaceAction extends MSChangeColorSpaceAction {
  assignDocumentColorSpace(sender: any): IBAction;
}

declare class MSConvertColorSpaceAction extends MSChangeColorSpaceAction {
  convertDocumentColorSpace(sender: any): IBAction;
}

declare class MSEditColorSpaceSheetController extends CHSheetController {
  pickColorSpace(sender: any): IBAction;
  pickChangeLogic(sender: any): IBAction;
  viewDocumentation(sender: any): IBAction;

  assignButton(): NSButton;
  setAssignButton(assignButton: NSButton): void;
  assignDescriptionTextField(): NSTextField;
  setAssignDescriptionTextField(assignDescriptionTextField: NSTextField): void;
  colorSpacePopUpButton(): NSPopUpButton;
  setColorSpacePopUpButton(colorSpacePopUpButton: NSPopUpButton): void;
  descriptionTextField(): NSTextField;
  setDescriptionTextField(descriptionTextField: NSTextField): void;
  confirmButton(): NSButton;
  setConfirmButton(confirmButton: NSButton): void;
  convertButton(): NSButton;
  setConvertButton(convertButton: NSButton): void;
  convertDescriptionTextField(): NSTextField;
  setConvertDescriptionTextField(convertDescriptionTextField: NSTextField): void;
}

declare class MSEditShapeInspectorViewController extends NSViewController implements IMSInspectorChildController {
  refresh(): void;
  refreshClosePathButton(): void;
  prepareForDisplay(): void;
  selectionDidChangeTo(layers: NSArray<any> | any[]): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;

  pathController(): MSPathController;
  setPathController(pathController: MSPathController): void;
  shapeEventHandler(): MSShapeEventHandler;
  setShapeEventHandler(shapeEventHandler: MSShapeEventHandler): void;
  isMakingRectSelection(): boolean;
  setIsMakingRectSelection(isMakingRectSelection: boolean): void;
}

declare class MSEventHandler extends NSResponder implements INSDraggingDestination, INSTouchBarDelegate {
  static eventHandlerWithManager(aManager: MSEventHandlerManager): any;
  initWithManager<T extends MSEventHandler>(aManager: MSEventHandlerManager): T;
  currentGroup(): MSLayerGroup;
  layersToCopy(): MSLayerArray;
  parentForInsertingLayer(layer: MSLayer): MSLayerGroup;
  alignPointToGrid(point: NSPoint): NSPoint;
  mouseDownEvent(event: NSEvent): boolean;
  mouseDraggedEvent(event: NSEvent): boolean;
  mouseUpEvent(event: NSEvent): boolean;
  mouseMovedEvent(event: NSEvent): boolean;
  rightMouseDown(event: NSEvent): void;
  absoluteMouseDown_clickCount_flags(mouse: NSPoint, c: NSUInteger, flags: NSUInteger): boolean;
  absoluteMouseDragged_flags(mouse: NSPoint, flags: NSUInteger): boolean;
  absoluteMouseUp_flags(mouse: NSPoint, flags: NSUInteger): boolean;
  absoluteMouseMoved_flags(mouse: NSPoint, flags: NSEventModifierFlags): boolean;
  mouseDraggedOutsideViewShouldMoveScrollOrigin(): boolean;
  zoomValue(): CGFloat;
  viewDidScroll(sender: any): void;
  trackMouse(tracker: MSMouseTracker): void;
  addGestureRecognizer(recognizer: MSGestureRecognizer): void;
  updateCursor(): boolean;
  setNeedsUpdateCursor(): void;
  cancelOperation(sender: any): void;
  setMeasurementTextWithSize(size: NSSize): void;
  setMeasurementTextWithDegrees(degrees: NSInteger): void;
  addOverlayRenderer(renderer: MSOverlayRenderer): void;
  prepareGraphicsStateForGroup_drawingBlock(group: MSLayerGroup, block: BCVoidBlock): void;
  drawMeasurementLabel(): void;
  drawDragSelection(): void;
  handlerWillLoseFocus(): void;
  handlerDidLoseFocus(): void;
  selectAll(sender: any): IBAction;
  returnToDefaultHandler(): void;
  returnToDefaultHandlerByClickingOutside(): void;
  selectToolbarItemWithIdentifier(identifier: NSString | string): void;
  menuForEvent(theEvent: NSEvent): NSMenu;
  writeLayers_toPasteboard(layers: MSLayerArray, pb: NSPasteboard): void;
  duplicateSelectedLayersWithOffset(offset: CGVector): NSArray<any>;
  contentDrawView(): MSContentDrawView;
  currentPage(): MSPage;
  document(): MSDocument;
  refreshOverlay(): void;
  cut(sender: any): IBAction;
  copy(sender: any): IBAction;
  paste(sender: any): IBAction;
  pasteWithStyle(sender: any): IBAction;
  pasteOverSelection(sender: any): IBAction;
  pasteHere(sender: any): IBAction;
  duplicate(sender: any): IBAction;
  delete(sender: any): IBAction;
  layerAtPoint_modifierFlags(mouse: NSPoint, flags: NSEventModifierFlags): MSLayer;
  hitTestingOptions(): MSLayerSelectionOptions;
  deleteKeyIsPressed(c: unichar): boolean;
  enterKeyIsPressed(c: unichar): boolean;
  escapeKeyIsPressed(c: unichar): boolean;
  arrowKeyIsPressed(c: unichar): boolean;
  drawHandles(): void;
  toolbarIdentifier(): NSString;
  changeColor(sender: any): void;
  selectedLayers(): MSLayerArray;
  selectLayer_extendSelection(layer: MSLayer, extend: boolean): void;
  imageName(): NSString;
  willMoveThroughHistory(note: NSNotification): void;
  didMoveThroughHistory(note: NSNotification): void;
  commitPendingEdits(): void;
  reloadFollowingBackgroundChangesToDocument(): void;
  zoomToSelection(): void;
  zoomToArtboard(): void;
  selectedRect(): NSRect;
  centerPointForZooming(): NSPoint;
  draggingEntered(sender: any): NSDragOperation;
  draggingExited(sender: any): void;
  prepareForDragOperation(sender: any): boolean;
  draggingUpdated(sender: any): NSDragOperation;
  performDragOperation(sender: any): boolean;
  zoomValueWillChangeTo(zoomValue: CGFloat): void;
  zoomValueDidChange(): void;
  layerListSelectionDidChange(selection: NSArray<any> | any[]): void;
  layerRulerOriginChanged(): void;
  currentPageDidChange(): void;
  allowsSwitchToInsertAction(): boolean;
  handlesHandToolItself(): boolean;
  insertTab(sender: any): void;
  insertBacktab(sender: any): void;
  mouseExited(): void;
  mayShowResizingInspectorView(): boolean;
  editLayer(layer: MSLayer): void;
  willResignFirstResponder(): void;
  layerPositionPossiblyChanged(): void;
  configureInspector(inspector: MSInspectorController): void;
  inspectorViewControllersForLayers_standardControllers(layers: NSArray<any> | any[], standardInspectors: MSStandardInspectorViewControllers): NSArray<any>;
  inspectorLocation(): MSInpectorLocation;
  inspectorShouldShowPositions(): boolean;
  focusOnMainWindow(): void;
  canDuplicate(): boolean;
  shouldFitToPixelBounds(): boolean;
  nudgeDistanceForFlags(flags: NSEventModifierFlags): CGFloat;
  touchBarWithIdentifiers(identifiers: NSArray<any> | any[]): NSTouchBar;
  refreshTouchBarItemWithIdentifier(identifier: NSString | string): void;
  documentWindow(): MSDocumentWindow;
  draggingEntered(sender: any): NSDragOperation;
  draggingUpdated(sender: any): NSDragOperation;
  draggingExited(sender: any | null): void;
  prepareForDragOperation(sender: any): boolean;
  performDragOperation(sender: any): boolean;
  concludeDragOperation(sender: any | null): void;
  draggingEnded(sender: any): void;
  wantsPeriodicDraggingUpdates(): boolean;
  updateDraggingItemsForDrag(sender: any | null): void;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;

  manager(): MSEventHandlerManager;
  setManager(manager: MSEventHandlerManager): void;
  offsetTracker(): MSDuplicateOffsetTracker;
  setOffsetTracker(offsetTracker: MSDuplicateOffsetTracker): void;
  pressedKeys(): NSString;
  setPressedKeys(pressedKeys: NSString | string): void;
  handlesHistoryCoalescing(): boolean;
  setHandlesHistoryCoalescing(handlesHistoryCoalescing: boolean): void;
  shouldExitOnContentViewResize(): boolean;
  setShouldExitOnContentViewResize(shouldExitOnContentViewResize: boolean): void;
  undoManager(): NSUndoManager;
  setUndoManager(undoManager: NSUndoManager): void;
  applicableActionItemIdentifier(): NSString;
  setApplicableActionItemIdentifier(applicableActionItemIdentifier: NSString | string): void;
  gestureRecognizers(): NSArray<any>;
  setGestureRecognizers(gestureRecognizers: NSArray<any> | any[]): void;
  cursor(): NSCursor;
  setCursor(cursor: NSCursor): void;
  measurementText(): NSString;
  setMeasurementText(measurementText: NSString | string): void;
  overlayRenderers(): NSArray<any>;
  setOverlayRenderers(overlayRenderers: NSArray<any> | any[]): void;
  selectionRect(): NSRect;
  setSelectionRect(selectionRect: NSRect): void;
  wantsStandardSelectionControls(): boolean;
  setWantsStandardSelectionControls(wantsStandardSelectionControls: boolean): void;
  wantsLayerHighlight(): boolean;
  setWantsLayerHighlight(wantsLayerHighlight: boolean): void;
}

declare enum MSUnicodeAdditions {
  MSUnicodeEscapeKey = 27,
  MSUnicodeFNLeftKey = 63273,
  MSUnicodeFNRightKey = 63275,
}

declare enum MSInpectorLocation {
  MSInspectorLocationNone,
  MSInspectorLocationTakeOverEntireInspector,
  MSInspectorLocationAboveNormalInspector,
}

declare class MSEventHandlerAction extends MSDocumentAction {
  eventHandlerClass(): any;
}

declare class MSEventHandlerManager extends NSObject {
  initWithDelegate<T extends MSEventHandlerManager>(delegate: any): T;
  setCurrentHandler_force(handler: MSEventHandler | null, force: boolean): void;
  handlerForClass(aClass: any): MSEventHandler;
  switchToEventHandlerClass(handlerClass: any): MSEventHandler;
  toggleHandlerClass(handlerClass: any): MSEventHandler;
  drawInRect_context(dirtyRect: NSRect, context: MSRenderingContext): void;
  sendMouseDownEvent(event: NSEvent): void;
  sendMouseDraggedEvent(event: NSEvent): void;
  sendMouseUpEvent(event: NSEvent): void;
  sendMouseMovedEvent(event: NSEvent): void;
  recordEvent(event: NSEvent): void;

  document(): MSDocument;
  setDocument(document: MSDocument): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  currentHandler(): MSEventHandler;
  setCurrentHandler(currentHandler: MSEventHandler): void;
  normalHandler(): MSNormalEventHandler;
  setNormalHandler(normalHandler: MSNormalEventHandler): void;
  lastMouseDownClickCount(): NSInteger;
  setLastMouseDownClickCount(lastMouseDownClickCount: NSInteger): void;
  lastEventType(): MSEventType;
  setLastEventType(lastEventType: MSEventType): void;
}

declare interface IMSEventHandlerManagerDelegate {
  eventHandlerManager_didChangeCurrentHandler(manager: MSEventHandlerManager, newHandler: MSEventHandler): void;
}

declare enum MSEventType {
  MSEventTypeUndefined = 0,
  MSEventTypeMouse = 1,
}

declare class MSExpandedStateSavingOutlineView extends NSOutlineView {
  expandedStateAutosaveName(): NSString;
  setExpandedStateAutosaveName(expandedStateAutosaveName: NSString | string): void;
}

declare class MSExportAction extends MSDocumentAction {
  export(sender: any): IBAction;
}

declare class MSExportSelectionWithExportFormatsAction extends MSDocumentAction {
  exportSelection(sender: any): IBAction;
}

declare class MSExportFormatNamingTextField extends NSTextField {
  static sharedFieldEditor(): NSTextView;

  exportFormats(): NSArray<any>;
  setExportFormats(exportFormats: NSArray<any> | any[]): void;
}

declare class MSExportFormatNamingTextFieldCell extends NSTextFieldCell {}

declare class MSExportFormatPopUpButtonCell extends NSPopUpButtonCell {}

declare class MSExportFormatViewController extends NSViewController {
  prepare(): void;
  commitScaleFieldEditsWithCompletionBlock(block: dispatch_block_t): void;
  removeExportFormat(sender: any): IBAction;
  formatPopupAction(sender: any): IBAction;
  scaleFieldAction(sender: any): IBAction;

  formatPopup(): NSPopUpButton;
  setFormatPopup(formatPopup: NSPopUpButton): void;
  removeSizeButton(): NSButton;
  setRemoveSizeButton(removeSizeButton: NSButton): void;
  sizeView(): NSView;
  setSizeView(sizeView: NSView): void;
  suffixTextField(): MSExportFormatNamingTextField;
  setSuffixTextField(suffixTextField: MSExportFormatNamingTextField): void;
  exportFormats(): NSArray<any>;
  setExportFormats(exportFormats: NSArray<any> | any[]): void;
  scaleField(): NSTextField;
  setScaleField(scaleField: NSTextField): void;
  removeButtonHidden(): boolean;
  setRemoveButtonHidden(removeButtonHidden: boolean): void;
}

declare class MSExportInspectorViewController extends MSStylePartInspectorViewController {
  addExportFormat(sender: any): IBAction;
  createSliceAction(sender: any): IBAction;
  showExportPresetMenu(sender: any): IBAction;
  addExportPreset(sender: any): IBAction;
  applyExportPreset(sender: any): IBAction;
  editExportPresets(sender: any): IBAction;

  layers(): MSLayerArray;
  setLayers(layers: MSLayerArray): void;
  bottomLabelView(): NSView;
  setBottomLabelView(bottomLabelView: NSView): void;
  exportFormatLabelTextField(): NSTextField;
  setExportFormatLabelTextField(exportFormatLabelTextField: NSTextField): void;
  headerLabel(): NSTextField;
  setHeaderLabel(headerLabel: NSTextField): void;
}

declare class MSExportManager extends NSObject {
  exportedDataForRequest(exportRequest: MSExportRequest): NSData;
  exportFileForRequest_toFileURL(exportRequest: MSExportRequest, fileURL: NSURL): void;
  exportFilesForRequests(exportRequests: NSArray<any> | any[]): void;

  colorSpace(): NSColorSpace;
  setColorSpace(colorSpace: NSColorSpace): void;
  sliceCompletionBlock(): MSExportManagerSliceCompletionBlock;
  setSliceCompletionBlock(sliceCompletionBlock: MSExportManagerSliceCompletionBlock): void;
}

declare class MSExportPDFBookAction extends MSDocumentAction {
  exportPDFBook(sender: any): IBAction;
}

declare class MSExportPresetFormatViewController extends MSExportFormatViewController {}

declare class MSExportPresetsPreferencePane extends MSPreferencePane implements INSTableViewDataSource, INSTableViewDelegate {
  editExportPreset(preset: MSExportPreset): void;
  addExportPreset(sender: any): IBAction;
  removeExportPreset(sender: any): IBAction;
  pickDefaultExportPreset(sender: any): IBAction;
  restoreDefaultExportPresets(sender: any): IBAction;
  addExportFormat(sender: any): IBAction;
  removeExportFormatFromPreset(sender: any): IBAction;
  commitExportPresetName(sender: any): IBAction;
  static localizedNewExportPresetName(): NSString;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;

  addButton(): NSButton;
  setAddButton(addButton: NSButton): void;
  addFormatButton(): NSButton;
  setAddFormatButton(addFormatButton: NSButton): void;
  exportFormatEditorView(): NSView;
  setExportFormatEditorView(exportFormatEditorView: NSView): void;
  exportFormatFooterView(): NSView;
  setExportFormatFooterView(exportFormatFooterView: NSView): void;
  exportFormatFooterBottomConstraint(): NSLayoutConstraint;
  setExportFormatFooterBottomConstraint(exportFormatFooterBottomConstraint: NSLayoutConstraint): void;
  exportFormatsView(): NSStackView;
  setExportFormatsView(exportFormatsView: NSStackView): void;
  exportFormatsViewController(): MSExportFormatViewController;
  setExportFormatsViewController(exportFormatsViewController: MSExportFormatViewController): void;
  noPresetsPlaceholderView(): NSView;
  setNoPresetsPlaceholderView(noPresetsPlaceholderView: NSView): void;
  presetNameTextField(): NSTextField;
  setPresetNameTextField(presetNameTextField: NSTextField): void;
  removeButton(): NSButton;
  setRemoveButton(removeButton: NSButton): void;
  tableView(): NSTableView;
  setTableView(tableView: NSTableView): void;
  presets(): NSArray<any>;
  setPresets(presets: NSArray<any> | any[]): void;
}

declare class MSExportPresetTableCellView extends NSTableCellView {
  defaultPresetButton(): NSButton;
  setDefaultPresetButton(defaultPresetButton: NSButton): void;
}

declare class MSExportPreviewHeaderInspectorItem extends MSInspectorItem {
  collapsed(): boolean;
  setCollapsed(collapsed: boolean): void;
  hideSeparator(): boolean;
  setHideSeparator(hideSeparator: boolean): void;
}

declare class MSExportPreviewImagesInspectorItem extends MSInspectorItem {}

declare class MSExportPreviewInspectorSection extends MSBaseInspectorSection {}

declare class MSExportPreviewOperation extends NSOperation {
  initWithAncestry<T extends MSExportPreviewOperation>(ancestry: MSImmutableLayerAncestry): T;
  static sharedPreviewRenderQueue(): NSOperationQueue;

  previewViewModel(): MSExportPreviewViewModel;
  setPreviewViewModel(previewViewModel: MSExportPreviewViewModel): void;
}

declare class MSExportPreviewView extends NSView implements INSDraggingSource, INSPasteboardWriting {
  initWithViewModel<T extends MSExportPreviewView>(viewModel: MSExportPreviewViewModel): T;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;

  viewModel(): MSExportPreviewViewModel;
  setViewModel(viewModel: MSExportPreviewViewModel): void;
}

declare class MSExportPreviewViewModel extends NSObject {
  initWithPreviewImage_cachedExportRequest_ancestry<T extends MSExportPreviewViewModel>(previewImage: NSImage, cachedExportRequest: MSExportRequest, ancestry: MSImmutableLayerAncestry): T;
  imageDataInFormat(fileFormat: NSString | string): NSData;

  previewImage(): NSImage;
  setPreviewImage(previewImage: NSImage): void;
  cachedExportRequest(): MSExportRequest;
  setCachedExportRequest(cachedExportRequest: MSExportRequest): void;
  layerName(): NSString;
  setLayerName(layerName: NSString | string): void;
  defaultExportFormat(): NSString;
  setDefaultExportFormat(defaultExportFormat: NSString | string): void;
  isVectorFormat(): boolean;
  setIsVectorFormat(isVectorFormat: boolean): void;
  previewFrame(): NSRect;
  setPreviewFrame(previewFrame: NSRect): void;
}

declare class MSExportSelectedInspectorItem extends MSExportSelectedOrResizeInspectorItem {}

declare class MSExportSelectedOrResizeInspectorItem extends MSInspectorItem {
  sizeToFitButton(): NSButton;
  setSizeToFitButton(sizeToFitButton: NSButton): void;
  exportButton(): NSButton;
  setExportButton(exportButton: NSButton): void;
}

declare class MSExportSheet extends CHSheetController {
  includeAllCheckboxAction(sender: any): IBAction;
  collectionView_newItemForRepresentedObject(collectionView: NSCollectionView, object: any): NSCollectionViewItem;
  validateIncludeAllSlicesCheckBox(): void;
  isItemSelectedForExport(item: any): boolean;
  toggleItemSelectedForExportState(item: any): void;

  collectionView(): NSCollectionView;
  setCollectionView(collectionView: NSCollectionView): void;
  selectedSlices(): NSMutableArray<any>;
  setSelectedSlices(selectedSlices: NSMutableArray<any> | any[]): void;
}

declare class MSExportSheetItem extends NSCollectionViewItem {
  previewContainer(): NSView;
  setPreviewContainer(previewContainer: NSView): void;
  checkBox(): NSButton;
  setCheckBox(checkBox: NSButton): void;
  warningView(): NSImageView;
  setWarningView(warningView: NSImageView): void;
  exportSheet(): MSExportSheet;
  setExportSheet(exportSheet: MSExportSheet): void;
  showWarningLabel(): boolean;
  setShowWarningLabel(showWarningLabel: boolean): void;
  isExportable(): boolean;
  setIsExportable(isExportable: boolean): void;
}

declare class MSExportStackView extends MSStackView {}

declare class MSExportableLayerInspectorViewController extends CHViewController implements IMSInspectorChildController, IMSSliceLayerWatcher, IMSColorInspectorDelegate, IBCPopoverDelegate {
  selectionDidChangeTo(newLayers: NSArray<any> | any[]): void;
  oldStyleIncludedRadioAction(sender: any): IBAction;
  exportableSizeDidChange(sender: any): IBAction;
  groupContentsOnlyAction(sender: any): IBAction;
  layerPositionPossiblyChanged(): IBAction;
  artboardBackgroundCheckAction(sender: any): IBAction;
  backgroundColorAction(sender: any): IBAction;
  refreshAction(sender: any): IBAction;
  prepareForDisplay(): void;
  selectionDidChangeTo(layers: NSArray<any> | any[]): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;
  colorInspector_didChangeToColor(inspector: MSColorInspector, color: MSColor): void;
  inspectorDidChangeType(inspector: MSColorInspector): void;
  colorInspectorDidChange(inspector: MSColorInspector): void;
  colorInspectorWillClose(inspector: MSColorInspector): void;
  colorInspectorShouldAdjustInspectorToPopover(inspector: MSColorInspector): boolean;
  colorInspectorUndoManager(inspector: MSColorInspector): NSUndoManager;
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;

  stackView(): MSInspectorStackView;
  setStackView(stackView: MSInspectorStackView): void;
  oldSliceIncludedTable(): NSTableView;
  setOldSliceIncludedTable(oldSliceIncludedTable: NSTableView): void;
  oldStyleIncludeMatrix(): NSMatrix;
  setOldStyleIncludeMatrix(oldStyleIncludeMatrix: NSMatrix): void;
  groupContentsOnlyButton(): NSButton;
  setGroupContentsOnlyButton(groupContentsOnlyButton: NSButton): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare class MSFastPathBuilder extends NSObject {
  static pathForMaskImage(maskImage: NSBitmapImageRep): NSBezierPath;
}

declare class MSFeedbackAction extends MSAction {
  feedback(sender: any): IBAction;
}

declare class MSFillAndBorderColorScreenPicker extends NSObject {
  static pickColorForLayers_colorSpace_completionBlock(layers: NSArray<any> | any[], colorspace: NSColorSpace, completionBlock: BCVoidBlock): void;
  static applyColor_toLayers(chosenColor: MSColor, layers: NSArray<any> | any[]): void;
  static setPreferredStylePartName(name: NSString | string): void;
}

declare class MSFillInspectorViewController extends MSColorStylePartInspectorViewController {
  opacityFieldAction(sender: any): IBAction;

  blendingPopUpButton(): NSPopUpButton;
  setBlendingPopUpButton(blendingPopUpButton: NSPopUpButton): void;
  opacityField(): MSUpDownTextField;
  setOpacityField(opacityField: MSUpDownTextField): void;
}

declare class MSFillOptionsInspectorViewController extends NSViewController {
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
}

declare class MSFilterBarView extends MSGradientView {}

declare class MSFindLayerAction extends MSDocumentAction {
  findLayer(sender: any): IBAction;
}

declare class MSFinishEditingButton extends NSButton {}

declare class MSFixedPopoverTouchBarItem extends NSPopoverTouchBarItem {
  ms_parentTouchBar(): NSTouchBar;
  setMs_parentTouchBar(ms_parentTouchBar: NSTouchBar): void;
}

declare class MSFlattenAction extends MSDocumentAction {
  flatten(sender: any): IBAction;
}

declare class MSFlattenSelectionAction extends MSDocumentAction {
  flattenSelection(sender: any): IBAction;
}

declare class MSBaseFlipAction extends MSDocumentAction {}

declare class MSFlipHorizontalAction extends MSBaseFlipAction {
  flipHorizontal(sender: any): IBAction;
}

declare class MSFlipVerticalAction extends MSBaseFlipAction {
  flipVertical(sender: any): IBAction;
}

declare class MSApplyHorizontalFlipAction extends MSBaseFlipAction {}

declare class MSApplyVerticalFlipAction extends MSBaseFlipAction {}

declare class MSFlippedView extends NSView {}

declare class MSFlowBaseAction extends MSDocumentAction {
  refreshLayerListInspectorAndOverlay(): void;
}

declare class MSChangeFlowAnimationAction extends MSDocumentAction {}

declare class MSChangeFlowAnimationNoAnimationAction extends MSChangeFlowAnimationAction {
  changeFlowAnimationToNoAnimation(sender: any): IBAction;
}

declare class MSChangeFlowAnimationFromLeftAnimationAction extends MSChangeFlowAnimationAction {
  changeFlowAnimationToFromLeftAnimation(sender: any): IBAction;
}

declare class MSChangeFlowAnimationFromRightAnimationAction extends MSChangeFlowAnimationAction {
  changeFlowAnimationToFromRightAnimation(sender: any): IBAction;
}

declare class MSChangeFlowAnimationFromTopAnimationAction extends MSChangeFlowAnimationAction {
  changeFlowAnimationToFromTopAnimation(sender: any): IBAction;
}

declare class MSChangeFlowAnimationFromBottomAnimationAction extends MSChangeFlowAnimationAction {
  changeFlowAnimationToFromBottomAnimation(sender: any): IBAction;
}

declare class MSFlowEventHandler extends MSEventHandler implements IMSFlowMenuBuilderTarget {
  findMouseAndDisconnectFromTarget(): void;
  flowBackAction(sender: any): IBAction;
  removeFlowAction(sender: any): IBAction;
  flowTargetAction(sender: any): IBAction;

  layers(): MSLayerArray;
  setLayers(layers: MSLayerArray): void;
}

declare class MSFlowFixLayerInspectorItem extends MSInspectorItem {}

declare class MSFlowHeaderInspectorItem extends MSCollapsibleHeaderInspectorItem {}

declare class MSFlowInspectorItem extends MSInspectorItem {}

declare class MSFlowInspectorSection extends MSBaseInspectorSection {}

declare class MSFlowMenuBuilder extends NSObject {
  static createFlowDestinationMenuButton_document_destination_target(button: NSPopUpButton, doc: MSDocumentData, destinationID: NSString | string, target: any): void;
  static menuForPages_target(pages: NSArray<any> | any[], target: any): NSMenu;
}

declare interface IMSFlowMenuBuilderTarget {
  flowBackAction(sender: any): IBAction;
  removeFlowAction(sender: any): IBAction;
  flowTargetAction(sender: any): IBAction;
}

declare class MSFollowFlowAction extends MSFlowBaseAction {
  followFlow(sender: any): IBAction;
}

declare class MSFontFamilyPickerViewController extends NSViewController implements INSTableViewDelegate, INSTableViewDataSource {
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;

  completionBlock(): MSFontFamilyPickerCompletionBlock;
  setCompletionBlock(completionBlock: MSFontFamilyPickerCompletionBlock): void;
  fontList(): MSFontList;
  setFontList(fontList: MSFontList): void;
  tableView(): NSTableView;
  setTableView(tableView: NSTableView): void;
}

declare class MSFontFamilyTextFieldCell extends NSTextFieldCell {}

declare class MSFontNamesTableView extends NSTableView {
  searchField(): NSSearchField;
  setSearchField(searchField: NSSearchField): void;
}

declare class MSUpDownComboBox extends NSComboBox {
  refreshDelegate(): any;
  setRefreshDelegate(refreshDelegate: any): void;
  upDownController(): MSUpDownController;
  setUpDownController(upDownController: MSUpDownController): void;
}

declare class MSFontSizeUpDownComboBox extends MSUpDownComboBox {}

declare class MSFontWatcher extends NSObject {
  initWithDocumentController<T extends MSFontWatcher>(documentController: NSDocumentController): T;
}

declare class MSFooterInspectorSection extends MSBaseInspectorSection {}

declare class MSForeignObjectProvider extends NSObject implements IMSForeignObjectProvider {
  initWithDocument<T extends MSForeignObjectProvider>(document: MSDocument): T;
  static providerForLayers_inDocument(layers: MSLayerArray, document: MSDocument): MSForeignObjectProvider;
  localObjectsForDocument(document: MSDocumentData): NSArray<any>;
  currentDocumentIsLibrary(library: MSAssetLibrary): boolean;
  masterObjectForInstance(instance: MSModelObject): MSShareableObject;
  masterIsOutOfSyncWithInstance(instance: MSModelObject): boolean;

  foreignObjects(): NSArray<any>;
  setForeignObjects(foreignObjects: NSArray<any> | any[]): void;
  currentDocument(): MSDocumentData;
  setCurrentDocument(currentDocument: MSDocumentData): void;
  libraryController(): MSAssetLibraryController;
  setLibraryController(libraryController: MSAssetLibraryController): void;
  objectType(): MSShareableObjectType;
  setObjectType(objectType: MSShareableObjectType): void;
}

declare class MSForeignSymbolProvider extends MSForeignObjectProvider {}

declare class MSSharedLayerStyleProvider extends MSForeignObjectProvider {}

declare class MSSharedTextStyleProvider extends MSForeignObjectProvider {}

declare class MSGeneralPreferencePane extends MSPreferencePane {
  analyticsAction(sender: any): IBAction;
  pickDefaultColorSpace(sender: any): IBAction;

  defaultColorSpaceDescriptionLabel(): NSTextField;
  setDefaultColorSpaceDescriptionLabel(defaultColorSpaceDescriptionLabel: NSTextField): void;
  defaultColorSpacePopUpButton(): NSPopUpButton;
  setDefaultColorSpacePopUpButton(defaultColorSpacePopUpButton: NSPopUpButton): void;
}

declare class MSGeometryInspectorSection extends MSBaseInspectorSection {
  shouldShowPositions(): boolean;
  setShouldShowPositions(shouldShowPositions: boolean): void;
}

declare class MSGoogleAnalyticsWrapper extends NSObject implements IWebFrameLoadDelegate, IWebResourceLoadDelegate, IWebUIDelegate {
  start(): void;
  stop(): void;
  sendAction_arguments(action: NSString | string, arguments: NSArray<any> | any[]): void;
}

declare class MSGradientBarView extends BCColorPickerBaseView {
  delegate(): any;
  setDelegate(delegate: any): void;
  gradient(): MSGradient;
  setGradient(gradient: MSGradient): void;
  selectedStopIndex(): NSUInteger;
  setSelectedStopIndex(selectedStopIndex: NSUInteger): void;
}

declare interface IMSGradientBarViewDelegate {
  gradientBarViewPreviewColorSpace(gradientBarView: MSGradientBarView): NSColorSpace;
  gradientBarChanged(gradientView: MSGradientBarView): void;
}

declare class MSGradientEventHandler extends MSPointsEventHandler implements IMSGradientPointArrayDelegate {
  static gradientHandlerForStylePart_manager(part: MSStyleBasicFill, manager: MSEventHandlerManager): MSGradientEventHandler;
  gradient(): MSGradient;
  selectPointCursor(): NSCursor;
  insertPointCursor(): NSCursor;
  canInsertPointAtMouse(mouse: NSPoint): boolean;
  addStopAtPosition(mouse: NSPoint): NSInteger;
  repairGradientIfNecessary(): void;
  gradientPointArray_didReplacePointAtIndex_withPoint(array: MSGradientPointArray, i: NSUInteger, aPoint: NSPoint): void;

  stylePart(): MSStyleBasicFill;
  setStylePart(stylePart: MSStyleBasicFill): void;
  gradientDelegate(): any;
  setGradientDelegate(gradientDelegate: any): void;
}

declare interface IMSGradientEventHandlerDelegate {
  gradientHandlerDidChangeCurrentPoint(handler: MSGradientEventHandler): void;
  gradientHandlerDidChangeGradient(handler: MSGradientEventHandler): void;
  gradientHandlerWillLoseFocus(handler: MSGradientEventHandler): void;
}

declare class MSGradientView extends NSView {
  topColour(): NSColor;
  setTopColour(topColour: NSColor): void;
  bottomColour(): NSColor;
  setBottomColour(bottomColour: NSColor): void;
  borderColour(): NSColor;
  setBorderColour(borderColour: NSColor): void;
  gradientAngle(): number;
  setGradientAngle(gradientAngle: number): void;
  borderSize(): number;
  setBorderSize(borderSize: number): void;
  topBorder(): boolean;
  setTopBorder(topBorder: boolean): void;
  leftBorder(): boolean;
  setLeftBorder(leftBorder: boolean): void;
  rightBorder(): boolean;
  setRightBorder(rightBorder: boolean): void;
  bottomBorder(): boolean;
  setBottomBorder(bottomBorder: boolean): void;
}

declare class MSGridSettingsAction extends MSDocumentAction {
  gridSettings(sender: any): IBAction;
}

declare class MSGridSheet extends MSGridSheetBase {
  setAsDefault(sender: any): IBAction;
}

declare class MSGridSheetBase extends CHSheetController implements INSWindowDelegate {
  baseObjectForRootLayer(root: any): MSBaseGrid;
  defaultObject(): MSBaseGrid;
  applyObject_toLayer(obj: MSBaseGrid, root: any): void;
  refreshView(): void;
  refreshCanvas(sender: any): IBAction;
  gridChanged(grid: any): IBAction;
  cancelAction(sender: any): IBAction;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;

  originalSettings(): NSMapTable<any, any>;
  setOriginalSettings(originalSettings: NSMapTable<any, any>): void;
  templateObject(): MSBaseGrid;
  setTemplateObject(templateObject: MSBaseGrid): void;
}

declare class MSGroupAction extends MSDocumentAction {
  group(sender: any): IBAction;
}

declare class MSUngroupAction extends MSDocumentAction {
  ungroup(sender: any): IBAction;
}

declare class MSHangingGlyphView extends NSView {
  textView(): NSTextView;
  setTextView(textView: NSTextView): void;
}

declare class MSHeader2InspectorItem extends MSInspectorItem {
  labelText(): NSString;
  setLabelText(labelText: NSString | string): void;
}

declare class MSHeaderInspectorItem extends MSInspectorItem {
  setButtonTarget_action_image_alternate(target: any, action: string, image: NSImage, alternateImage: NSImage): void;

  labelText(): NSString;
  setLabelText(labelText: NSString | string): void;
  buttonState(): NSControlStateValue;
  setButtonState(buttonState: NSControlStateValue): void;
}

declare class MSHideLayerAction extends MSDocumentAction {
  hideLayer(sender: any): IBAction;
}

declare class MSHistoryMaker extends NSObject {
  initWithDocument<T extends MSHistoryMaker>(document: MSDocument): T;
  registerHistoryMomentTitle(title: NSString | string): void;
  canMoveThroughHistoryBackInTime(backInTime: boolean): boolean;
  moveThroughHistoryBackInTime(backwards: boolean): void;
  startCoalescingHistory(): void;
  finishCoalescingHistory(): void;
  coalesceHistoryInBlock(block: BCVoidBlock): void;
  deferMakingHistoryInBlock(block: BCVoidBlock): void;
  ignoreDocumentChangesInBlock(block: BCVoidBlock): boolean;
  makeHistoryIfNecessary(): void;
  makeTransientMomentInHistoryIfNecessary(): void;
  commitTransientMomentIfNecessary(): void;

  document(): MSDocument;
  setDocument(document: MSDocument): void;
  history(): MSHistory;
  setHistory(history: MSHistory): void;
  historyMomentTitle(): NSString;
  setHistoryMomentTitle(historyMomentTitle: NSString | string): void;
  historyIsCoalescing(): boolean;
  setHistoryIsCoalescing(historyIsCoalescing: boolean): void;
}

declare class MSHotspotOverrideInspectorItem extends MSOverrideInspectorItem implements IMSFlowMenuBuilderTarget {
  flowBackAction(sender: any): IBAction;
  removeFlowAction(sender: any): IBAction;
  flowTargetAction(sender: any): IBAction;
}

declare class MSIgnoreClippingMaskAction extends MSDocumentAction {
  ignoreClippingMask(sender: any): IBAction;
}

declare class MSImageOriginalSizeAction extends MSDocumentAction {
  imageOriginalSize(sender: any): IBAction;
}

declare class MSImageOverrideView extends NSImageView {
  normalImage(): NSImage;
  setNormalImage(normalImage: NSImage): void;
  placeholderImage(): NSImage;
  setPlaceholderImage(placeholderImage: NSImage): void;
}

declare class MSImageTransformEventHandler extends MSTransformEventHandler {}

declare class MSImageView extends NSImageView {}

declare class MSIncludeBackgroundColorInExportInspectorItem extends MSInspectorItem {}

declare class MSIncludeBackgroundColorInInstancesInspectorItem extends MSInspectorItem {}

declare class MSIncompatiblePluginsDisabledAction extends MSDocumentAction implements IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSInlineTextLabelForUpDownField extends MSTextLabelForUpDownField {
  static labelWithImage(image: NSImage): MSInlineTextLabelForUpDownField;
}

declare class MSInlineTextLabelImageCell extends NSTextFieldCell {
  static inlineTextLabelFont(): NSFont;
}

declare class MSInlineUpDownTextField extends MSUpDownTextField {
  inlineLabel(): NSString;
  setInlineLabel(inlineLabel: NSString | string): void;
  inlineImage(): NSImage;
  setInlineImage(inlineImage: NSImage): void;
  inlineFieldWidth(): CGFloat;
  setInlineFieldWidth(inlineFieldWidth: CGFloat): void;
}

declare class MSInlineUpDownMiniTextField extends MSInlineUpDownTextField {}

declare class MSInlineUpDownNanoTextField extends MSInlineUpDownTextField {}

declare class MSInlineUpDownTextFieldCell extends NSTextFieldCell {}

declare class MSInsertArrowAction extends MSInsertLineAction {}

declare class MSInsertArtboardAction extends MSBaseInsertAction {
  insertArtboard(sender: any): IBAction;
}

declare class MSInsertArtboardEventHandler extends MSInsertLayerEventHandler {
  insertArtboardFromPreset(preset: MSArtboardPreset): void;
}

declare class MSInsertArtboardInspectorViewController extends NSViewController implements IMSInspectorChildController {
  prepareForDisplay(): void;
  selectionDidChangeTo(layers: NSArray<any> | any[]): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;

  shouldAddInsertFromSelectionItem(): boolean;
  setShouldAddInsertFromSelectionItem(shouldAddInsertFromSelectionItem: boolean): void;
  proposedArtboardSize(): NSSize;
  setProposedArtboardSize(proposedArtboardSize: NSSize): void;
  eventHandler(): MSInsertArtboardEventHandler;
  setEventHandler(eventHandler: MSInsertArtboardEventHandler): void;
}

declare class MSInsertHotspotAction extends MSDocumentAction {
  insertHotspot(sender: any): IBAction;
}

declare class MSInsertHotspotEventHandler extends MSInsertLayerEventHandler {}

declare class MSInsertLayerEventHandler extends MSDragRectEventHandler {
  prototypeLayer(): MSLayer;
  setPrototypeLayer(prototypeLayer: MSLayer): void;
  shouldApplyDefaultStyle(): boolean;
  setShouldApplyDefaultStyle(shouldApplyDefaultStyle: boolean): void;
  insertedLayer(): MSLayer;
  setInsertedLayer(insertedLayer: MSLayer): void;
}

declare class MSInsertLineAction extends MSBaseInsertAction {
  lineShapeFrom_to(from: NSPoint, to: NSPoint): MSShapePathLayer;
  eventHandlerClass(): any;
}

declare class MSInsertLineEventHandler extends MSEventHandler {
  lineShapeCreator(): MSLineShapeCreatorBlock;
  setLineShapeCreator(lineShapeCreator: MSLineShapeCreatorBlock): void;
}

declare class MSInsertArrowEventHandler extends MSInsertLineEventHandler {}

declare class MSInsertSharedTextAction extends MSSharedObjectAction implements INSMenuDelegate {
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare class MSInsertSliceAction extends MSDocumentAction {
  insertSlice(sender: any): IBAction;
}

declare class MSInsertSliceEventHandler extends MSInsertLayerEventHandler {
  allSlices(): NSArray<any>;
  setAllSlices(allSlices: NSArray<any> | any[]): void;
}

declare class MSInsertSymbolAction extends MSSharedSymbolAction {}

declare class MSInsertSymbolEventHandler extends MSEventHandler {
  symbolReference(): MSSymbolMasterReference;
  setSymbolReference(symbolReference: MSSymbolMasterReference): void;
}

declare class MSInsertTextEventHandler extends MSEventHandler {
  textLayer(): MSTextLayer;
  setTextLayer(textLayer: MSTextLayer): void;
  completionBlock(): MSInsertTextEventHandlerCompletionBlock;
  setCompletionBlock(completionBlock: MSInsertTextEventHandlerCompletionBlock): void;
}

declare class MSInsertTextLayerAction extends MSBaseInsertAction {
  insertTextLayer(sender: any): IBAction;
}

declare class MSInsertVectorAction extends MSDocumentAction {
  insertVector(sender: any): IBAction;
}

declare class MSInspectorAltButtonCell extends MSAltButtonCell {}

declare class MSInspectorBackgroundView extends MSBackgroundColorView {}

declare class MSInspectorButtonCell extends NSButtonCell {}

declare class MSInspectorPushButtonCell extends NSButtonCell {}

declare class MSInspectorCheckmarkCell extends MSInspectorButtonCell {}

declare class MSInspectorToggleButtonCell extends MSInspectorButtonCell {}

declare class MSInspectorSectionHeaderButtonCell extends MSInspectorToggleButtonCell {}

declare class MSInspectorToggleImageButtonCell extends MSInspectorButtonCell {}

declare class MSInspectorSectionHeaderToggleImageButtonCell extends MSInspectorToggleImageButtonCell {}

declare class MSInspectorButton extends NSButton {}

declare interface IMSInspectorChildController {
  prepareForDisplay(): void;
  selectionDidChangeTo(layers: NSArray<any> | any[]): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;
}

declare class MSInspectorControlView extends NSView {}

declare class MSInspectorController extends NSViewController implements INSTouchBarDelegate {
  selectionDidChangeTo(layers: MSLayerArray): void;
  changeColor(sender: any): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;
  currentHandlerChanged(): void;
  handlerManager(): MSEventHandlerManager;
  changeTextLayerFont(sender: any): IBAction;
  beginRenameSharedObject_completionBlock(sharedObject: MSSharedObject, block: MSRenameSharedObjectBlock): void;
  layerWithSharedStyleDidChange(): void;
  reloadSharedObjectsSection(): void;
  validateAlignmentButtons(): void;
  reload(): void;
  focusOnFirstTextField(): void;
  focusOnTextFieldWithIdentifier(identifier: NSUserInterfaceItemIdentifier): void;
  showFillOptionsAction(sender: any): IBAction;
  showBorderOptionsAction(sender: any): IBAction;
  openPopoverForStylePart_atIndex(stylePart: MSStylePartType, index: NSUInteger): void;
  adjustInspectorToColorPopover_sender(popover: BCPopover, sender: any): void;
  closeAnyColorPopover(): void;
  reloadTouchBars(): void;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;

  currentController(): NSViewController;
  setCurrentController(currentController: NSViewController): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  globalAssets(): MSPersistentAssetCollection;
  setGlobalAssets(globalAssets: MSPersistentAssetCollection): void;
  alignmentBarHidden(): boolean;
  setAlignmentBarHidden(alignmentBarHidden: boolean): void;
  sharedStyleInspectorVisible(): boolean;
  setSharedStyleInspectorVisible(sharedStyleInspectorVisible: boolean): void;
}

declare class MSInspectorFlowHandler extends NSObject implements IMSFlowMenuBuilderTarget {
  flowBackAction(sender: any): IBAction;
  removeFlowAction(sender: any): IBAction;
  flowTargetAction(sender: any): IBAction;
  flowConnection(): MSFlowConnection;
  static flowConnectionForLayers(layers: MSLayerArray): MSFlowConnection;
  enumerateLayersAndReload(block: Block): void;
  static shouldShowFullInspectorForFlow(flow: MSFlowConnection): boolean;
  static shouldShowFullInspectorForLayers(layers: MSLayerArray): boolean;
  flowBackAction(sender: any): IBAction;
  removeFlowAction(sender: any): IBAction;
  flowTargetAction(sender: any): IBAction;

  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSInspectorFlowHandlerDelegate {
  documentForFlowHandler(flowHandler: MSInspectorFlowHandler): MSDocument;
  layersForFlowHandler(flowHandler: MSInspectorFlowHandler): MSLayerArray;
}

declare interface IMSInspectorItemDelegate {
  valuesPossiblyChanged(item: NSViewController): void;
  itemDidResize(item: NSViewController): void;
  documentForInspectorItem(section: NSViewController): MSDocument;
  item_wantsSectionToCollapse(item: NSViewController, collapse: boolean): void;
}

declare class MSInspectorLeftAlignedPopUp extends NSPopUpButton {}

declare class MSInspectorNextResponderFixer extends NSObject {
  static findNextKeyViewFor_inView(keyView: NSView, view: NSView): NSView;
  static firstKeyViewForInView(view: NSView): NSView;
}

declare class MSInspectorPopUpButtonCell extends NSPopUpButtonCell {}

declare class MSInspectorPopUpButton extends NSPopUpButton {}

declare interface IMSInspectorSectionDelegate {
  sectionDidResize(section: NSViewController): void;
  documentForInspectorSection(section: NSViewController): MSDocument;
  isSectionCollapsed(section: NSViewController): boolean;
  setSection_collapsed(section: NSViewController, collapsed: boolean): void;
}

declare class MSInspectorSectionHeaderLabel extends NSTextField {}

declare class MSInspectorSectionHeaderLabelCell extends NSTextFieldCell {}

declare class MSInspectorSegmentedCell extends NSSegmentedCell {
  setAlternateImage_forSegment(image: NSImage, segment: NSUInteger): void;
}

declare class MSInspectorSliderCell extends NSSliderCell {}

declare class MSInspectorStackView extends NSView {
  reloadWithViewControllers(controllers: NSArray<any> | any[]): void;
  reloadSubviews(): void;
  recalculateHeight(): void;
  stack(): void;
  subViewFrameDidChange(subview: NSView): void;

  sectionViewControllers(): NSArray<any>;
  setSectionViewControllers(sectionViewControllers: NSArray<any> | any[]): void;
}

declare class MSInspectorTextfieldManager extends NSObject {
  static managerWithItem_textField_adaptor_identifier_toolTip_touchBarItems(item: MSInspectorItem, textField: MSUpDownTextField, adaptor: MSMathInspectorValueAdaptor, identifier: NSUserInterfaceItemIdentifier, toolTip: NSString | string, touchBarItems: NSArray<any> | any[] | null): MSInspectorTextfieldManager;
}

declare class MSInstanceOverridesHeaderItem extends MSInspectorItem {}

declare class MSInstanceStylesHeaderItem extends MSInspectorItem {}

declare class MSIntegerSlider extends NSSlider {}

declare class MSIntegratedStepper extends NSView {
  target(): MSUpDownController;
  setTarget(target: MSUpDownController): void;
}

declare class MSInterceptingView extends NSView {}

declare class MSJoinAction extends MSDocumentAction {}

declare class MSKeyBindings extends BCSingleton {
  shortcutMap(): NSDictionary<any, any>;
  setShortcutMap(shortcutMap: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSLayerAdjustedPopupButtonCell extends NSPopUpButtonCell {}

declare class MSLayerFontManager extends NSObject implements INSCoding {
  static loadFonts(): void;
  availableFonts(): NSArray<any>;
  currentFontVariations(): NSArray<any>;
  currentFont(): NSString;
  setCurrentFont(aValue: NSString | string): void;
  setLayer(aValue: any): void;
  currentFontFaceIndex(): number;
  setCurrentFontFaceIndex(aValue: number): void;
  bold(): boolean;
  setBold(aValue: boolean): void;
  italic(): boolean;
  setItalic(aValue: boolean): void;
  underline(): boolean;
  setUnderline(aValue: boolean): void;
  fontSize(): number;
  setFontSize(aValue: number): void;
  textColor(): NSColor;
  setTextColor(aValue: NSColor): void;
  encodeWithCoder(aCoder: NSCoder): void;
  initWithCoder<T extends MSLayerFontManager>(aDecoder: NSCoder): T;
}

declare class MSLayerGroupItem extends MSInspectorItem {}

declare class MSLayerInserting extends NSObject {
  static rectForCenteringLayerWithSize_inView_selection(layerSize: NSSize, contentDrawView: MSContentDrawView, layers: MSLayerArray): NSRect;
}

declare class MSLayerMeasurementRenderer extends MSOverlayRenderer {
  clear(): void;
  prepareForGeometryChange(): void;
  drawRect_context(dirtyRect: NSRect, context: MSRenderingContext): void;
  isMeasuringDistance(): boolean;

  selectedLayers(): MSLayerArray;
  setSelectedLayers(selectedLayers: MSLayerArray): void;
  measurementTarget(): MSLayerMeasurementTarget;
  setMeasurementTarget(measurementTarget: MSLayerMeasurementTarget): void;
  measurementOptions(): MSAlignmentRectOptions;
  setMeasurementOptions(measurementOptions: MSAlignmentRectOptions): void;
  numberFormatter(): NSNumberFormatter;
  setNumberFormatter(numberFormatter: NSNumberFormatter): void;
}

declare class MSLayerMeasurementTarget extends NSObject {
  initWithLayer_guides<T extends MSLayerMeasurementTarget>(targetLayer: MSLayer | null, targetGuides: NSArray<any> | any[] | null): T;

  layer(): MSLayer;
  setLayer(layer: MSLayer): void;
  guideLines(): NSArray<any>;
  setGuideLines(guideLines: NSArray<any> | any[]): void;
}

declare class MSLayerPickerMenuBuilder extends MSMenuBuilder {
  updatePickerMenuItem_forPage_atPoint(item: NSMenuItem, page: MSPage, mouse: NSPoint): void;
}

declare class MSLayerFocusActions extends MSTouchBarGroupAction {}

declare class MSLayerXFocusAction extends MSDocumentAction {}

declare class MSLayerYFocusAction extends MSDocumentAction {}

declare class MSLayerWidthFocusAction extends MSDocumentAction {}

declare class MSLayerHeightFocusAction extends MSDocumentAction {}

declare class MSLayerSelectionDrawing extends NSObject {
  static drawSelectionForLayer_zoomValue(aLayer: MSLayer, zoom: CGFloat): void;
  static strokeWidthForZoomValue(zoom: CGFloat): CGFloat;
}

declare class MSLayersPreferencePane extends MSPreferencePane {}

declare class MSLayoutSettingsAction extends MSDocumentAction {
  layoutSettings(sender: any): IBAction;
}

declare class MSLayoutSheet extends MSGridSheetBase {
  setAsDefault(sender: any): IBAction;
  centerGrid(sender: any): IBAction;
  offsetChanged(sender: any): IBAction;

  centerGridButton(): NSButton;
  setCenterGridButton(centerGridButton: NSButton): void;
}

declare class MSLicenseRegistrationWindowController extends NSWindowController implements INSWindowDelegate {
  static showTrialExpiredModal(): void;
  static showRegistrationWindow(): void;
  static registerWithKey(key: NSString | string): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
}

declare class MSLicenseRenewalWindowController extends NSWindowController implements INSWindowDelegate {
  static showLicenseUpdateWindow(): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
}

declare class MSLineEndpointInspectorItem extends MSTwoTextFieldInspectorItem {}

declare class MSLineEndpointInspectorItem1 extends MSLineEndpointInspectorItem {}

declare class MSLineEndpointInspectorItem2 extends MSLineEndpointInspectorItem {}

declare class MSLineTransformInspectorItem extends MSInspectorItem {}

declare class MSListTypeAction extends MSDocumentAction {}

declare class MSListTypeActionNone extends MSListTypeAction {
  setListTypeNone(sender: any): IBAction;
}

declare class MSListTypeActionNumbered extends MSListTypeAction {
  setListTypeNumbered(sender: any): IBAction;
}

declare class MSListTypeActionBullet extends MSListTypeAction {
  setListTypeBullet(sender: any): IBAction;
}

declare class MSLockLayerAction extends MSDocumentAction {
  lockLayer(sender: any): IBAction;
}

declare class MSLogAction extends MSAction implements IMSPluginLogAction {
  log(sender: NSDictionary<any, any> | {[key: string]: any}): void;
  clearLog(): void;
  logString(): NSString;
}

declare class MSMagnifierAction extends MSDocumentAction {}

declare class MSMainSplitViewController extends NSObject implements INSSplitViewDelegate {
  didEnterVersionBrowser(): void;
  didExitVersionBrowser(): void;
  splitView_canCollapseSubview(splitView: NSSplitView, subview: NSView): boolean;
  splitView_shouldCollapseSubview_forDoubleClickOnDividerAtIndex(splitView: NSSplitView, subview: NSView, dividerIndex: NSInteger): boolean;
  splitView_constrainMinCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMinimumPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_constrainMaxCoordinate_ofSubviewAt(splitView: NSSplitView, proposedMaximumPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_constrainSplitPosition_ofSubviewAt(splitView: NSSplitView, proposedPosition: CGFloat, dividerIndex: NSInteger): CGFloat;
  splitView_resizeSubviewsWithOldSize(splitView: NSSplitView, oldSize: NSSize): void;
  splitView_shouldAdjustSizeOfSubview(splitView: NSSplitView, view: NSView): boolean;
  splitView_shouldHideDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger): boolean;
  splitView_effectiveRect_forDrawnRect_ofDividerAtIndex(splitView: NSSplitView, proposedEffectiveRect: NSRect, drawnRect: NSRect, dividerIndex: NSInteger): NSRect;
  splitView_additionalEffectiveRectOfDividerAtIndex(splitView: NSSplitView, dividerIndex: NSInteger): NSRect;
  splitViewWillResizeSubviews(notification: NSNotification): void;
  splitViewDidResizeSubviews(notification: NSNotification): void;

  splitView(): NSSplitView;
  setSplitView(splitView: NSSplitView): void;
  window(): NSWindow;
  setWindow(window: NSWindow): void;
}

declare class MSMakeGridAction extends MSDocumentAction {}

declare class MSMakeGridSheet extends CHSheetController {
  doc(): MSDocument;
  setDoc(doc: MSDocument): void;
  subtextField(): NSTextField;
  setSubtextField(subtextField: NSTextField): void;
}

declare class MSTextTransformAction extends MSDocumentAction {}

declare class MSMakeUppercaseAction extends MSTextTransformAction {}

declare class MSMakeLowercaseAction extends MSTextTransformAction {}

declare class MSRemoveTextTransformAction extends MSTextTransformAction {}

declare class MSManageForeignSymbolItem extends NSObject {
  initWithForeignSymbol<T extends MSManageForeignSymbolItem>(foreignSymbol: MSForeignSymbol): T;

  libraryName(): NSString;
  setLibraryName(libraryName: NSString | string): void;
  foreignSymbol(): MSForeignSymbol;
  setForeignSymbol(foreignSymbol: MSForeignSymbol): void;
  library(): MSAssetLibrary;
  setLibrary(library: MSAssetLibrary): void;
  symbolName(): NSString;
  setSymbolName(symbolName: NSString | string): void;
}

declare class MSManageForeignSymbolTableCellView extends NSTableCellView {}

declare class MSManageForeignSymbolsView extends NSViewController {
  document(): MSDocument;
  setDocument(document: MSDocument): void;
}

declare class MSManageLayerStyleView extends MSManageSharedObjectBaseViewController {}

declare class MSManageShareableObjectsAction extends MSBaseSharedObjectAction {
  showOrganiserSheet(sender: any): IBAction;
}

declare class MSManageSharedObjectBaseViewController extends NSViewController implements INSTableViewDataSource, INSTableViewDelegate {
  deleteSelectedObjects(sender: any): IBAction;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;
  tableView_viewForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSView;
  tableView_rowViewForRow(tableView: NSTableView, row: NSInteger): NSTableRowView;
  tableView_didAddRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_didRemoveRowView_forRow(tableView: NSTableView, rowView: NSTableRowView, row: NSInteger): void;
  tableView_willDisplayCell_forTableColumn_row(tableView: NSTableView, cell: any, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_shouldEditTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_toolTipForCell_rect_tableColumn_row_mouseLocation(tableView: NSTableView, cell: NSCell, rect: NSRectPointer, tableColumn: NSTableColumn | null, row: NSInteger, mouseLocation: NSPoint): NSString;
  tableView_shouldShowCellExpansionForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_shouldTrackCell_forTableColumn_row(tableView: NSTableView, cell: NSCell, tableColumn: NSTableColumn | null, row: NSInteger): boolean;
  tableView_dataCellForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSCell;
  selectionShouldChangeInTableView(tableView: NSTableView): boolean;
  tableView_shouldSelectRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_selectionIndexesForProposedSelection(tableView: NSTableView, proposedSelectionIndexes: NSIndexSet): NSIndexSet;
  tableView_shouldSelectTableColumn(tableView: NSTableView, tableColumn: NSTableColumn | null): boolean;
  tableView_mouseDownInHeaderOfTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didClickTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_didDragTableColumn(tableView: NSTableView, tableColumn: NSTableColumn): void;
  tableView_heightOfRow(tableView: NSTableView, row: NSInteger): CGFloat;
  tableView_typeSelectStringForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): NSString;
  tableView_nextTypeSelectMatchFromRow_toRow_forString(tableView: NSTableView, startRow: NSInteger, endRow: NSInteger, searchString: NSString | string): NSInteger;
  tableView_shouldTypeSelectForEvent_withCurrentSearchString(tableView: NSTableView, event: NSEvent, searchString: NSString | string | null): boolean;
  tableView_isGroupRow(tableView: NSTableView, row: NSInteger): boolean;
  tableView_sizeToFitWidthOfColumn(tableView: NSTableView, column: NSInteger): CGFloat;
  tableView_shouldReorderColumn_toColumn(tableView: NSTableView, columnIndex: NSInteger, newColumnIndex: NSInteger): boolean;
  tableView_rowActionsForRow_edge(tableView: NSTableView, row: NSInteger, edge: NSTableRowActionEdge): NSArray<any>;
  tableViewSelectionDidChange(notification: NSNotification): void;
  tableViewColumnDidMove(notification: NSNotification): void;
  tableViewColumnDidResize(notification: NSNotification): void;
  tableViewSelectionIsChanging(notification: NSNotification): void;

  tableView(): NSTableView;
  setTableView(tableView: NSTableView): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  sharedObjectsSortedByName(): NSArray<any>;
  setSharedObjectsSortedByName(sharedObjectsSortedByName: NSArray<any> | any[]): void;
}

declare class MSManageSharedObjectSheet extends CHSheetController {
  static tabIndex(): MSManageSharedObjectSheetTabIndex;
  static setTabIndex(tabIndex: MSManageSharedObjectSheetTabIndex): void;
}

declare enum MSManageSharedObjectSheetTabIndex {
  MSManageSharedObjectSheetTabIndexLayerStyles = 1,
  MSManageSharedObjectSheetTabIndexTextStyles = 2,
  MSManageSharedObjectSheetTabIndexImportedSymbols = 3,
}

declare class MSManageTextStyleView extends MSManageSharedObjectBaseViewController {}

declare class MSMaskWithShapeAction extends MSDocumentAction {
  maskWithShape(sender: any): IBAction;
}

declare class MSMeasurementData extends NSObject {
  sourceRect(): NSRect;
  setSourceRect(sourceRect: NSRect): void;
  targetRect(): NSRect;
  setTargetRect(targetRect: NSRect): void;
  targetLines(): NSArray<any>;
  setTargetLines(targetLines: NSArray<any> | any[]): void;
}

declare class MSMenuBuilder extends NSObject {
  static menuBuilderWithTarget(target: any): any;
  static menuBuilderWithTarget_action(target: any, action: string): any;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
}

declare class MSMiniToolbarTextFieldCell extends NSTextFieldCell {}

declare class MSMirrorAction extends MSDocumentAction implements IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSMirrorDataProvider extends NSObject implements ISMKMirrorDataSource {
  currentArtboardDidChange(): void;
  setNeedsUpdate(): void;
  setNeedsUpdateMetadata(): void;

  connectionController(): SMKMirrorController;
  setConnectionController(connectionController: SMKMirrorController): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  documentData(): MSImmutableDocumentData;
  setDocumentData(documentData: MSImmutableDocumentData): void;
  requiresImmediateUpdate(): boolean;
  setRequiresImmediateUpdate(requiresImmediateUpdate: boolean): void;
  currentArtboardID(): NSString;
  setCurrentArtboardID(currentArtboardID: NSString | string): void;
  manifestContent(): NSDictionary<any, any>;
  setManifestContent(manifestContent: NSDictionary<any, any> | {[key: string]: any}): void;
}

declare class MSMirrorPopUpButtonCell extends NSPopUpButtonCell {}

declare class MSMirrorToolbarItemView extends NSView {
  controls(): NSArray<any>;
  setControls(controls: NSArray<any> | any[]): void;
}

declare class MSMirrorWebView extends WKWebView {
  static developerToolsEnabled(): boolean;
}

declare class MSMirrorWindowController extends NSWindowController {
  sortedArtboards(artboards: NSArray<any> | any[] | null): NSArray<any>;
  changeVisibleArtboardID(artboardID: NSString | string | null): void;
  transitionToArtboardID_animatedBy(artboardID: NSString | string, animationType: MSFlowAnimationType): void;
  static sharedController(): MSMirrorWindowController;
  static show(): void;
  static close(): void;

  viewPort(): NSRect;
  setViewPort(viewPort: NSRect): void;
  dataProvider(): MSMirrorDataProvider;
  setDataProvider(dataProvider: MSMirrorDataProvider): void;
  currentDocument(): MSImmutableDocumentData;
  setCurrentDocument(currentDocument: MSImmutableDocumentData): void;
  currentMutableDocument(): MSDocumentData;
  setCurrentMutableDocument(currentMutableDocument: MSDocumentData): void;
  currentArtboardID(): NSString;
  setCurrentArtboardID(currentArtboardID: NSString | string): void;
  firstArtboardID(): NSString;
  setFirstArtboardID(firstArtboardID: NSString | string): void;
  visibleArtboardID(): NSString;
  setVisibleArtboardID(visibleArtboardID: NSString | string): void;
  defaultArtboardID(): NSString;
  setDefaultArtboardID(defaultArtboardID: NSString | string): void;
  currentStartpoint(): MSImmutableArtboardGroup;
  setCurrentStartpoint(currentStartpoint: MSImmutableArtboardGroup): void;
  startpoints(): NSArray<any>;
  setStartpoints(startpoints: NSArray<any> | any[]): void;
}

declare interface IMSMirrorWindowControllerContent {
  webView(): WKWebView;
  setWebView(webView: WKWebView): void;
}

declare class MSMissingFontsDialog extends NSWindowController implements INSTableViewDataSource {
  runPanelWithMissingFonts_savingWillChangeFonts(missingFonts: NSArray<any> | any[], savingWillChangeFonts: boolean): boolean;
  // close(sender: any): IBAction;
  openAnyway(sender: any): IBAction;
  numberOfRowsInTableView(tableView: NSTableView): NSInteger;
  tableView_objectValueForTableColumn_row(tableView: NSTableView, tableColumn: NSTableColumn | null, row: NSInteger): any;
  tableView_setObjectValue_forTableColumn_row(tableView: NSTableView, object: any | null, tableColumn: NSTableColumn | null, row: NSInteger): void;
  tableView_sortDescriptorsDidChange(tableView: NSTableView, oldDescriptors: NSArray<any> | any[]): void;
  tableView_pasteboardWriterForRow(tableView: NSTableView, row: NSInteger): any;
  tableView_draggingSession_willBeginAtPoint_forRowIndexes(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, rowIndexes: NSIndexSet): void;
  tableView_draggingSession_endedAtPoint_operation(tableView: NSTableView, session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  tableView_updateDraggingItemsForDrag(tableView: NSTableView, draggingInfo: any): void;
  tableView_writeRowsWithIndexes_toPasteboard(tableView: NSTableView, rowIndexes: NSIndexSet, pboard: NSPasteboard): boolean;
  tableView_validateDrop_proposedRow_proposedDropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): NSDragOperation;
  tableView_acceptDrop_row_dropOperation(tableView: NSTableView, info: any, row: NSInteger, dropOperation: NSTableViewDropOperation): boolean;
  tableView_namesOfPromisedFilesDroppedAtDestination_forDraggedRowsWithIndexes(tableView: NSTableView, dropDestination: NSURL, indexSet: NSIndexSet): NSArray<any>;
}

declare class MSModalInputSheet extends NSObject implements INSWindowDelegate {
  runPanelWithNibName_ofType_initialString_label(nibName: NSString | string, inputType: MSModalInputTypes, initialString: NSString | string, label: NSString | string): NSString;
  ok(sender: any): IBAction;
  cancel(sender: any): IBAction;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;

  type(): MSModalInputTypes;
  setType(type: MSModalInputTypes): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  numberFieldBinding(): CGFloat;
  setNumberFieldBinding(numberFieldBinding: CGFloat): void;
}

declare enum MSModalInputTypes {
  MSModalInputTypeString,
  MSModalInputTypeNumber,
  MSModalInputTypePath,
}

declare class MSModePickerView extends NSView {
  pickerMode(): NSInteger;
  setPickerMode(pickerMode: NSInteger): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  labelField(): NSTextField;
  setLabelField(labelField: NSTextField): void;
}

declare class MSColorModePickerCell extends NSButtonCell {}

declare interface IMSModeModePickerDelegate {
  pickerViewWillChange(picker: MSModePickerView): void;
  pickerViewChanged(picker: MSModePickerView): void;
  pickerView_labelForMode(view: MSModePickerView, mode: NSInteger): NSString;
}

declare class MSMouseTracker extends NSObject {
  initWithTarget_action<T extends MSMouseTracker>(target: any | null, action: string | null): T;
  sendAction(): void;
  locationInView(view: NSView | null): NSPoint;
  mouseEntered(event: NSEvent): void;
  mouseMoved(event: NSEvent): void;
  mouseExited(event: NSEvent | null): void;
  flagsChanged(event: NSEvent): void;
  mouseDown(event: NSEvent): void;
  mouseDragged(event: NSEvent): void;
  mouseUp(event: NSEvent): void;

  target(): any;
  setTarget(target: any): void;
  action(): string;
  setAction(action: string): void;
  trackingState(): MSMouseTrackingState;
  setTrackingState(trackingState: MSMouseTrackingState): void;
  view(): NSView;
  setView(view: NSView): void;
  modifierFlags(): NSEventModifierFlags;
  setModifierFlags(modifierFlags: NSEventModifierFlags): void;
  canUpdateCursor(): boolean;
  setCanUpdateCursor(canUpdateCursor: boolean): void;
}

declare enum MSMouseTrackingState {
  MSMouseTrackingStateNone,
  MSMouseTrackingStateInside = 1 << 0,
  MSMouseTrackingStateMouseDown = 1 << 1,
}

declare class MSMoveToTopAction extends MSDocumentAction {
  moveToTop(sender: any): IBAction;
}

declare class MSMoveUpHierarchyAction extends MSDocumentAction {
  moveUpHierarchy(sender: any): IBAction;
}

declare class MSMultipleBorderInspectorViewController extends MSMultipleColorStylePartInspectorViewController implements IBCPopoverDelegate {
  showAdvancedOptionsAction(sender: any): IBAction;
  styleDidEnableOrDisable(): void;
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;

  borderOptionsController(): MSBorderOptionsInspectorViewController;
  setBorderOptionsController(borderOptionsController: MSBorderOptionsInspectorViewController): void;
  thicknessLabel(): MSTextLabelForUpDownField;
  setThicknessLabel(thicknessLabel: MSTextLabelForUpDownField): void;
}

declare class MSMultipleColorStylePartInspectorViewController extends MSMultipleStylePartInspectorViewController {
  openPopoverAtIndex(index: NSUInteger): void;
  closeAnyColorPopover(): void;
}

declare class MSMultipleFillInspectorViewController extends MSMultipleColorStylePartInspectorViewController implements IBCPopoverDelegate {
  showAdvancedOptionsAction(sender: any): IBAction;
  minimumPopoverContentViewHeight(popover: BCPopover): CGFloat;
  popoverWillShow(notification: NSNotification): void;
  popoverWillClose(popover: BCPopover): void;
  popoverWindowSizeDidChange(popover: BCPopover): void;
  popoverWindowDidMove(popover: BCPopover): void;
  popoverShouldCloseWhenNewPopoverOpens_newPopover(popover: BCPopover, newPopover: BCPopover): boolean;
  popoverShouldCauseExistingPopoversToClose(popover: BCPopover): boolean;
  popoverWillReturnUndoManager(popover: BCPopover): NSUndoManager;
  popoverShouldTrackSuperviewOfAttachedToView(popover: BCPopover): boolean;

  opacityLabel(): MSTextLabelForUpDownField;
  setOpacityLabel(opacityLabel: MSTextLabelForUpDownField): void;
}

declare class MSMultipleInnerShadowInspectorViewController extends MSMultipleShadowInspectorViewController {}

declare class MSMultipleShadowInspectorViewController extends MSMultipleColorStylePartInspectorViewController {
  shouldHideAddStylePartButton(): boolean;

  addStylePartButton(): NSButton;
  setAddStylePartButton(addStylePartButton: NSButton): void;
}

declare class MSMultipleStylePartInspectorViewController extends NSViewController implements IMSReorderingContainerDelegate {
  prepare(): void;
  stylePartType(): MSStylePartType;
  rotatedStyleParts(): NSArray<any>;
  addStylePartAction(sender: any): IBAction;
  deleteStylePartAction(sender: any): IBAction;
  deleteUnusedStylePartsAction(sender: any): IBAction;
  addStylePartsForSelection(): NSArray<any>;
  hasEnabledStyle(): boolean;
  prepareInspector_parts_index(inspector: MSStylePartInspectorViewController, styleParts: NSArray<any> | any[], index: NSUInteger): void;
  loadViewControllers(): void;
  validateSpecialButtons(): void;
  validateRemoveDisabledStylesButton(): void;
  resizeViewToFit(): void;
  styleDidEnableOrDisable(): void;
  inspectorForStyleParts_atIndex(styleParts: NSArray<any> | any[], index: NSUInteger): any;
  shouldShowAdvancedOptionsButton(): boolean;
  lastEnabledStylePartController(): MSStylePartInspectorViewController;
  containerBackground_dragDidReorderChildAtIndex_toIndex(backgroundView: MSReorderingContainerView, fromIndex: NSUInteger, toIndex: NSUInteger): void;
  startingOffsetForStackingContainerBackground(backgroundView: MSReorderingContainerView): CGFloat;
  numberOfReorderableSubviewsForContainerBackground(backgroundView: MSReorderingContainerView): NSUInteger;

  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  stylePartViewControllers(): NSArray<any>;
  setStylePartViewControllers(stylePartViewControllers: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  reorderingContainer(): MSReorderingContainerView;
  setReorderingContainer(reorderingContainer: MSReorderingContainerView): void;
  nameView(): NSView;
  setNameView(nameView: NSView): void;
  removeDisabledStylesButton(): NSButton;
  setRemoveDisabledStylesButton(removeDisabledStylesButton: NSButton): void;
  showAdvancedOptionsButton(): NSButton;
  setShowAdvancedOptionsButton(showAdvancedOptionsButton: NSButton): void;
}

declare class MSNewsTrigger extends BCSingleton {}

declare class MSNewsTriggerWindowController extends CHWindowController {}

declare class MSNewsletterSignup extends NSObject {}

declare class MSNiceSliceAction extends MSEventHandlerAction {}

declare class MSNonAutosavingDocument extends MSDocument {}

declare class MSNormalBaseEventHandler extends MSEventHandler {
  cursorForCorner_ofLayer(corner: BCCorner, layer: MSLayer | null): NSCursor;
  resizeParentsOfSelectedLayersToFit(): void;
  configureInspector(inspector: MSInspectorController): void;
}

declare class MSNormalEventContextualMenuBuilder extends NSObject {
  constructMenus(): void;
  menuForLayers(layers: NSArray<any> | any[]): NSMenu;
}

declare class MSNormalEventData extends NSObject {
  hasMultipleTouches(): boolean;
  setHasMultipleTouches(hasMultipleTouches: boolean): void;
  didMouseDown(): boolean;
  setDidMouseDown(didMouseDown: boolean): void;
  mouseDown(): NSPoint;
  setMouseDown(mouseDown: NSPoint): void;
  midPoint(): NSPoint;
  setMidPoint(midPoint: NSPoint): void;
  originalScrollOrigin(): NSPoint;
  setOriginalScrollOrigin(originalScrollOrigin: NSPoint): void;
  resizingLayer(): MSLayer;
  setResizingLayer(resizingLayer: MSLayer): void;
  resizingHandle(): BCCorner;
  setResizingHandle(resizingHandle: BCCorner): void;
  dragMode(): MSEventHandlerDragMode;
  setDragMode(dragMode: MSEventHandlerDragMode): void;
  snapperData(): MSSnapperData;
  setSnapperData(snapperData: MSSnapperData): void;
}

declare enum MSEventHandlerDragMode {
  MSEventHandlerDragNone = -1,
  MSEventHandlerDragMove = 0,
  MSEventHandlerDragSelect = 2,
}

declare class MSNormalEventHandler extends MSNormalBaseEventHandler {
  selectLayer(sender: any): IBAction;
  ignoreNextKeyDownEventUntilModifiersChange(): void;
  cancelOperation(sender: any): void;
  drawSelectedShapePathLayers(): void;

  measurementRenderer(): MSLayerMeasurementRenderer;
  setMeasurementRenderer(measurementRenderer: MSLayerMeasurementRenderer): void;
  highlightedItem(): NSObject;
  setHighlightedItem(highlightedItem: NSObject): void;
}

declare class MSNormalInspector extends NSViewController implements IMSStylePartInspectorDelegate, IMSInspectorChildController {
  selectionDidChangeTo(newLayers: NSArray<any> | any[]): void;
  adjustInspectorToColorPopover_sender(popover: BCPopover, sender: any): void;
  closeAnyColorPopover(): void;
  colorMagnifierAction(sender: any): IBAction;
  changeTextLayerFont(sender: any): IBAction;
  layerPositionPossiblyChanged(): void;
  showFillOptionsAction(sender: any): IBAction;
  showBorderOptionsAction(sender: any): IBAction;
  openPopoverForStylePart_atIndex(stylePart: MSStylePartType, index: NSUInteger): void;
  layerWithSharedStyleDidChange(): void;
  reloadSharedObjectsSection(): void;
  beginRenameSharedObject_completionBlock(sharedObject: MSSharedObject, block: MSRenameSharedObjectBlock): void;
  switchToEventHandlerWithName(handlerName: NSString | string): any;
  layers(): NSArray<any>;
  reload(): void;
  prepareForDisplay(): void;
  selectionDidChangeTo(layers: NSArray<any> | any[]): void;
  refreshIfNecessary(treeDiff: MSTreeDiff): void;
  layerPositionPossiblyChanged(): void;

  stackView(): MSInspectorStackView;
  setStackView(stackView: MSInspectorStackView): void;
  layers(): MSLayerArray;
  setLayers(layers: MSLayerArray): void;
  eventHandler(): MSEventHandler;
  setEventHandler(eventHandler: MSEventHandler): void;
  sharedStyleInspectorVisible(): boolean;
  setSharedStyleInspectorVisible(sharedStyleInspectorVisible: boolean): void;
}

declare class MSNormalMultipleResizeEventHandler extends MSNormalBaseEventHandler {
  calculateOppositePoint(): void;
  calculateMidPoint(): void;
  displayResizeCursor(): void;
  storeCurrentLayerFrame(): void;
  makeRectConform_toProportions(newFrame: NSRect, constrainProportions: boolean): NSRect;
  placeRectInOppositeCorner(newFrame: NSRect): NSRect;
  oppositeCorner(): BCCorner;

  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  resizingCorner(): BCCorner;
  setResizingCorner(resizingCorner: BCCorner): void;
  layerSnapper(): MSSnapper;
  setLayerSnapper(layerSnapper: MSSnapper): void;
  eventData(): MSNormalEventData;
  setEventData(eventData: MSNormalEventData): void;
}

declare class MSNormalResizeEventHandler extends MSNormalBaseEventHandler {
  resizingCorner(): BCCorner;
  setResizingCorner(resizingCorner: BCCorner): void;
  resizingLayer(): MSLayer;
  setResizingLayer(resizingLayer: MSLayer): void;
  layerSnapper(): MSSnapper;
  setLayerSnapper(layerSnapper: MSSnapper): void;
  eventData(): MSNormalEventData;
  setEventData(eventData: MSNormalEventData): void;
}

declare class MSNormalResizeLineEventHandler extends MSNormalBaseEventHandler {
  lineShape(): MSShapeGroup;
  setLineShape(lineShape: MSShapeGroup): void;
  pointIndex(): NSInteger;
  setPointIndex(pointIndex: NSInteger): void;
  layerSnapper(): MSSnapper;
  setLayerSnapper(layerSnapper: MSSnapper): void;
  eventData(): MSNormalEventData;
  setEventData(eventData: MSNormalEventData): void;
}

declare class MSOpacityBlendingInspectorItem extends MSInspectorItem implements INSMenuDelegate {
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare class MSOpenCloudPreferencesAction extends MSAction {
  openCloudPreferences(sender: any): IBAction;
}

declare class MSOpenInLibraryAction extends MSDocumentAction {}

declare class MSOpenSymbolInLibraryAction extends MSOpenInLibraryAction {
  openLibraryForForeignSymbols(sender: any): void;
}

declare class MSOpenStyleInLibraryAction extends MSOpenInLibraryAction {
  openLibraryForStyles(sender: any): void;
}

declare class MSOpenPluginPreferencesAction extends MSAction {
  openPluginPreferences(sender: any): IBAction;
}

declare class MSOpenPreferencesAction extends MSAction {
  openPreferences(sender: any): IBAction;
  openPreferencesWindowWithPreferencePaneIdentifier(identifier: NSString | string): void;
}

declare class MSOpenPreviewAction extends MSDocumentAction {
  openMirrorPreview(sender: any): IBAction;
}

declare class MSOperatingSystem extends NSObject {
  static operatingSystemVersion(): NSOperatingSystemVersion;
  static isOperatingSystemAtLeastVersion(version: NSOperatingSystemVersion): boolean;
  static systemVersionString(): NSString;
}

declare class MSOverrideInspectorItem extends MSInspectorItem implements IMSDataMenuProviderDelegate {
  initWithPrimaryOverride<T extends MSOverrideInspectorItem>(override: MSAvailableOverride): T;
  labelView(): NSTextField;
  build(): void;
  supportedDataProviders(): MSDataType;
  controlViewForEditingOverride(): NSControl;
  valueFromControlView(controlView: any): any;
  overrideValueAction(sender: any): IBAction;
  applyOverrideToSelectedLayers(value: any): void;
  setIndentationLevel(level: NSUInteger): void;
  dataMenuProvider_canChooseDataOfType(controller: MSDataMenuProvider, type: MSDataType): boolean;
  dataMenuProviderCanApplyMasterDataToInstances(controller: MSDataMenuProvider): boolean;
  dataMenuProviderCanRefreshData(controller: MSDataMenuProvider): boolean;
  dataMenuProviderSelectedLayersWithAppliedData(controller: MSDataMenuProvider): NSArray<any>;
  dataMenuProviderDataTypeForMenuBuilding(controller: MSDataMenuProvider): MSDataType;
  dataMenuProviderIsInspectorPopupMenu(provider: MSDataMenuProvider): boolean;
  dataMenuProvider_didChooseData(controller: MSDataMenuProvider, data: MSDataSupplier): void;
  dataMenuProviderRefreshData(controller: MSDataMenuProvider): void;
  dataMenuProviderRefreshMasterData(controller: MSDataMenuProvider): void;
  dataMenuProviderRemoveDataRecord(controller: MSDataMenuProvider): void;
  dataMenuProviderDataIdentifier(controller: MSDataMenuProvider): NSString;

  primaryOverride(): MSAvailableOverride;
  setPrimaryOverride(primaryOverride: MSAvailableOverride): void;
  hasSingleOverride(): boolean;
  setHasSingleOverride(hasSingleOverride: boolean): void;
  contentView(): NSView;
  setContentView(contentView: NSView): void;
  documentData(): MSDocumentData;
  setDocumentData(documentData: MSDocumentData): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  displaysLabel(): boolean;
  setDisplaysLabel(displaysLabel: boolean): void;
}

declare class MSOverrideTextField extends NSTextField {}

declare class MSPDFBookExporter extends NSObject {
  static exportPages_defaultFilename(pages: NSArray<any> | any[], defaultFilename: NSString | string): void;
}

declare class MSPaddingInspectorItem extends MSInspectorItem {
  static paddingWithHeight(height: CGFloat): MSPaddingInspectorItem;

  wantsSeparator(): boolean;
  setWantsSeparator(wantsSeparator: boolean): void;
}

declare class MSPaddingInspectorItemView extends NSView {
  wantsSeparator(): boolean;
  setWantsSeparator(wantsSeparator: boolean): void;
}

declare class MSNewPageAction extends MSDocumentAction {
  addNewPage(sender: any): IBAction;
}

declare class MSChangePageAction extends MSDocumentAction {}

declare class MSPreviousPageAction extends MSChangePageAction {
  previousPage(sender: any): IBAction;
}

declare class MSNextPageAction extends MSChangePageAction {
  nextPage(sender: any): IBAction;
}

declare class MSPagesTableView extends NSTableView {}

declare class MSParagraphStyleViewController extends NSViewController {
  decorationButtonAction(sender: any): IBAction;
  listPopUpAction(sender: any): IBAction;
  transformPopUpAction(sender: any): IBAction;

  textSection(): MSTextLayerItem;
  setTextSection(textSection: MSTextLayerItem): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  decorationButton(): NSSegmentedControl;
  setDecorationButton(decorationButton: NSSegmentedControl): void;
  listPopUpButton(): NSPopUpButton;
  setListPopUpButton(listPopUpButton: NSPopUpButton): void;
  transformPopUpButton(): NSPopUpButton;
  setTransformPopUpButton(transformPopUpButton: NSPopUpButton): void;
}

declare class MSPathController extends NSObject {
  setSelectionIndexPath(indexPath: NSIndexPath | null): void;
  runChange(change: MSShapeChange): void;
  runChange_context(change: MSShapeChange, context: MSShapeChangeContext): void;
  selectNext(sender: any): void;
  selectPrevious(sender: any): void;
  currentCurveMode(): NSNumber;
  changeCurveMode(mode: MSCurveMode): void;
  remove(sender: any): IBAction;

  content(): NSArray<any>;
  setContent(content: NSArray<any> | any[]): void;
  selectionIndexPaths(): NSArray<any>;
  setSelectionIndexPaths(selectionIndexPaths: NSArray<any> | any[]): void;
  selectedObjects(): NSArray<any>;
  setSelectedObjects(selectedObjects: NSArray<any> | any[]): void;
  changeContext(): MSShapeChangeContext;
  setChangeContext(changeContext: MSShapeChangeContext): void;
}

declare class MSPencilEventHandler extends MSEventHandler {}

declare class MSPluginManagerWithActions extends MSPluginManager implements IMSActionObserver {
  actionController_willBeginActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didFinishActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;
  actionController_didInstantActionWithID_context(controller: MSActionController, actionID: NSString | string, context: any): void;

  dataManager(): MSDataSupplierManager;
  setDataManager(dataManager: MSDataSupplierManager): void;
}

declare class MSPluginStandaloneScript extends MSPluginScript {
  static wrappedScript_handler(script: NSString | string, handler: NSString | string): NSString;

  rawScript(): NSString;
  setRawScript(rawScript: NSString | string): void;
  handler(): NSString;
  setHandler(handler: NSString | string): void;
}

declare class MSPluginsPreferenceIconView extends NSView {
  icon(): NSImage;
  setIcon(icon: NSImage): void;
}

declare class MSPluginsPreferencePane extends MSPreferencePane implements INSTextFieldDelegate {
  getPlugins(sender: any): IBAction;
  togglePluginEnabled(sender: any): IBAction;
  tableContextMenu(sender: any): IBAction;
  openPluginsFolder(sender: any): IBAction;
  installPluginUpdates(sender: any): IBAction;
  installPluginUpdate(sender: any): IBAction;
  openPluginURL(sender: any): IBAction;
  activateSearchField(sender: any): IBAction;
  static openWithPluginToHighlight(pluginIdentifier: NSString | string): void;
  textField_textView_candidatesForSelectedRange(textField: NSTextField, textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textField_textView_candidates_forSelectedRange(textField: NSTextField, textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textField_textView_shouldSelectCandidateAtIndex(textField: NSTextField, textView: NSTextView, index: NSUInteger): boolean;

  pluginsArrayController(): NSArrayController;
  setPluginsArrayController(pluginsArrayController: NSArrayController): void;
  pluginSortDescriptors(): NSArray<any>;
  setPluginSortDescriptors(pluginSortDescriptors: NSArray<any> | any[]): void;
  filteredPlugins(): NSArray<any>;
  setFilteredPlugins(filteredPlugins: NSArray<any> | any[]): void;
  pluginFilterPredicate(): NSPredicate;
  setPluginFilterPredicate(pluginFilterPredicate: NSPredicate): void;
  zeroPluginsImage(): NSImage;
  setZeroPluginsImage(zeroPluginsImage: NSImage): void;
  zeroPluginsTitle(): NSString;
  setZeroPluginsTitle(zeroPluginsTitle: NSString | string): void;
  zeroPluginsTitleFont(): NSFont;
  setZeroPluginsTitleFont(zeroPluginsTitleFont: NSFont): void;
  zeroPluginsText(): NSString;
  setZeroPluginsText(zeroPluginsText: NSString | string): void;
  filterTextField(): NSSearchField;
  setFilterTextField(filterTextField: NSSearchField): void;
  tableView(): BCKeyEventActionTableView;
  setTableView(tableView: BCKeyEventActionTableView): void;
  getPluginsButton(): NSButton;
  setGetPluginsButton(getPluginsButton: NSButton): void;
  contextMenuControl(): NSControl;
  setContextMenuControl(contextMenuControl: NSControl): void;
  contextMenu(): NSMenu;
  setContextMenu(contextMenu: NSMenu): void;
  spyglassFilterButton(): NSButton;
  setSpyglassFilterButton(spyglassFilterButton: NSButton): void;
  enableUpdateAllButton(): boolean;
  setEnableUpdateAllButton(enableUpdateAllButton: boolean): void;
}

declare class MSPluginsPreferenceTableCellView extends NSTableCellView {
  updateAvailableContainer(): NSView;
  setUpdateAvailableContainer(updateAvailableContainer: NSView): void;
  pluginIncompatibleContainer(): NSView;
  setPluginIncompatibleContainer(pluginIncompatibleContainer: NSView): void;
  updateAvailableInfo(): MSPluginsPreferencesUpdateButton;
  setUpdateAvailableInfo(updateAvailableInfo: MSPluginsPreferencesUpdateButton): void;
  updatePlugin(): NSButton;
  setUpdatePlugin(updatePlugin: NSButton): void;
  pluginUpdating(): NSProgressIndicator;
  setPluginUpdating(pluginUpdating: NSProgressIndicator): void;
  updateAvailableHeightConstraint(): NSLayoutConstraint;
  setUpdateAvailableHeightConstraint(updateAvailableHeightConstraint: NSLayoutConstraint): void;
  incompatiblePluginHeightConstraint(): NSLayoutConstraint;
  setIncompatiblePluginHeightConstraint(incompatiblePluginHeightConstraint: NSLayoutConstraint): void;
  descriptionField(): NSTextField;
  setDescriptionField(descriptionField: NSTextField): void;
  iconView(): MSPluginsPreferenceIconView;
  setIconView(iconView: MSPluginsPreferenceIconView): void;
  tableCellWidthConstraint(): NSLayoutConstraint;
  setTableCellWidthConstraint(tableCellWidthConstraint: NSLayoutConstraint): void;
}

declare class MSPluginsPreferencesUpdateButton extends NSButton {
  tableCellView(): MSPluginsPreferenceTableCellView;
  setTableCellView(tableCellView: MSPluginsPreferenceTableCellView): void;
}

declare class MSPointsEventHandler extends MSEventHandler {
  findSelectedLayer(): MSStyledLayer;
  points(): MSPointArray;
  convertPointToUnitCoordinateSpace(mouse: NSPoint): NSPoint;
  point_isNearPoint(p1: NSPoint, p2: NSPoint): boolean;
  pointAtIndex(index: NSUInteger): NSPoint;
  replacePointAtIndex_withPoint(index: NSInteger, newObj: NSPoint): void;
  movePointAtIndex_toLocation_modifierFlags(index: NSInteger, newLocation: NSPoint, flags: NSEventModifierFlags): void;
  indexOfPointAtLocation(location: NSPoint): NSInteger;
  useSnaps(): boolean;
  pointsToSnap(): MSPointArray;
  bounds(): NSRect;
  convertPointToAbsoluteCoordinates(point: NSPoint): NSPoint;
  handleLinesColor(): NSColor;
  handleLinesPath(): NSBezierPath;
  drawHandleAtPoint_index_selected(p: NSPoint, index: NSInteger, selected: boolean): void;
  drawHandleLines(): void;

  layer(): MSStyledLayer;
  setLayer(layer: MSStyledLayer): void;
  indexForSelectedPoint(): NSInteger;
  setIndexForSelectedPoint(indexForSelectedPoint: NSInteger): void;
  coordinateSpace(): MSLayer;
  setCoordinateSpace(coordinateSpace: MSLayer): void;
}

declare class MSPolygonShapeItem extends MSCustomShapeItem {}

declare class MSPopoverAction extends MSDocumentAction {
  static popoverClass(): any;
  showPopover(sender: any): void;
  closePopover(): void;
  popoverWillClose(popover: BCPopover): void;

  popoverViewController(): NSViewController;
  setPopoverViewController(popoverViewController: NSViewController): void;
  popupToolbarItem(): MSPopUpToolbarItem;
  setPopupToolbarItem(popupToolbarItem: MSPopUpToolbarItem): void;
  popoverVisible(): boolean;
  setPopoverVisible(popoverVisible: boolean): void;
}

declare class MSPositionInspectorItem extends MSInspectorItem {}

declare class MSPreferencePane extends NSViewController {
  initWithPreferencesController<T extends MSPreferencePane>(preferencesController: MSPreferencesController): T;
  static identifier(): NSString;
  static title(): NSString;
  static toolbarIcon(): NSImage;
  static nibName(): NSString;
  dismissAlertWindow(alertWindow: NSWindow): void;
  dismissAlertSheet(): void;
  didSwitchToPane(): void;

  preferencesController(): MSPreferencesController;
  setPreferencesController(preferencesController: MSPreferencesController): void;
}

declare interface IMSPreferencePaneSizing {
  preferredSize(): NSSize;
}

declare class MSPreferencesController extends NSWindowController implements INSWindowDelegate {
  switchToPaneWithIdentifier(identifier: NSString | string): MSPreferencePane;
  static sharedController(): MSPreferencesController;
  updateWindowFrame(): void;
  dismissAnyAlertSheet(): void;
  existingPaneWithIdentifier(identifier: NSString | string): MSPreferencePane;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;

  currentPreferencePane(): MSPreferencePane;
  setCurrentPreferencePane(currentPreferencePane: MSPreferencePane): void;
}

declare class MSPreferencesPluginInfo extends NSObject {
  static pluginInfoWithPluginBundle(pluginBundle: MSPluginBundle): MSPreferencesPluginInfo;
  static pluginInfoWithName(name: NSString | string): MSPreferencesPluginInfo;

  name(): NSString;
  setName(name: NSString | string): void;
  pluginDescription(): NSString;
  setPluginDescription(pluginDescription: NSString | string): void;
  attributedTitle(): NSAttributedString;
  setAttributedTitle(attributedTitle: NSAttributedString): void;
  icon(): NSImage;
  setIcon(icon: NSImage): void;
  enableCheckboxTitle(): NSString;
  setEnableCheckboxTitle(enableCheckboxTitle: NSString | string): void;
  version(): NSString;
  setVersion(version: NSString | string): void;
  updateVersionString(): NSString;
  setUpdateVersionString(updateVersionString: NSString | string): void;
  updateAvailable(): boolean;
  setUpdateAvailable(updateAvailable: boolean): void;
  isCompatible(): boolean;
  setIsCompatible(isCompatible: boolean): void;
  warningString(): NSString;
  setWarningString(warningString: NSString | string): void;
  namePlusAuthor(): NSString;
  setNamePlusAuthor(namePlusAuthor: NSString | string): void;
  homepage(): NSURL;
  setHomepage(homepage: NSURL): void;
  isUpdating(): boolean;
  setIsUpdating(isUpdating: boolean): void;
  suppliesData(): boolean;
  setSuppliesData(suppliesData: boolean): void;
  pluginBundle(): MSPluginBundle;
  setPluginBundle(pluginBundle: MSPluginBundle): void;
  enabled(): boolean;
  setEnabled(enabled: boolean): void;
}

declare class MSPresetPickerButton extends NSButton {
  animateToOrigin(origin: NSPoint): void;
}

declare class MSPresetPickerPresetButton extends MSPresetPickerButton implements INSDraggingSource {
  frameConsideringAnimation(): NSRect;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
}

declare interface IMSPresetPickerViewDelegate {
  numberOfPresetsInPickerView(pickerView: MSAssetPickerView): NSUInteger;
  addPresetForPickerView(pickerView: MSAssetPickerView): void;
  pickerView_removePresetAtIndex(pickerView: MSAssetPickerView, index: NSUInteger): void;
  pickerView_didPickPresetAtIndex(pickerView: MSAssetPickerView, index: NSUInteger): void;
  drawContentForCellInPickerView_withFrame_atIndex_inRect(pickerView: MSAssetPickerView, drawFrame: boolean, index: NSUInteger, rect: NSRect): void;
  shouldShowAddPresetButton(pickerView: MSAssetPickerView): boolean;
  pickerViewSupportsDrag_fromIndex(pickerView: MSAssetPickerView, index: NSUInteger): boolean;
  pickerViewSupportsDrop(pickerView: MSAssetPickerView): boolean;
  pickerView_shouldShowMenuForItemAtIndex(pickerView: MSAssetPickerView, index: NSUInteger): boolean;
  pickerView_didDragPresetAtIndex_toIndex(pickerView: MSAssetPickerView, sourceIndex: NSUInteger, destinationIndex: NSUInteger): boolean;
  pickerView_insertPresetFromDragRepresentation_atIndex(view: MSAssetPickerView, representation: any, index: NSUInteger): boolean;
  pickerView_dragRepresentationForItemAtIndex(pickerView: any, index: NSUInteger): any;
  presetPickerFinishedDragging(presetView: MSAssetPickerView): void;
  pickerView_didHoverPresetAtIndex(pickerView: MSAssetPickerView, index: NSInteger): void;
  pickerView_didStopHoverPresetAtIndex(pickerView: MSAssetPickerView, index: NSInteger): void;
  pickerView_tooltipForPresetButtonAtIndex(pickerView: MSAssetPickerView, index: NSUInteger): NSString;
}

declare class MSPreviewImageCache extends NSObject {
  initWithSubdirectoryName<T extends MSPreviewImageCache>(subdirectory: NSString | string): T;
  fetchPreviewImageForDocumentAtURL_maximumPixelSize_handler(documentURL: NSURL, maxPixelSize: CGFloat, handler: MSPreviewImageHandler): void;

  directoryURL(): NSURL;
  setDirectoryURL(directoryURL: NSURL): void;
}

declare class MSPrintAction extends MSDocumentAction {}

declare class MSRadialGradientEventHandler extends MSGradientEventHandler {
  ellipsePoint(): NSPoint;
  setEllipsePoint(point: NSPoint): void;
  ovalPath(): NSBezierPath;
}

declare class MSRectangleShapeItem extends MSCustomShapeItem {}

declare class MSReduceFileSizeAction extends MSDocumentAction {}

declare class MSReduceImageSizeAction extends MSDocumentAction {
  reduceImageSize(sender: any): IBAction;
}

declare class MSRemoveAllOverridesAction extends MSDocumentAction {
  removeAllOverridesFromSelection(sender: any): IBAction;
}

declare class MSRemoveFlowAction extends MSFlowBaseAction {
  removeFlow(sender: any): IBAction;
}

declare class MSRenameLayerAction extends MSDocumentAction {
  renameLayer(sender: any): IBAction;
}

declare interface IMSReorderingContainerDelegate {
  containerBackground_dragDidReorderChildAtIndex_toIndex(backgroundView: MSReorderingContainerView, fromIndex: NSUInteger, toIndex: NSUInteger): void;
  startingOffsetForStackingContainerBackground(backgroundView: MSReorderingContainerView): CGFloat;
  numberOfReorderableSubviewsForContainerBackground(backgroundView: MSReorderingContainerView): NSUInteger;
}

declare class MSReorderingContainerView extends NSView {
  reorderSubviewsAnimated(flag: boolean): void;

  delegate(): any;
  setDelegate(delegate: any): void;
}

declare class MSReorderingView extends NSView implements INSDraggingSource {
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;

  deleteAction(): string;
  setDeleteAction(deleteAction: string): void;
  duplicateAction(): string;
  setDuplicateAction(duplicateAction: string): void;
  target(): any;
  setTarget(target: any): void;
  reorderingTag(): NSInteger;
  setReorderingTag(reorderingTag: NSInteger): void;
}

declare class MSShowReplaceColorSheetAction extends MSDocumentAction {
  showReplaceColorSheet(sender: any | null): IBAction;
}

declare class MSReplaceColorAction extends MSDocumentAction {
  replaceColor(sender: any): IBAction;
}

declare interface IMSReplaceColorActionDetails {
  ignoreAlphaWhenMatchingOriginalColor(): boolean;
  setIgnoreAlphaWhenMatchingOriginalColor(ignoreAlphaWhenMatchingOriginalColor: boolean): void;
  originalColor(): MSColor;
  setOriginalColor(originalColor: MSColor): void;
  replaceAlphaOfOriginalColor(): boolean;
  setReplaceAlphaOfOriginalColor(replaceAlphaOfOriginalColor: boolean): void;
  replacementColor(): MSColor;
  setReplacementColor(replacementColor: MSColor): void;
}

declare class MSReplaceColorSheetController extends CHSheetController implements INSWindowDelegate, INSMenuDelegate, IMSColorInspectorDelegate {
  pickOriginalColor(sender: any): IBAction;
  pickReplacementColor(sender: any): IBAction;
  toggleIgnoreAlpha(sender: any): IBAction;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  colorInspector_didChangeToColor(inspector: MSColorInspector, color: MSColor): void;
  inspectorDidChangeType(inspector: MSColorInspector): void;
  colorInspectorDidChange(inspector: MSColorInspector): void;
  colorInspectorWillClose(inspector: MSColorInspector): void;
  colorInspectorShouldAdjustInspectorToPopover(inspector: MSColorInspector): boolean;
  colorInspectorUndoManager(inspector: MSColorInspector): NSUndoManager;

  cancelButton(): NSButton;
  setCancelButton(cancelButton: NSButton): void;
  ignoreAlphaWhenMatchingOriginalColorButton(): NSButton;
  setIgnoreAlphaWhenMatchingOriginalColorButton(ignoreAlphaWhenMatchingOriginalColorButton: NSButton): void;
  originalColorButton(): MSStylePartPreviewButton;
  setOriginalColorButton(originalColorButton: MSStylePartPreviewButton): void;
  replacementColorButton(): MSStylePartPreviewButton;
  setReplacementColorButton(replacementColorButton: MSStylePartPreviewButton): void;
  keepAlphaOfOriginalColorButton(): NSButton;
  setKeepAlphaOfOriginalColorButton(keepAlphaOfOriginalColorButton: NSButton): void;
  replacementColorPopoverDismissingView(): MSPopoverDismisserView;
  setReplacementColorPopoverDismissingView(replacementColorPopoverDismissingView: MSPopoverDismisserView): void;
  replaceButton(): NSButton;
  setReplaceButton(replaceButton: NSButton): void;
}

declare class MSReplaceFontCellView extends NSTableCellView {
  fontFamilyButton(): NSButton;
  setFontFamilyButton(fontFamilyButton: NSButton): void;
  fontWeightPopUpButton(): NSPopUpButton;
  setFontWeightPopUpButton(fontWeightPopUpButton: NSPopUpButton): void;
}

declare class MSReplaceFontsAction extends MSDocumentAction implements IMSWindowBadgeAction {
  replaceMissingFonts(sender: any): IBAction;

  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSReplaceFontsSheet extends CHSheetController {}

declare class MSReplaceImageAction extends MSDocumentAction {
  replaceImage(sender: any): IBAction;
}

declare class MSReplaceWithSymbolAction extends MSSharedSymbolAction {}

declare class MSReplaceWithSymbolMenuBuilder extends MSMenuBuilder {
  updateMenuItem_forDocument(item: NSMenuItem, document: MSDocument): void;
}

declare class MSReplacementFontPickerViewController extends MSFontFamilyPickerViewController {}

declare class MSResetSharedStyleAction extends MSBaseSharedObjectAction {
  resetSharedStyle(sender: any): IBAction;
}

declare class MSResetSymbolSizeAction extends MSDocumentAction {
  resetSymbolSize(sender: any): IBAction;
}

declare class MSResizeArtboardToFitAction extends MSDocumentAction {
  resizeArtboardToFit(sender: any): IBAction;
}

declare class MSResizeGestureRecognizer extends MSDragGestureRecognizer {
  maySnap(): boolean;
  setMaySnap(maySnap: boolean): void;
  shouldResizeFromCenter(): boolean;
  setShouldResizeFromCenter(shouldResizeFromCenter: boolean): void;
  constrainProportions(): boolean;
  setConstrainProportions(constrainProportions: boolean): void;
  originalProportions(): CGFloat;
  setOriginalProportions(originalProportions: CGFloat): void;
}

declare class MSResizeInspectorItem extends MSInspectorItem {}

declare class MSResizeInspectorSection extends MSBaseInspectorSection {}

declare class MSResizingPreview extends NSView {
  previewResizingOptions(): NSAutoresizingMaskOptions;
  setPreviewResizingOptions(previewResizingOptions: NSAutoresizingMaskOptions): void;
}

declare class MSResizingPreviewContainer extends NSView {
  fixTop(): boolean;
  setFixTop(fixTop: boolean): void;
  fixBottom(): boolean;
  setFixBottom(fixBottom: boolean): void;
  fixLeft(): boolean;
  setFixLeft(fixLeft: boolean): void;
  fixRight(): boolean;
  setFixRight(fixRight: boolean): void;
  fixWidth(): boolean;
  setFixWidth(fixWidth: boolean): void;
  fixHeight(): boolean;
  setFixHeight(fixHeight: boolean): void;
  animate(): boolean;
  setAnimate(animate: boolean): void;
}

declare class MSRevealPluginsAction extends MSAction {
  revealPlugins(sender: any): IBAction;
}

declare class MSReversePathAction extends MSDocumentAction {
  reversePath(sender: any): IBAction;
}

declare class MSRightOffsetHoverButtonCell extends MSHoverButtonCell {}

declare class MSRotateAction extends MSEventHandlerAction {
  rotate(sender: any): IBAction;
}

declare class MSRotateClockwiseAction extends MSEventHandlerAction {
  rotate90C(sender: any): IBAction;
}

declare class MSRotateCounterclockwiseAction extends MSEventHandlerAction {
  rotate90CC(sender: any): IBAction;
}

declare class MSRotateEventHandler extends MSNormalBaseEventHandler implements INSTouchBarDelegate {
  static cursorForDegrees(degrees: NSInteger): NSCursor;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;

  exitOnMouseUp(): boolean;
  setExitOnMouseUp(exitOnMouseUp: boolean): void;
  disableMoving(): boolean;
  setDisableMoving(disableMoving: boolean): void;
  rotationCenterPoint(): NSPoint;
  setRotationCenterPoint(rotationCenterPoint: NSPoint): void;
  rotationItems(): NSArray<any>;
  setRotationItems(rotationItems: NSArray<any> | any[]): void;
}

declare class MSRotationBar extends NSControl {
  rotation(): CGFloat;
  setRotation(rotation: CGFloat): void;
}

declare class MSRotationGestureInterpreter extends NSObject {
  updateWithDragRecognizer(recognizer: MSDragGestureRecognizer): IBAction;
  updateWithLocation(location: NSPoint): void;
  rotationInLayer(layer: MSLayer | null): CGFloat;
  rotationInDegreesInLayer(layer: MSLayer | null): CGFloat;

  centerPoint(): NSPoint;
  setCenterPoint(centerPoint: NSPoint): void;
}

declare class MSRoundToPixelAction extends MSDocumentAction {
  roundToPixel(sender: any): IBAction;
}

declare class MSResetOriginAction extends MSDocumentAction {
  resetRulerOrigin(sender: any): IBAction;
}

declare class MSToggleRulerDragLockingAction extends MSDocumentAction {
  toggleRulerDragLocking(sender: any): IBAction;
}

declare class MSRulerBlockCell extends MSTintedHoverButtonCell {}

declare class MSRulerView extends NSView {
  refreshGuideInDrawViewAtIndex(anIndex: NSUInteger): void;
  refreshGuideInDrawViewAtPosition(line: CGFloat): void;
  mouseEventToPoint(anEvent: NSEvent): NSPoint;
  document(): MSDocument;
  baseLine(): CGFloat;
  baseLineIncludingScrollOrigin(includeOrigin: boolean): CGFloat;
  drawGuidesOnCanvasInRect(aRect: NSRect): void;
  bezierPathForLineAtPosition_inRect(line: CGFloat, aRect: NSRect): NSBezierPath;
  occupiedRegionForRect_withOffset_zoom(rect: NSRect, left: NSInteger, zoom: CGFloat): NSBezierPath;
  scrollOrigin(): NSPoint;
  zoomValue(): CGFloat;
  rulerLength(): NSInteger;
  refreshTemporaryRulerGuide(): void;
  relevantAxisForPoint(aPoint: NSPoint): CGFloat;
  otherAxisForPoint(aPoint: NSPoint): CGFloat;
  setResizeCursor(): void;
  prepareRulerViewLayer(dirtyRect: NSRect): void;

  rulerData(): MSRulerData;
  setRulerData(rulerData: MSRulerData): void;
  document(): MSDocument;
  setDocument(document: MSDocument): void;
  contentView(): MSContentDrawView;
  setContentView(contentView: MSContentDrawView): void;
  mouseDidDrag(): boolean;
  setMouseDidDrag(mouseDidDrag: boolean): void;
  mouseDownPoint(): NSPoint;
  setMouseDownPoint(mouseDownPoint: NSPoint): void;
  axis(): BCAxis;
  setAxis(axis: BCAxis): void;
  temporaryRulerGuide(): CGFloat;
  setTemporaryRulerGuide(temporaryRulerGuide: CGFloat): void;
  static rulerDraggingLocked(): boolean;
  static setRulerDraggingLocked(rulerDraggingLocked: boolean): void;
}

declare enum MSLineDrawingOptions {
  MSShortLine = 0x01,
  MSDarkLine = 0x02,
}

declare enum MSMetricsDrawingOptions {
  MSMetricsDrawingLeft = 1,
  MSMetricsDrawingRight = 2,
}

declare class MSRulerViewLayer extends CALayer {
  drawBackground(): void;
  drawBackgroundForLabel_atPoint(string: NSString | string, p: NSPoint): void;

  axis(): BCAxis;
  setAxis(axis: BCAxis): void;
  formatter(): NSNumberFormatter;
  setFormatter(formatter: NSNumberFormatter): void;
  snapColor(): NSColor;
  setSnapColor(snapColor: NSColor): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
  baseLine(): CGFloat;
  setBaseLine(baseLine: CGFloat): void;
  occupiedRegion(): NSRect;
  setOccupiedRegion(occupiedRegion: NSRect): void;
  guides(): NSArray<any>;
  setGuides(guides: NSArray<any> | any[]): void;
  shouldDrawGuides(): boolean;
  setShouldDrawGuides(shouldDrawGuides: boolean): void;
  parentView(): NSView;
  setParentView(parentView: NSView): void;
}

declare class MSRunCustomScriptAction extends MSAction {
  runCustomScript(sender: any): IBAction;
}

declare class MSRunCustomScriptSheet extends CHSheetController implements INSTextViewDelegate {
  saveAction(sender: any): IBAction;
  scriptingMenuAction(sender: any): IBAction;
  textView_clickedOnLink_atIndex(textView: NSTextView, link: any, charIndex: NSUInteger): boolean;
  textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: any, rect: NSRect, event: NSEvent, charIndex: NSUInteger): void;
  textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: any, charIndex: NSUInteger): NSArray<any>;
  textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: any, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType): boolean;
  textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange): NSRange;
  textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSArray<any> | any[], newSelectedCharRanges: NSArray<any> | any[]): NSArray<any>;
  textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSDictionary<any, any> | {[key: string]: any}, newTypingAttributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  textViewDidChangeSelection(notification: NSNotification): void;
  textViewDidChangeTypingAttributes(notification: NSNotification): void;
  textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: NSString | string, characterIndex: NSUInteger): NSString;
  textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger | null): NSArray<any>;
  textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  textView_doCommandBySelector(textView: NSTextView, commandSelector: string): boolean;
  textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange): NSInteger;
  textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger): NSMenu;
  textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSDictionary<any, any> | {[key: string]: any}, checkingTypes: NSTextCheckingTypes): NSDictionary<any, any>;
  textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, results: NSArray<any> | any[], orthography: NSOrthography, wordCount: NSInteger): NSArray<any>;
  textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger): NSURL;
  textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray<any> | any[]): NSSharingServicePicker;
  undoManagerForTextView(view: NSTextView): NSUndoManager;
  textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSArray<any> | any[]): NSArray<any>;
  textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger): boolean;
  textView_clickedOnLink(textView: NSTextView, link: any): boolean;
  textView_clickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_draggedCell_inRect_event(view: NSTextView, cell: any, rect: NSRect, event: NSEvent): void;

  logField(): NSTextView;
  setLogField(logField: NSTextView): void;
}

declare class MSRunLastScriptAction extends MSAction {
  runLastScript(sender: any): IBAction;
}

declare class MSRunPluginAction extends MSAction {
  runPlugin(sender: any): IBAction;
}

declare class MSSaveAsTemplateAction extends MSDocumentAction {
  saveAsTemplate(sender: any): IBAction;
}

declare class MSSaveAsTemplateSheet extends CHSheetController {
  static runForDocument_completionBlock(document: MSDocument, block: MSSaveAsTemplateSheetCompletionBlock): any;

  inputCompletionBlock(): MSSaveAsTemplateSheetCompletionBlock;
  setInputCompletionBlock(inputCompletionBlock: MSSaveAsTemplateSheetCompletionBlock): void;
  inputField(): NSTextField;
  setInputField(inputField: NSTextField): void;
}

declare class MSSavedLayerFrames extends NSObject {
  initWithLayer<T extends MSSavedLayerFrames>(layer: MSLayer): T;
  savedFrameForLayer(layer: MSLayer): NSRect;
  restore(): void;

  layer(): MSLayer;
  setLayer(layer: MSLayer): void;
}

declare class MSScaleAction extends MSDocumentAction {
  scale(sender: any): IBAction;
}

declare class MSScaleSheet extends CHSheetController {}

declare class MSScissorsEventHandler extends MSEventHandler {}

declare class MSScriptDocument extends NSDocument {}

declare class MSScrollView extends NSScrollView {
  allowsScrolling(): boolean;
  setAllowsScrolling(allowsScrolling: boolean): void;
}

declare class MSSectionBackgroundSeparatorView extends NSView {
  static separator(): MSSectionBackgroundSeparatorView;
  static separatorWithInsets(insets: NSEdgeInsets): MSSectionBackgroundSeparatorView;
}

declare class MSColorInspectorSeparatorView extends MSSectionBackgroundSeparatorView {}

declare class MSFlatSectionBackgroundSeparatorView extends MSSectionBackgroundSeparatorView {}

declare class MSSubtleSectionSeparatorView extends MSSectionBackgroundSeparatorView {}

declare class MSSectionBackgroundView extends NSView {
  static sectionBackgroundWithController(controller: NSViewController): MSSectionBackgroundView;
  recalculateHeight(): void;
  stackSubviews(): void;
}

declare class MSWhiteHeaderView extends NSView {}

declare class MSSelectAllArtboardsAction extends MSDocumentAction {
  selectAllArtboards(sender: any): IBAction;
}

declare class MSSelectVectorHandleGestureRecognizer extends MSGestureRecognizer {
  toggleSelection(): boolean;
  setToggleSelection(toggleSelection: boolean): void;
  modifierFlags(): NSEventModifierFlags;
  setModifierFlags(modifierFlags: NSEventModifierFlags): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSSelectVectorHandleGestureRecognizerDelegate {
  gestureRecognizerShouldDelaySelectionUntilMouseUp(sender: MSSelectVectorHandleGestureRecognizer): boolean;
}

declare class MSSendToSymbolsPageAction extends MSDocumentAction {
  sendSymbolToSymbolsPage(sender: any): IBAction;
}

declare class MSSeparatorInspectorItem extends MSInspectorItem {}

declare class MSSubtleSeparatorInspectorItem extends MSInspectorItem {}

declare class MSShadowInspectorViewController extends MSColorStylePartInspectorViewController {
  type(): NSString;
  setType(type: NSString | string): void;
}

declare class MSShapeAction extends MSDocumentAction {}

declare class MSBaseShapeAction extends MSBaseInsertAction {
  static insertShapeLayer_identifier_document(shapeOrPath: any, identifier: NSString | string, doc: MSDocument): any;
  prototypeLayer(): MSShapePathLayer;
}

declare class MSRectangleShapeAction extends MSBaseShapeAction {}

declare class MSOvalShapeAction extends MSBaseShapeAction {}

declare class MSRoundedRectangleShapeAction extends MSBaseShapeAction {}

declare class MSStarShapeAction extends MSBaseShapeAction {}

declare class MSPolygonShapeAction extends MSBaseShapeAction {}

declare class MSTriangleShapeAction extends MSBaseShapeAction {}

declare class MSShapeEventHandler extends MSEventHandler implements INSTextDelegate, INSMenuDelegate, IMSGestureRecognizerDelegate {
  forceSelection(sender: NSButton): IBAction;
  pathDidOpenOrClose(): void;
  refreshCloseOrOpenPathUI(): void;
  textShouldBeginEditing(textObject: NSText): boolean;
  textShouldEndEditing(textObject: NSText): boolean;
  textDidBeginEditing(notification: NSNotification): void;
  textDidEndEditing(notification: NSNotification): void;
  textDidChange(notification: NSNotification): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  gestureRecognizer_shouldAttemptToRecognizeAtPoint_modifierFlags(gestureRecognizer: MSGestureRecognizer, point: NSPoint, flags: NSEventModifierFlags): boolean;

  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  canvasHandler(): MSVectorCanvas;
  setCanvasHandler(canvasHandler: MSVectorCanvas): void;
  inspectorViewController(): MSEditShapeInspectorViewController;
  setInspectorViewController(inspectorViewController: MSEditShapeInspectorViewController): void;
  pathController(): MSPathController;
  setPathController(pathController: MSPathController): void;
  editingBehavior(): MSShapeEditingBehavior;
  setEditingBehavior(editingBehavior: MSShapeEditingBehavior): void;
}

declare class MSSharedObjectAction extends MSDocumentAction implements INSMenuDelegate {
  sortedObjectMenuItemsForMenu(menu: NSMenu): NSArray<any>;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;

  sharedObjectName(): NSString;
  setSharedObjectName(sharedObjectName: NSString | string): void;
}

declare class MSSharedObjectView extends NSView {
  sharedObject(): MSShareableObject;
  setSharedObject(sharedObject: MSShareableObject): void;
  label(): NSString;
  setLabel(label: NSString | string): void;
  labelColor(): NSColor;
  setLabelColor(labelColor: NSColor): void;
  labelBackgroundColor(): NSColor;
  setLabelBackgroundColor(labelBackgroundColor: NSColor): void;
  borders(): NSUInteger;
  setBorders(borders: NSUInteger): void;
  hasShadow(): boolean;
  setHasShadow(hasShadow: boolean): void;
}

declare class MSSharedStylesInspectorItem extends MSInspectorItem implements INSMenuDelegate {
  beginRenameSharedObject_completionBlock(sharedObject: MSSharedObject, block: MSRenameSharedObjectBlock): void;
  layerWithSharedStyleDidChange(): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
}

declare class MSSharedSymbolAction extends MSSharedObjectAction {
  menuBuilder(): MSForeignObjectMenuBuilder;
  setMenuBuilder(menuBuilder: MSForeignObjectMenuBuilder): void;
}

declare class MSShowOnlineHelpAction extends MSAction {
  showOnlineHelp(sender: any): IBAction;
}

declare class MSShowReleaseNotesWindowAction extends MSAction {
  showReleaseNotesWindow(sender: any): IBAction;
}

declare class MSShowSupportPageAction extends MSAction {
  showSupportPage(sender: any): IBAction;
}

declare class MSSizeInspectorItem extends MSBaseSizeInspectorItem {}

declare class MSSliceDragView extends NSView implements INSDraggingSource, INSPasteboardWriting {
  setExportableLayer_previewCompletionBlock(layer: MSLayer, completionBlock: dispatch_block_t): void;
  sizeToFit(): void;
  draggingSession_sourceOperationMaskForDraggingContext(session: NSDraggingSession, context: NSDraggingContext): NSDragOperation;
  draggingSession_willBeginAtPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_movedToPoint(session: NSDraggingSession, screenPoint: NSPoint): void;
  draggingSession_endedAtPoint_operation(session: NSDraggingSession, screenPoint: NSPoint, operation: NSDragOperation): void;
  ignoreModifierKeysForDraggingSession(session: NSDraggingSession): boolean;
  writableTypesForPasteboard(pasteboard: NSPasteboard): NSArray<any>;
  writingOptionsForType_pasteboard(type: NSPasteboardType, pasteboard: NSPasteboard): NSPasteboardWritingOptions;
  pasteboardPropertyListForType(type: NSPasteboardType): any;
}

declare class MSSliceExportOptions extends NSViewController {
  static exportOptionsForRequests(requests: NSArray<any> | any[]): MSSliceExportOptions;
}

declare class MSSliceExportPropertiesInspectorItem extends MSInspectorItem implements IMSLayerChangeObserver {
  layerDidChange(layer: MSLayer): void;
}

declare class MSSmallButtonCell extends NSButtonCell {}

declare class MSSmartRotateAction extends MSDocumentAction {
  smartRotate(sender: any): IBAction;
}

declare class MSSmartRotateEventHandler extends MSEventHandler {
  numberOfRepetitions(): NSUInteger;
  setNumberOfRepetitions(numberOfRepetitions: NSUInteger): void;
}

declare class MSSmartRotateSheet extends CHSheetController {
  explanationLabel(): NSTextField;
  setExplanationLabel(explanationLabel: NSTextField): void;
  numberOfCopies(): NSInteger;
  setNumberOfCopies(numberOfCopies: NSInteger): void;
}

declare class MSSpecialLayerViewController extends NSViewController implements IMSInspectorSection, INSMenuDelegate {
  changeTextLayerFont(sender: any): IBAction;
  valuesPossiblyChanged(): void;
  views(): NSArray<any>;
  wantsSeparatorAfterViews(): boolean;
  separatorInsets(): NSEdgeInsets;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;

  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare class MSSplitView extends NSSplitView {}

declare class MSSidebarSplitView extends NSSplitView {}

declare class MSSquareButtonCell extends NSButtonCell {}

declare class MSStackView extends NSView {
  stack(sender: any): IBAction;

  autoupdatesMaximumHeight(): boolean;
  setAutoupdatesMaximumHeight(autoupdatesMaximumHeight: boolean): void;
  maximumHeight(): NSInteger;
  setMaximumHeight(maximumHeight: NSInteger): void;
  minimumHeight(): CGFloat;
  setMinimumHeight(minimumHeight: CGFloat): void;
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  keyResponder(): any;
  setKeyResponder(keyResponder: any): void;
}

declare class MSStackViewScrollView extends NSScrollView {}

declare class MSStandardInspectorViewControllers extends NSObject {
  geometryViewController(): MSGeometryInspectorSection;
  setGeometryViewController(geometryViewController: MSGeometryInspectorSection): void;
  resizeSection(): MSResizeInspectorSection;
  setResizeSection(resizeSection: MSResizeInspectorSection): void;
  fillViewController(): MSMultipleFillInspectorViewController;
  setFillViewController(fillViewController: MSMultipleFillInspectorViewController): void;
  borderViewController(): MSMultipleBorderInspectorViewController;
  setBorderViewController(borderViewController: MSMultipleBorderInspectorViewController): void;
  blurViewController(): MSBlurInspectorViewController;
  setBlurViewController(blurViewController: MSBlurInspectorViewController): void;
  colorControlsViewController(): MSColorControlsInspectorViewController;
  setColorControlsViewController(colorControlsViewController: MSColorControlsInspectorViewController): void;
  flowInspectorViewController(): MSFlowInspectorSection;
  setFlowInspectorViewController(flowInspectorViewController: MSFlowInspectorSection): void;
  appearanceInspectorSection(): MSAppearanceInspectorSection;
  setAppearanceInspectorSection(appearanceInspectorSection: MSAppearanceInspectorSection): void;
  specialLayerViewController(): MSSpecialLayerViewController;
  setSpecialLayerViewController(specialLayerViewController: MSSpecialLayerViewController): void;
  exportPreviewViewController(): MSExportPreviewInspectorSection;
  setExportPreviewViewController(exportPreviewViewController: MSExportPreviewInspectorSection): void;
  exportViewController(): MSExportInspectorViewController;
  setExportViewController(exportViewController: MSExportInspectorViewController): void;
  footerViewController(): MSFooterInspectorSection;
  setFooterViewController(footerViewController: MSFooterInspectorSection): void;
}

declare class MSStarShapeItem extends MSCustomShapeItem {}

declare class MSBaseStyleAction extends MSDocumentAction {}

declare class MSAddFillAction extends MSBaseStyleAction {
  addFill(sender: any): IBAction;
}

declare class MSAddBorderAction extends MSBaseStyleAction {
  addBorder(sender: any): IBAction;
}

declare class MSAddShadowAction extends MSBaseStyleAction {
  addShadow(sender: any): IBAction;
}

declare class MSAddInnerShadowAction extends MSBaseStyleAction {
  addInnerShadow(sender: any): IBAction;
}

declare class MSShowFillOptionsAction extends MSBaseStyleAction {
  showFillOptions(sender: any): IBAction;
}

declare class MSShowBorderOptionsAction extends MSBaseStyleAction {
  showBorderOptions(sender: any): IBAction;
}

declare class MSRemoveUnusedStylesAction extends MSBaseStyleAction {
  removeUnusedStyles(sender: any): IBAction;
}

declare class MSStyleOverrideInspectorItem extends MSOverrideInspectorItem {}

declare class MSLayerStyleOverrideInspectorItem extends MSStyleOverrideInspectorItem {}

declare class MSTextStyleOverrideInspectorItem extends MSStyleOverrideInspectorItem {}

declare interface IMSStylePartInspectorDelegate {
  switchToEventHandlerWithName(handlerName: NSString | string): any;
  layers(): NSArray<any>;
  reload(): void;
}

declare class MSStylePartInspectorItem extends NSViewController {
  updateDisplayedValues(): void;

  styleParts(): NSArray<any>;
  setStyleParts(styleParts: NSArray<any> | any[]): void;
  layers(): NSArray<any>;
  setLayers(layers: NSArray<any> | any[]): void;
  stylesController(): NSArrayController;
  setStylesController(stylesController: NSArrayController): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSStylePartInspectorItemDelegate {
  stylePartInspectorItemDocument(inspectorItem: NSViewController): MSDocument;
  valuesPossiblyChanged(item: NSViewController): void;
}

declare class MSStylePartInspectorViewController extends NSViewController implements IMSInspectorSection, INSWindowDelegate {
  static stylePartViewController(): any;
  prepareForReuse(): void;
  hasEnabledStyle(): boolean;
  didGetAddedToInspector(): void;
  prepare(): void;
  supportedActionsForLayers(layers: NSArray<any> | any[]): MSMultipleStylePartInspectorAction;
  closePopover(): void;
  views(): NSArray<any>;
  wantsSeparatorAfterViews(): boolean;
  separatorInsets(): NSEdgeInsets;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;

  styleParts(): NSArray<any>;
  setStyleParts(styleParts: NSArray<any> | any[]): void;
  arrayController(): NSArrayController;
  setArrayController(arrayController: NSArrayController): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  index(): NSUInteger;
  setIndex(index: NSUInteger): void;
}

declare enum MSMultipleStylePartInspectorAction {
  MSMultipleStylePartInspectorActionNone = 0,
  MSMultipleStylePartInspectorActionDuplicate = 1 << 0,
  MSMultipleStylePartInspectorActionRemove = 1 << 1,
}

declare class MSStylePartPreviewButton extends MSInspectorButton {
  stylePart(): MSStylePart;
  setStylePart(stylePart: MSStylePart): void;
  color(): NSColor;
  setColor(color: NSColor): void;
  delegate(): any;
  setDelegate(delegate: any): void;
  dragOwner(): any;
  setDragOwner(dragOwner: any): void;
}

declare class MSMultipleStylePartsPlaceholder extends MSStylePart {}

declare class MSMultipleColorsPlaceholder extends NSObject {
  static placeholderColor(): MSMultipleColorsPlaceholder;
}

declare interface IMSStylePartPreviewButtonDisabledTarget {
  stylePartPreviewButtonDisabledAction(button: MSStylePartPreviewButton): IBAction;
}

declare interface IMSStylePartPreviewButtonDelegate {
  stylePartPreviewButtonPreviewColorSpace(button: MSStylePartPreviewButton): NSColorSpace;
}

declare class MSSwitchModeButtonCell extends NSButtonCell {}

declare class MSSymbolInstanceOverrideInspectorItem extends MSOverrideInspectorItem {
  labelField(): NSTextField;
  setLabelField(labelField: NSTextField): void;
  popupButton(): NSPopUpButton;
  setPopupButton(popupButton: NSPopUpButton): void;
}

declare class MSSymbolInstanceSection extends MSBaseInspectorSection {}

declare class MSSyncLibraryAction extends MSDocumentAction implements IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSBaseAlignAction extends MSDocumentAction {
  textAlignment(): NSTextAlignment;
}

declare class MSAlignLeftAction extends MSBaseAlignAction {}

declare class MSAlignCenterAction extends MSBaseAlignAction {}

declare class MSAlignRightAction extends MSBaseAlignAction {}

declare class MSAlignJustifiedAction extends MSBaseAlignAction {}

declare class MSTextAlignTouchBarGroupAction extends MSTouchBarGroupAction {}

declare class MSTextLabelForUpDownField extends NSTextField {
  upDownTextField(): NSTextField;
  setUpDownTextField(upDownTextField: NSTextField): void;
  textFields(): NSArray<any>;
  setTextFields(textFields: NSArray<any> | any[]): void;
}

declare class MSTextLayerEventHandler extends MSEventHandler implements INSTextViewDelegate, INSTextStorageDelegate, INSWindowDelegate, IMSTextLayerEditingDelegate, IMSTextLayerTextViewDelegate, IMSFirstLineTypesetterDelegate {
  applyTextTransform(textTransformValue: NSNumber | number | null): void;
  applyTextColor(color: MSColor): NSColor;
  updateTextViewStyling(): void;
  setListType(list: NSTextList): void;
  textView_clickedOnLink_atIndex(textView: NSTextView, link: any, charIndex: NSUInteger): boolean;
  textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: any, rect: NSRect, event: NSEvent, charIndex: NSUInteger): void;
  textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: any, charIndex: NSUInteger): NSArray<any>;
  textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: any, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType): boolean;
  textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange): NSRange;
  textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSArray<any> | any[], newSelectedCharRanges: NSArray<any> | any[]): NSArray<any>;
  textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSDictionary<any, any> | {[key: string]: any}, newTypingAttributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  textViewDidChangeSelection(notification: NSNotification): void;
  textViewDidChangeTypingAttributes(notification: NSNotification): void;
  textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: NSString | string, characterIndex: NSUInteger): NSString;
  textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger | null): NSArray<any>;
  textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  textView_doCommandBySelector(textView: NSTextView, commandSelector: string): boolean;
  textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange): NSInteger;
  textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger): NSMenu;
  textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSDictionary<any, any> | {[key: string]: any}, checkingTypes: NSTextCheckingTypes): NSDictionary<any, any>;
  textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, results: NSArray<any> | any[], orthography: NSOrthography, wordCount: NSInteger): NSArray<any>;
  textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger): NSURL;
  textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray<any> | any[]): NSSharingServicePicker;
  undoManagerForTextView(view: NSTextView): NSUndoManager;
  textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSArray<any> | any[]): NSArray<any>;
  textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger): boolean;
  textView_clickedOnLink(textView: NSTextView, link: any): boolean;
  textView_clickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_draggedCell_inRect_event(view: NSTextView, cell: any, rect: NSRect, event: NSEvent): void;
  textStorage_willProcessEditing_range_changeInLength(textStorage: NSTextStorage, editedMask: NSTextStorageEditActions, editedRange: NSRange, delta: NSInteger): void;
  textStorage_didProcessEditing_range_changeInLength(textStorage: NSTextStorage, editedMask: NSTextStorageEditActions, editedRange: NSRange, delta: NSInteger): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  adjustTextViewFrame(): void;
  adjustForegroundColor(): void;
  canvasColorSpaceForTextLayerTextView(textView: MSTextLayerTextView): NSColorSpace;
  documentColorSpaceForTextLayerTextView(textView: MSTextLayerTextView): NSColorSpace;
  baselineAdjustmentForLayoutManager(layoutManager: NSLayoutManager): CGFloat;

  textView(): MSTextLayerTextView;
  setTextView(textView: MSTextLayerTextView): void;
}

declare class MSTextLayerItem extends MSInspectorItem implements INSMenuDelegate, IMSColorInspectorDelegate, INSComboBoxDataSource, IMSStylePartPreviewButtonDelegate {
  fontFamilyAction(sender: any): IBAction;
  fontWeightAction(sender: any): IBAction;
  fontSizeAction(sender: any): IBAction;
  showColorPickerAction(sender: any): IBAction;
  kerningAction(sender: any): IBAction;
  lineHeightAction(sender: any): IBAction;
  paragraphHeightAction(sender: any): IBAction;
  alignmentButtonAction(sender: any): IBAction;
  verticalAlignmentAction(sender: any): IBAction;
  showParagraphStylingAction(sender: any): IBAction;
  changeTextLayerFont(sender: any): IBAction;
  changeParagraphStyleInBlock(block: MSTextSectionParagraphEnumerator): void;
  changeFontPropertiesOfTextObjectsInBlock(block: MSTextSectionStringEnumerator): void;
  firstOccurrenceOfAttributeWithName(attributeName: NSString | string): any;
  textView(): MSTextLayerTextView;
  putFocusOnTextView(): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  colorInspector_didChangeToColor(inspector: MSColorInspector, color: MSColor): void;
  inspectorDidChangeType(inspector: MSColorInspector): void;
  colorInspectorDidChange(inspector: MSColorInspector): void;
  colorInspectorWillClose(inspector: MSColorInspector): void;
  colorInspectorShouldAdjustInspectorToPopover(inspector: MSColorInspector): boolean;
  colorInspectorUndoManager(inspector: MSColorInspector): NSUndoManager;
  numberOfItemsInComboBox(comboBox: NSComboBox): NSInteger;
  comboBox_objectValueForItemAtIndex(comboBox: NSComboBox, index: NSInteger): any;
  comboBox_indexOfItemWithStringValue(comboBox: NSComboBox, string: NSString | string): NSUInteger;
  comboBox_completedString(comboBox: NSComboBox, string: NSString | string): NSString;
  stylePartPreviewButtonPreviewColorSpace(button: MSStylePartPreviewButton): NSColorSpace;

  missingFontsLabel(): NSTextField;
  setMissingFontsLabel(missingFontsLabel: NSTextField): void;
  fontWeightPopUpButton(): NSPopUpButton;
  setFontWeightPopUpButton(fontWeightPopUpButton: NSPopUpButton): void;
  fontSizeField(): NSComboBox;
  setFontSizeField(fontSizeField: NSComboBox): void;
  colorPickerButton(): MSStylePartPreviewButton;
  setColorPickerButton(colorPickerButton: MSStylePartPreviewButton): void;
  kerningField(): NSTextField;
  setKerningField(kerningField: NSTextField): void;
  lineHeightField(): MSUpDownTextField;
  setLineHeightField(lineHeightField: MSUpDownTextField): void;
  paragraphHeightField(): NSTextField;
  setParagraphHeightField(paragraphHeightField: NSTextField): void;
  alignmentButton(): NSSegmentedControl;
  setAlignmentButton(alignmentButton: NSSegmentedControl): void;
  verticalAlignmentButton(): NSSegmentedControl;
  setVerticalAlignmentButton(verticalAlignmentButton: NSSegmentedControl): void;
}

declare class MSTextLayerTextView extends NSTextView {
  hideSelectionTemporarily(): void;
  selectSimilar(sender: any): IBAction;
  rectForSelectedRange(): NSRect;
  changeColorWithColor(color: NSColor): void;

  hangingGlyphView(): MSHangingGlyphView;
  setHangingGlyphView(hangingGlyphView: MSHangingGlyphView): void;
  textLayerTextViewDelegate(): any;
  setTextLayerTextViewDelegate(textLayerTextViewDelegate: any): void;
}

declare interface IMSTextLayerTextViewDelegate {
  canvasColorSpaceForTextLayerTextView(textView: MSTextLayerTextView): NSColorSpace;
  documentColorSpaceForTextLayerTextView(textView: MSTextLayerTextView): NSColorSpace;
}

declare class MSTextOnPathAction extends MSDocumentAction {
  textOnPath(sender: any): IBAction;
}

declare class MSTextOverrideInspectorItem extends MSOverrideInspectorItem {}

declare class MSTextStyleTouchBarAction extends MSDocumentAction implements INSTouchBarDelegate {
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;
}

declare class MSTextVerticalAlignmentAction extends MSDocumentAction {
  verticalAlignment(): MSTextStyleVerticalAlignment;
}

declare class MSAlignTopAction extends MSTextVerticalAlignmentAction {
  alignTop(sender: any): IBAction;
}

declare class MSAlignBottomAction extends MSTextVerticalAlignmentAction {
  alignBottom(sender: any): IBAction;
}

declare class MSAlignMiddleAction extends MSTextVerticalAlignmentAction {
  alignMiddle(sender: any): IBAction;
}

declare class MSTextWindow extends NSWindow {
  initWithRect<T extends MSTextWindow>(rect: NSRect): T;
  moveToRect_contentDrawViewRect_behaviour(textViewRect: NSRect, contentDrawViewRect: NSRect, behaviour: BCTextBehaviourType): void;
  addTextView_toView(textView: NSTextView, childView: NSView): void;

  contentDrawView(): MSContentDrawView;
  setContentDrawView(contentDrawView: MSContentDrawView): void;
  textView(): NSTextView;
  setTextView(textView: NSTextView): void;
}

declare class MSTiledImageView extends NSView {
  image(): NSImage;
  setImage(image: NSImage): void;
}

declare class MSToggleBaseAction extends MSDocumentAction {}

declare class MSToggleGridAction extends MSToggleBaseAction {
  toggleGrid(sender: any): IBAction;
}

declare class MSToggleLayoutAction extends MSToggleBaseAction {
  toggleLayout(sender: any): IBAction;
}

declare class MSHideAllGridsAndLayoutsAction extends MSDocumentAction {
  hideAllGridsAndLayouts(sender: any): IBAction;
}

declare class MSToggleStylePartAction extends MSDocumentAction {}

declare class MSToggleFillAction extends MSToggleStylePartAction {}

declare class MSToggleBorderAction extends MSToggleStylePartAction {}

declare class MSToggleFixToViewportAction extends MSDocumentAction {
  toggleFixToViewport(sender: any): IBAction;

  state(): NSCellStateValue;
  setState(state: NSCellStateValue): void;
}

declare class MSToggleInspectorVisibilityAction extends MSToggleVisibilityAction {
  toggleInspectorVisibility(sender: any): IBAction;
}

declare class MSToggleInterfaceAction extends MSDocumentAction {
  toggleHideInterface(sender: any): IBAction;
  documentWillClose(): void;
}

declare class MSToggleLayerListVisibilityAction extends MSToggleVisibilityAction {
  toggleLayerListVisibility(sender: any): IBAction;
}

declare class MSToggleResizeButtonCell extends NSButtonCell {}

declare class MSToggleRulersAction extends MSToggleVisibilityAction {
  toggleRulers(sender: any): IBAction;
}

declare class MSToggleToolbarVisibilityAction extends MSToggleVisibilityAction {
  toggleToolbarVisibility(sender: any): IBAction;
}

declare class MSToggleViewPreferenceAction extends MSDocumentAction {
  preferenceKey(): NSString;
}

declare class MSToggleArtboardShadowAction extends MSToggleViewPreferenceAction {
  toggleArtboardShadow(sender: any): IBAction;
}

declare class MSToggleAlignmentGuidesAction extends MSToggleViewPreferenceAction {
  toggleAlignmentGuides(sender: any): IBAction;
}

declare class MSTogglePixelLinesAction extends MSToggleViewPreferenceAction {
  togglePixelLines(sender: any): IBAction;
}

declare class MSToggleSelectionAction extends MSToggleViewPreferenceAction {
  toggleSelection(sender: any): IBAction;
}

declare class MSToggleLayerHighlightAction extends MSToggleViewPreferenceAction {
  toggleLayerHighlight(sender: any): IBAction;
}

declare class MSToggleSliceInteractionAction extends MSToggleViewPreferenceAction {
  toggleSliceInteraction(sender: any): IBAction;
}

declare class MSToggleFlowInteractionAction extends MSToggleViewPreferenceAction {
  toggleFlowInteraction(sender: any): IBAction;
}

declare class MSToggleVisibilityAction extends MSDocumentAction {
  show(): void;
  hide(): void;
  defaultsKey(): NSString;
  prepareForNewWindow(): void;

  isActive(): boolean;
  setIsActive(isActive: boolean): void;
}

declare class MSToolbarConstructor extends NSObject implements INSToolbarDelegate {
  static toolbarForDocument(document: MSDocument): any;
  initWithDocument<T extends MSToolbarConstructor>(document: MSDocument): T;
  constructToolbarForWindow(window: NSWindow): void;
  allActions(): NSArray<any>;
  toolbar_itemForItemIdentifier_willBeInsertedIntoToolbar(toolbar: NSToolbar, itemIdentifier: NSToolbarItemIdentifier, flag: boolean): NSToolbarItem;
  toolbarDefaultItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarAllowedItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarSelectableItemIdentifiers(toolbar: NSToolbar): NSArray<any>;
  toolbarWillAddItem(notification: NSNotification): void;
  toolbarDidRemoveItem(notification: NSNotification): void;

  doc(): MSDocument;
  setDoc(doc: MSDocument): void;
}

declare class MSToolbar extends NSToolbar {}

declare class MSToolbarPopoverContentViewController extends NSViewController {
  initWithAction<T extends MSToolbarPopoverContentViewController>(action: MSPopoverAction): T;
  newActionButtonWithTitle_action(title: NSString | string, selector: string): NSButton;
  newLabel(): NSTextField;
  animateFrameWithCompletionHandler(handler: Block): void;

  action(): MSPopoverAction;
  setAction(action: MSPopoverAction): void;
  edgeInsets(): NSEdgeInsets;
  setEdgeInsets(edgeInsets: NSEdgeInsets): void;
  stackView(): NSStackView;
  setStackView(stackView: NSStackView): void;
  imageView(): NSImageView;
  setImageView(imageView: NSImageView): void;
  titleLabel(): NSTextField;
  setTitleLabel(titleLabel: NSTextField): void;
  descriptionLabel(): NSTextField;
  setDescriptionLabel(descriptionLabel: NSTextField): void;
  actionView(): NSView;
  setActionView(actionView: NSView): void;
  footerLabel(): NSTextField;
  setFooterLabel(footerLabel: NSTextField): void;
}

declare class MSTouchBarGroupAction extends MSDocumentAction {
  actionNames(): NSArray<any>;
  supportsState(): boolean;
}

declare class MSTransformEventHandler extends MSPointsEventHandler {
  transformLayers(): void;

  originalRect(): NSRect;
  setOriginalRect(originalRect: NSRect): void;
}

declare enum MSTransformDirectionLock {
  MSTransformDirectionLockNone = 0,
  MSTransformDirectionLockX = 1,
  MSTransformDirectionLockY = 2,
}

declare class MSTwoTextFieldInspectorItem extends MSInspectorItem {
  initWithTitle_field1Label_field2Label<T extends MSTwoTextFieldInspectorItem>(title: NSString | string, field1: NSString | string, field2: NSString | string): T;
  initWithTitle_field1Label_field2Label_nibName<T extends MSTwoTextFieldInspectorItem>(title: NSString | string, field1: NSString | string, field2: NSString | string, nibName: NSString | string): T;

  itemLabel(): NSTextField;
  setItemLabel(itemLabel: NSTextField): void;
  textField1(): MSInlineUpDownTextField;
  setTextField1(textField1: MSInlineUpDownTextField): void;
  textField2(): MSInlineUpDownTextField;
  setTextField2(textField2: MSInlineUpDownTextField): void;
  interTextFieldButton(): NSButton;
  setInterTextFieldButton(interTextFieldButton: NSButton): void;
}

declare class MSUnavailableUpdatesWindowController extends NSWindowController implements INSWindowDelegate {
  static showModalWithVersion_buildNumber_reason(version: NSString | string, buildNumber: NSString | string, reason: MSUnavailableUpdatesReason): void;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
}

declare enum MSUnavailableUpdatesReason {
  MSUnavailableUpdatesRenewalRequired,
  MSUnavailableUpdatesMacOSUpdateRequired,
  MSUnavailableUpdatesRenewalAndMacOSUpdateRequired,
}

declare class MSUnderlineAction extends MSDocumentAction {}

declare class MSUndoBaseAction extends MSDocumentAction {}

declare class MSUndoAction extends MSUndoBaseAction {
  undo(sender: any): IBAction;
}

declare class MSRedoAction extends MSUndoBaseAction {
  redo(sender: any): IBAction;
}

declare class MSUnlinkAndOrSyncAction extends MSBaseSharedObjectAction {}

declare class MSSyncLocalStyleAction extends MSUnlinkAndOrSyncAction {
  syncLocalSharedStyle(sender: any): IBAction;
}

declare class MSUnlinkFromLibraryAction extends MSUnlinkAndOrSyncAction {
  unlinkFromLibrary(sender: any): IBAction;
}

declare class MSUnlinkAndSyncFromLibraryAction extends MSUnlinkAndOrSyncAction {
  unlinkAndSyncFromLibrary(sender: any): IBAction;
}

declare class MSUpDownController extends NSResponder {
  initWithTextField_createStepper<T extends MSUpDownController>(field: NSTextField, makeStepper: boolean): T;
  becomeFirstResponder(): boolean;
  textDidEndEditing(): void;
  textDidChange(note: NSNotification): void;
  doCommandBySelector(selector: string): boolean;
  cancelTextEditingForInvalidReplacementString(replacementStrings: NSArray<any> | any[]): boolean;
  keyUp(): void;
  increment(): void;
  decrement(): void;
  floatValue(): number;
  incrementBy(amount: CGFloat): void;
  incrementValueAccountingForModifierFlags(): CGFloat;

  incrementDecrementDelegate(): any;
  setIncrementDecrementDelegate(incrementDecrementDelegate: any): void;
}

declare interface IMSUpDownTextFieldDelegate {
  refreshAction(sender: any): void;
  valueForUpDownTextField(upDownTextField: NSTextField): CGFloat;
}

declare interface IMSUpDownProtocol {
  incrementValue(): CGFloat;
  minimum(): NSNumber;
  maximum(): NSNumber;

  upDownController(): MSUpDownController;
  setUpDownController(upDownController: MSUpDownController): void;
}

declare class MSUpDownTextField extends NSTextField implements INSTextViewDelegate, IMSUpDownProtocol, INSTouchBarDelegate {
  connectToValueAdapter(valueAdaptor: MSMathInspectorValueAdaptor): void;
  connectToValueAdapter_bindingOptions(valueAdaptor: MSMathInspectorValueAdaptor, bindingOptions: NSDictionary<any, any> | {[key: string]: any}): void;
  incrementValue(): CGFloat;
  textView_clickedOnLink_atIndex(textView: NSTextView, link: any, charIndex: NSUInteger): boolean;
  textView_clickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_doubleClickedOnCell_inRect_atIndex(textView: NSTextView, cell: any, cellFrame: NSRect, charIndex: NSUInteger): void;
  textView_draggedCell_inRect_event_atIndex(view: NSTextView, cell: any, rect: NSRect, event: NSEvent, charIndex: NSUInteger): void;
  textView_writablePasteboardTypesForCell_atIndex(view: NSTextView, cell: any, charIndex: NSUInteger): NSArray<any>;
  textView_writeCell_atIndex_toPasteboard_type(view: NSTextView, cell: any, charIndex: NSUInteger, pboard: NSPasteboard, type: NSPasteboardType): boolean;
  textView_willChangeSelectionFromCharacterRange_toCharacterRange(textView: NSTextView, oldSelectedCharRange: NSRange, newSelectedCharRange: NSRange): NSRange;
  textView_willChangeSelectionFromCharacterRanges_toCharacterRanges(textView: NSTextView, oldSelectedCharRanges: NSArray<any> | any[], newSelectedCharRanges: NSArray<any> | any[]): NSArray<any>;
  textView_shouldChangeTextInRanges_replacementStrings(textView: NSTextView, affectedRanges: NSArray<any> | any[], replacementStrings: NSArray<any> | any[] | null): boolean;
  textView_shouldChangeTypingAttributes_toAttributes(textView: NSTextView, oldTypingAttributes: NSDictionary<any, any> | {[key: string]: any}, newTypingAttributes: NSDictionary<any, any> | {[key: string]: any}): NSDictionary<any, any>;
  textViewDidChangeSelection(notification: NSNotification): void;
  textViewDidChangeTypingAttributes(notification: NSNotification): void;
  textView_willDisplayToolTip_forCharacterAtIndex(textView: NSTextView, tooltip: NSString | string, characterIndex: NSUInteger): NSString;
  textView_completions_forPartialWordRange_indexOfSelectedItem(textView: NSTextView, words: NSArray<any> | any[], charRange: NSRange, index: NSInteger | null): NSArray<any>;
  textView_shouldChangeTextInRange_replacementString(textView: NSTextView, affectedCharRange: NSRange, replacementString: NSString | string | null): boolean;
  textView_doCommandBySelector(textView: NSTextView, commandSelector: string): boolean;
  textView_shouldSetSpellingState_range(textView: NSTextView, value: NSInteger, affectedCharRange: NSRange): NSInteger;
  textView_menu_forEvent_atIndex(view: NSTextView, menu: NSMenu, event: NSEvent, charIndex: NSUInteger): NSMenu;
  textView_willCheckTextInRange_options_types(view: NSTextView, range: NSRange, options: NSDictionary<any, any> | {[key: string]: any}, checkingTypes: NSTextCheckingTypes): NSDictionary<any, any>;
  textView_didCheckTextInRange_types_options_results_orthography_wordCount(view: NSTextView, range: NSRange, checkingTypes: NSTextCheckingTypes, options: NSDictionary<any, any> | {[key: string]: any}, results: NSArray<any> | any[], orthography: NSOrthography, wordCount: NSInteger): NSArray<any>;
  textView_URLForContentsOfTextAttachment_atIndex(textView: NSTextView, textAttachment: NSTextAttachment, charIndex: NSUInteger): NSURL;
  textView_willShowSharingServicePicker_forItems(textView: NSTextView, servicePicker: NSSharingServicePicker, items: NSArray<any> | any[]): NSSharingServicePicker;
  undoManagerForTextView(view: NSTextView): NSUndoManager;
  textView_shouldUpdateTouchBarItemIdentifiers(textView: NSTextView, identifiers: NSArray<any> | any[]): NSArray<any>;
  textView_candidatesForSelectedRange(textView: NSTextView, selectedRange: NSRange): NSArray<any>;
  textView_candidates_forSelectedRange(textView: NSTextView, candidates: NSArray<any> | any[], selectedRange: NSRange): NSArray<any>;
  textView_shouldSelectCandidateAtIndex(textView: NSTextView, index: NSUInteger): boolean;
  textView_clickedOnLink(textView: NSTextView, link: any): boolean;
  textView_clickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_doubleClickedOnCell_inRect(textView: NSTextView, cell: any, cellFrame: NSRect): void;
  textView_draggedCell_inRect_event(view: NSTextView, cell: any, rect: NSRect, event: NSEvent): void;
  incrementValue(): CGFloat;
  minimum(): NSNumber;
  maximum(): NSNumber;
  touchBar_makeItemForIdentifier(touchBar: NSTouchBar, identifier: NSTouchBarItemIdentifier): NSTouchBarItem;

  refreshDelegate(): any;
  setRefreshDelegate(refreshDelegate: any): void;
  upDownController(): MSUpDownController;
  setUpDownController(upDownController: MSUpDownController): void;
}

declare class MSUpDownMiniTextField extends MSUpDownTextField {}

declare class MSUpDownNanoTextField extends MSUpDownTextField {}

declare class MSUpdateController extends NSObject {
  checkNormally(): void;
  checkSilently(): void;
  checkQuietly(): void;
  commandEnabled(): boolean;
  commandLabel(): NSString;

  unavailableUpdateCount(): NSUInteger;
  setUnavailableUpdateCount(unavailableUpdateCount: NSUInteger): void;
  hasAvailableUpdates(): boolean;
  setHasAvailableUpdates(hasAvailableUpdates: boolean): void;
}

declare class MSUpdatePluginsAction extends MSDocumentAction implements IMSWindowBadgeAction {
  numberOfBadges(): NSUInteger;
  setNumberOfBadges(numberOfBadges: NSUInteger): void;
  badgeTitle(): NSAttributedString;
  setBadgeTitle(badgeTitle: NSAttributedString): void;
  badgeTint(): NSColor;
  setBadgeTint(badgeTint: NSColor): void;
}

declare class MSToolsMenuAction extends MSDocumentAction {}

declare class MSTransformAction extends MSEventHandlerAction {
  transform(sender: any): IBAction;
}

declare class MSScissorsAction extends MSEventHandlerAction {
  scissors(sender: any): IBAction;
}

declare class MSVectorCanvas extends NSObject {
  registerWithEventHandler(handler: MSShapeEventHandler): void;
  didChangeAllowSelectionOnly(): void;
  selectHandleAtIndexPath_extendSelection(handle: NSIndexPath, extendSelection: boolean): void;
  selectHandlesAtIndexPaths(indexPaths: NSArray<any> | any[]): void;
  deselectHandleAtIndexPath(handle: NSIndexPath): void;
  drawHairline(): void;
  drawWire(): void;
  drawSnaps(): void;
  drawHighlightedSegment(): void;
  drawInsertionPoint(): void;
  drawHandles(): void;
  changeToCurveMode(curveMode: MSCurveMode): void;
  delete(sender: any): IBAction;
  alignVectorPointsToKey(key: NSString | string): void;
  distributeVectorPointsToAxis(axis: BCAxis): void;
  adjustHandlesToValue_onAxis(value: CGFloat, axis: BCAxis): void;
  adjustHandle_toValue_onAxis(handle: NSIndexPath, value: CGFloat, axis: BCAxis): void;
  singleMouseDownAtPoint_modifierFlags(location: NSPoint, flags: NSEventModifierFlags): void;
  doubleMouseDownAtPoint_modifierFlags(location: NSPoint, flags: NSEventModifierFlags): void;
  mouseUpAtPoint(location: NSPoint): void;
  trackMouse(sender: MSMouseTracker): void;
  flagsChanged(event: NSEvent): void;
  updateCursor(): void;
  setNeedsUpdateCursor(): void;

  eventHandler(): MSShapeEventHandler;
  setEventHandler(eventHandler: MSShapeEventHandler): void;
  view(): MSContentDrawView;
  setView(view: MSContentDrawView): void;
  pathController(): MSPathController;
  setPathController(pathController: MSPathController): void;
  selectedLayers(): NSArray<any>;
  setSelectedLayers(selectedLayers: NSArray<any> | any[]): void;
  visibleLayers(): NSArray<any>;
  setVisibleLayers(visibleLayers: NSArray<any> | any[]): void;
  editingBehavior(): MSShapeEditingBehavior;
  setEditingBehavior(editingBehavior: MSShapeEditingBehavior): void;
  indexPathsForSelectedHandles(): NSArray<any>;
  setIndexPathsForSelectedHandles(indexPathsForSelectedHandles: NSArray<any> | any[]): void;
  indexPathForHighlightedComponent(): NSIndexPath;
  setIndexPathForHighlightedComponent(indexPathForHighlightedComponent: NSIndexPath): void;
  interactivelySelecting(): boolean;
  setInteractivelySelecting(interactivelySelecting: boolean): void;
  snaps(): MSAlignmentEngineResult;
  setSnaps(snaps: MSAlignmentEngineResult): void;
  delegate(): any;
  setDelegate(delegate: any): void;
}

declare interface IMSVectorCanvasDelegate {
  vectorCanvas_didHighlightHandleAtIndexPath(canvas: MSVectorCanvas, indexPath: NSIndexPath): void;
  vectorCanvas_didUnhighlightHandleAtIndexPath(canvas: MSVectorCanvas, indexPath: NSIndexPath): void;
  vectorCanvas_didSelectHandlesAtIndexPaths(canvas: MSVectorCanvas, indexPaths: NSArray<any> | any[]): void;
  vectorCanvas_didDeselectHandlesAtIndexPaths(canvas: MSVectorCanvas, indexPaths: NSArray<any> | any[]): void;
  vectorCanvasDidFinishInteractiveSelection(canvas: MSVectorCanvas): void;
  vectorCanvas_didSelectLayers(canvas: MSVectorCanvas, layers: NSArray<any> | any[]): void;
  vectorCanvasDidEditPoints(canvas: MSVectorCanvas): void;
}

declare class MSVectorHandle extends NSObject {
  drawAtProposedPoint_inView(proposedPoint: NSPoint, canvasView: NSView): void;
  drawingSize(): NSSize;

  state(): MSHandleState;
  setState(state: MSHandleState): void;
}

declare class MSVectorAdjustmentHandle extends MSVectorHandle {
  locationOfMainPoint(): NSPoint;
  setLocationOfMainPoint(locationOfMainPoint: NSPoint): void;
}

declare class MSVerticalRulerView extends MSRulerView {}

declare class MSVerticalRulerViewLayer extends MSRulerViewLayer {}

declare class MSVerticallyCenteredTextFieldCell extends NSTextFieldCell {}

declare class MSViewMenuAction extends MSDocumentAction {}

declare class MSTogglePixelGridAction extends MSDocumentAction {
  togglePixelGrid(sender: any): IBAction;
}

declare class MSVisitDocumentationAction extends MSAction {
  visitDocumentation(sender: any): IBAction;
}

declare class MSWelcomeCollectionImageView extends NSImageView {
  doubleClickAction(): string;
  setDoubleClickAction(doubleClickAction: string): void;
  imageInterpolation(): NSImageInterpolation;
  setImageInterpolation(imageInterpolation: NSImageInterpolation): void;
  selected(): boolean;
  setSelected(selected: boolean): void;
}

declare class MSWelcomeCollectionImageCell extends NSImageCell {}

declare class MSWelcomeCollectionItem extends NSObject implements IMSWelcomeCollectionItemPreviewImageLoading {
  static bundledTemplatesDirectoryURL(): NSURL;
  static userTemplatesDirectoryURL(): NSURL;
  initWithController<T extends MSWelcomeCollectionItem>(controller: MSWelcomeWindowController): T;
  fetchPreviewImageWithMaximumPixelSize_completionHandler(maxPixelSize: CGFloat, handler: MSPreviewImageHandler): void;

  placeholderImage(): NSImage;
  setPlaceholderImage(placeholderImage: NSImage): void;
  title(): NSString;
  setTitle(title: NSString | string): void;
  welcomeWindowController(): MSWelcomeWindowController;
  setWelcomeWindowController(welcomeWindowController: MSWelcomeWindowController): void;
  providesPreviewImage(): boolean;
  setProvidesPreviewImage(providesPreviewImage: boolean): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
}

declare class MSExistingDocumentCollectionItem extends MSWelcomeCollectionItem {
  initWithController_URL<T extends MSExistingDocumentCollectionItem>(controller: MSWelcomeWindowController, URL: NSURL): T;

  URL(): NSURL;
  setURL(URL: NSURL): void;
}

declare class MSNewDocumentCollectionItem extends MSWelcomeCollectionItem {}

declare interface IMSWelcomeCollectionItemPreviewImageLoading {
  fetchPreviewImageWithMaximumPixelSize_completionHandler(maxPixelSize: CGFloat, handler: MSPreviewImageHandler): void;

  providesPreviewImage(): boolean;
  setProvidesPreviewImage(providesPreviewImage: boolean): void;
  URL(): NSURL;
  setURL(URL: NSURL): void;
}

declare class MSWelcomeCollectionTextField extends NSTextField {
  selected(): boolean;
  setSelected(selected: boolean): void;
}

declare class MSWelcomeCollectionTextFieldCell extends NSTextFieldCell {}

declare class MSWelcomeCollectionView extends NSCollectionView {}

declare interface IMSWelcomeCollectionViewDelegate {
  collectionView_newItemForRepresentedObject(collectionView: NSCollectionView, object: any): NSCollectionViewItem;
}

declare class MSWelcomeCollectionViewItem extends NSCollectionViewItem implements INSMenuDelegate {
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;

  collectionItem(): MSWelcomeCollectionItem;
  setCollectionItem(collectionItem: MSWelcomeCollectionItem): void;
}

declare class MSWelcomeColorStripView extends NSView {}

declare class MSWelcomeProgressView extends NSView {
  backgroundColor(): NSColor;
  setBackgroundColor(backgroundColor: NSColor): void;
  collectionItem(): MSCloudShareCollectionItem;
  setCollectionItem(collectionItem: MSCloudShareCollectionItem): void;
}

declare class MSWelcomeToSketchAction extends MSAction {
  welcomeToSketch(sender: any): IBAction;
}

declare class MSWelcomeBackgroundView extends NSView {}

declare class MSWelcomeTopFadeView extends NSView {}

declare class MSWelcomeControlContainerView extends NSView {}

declare class MSWelcomeBottomFadeView extends MSWelcomeTopFadeView {}

declare class MSWelcomeDebugView extends NSView {}

declare class MSWelcomeWindow extends NSWindow {}

declare class MSWelcomeWindowButtonCell extends MSHoverButtonCell {}

declare class MSWelcomeWindowBigButton extends MSHoverButton {}

declare class MSWelcomeWindowBigButtonCell extends MSHoverButtonCell {}

declare class MSWelcomeWindowPlayButtonCell extends MSHoverButtonCell {}

declare class MSWelcomeWindowController extends CHWindowController implements INSMenuDelegate, INSWindowDelegate, IMSWelcomeCollectionViewDelegate {
  static showWelcomeWindowIfAppropriate(): boolean;
  static showWelcomeWindowCollection_isLaunching(collection: MSWelcomeCollection, launching: boolean): void;
  static hideWelcomeWindowIfNeeded(): boolean;
  pickCollection(sender: any): IBAction;
  openDocument(sender: any): IBAction;
  confirm(sender: any): IBAction;
  // close(sender: any): IBAction;
  visitLearnPage(sender: any): IBAction;
  subscribeToNewsletter(sender: any): IBAction;
  visitPluginsPage(sender: any): IBAction;
  revealDocumentInFinder(sender: any): IBAction;
  revealDocumentInCloud(sender: any): IBAction;
  clearRecentDocuments(sender: any): IBAction;
  showCollection(collection: MSWelcomeCollection): void;
  menuNeedsUpdate(menu: NSMenu): void;
  numberOfItemsInMenu(menu: NSMenu): NSInteger;
  menu_updateItem_atIndex_shouldCancel(menu: NSMenu, item: NSMenuItem, index: NSInteger, shouldCancel: boolean): boolean;
  menuHasKeyEquivalent_forEvent_target_action(menu: NSMenu, event: NSEvent, target: any, action: string): boolean;
  menuWillOpen(menu: NSMenu): void;
  menuDidClose(menu: NSMenu): void;
  menu_willHighlightItem(menu: NSMenu, item: NSMenuItem | null): void;
  confinementRectForMenu_onScreen(menu: NSMenu, screen: NSScreen | null): NSRect;
  windowShouldClose(sender: NSWindow): boolean;
  windowWillReturnFieldEditor_toObject(sender: NSWindow, client: any | null): any;
  windowWillResize_toSize(sender: NSWindow, frameSize: NSSize): NSSize;
  windowWillUseStandardFrame_defaultFrame(window: NSWindow, newFrame: NSRect): NSRect;
  windowShouldZoom_toFrame(window: NSWindow, newFrame: NSRect): boolean;
  windowWillReturnUndoManager(window: NSWindow): NSUndoManager;
  window_willPositionSheet_usingRect(window: NSWindow, sheet: NSWindow, rect: NSRect): NSRect;
  window_shouldPopUpDocumentPathMenu(window: NSWindow, menu: NSMenu): boolean;
  window_shouldDragDocumentWithEvent_from_withPasteboard(window: NSWindow, event: NSEvent, dragImageLocation: NSPoint, pasteboard: NSPasteboard): boolean;
  window_willUseFullScreenContentSize(window: NSWindow, proposedSize: NSSize): NSSize;
  window_willUseFullScreenPresentationOptions(window: NSWindow, proposedOptions: NSApplicationPresentationOptions): NSApplicationPresentationOptions;
  customWindowsToEnterFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  windowDidFailToEnterFullScreen(window: NSWindow): void;
  customWindowsToExitFullScreenForWindow(window: NSWindow): NSArray<any>;
  window_startCustomAnimationToExitFullScreenWithDuration(window: NSWindow, duration: NSTimeInterval): void;
  customWindowsToEnterFullScreenForWindow_onScreen(window: NSWindow, screen: NSScreen): NSArray<any>;
  window_startCustomAnimationToEnterFullScreenOnScreen_withDuration(window: NSWindow, screen: NSScreen, duration: NSTimeInterval): void;
  windowDidFailToExitFullScreen(window: NSWindow): void;
  window_willResizeForVersionBrowserWithMaxPreferredSize_maxAllowedSize(window: NSWindow, maxPreferredFrameSize: NSSize, maxAllowedFrameSize: NSSize): NSSize;
  window_willEncodeRestorableState(window: NSWindow, state: NSCoder): void;
  window_didDecodeRestorableState(window: NSWindow, state: NSCoder): void;
  windowDidResize(notification: NSNotification): void;
  windowDidExpose(notification: NSNotification): void;
  windowWillMove(notification: NSNotification): void;
  windowDidMove(notification: NSNotification): void;
  windowDidBecomeKey(notification: NSNotification): void;
  windowDidResignKey(notification: NSNotification): void;
  windowDidBecomeMain(notification: NSNotification): void;
  windowDidResignMain(notification: NSNotification): void;
  windowWillClose(notification: NSNotification): void;
  windowWillMiniaturize(notification: NSNotification): void;
  windowDidMiniaturize(notification: NSNotification): void;
  windowDidDeminiaturize(notification: NSNotification): void;
  windowDidUpdate(notification: NSNotification): void;
  windowDidChangeScreen(notification: NSNotification): void;
  windowDidChangeScreenProfile(notification: NSNotification): void;
  windowDidChangeBackingProperties(notification: NSNotification): void;
  windowWillBeginSheet(notification: NSNotification): void;
  windowDidEndSheet(notification: NSNotification): void;
  windowWillStartLiveResize(notification: NSNotification): void;
  windowDidEndLiveResize(notification: NSNotification): void;
  windowWillEnterFullScreen(notification: NSNotification): void;
  windowDidEnterFullScreen(notification: NSNotification): void;
  windowWillExitFullScreen(notification: NSNotification): void;
  windowDidExitFullScreen(notification: NSNotification): void;
  windowWillEnterVersionBrowser(notification: NSNotification): void;
  windowDidEnterVersionBrowser(notification: NSNotification): void;
  windowWillExitVersionBrowser(notification: NSNotification): void;
  windowDidExitVersionBrowser(notification: NSNotification): void;
  windowDidChangeOcclusionState(notification: NSNotification): void;
  collectionView_newItemForRepresentedObject(collectionView: NSCollectionView, object: any): NSCollectionViewItem;

  closeButton(): NSButton;
  setCloseButton(closeButton: NSButton): void;
  collectionView(): NSCollectionView;
  setCollectionView(collectionView: NSCollectionView): void;
  collectionScrollView(): NSScrollView;
  setCollectionScrollView(collectionScrollView: NSScrollView): void;
  collectionStaticContainerView(): NSView;
  setCollectionStaticContainerView(collectionStaticContainerView: NSView): void;
  collectionsSegmentedControl(): NSSegmentedControl;
  setCollectionsSegmentedControl(collectionsSegmentedControl: NSSegmentedControl): void;
  collectionsWidthConstraint(): NSLayoutConstraint;
  setCollectionsWidthConstraint(collectionsWidthConstraint: NSLayoutConstraint): void;
  confirmButton(): NSButton;
  setConfirmButton(confirmButton: NSButton): void;
  doNotShowAgainButton(): NSButton;
  setDoNotShowAgainButton(doNotShowAgainButton: NSButton): void;
  newsletterButton(): MSCallToActionButton;
  setNewsletterButton(newsletterButton: MSCallToActionButton): void;
  pluginsButton(): MSCallToActionButton;
  setPluginsButton(pluginsButton: MSCallToActionButton): void;
  recentDocumentsContextMenu(): NSMenu;
  setRecentDocumentsContextMenu(recentDocumentsContextMenu: NSMenu): void;
  templatesContextMenu(): NSMenu;
  setTemplatesContextMenu(templatesContextMenu: NSMenu): void;
  versionTextField(): NSTextField;
  setVersionTextField(versionTextField: NSTextField): void;
  collectionToShow(): MSWelcomeCollection;
  setCollectionToShow(collectionToShow: MSWelcomeCollection): void;
  numberOfDocuments(): NSInteger;
  setNumberOfDocuments(numberOfDocuments: NSInteger): void;
  previewImageCache(): MSPreviewImageCache;
  setPreviewImageCache(previewImageCache: MSPreviewImageCache): void;
}

declare enum MSWelcomeCollection {
  MSWelcomeCollectionRecents = 0,
  MSWelcomeCollectionTemplates = 1,
  MSWelcomeCollectionCloud = 2,
}

declare class MSZoomAction extends MSDocumentAction {}

declare class MSZoomInAction extends MSDocumentAction {}

declare class MSZoomOutAction extends MSDocumentAction {}

declare class MSZoomActions extends MSTouchBarGroupAction {}

declare class MSPreviewAtActualSizeAction extends MSDocumentAction {}

declare class MSZoomBlurEventHandler extends MSPointsEventHandler {
  blurStyle(): MSStyleBlur;
  setBlurStyle(blurStyle: MSStyleBlur): void;
}

declare class MSZoomTool extends NSObject {
  beginZoomToolModeActivatedByKey(activatedByKey: boolean): void;
  endZoomToolModeInView(view: MSContentDrawView): void;
  flagsChanged(): void;
  mouseDown_inView(event: NSEvent, view: MSContentDrawView): void;
  mouseDragged_inView(event: NSEvent, view: MSContentDrawView): void;
  mouseUp_inView(event: NSEvent, view: MSContentDrawView): void;
  mouseMoved(): void;
  drawWithScrollOrigin(origin: NSPoint): void;
  zoomValueAfterZoomIn(): CGFloat;
  zoomValueAfterZoomOut(): CGFloat;

  active(): boolean;
  setActive(active: boolean): void;
  activatedByKey(): boolean;
  setActivatedByKey(activatedByKey: boolean): void;
  zoomValue(): CGFloat;
  setZoomValue(zoomValue: CGFloat): void;
}

declare enum BCMainMenuItemTag {
  BCMainMenuPrintItem = 201,
  BCMainMenuInsertItem = 400,
  BCMainMenuShapeItem = 401,
  BCMainMenuReplaceWithItem = 501,
}

declare class NSAlternatingViewBackgroundView extends NSView {}

declare class MSSeparatorlessView extends NSView {}

declare class MSSeparatorlessFlippedView extends MSSeparatorlessView {}

declare class MSInsetSeparatorView extends NSView {}

declare class MSSeparatorConfigurableView extends NSView {
  wantsSeparator(): boolean;
  setWantsSeparator(wantsSeparator: boolean): void;
  inset(): boolean;
  setInset(inset: boolean): void;
}

declare class SketchQuicklookGenerator extends NSObject {
  static generatorForURL_options(url: NSURL, options: NSDictionary<any, any> | {[key: string]: any}): SketchQuicklookGenerator;
  generatePreview(): NSImage;
  generateThumbnailWithMaxSize(maxSize: NSSize): NSData;
}

declare class MSUITestAutomator extends NSObject {
  queuePlaybackEvent(event: dispatch_block_t): void;
  playback(): void;
  pausePlaybackFor(pause: NSTimeInterval): void;
  singleClickAtPoint_inView_flags(click: NSPoint, view: NSView, flags: NSEventModifierFlags): void;
  doubleClickAtPoint_inView_flags(click: NSPoint, view: NSView, flags: NSEventModifierFlags): void;
  startDragAtPoint_inView_flags(click: NSPoint, view: NSView, flags: NSEventModifierFlags): void;
  dragToPoint_inView_flags(click: NSPoint, view: NSView, flags: NSEventModifierFlags): void;
  endDragAtPoint_inView_flags(click: NSPoint, view: NSView, flags: NSEventModifierFlags): void;
  sendKeyPressEvent_modifiers(characters: NSString | string, flags: NSEventModifierFlags): void;
  sendDeleteKeyPressed(flags: NSEventModifierFlags): void;
  sendRightArrowKeyModifiers(flags: NSEventModifierFlags): void;
  sendLeftArrowKeyModifiers(flags: NSEventModifierFlags): void;
  sendUpArrowKeyModifiers(flags: NSEventModifierFlags): void;
  sendDownArrowKeyModifiers(flags: NSEventModifierFlags): void;
}

declare class Reachability extends NSObject {
  static reachabilityWithHostName(hostName: NSString | string): Reachability;
  static reachabilityWithAddress(hostAddress: sockaddr_): Reachability;
  static reachabilityForInternetConnection(): Reachability;
  static reachabilityForLocalWiFi(): Reachability;
  startNotifier(): boolean;
  stopNotifier(): void;
  currentReachabilityStatus(): NetworkStatus;
  connectionRequired(): boolean;
}

declare enum NetworkStatus {
  NotReachable = 0,
  ReachableViaWiFi,
  ReachableViaWWAN,
}

declare class UIDevice {
  awk_totalMemory(): NSNumber;
}

declare class BCJSONUnarchiver extends NSObject {}

declare class CHViewController extends NSViewController {}

declare class WKWebView extends NSView {}

declare class MSPopoverDismisserView extends NSView {}

declare class MSAlignmentEngineCycle {}

